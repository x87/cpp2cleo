
plugin_II\game_II\CCamera.cpp:

	// CCamera::WorldToScreen2D
	// plugin::CallMethod<0x4B90E0>(this, x, y, z, outX, outY);
	0AA6: call_method 0x4B90E0 struct [CCamera] num_params 5 pop 0 [x] [y] [z] [outX] [outY]

plugin_II\game_II\CCar.cpp:

	// CCar::SetPosition
	// plugin::CallMethod<0x4207F0, CCar*, CEncodedVector>(this, pos);
	0AA6: call_method 0x4207F0 struct [CCar] num_params 1 pop 0 [pos]

	// CCar::SetRemap
	// plugin::CallMethod<0x421FD0, CCar*>(this, remap);
	0AA6: call_method 0x421FD0 struct [CCar] num_params 1 pop 0 [remap]

plugin_II\game_II\CChar.cpp:

	// CChar::CreatePed
	// plugin::CallMethodAndReturn<CPed*, 0x43DB40, CChar*, CEncodedVector, char, int>(this, pos, remap, rotation);
	0AA8: call_method_return 0x43DB40 struct [CChar] num_params 3 pop 0 [pos] [remap] [rotation] func_ret [CPed*]

	// CChar::FindPed
	// plugin::CallMethodAndReturn<CPed*, 0x43AE10, CChar*, int>(this, id);
	0AA8: call_method_return 0x43AE10 struct [CChar] num_params 1 pop 0 [id] func_ret [CPed*]

plugin_II\game_II\cDMAudio.cpp:

	// cDMAudio::GetEffectsMasterVolume
	// plugin::CallMethodAndReturn<char, 0x4105F0, cDMAudio*>(this);
	0AA8: call_method_return 0x4105F0 struct [cDMAudio] num_params 0 pop 0 func_ret [char]

	// cDMAudio::GetMusicMasterVolume
	// plugin::CallMethodAndReturn<char, 0x410630, cDMAudio*>(this);
	0AA8: call_method_return 0x410630 struct [cDMAudio] num_params 0 pop 0 func_ret [char]

	// cDMAudio::SetMusicMasterVolume
	// plugin::CallMethod<0x410600, cDMAudio*, unsigned char>(this, volume);
	0AA6: call_method 0x410600 struct [cDMAudio] num_params 1 pop 0 [volume]

	// cDMAudio::SetEffectsMasterVolume
	// plugin::CallMethod<0x4105C0, cDMAudio*, unsigned char>(this, volume);
	0AA6: call_method 0x4105C0 struct [cDMAudio] num_params 1 pop 0 [volume]

	// cDMAudio::SetCurrent3DProvider
	// plugin::CallMethod<0x410670, cDMAudio*, unsigned char>(this, provider);
	0AA6: call_method 0x410670 struct [cDMAudio] num_params 1 pop 0 [provider]

	// cDMAudio::PlayVocal
	// plugin::CallMethod<0x4105B0, cDMAudio*>(this, id);
	0AA6: call_method 0x4105B0 struct [cDMAudio] num_params 1 pop 0 [id]

	// cDMAudio::ReleaseDigitalHandle
	// plugin::CallMethod<0x410640, cDMAudio*>(this);
	0AA6: call_method 0x410640 struct [cDMAudio] num_params 0 pop 0

	// cDMAudio::CreateEntity
	// plugin::CallMethodAndReturn<int, 0x410530, cDMAudio*, void*>(this, e);
	0AA8: call_method_return 0x410530 struct [cDMAudio] num_params 1 pop 0 [e] func_ret [int]

	// cDMAudio::DestroyEntity
	// plugin::CallMethod<0x410540, cDMAudio*, int>(this, audioEntity);
	0AA6: call_method 0x410540 struct [cDMAudio] num_params 1 pop 0 [audioEntity]

plugin_II\game_II\CFileMgr.cpp:

	// CFileMgr::OpenFile
	// plugin::CallStdAndReturn<int, 0x403160, const char*>(name);
	0AA7: call_function_return 0x403160 num_params 1 pop 0 [name] func_ret [int]

	// CFileMgr::CloseFile
	// plugin::CallStdAndReturn<int, 0x402EB0>();
	0AA7: call_function_return 0x402EB0 num_params 0 pop 0 func_ret [int]

	// CFileMgr::Read
	// plugin::CallStdAndReturn<size_t, 0x402FB0, void*, int const&>(buff, size);
	0AA7: call_function_return 0x402FB0 num_params 2 pop 0 [buff] [size] func_ret [size_t]

	// CFileMgr::ReadLine
	// plugin::CallStdAndReturn<bool, 0x403000, void*, int const&>(buff, size);
	0AA7: call_function_return 0x403000 num_params 2 pop 0 [buff] [size] func_ret [bool]

	// CFileMgr::Seek
	// plugin::CallStdAndReturn<int, 0x402F60, int const&>(size);
	0AA7: call_function_return 0x402F60 num_params 1 pop 0 [size] func_ret [int]

plugin_II\game_II\CFont.cpp:

	// CFont::GetStringWidth
	// plugin::CallStdAndReturn<int, 0x4CB0C0, const wchar_t*, int>(str, style);
	0AA7: call_function_return 0x4CB0C0 num_params 2 pop 0 [str] [style] func_ret [int]

	// CFont::GetNumberLines
	// plugin::CallStdAndReturn<int, 0x4CC0C0, const wchar_t*, int>(str, style);
	0AA7: call_function_return 0x4CC0C0 num_params 2 pop 0 [str] [style] func_ret [int]

	// CFont::GetCharHeight
	// plugin::CallStdAndReturn<int, 0x4539B0, wchar_t>(c);
	0AA7: call_function_return 0x4539B0 num_params 1 pop 0 [c] func_ret [int]

	// CFont::PrintString
	// plugin::CallStd<0x4CC100, const wchar_t*, int, int, int, int, int const&, int, bool, int>(str, x, y, style, scale, mode, palette, enableAlpha, alpha);
	0AA5: call_function 0x4CC100 num_params 9 pop 0 [str] [x] [y] [style] [scale] [mode] [palette] [enableAlpha] [alpha]

plugin_II\game_II\CGame.cpp:

	// CGame::FindPlayerPed
	// plugin::CallMethodAndReturn<CPlayerPed*, 0x4219E0, CGame*, unsigned char>(this, index);
	0AA8: call_method_return 0x4219E0 struct [CGame] num_params 1 pop 0 [index] func_ret [CPlayerPed*]

	// CGame::SwitchUserPause
	// plugin::CallMethod<0x45BAA0, CGame*>(this);
	0AA6: call_method 0x45BAA0 struct [CGame] num_params 0 pop 0

	// CGame::Process
	// plugin::CallMethod<0x45C1F0, CGame*>(this);
	0AA6: call_method 0x45C1F0 struct [CGame] num_params 0 pop 0

	// CGame::SetState
	// plugin::CallMethod<0x45A4B0, CGame*, int, int>(this, unk, state);
	0AA6: call_method 0x45A4B0 struct [CGame] num_params 2 pop 0 [unk] [state]

	// CGame::GetIsUserPaused
	// plugin::CallMethodAndReturn<bool, 0x416BC0, CGame*>(this);
	0AA8: call_method_return 0x416BC0 struct [CGame] num_params 0 pop 0 func_ret [bool]

plugin_II\game_II\CGeneral.cpp:

	// CGeneral::GetCycle
	// plugin::CallMethodAndReturn<int, 0x41CFE0, CGeneral*>(this);
	0AA8: call_method_return 0x41CFE0 struct [CGeneral] num_params 0 pop 0 func_ret [int]

	// CGeneral::GetRandomNumber
	// plugin::CallMethodAndReturn<int, 0x45F9E0, CGeneral*>(this);
	0AA8: call_method_return 0x45F9E0 struct [CGeneral] num_params 0 pop 0 func_ret [int]

	// CGeneral::Update
	// plugin::CallMethod<0x44AA30, CGeneral*>(this);
	0AA6: call_method 0x44AA30 struct [CGeneral] num_params 0 pop 0

	// CGeneral::PrintCycle
	// plugin::CallMethod<0x44AA90, CGeneral*>(this);
	0AA6: call_method 0x44AA90 struct [CGeneral] num_params 0 pop 0

plugin_II\game_II\CHud.cpp:

	// CHudArrow::AreBothArrowTracesUsed
	// plugin::CallMethodAndReturn<bool, 0x4C6F80>(this);
	0AA8: call_method_return 0x4C6F80 struct [CHudArrow] num_params 0 pop 0 func_ret [bool]

	// CHudArrow::IsArrowVisible
	// plugin::CallMethodAndReturn<bool, 0x4C7050>(this);
	0AA8: call_method_return 0x4C7050 struct [CHudArrow] num_params 0 pop 0 func_ret [bool]

	// CHudArrow::SetSpriteId
	// plugin::CallMethod<0x4C6FE0>(this, id);
	0AA6: call_method 0x4C6FE0 struct [CHudArrow] num_params 1 pop 0 [id]

	// CHud::DrawSprite
	// plugin::CallStd<0x4C71B0, int, int, int, int, char, int const&, int, int, char>(id1, id2, x, y, style, mode, enableAlpha, alpha, unk);
	0AA5: call_function 0x4C71B0 num_params 9 pop 0 [id1] [id2] [x] [y] [style] [mode] [enableAlpha] [alpha] [unk]

	// CHudMessage::SetHudMessage
	// plugin::CallMethod<0x4C6060>(this, str, priority);
	0AA6: call_method 0x4C6060 struct [CHudMessage] num_params 2 pop 0 [str] [priority]

	// CHudBrief::SetHudBrief
	// plugin::CallMethod<0x4C6750>(this, priority, str);
	0AA6: call_method 0x4C6750 struct [CHudBrief] num_params 2 pop 0 [priority] [str]

	// CHudBrief::Clear
	// plugin::CallMethod<0x4C6860>(this, priority);
	0AA6: call_method 0x4C6860 struct [CHudBrief] num_params 1 pop 0 [priority]

plugin_II\game_II\CKeybrd.cpp:

	// CKeybrd::Keydown
	// plugin::CallMethodAndReturn<bool, 0x4611F0, CKeybrd*, unsigned short>(this, key);
	0AA8: call_method_return 0x4611F0 struct [CKeybrd] num_params 1 pop 0 [key] func_ret [bool]

plugin_II\game_II\CMenuManager.cpp:

	// CMenuManager::LoadTexture
	// plugin::CallStd<0x452D50, unsigned short>(id);
	0AA5: call_function 0x452D50 num_params 1 pop 0 [id]

	// CMenuManager::FindBackground
	// plugin::CallStd<0x452E80, unsigned char, unsigned char*, unsigned char*>(screen, left, right);
	0AA5: call_function 0x452E80 num_params 3 pop 0 [screen] [left] [right]

	// CMenuManager::GetKeyboardKeyStates
	// plugin::CallMethodAndReturn<bool, 0x452000, CMenuManager*>(this);
	0AA8: call_method_return 0x452000 struct [CMenuManager] num_params 0 pop 0 func_ret [bool]

	// CMenuManager::SwitchToNewScreen
	// plugin::CallMethod<0x4587B0, CMenuManager*, unsigned short>(this, page);
	0AA6: call_method 0x4587B0 struct [CMenuManager] num_params 1 pop 0 [page]

	// CMenuManager::Process
	// plugin::CallMethodAndReturn<int, 0x45A320, CMenuManager*>(this);
	0AA8: call_method_return 0x45A320 struct [CMenuManager] num_params 0 pop 0 func_ret [int]

	// CMenuManager::PopulateMenu
	// plugin::CallMethod<0x453E20, CMenuManager*>(this);
	0AA6: call_method 0x453E20 struct [CMenuManager] num_params 0 pop 0

plugin_II\game_II\CObject.cpp:

	// CObject::GetPositionX
	// plugin::CallMethodAndReturn<int const&, 0x4339C0, CObject*, int*>(this, x);
	0AA8: call_method_return 0x4339C0 struct [CObject] num_params 1 pop 0 [x] func_ret [int const&]

	// CObject::GetPositionY
	// plugin::CallMethodAndReturn<int const&, 0x4339E0, CObject*, int*>(this, y);
	0AA8: call_method_return 0x4339E0 struct [CObject] num_params 1 pop 0 [y] func_ret [int const&]

	// CObject::GetPositionZ
	// plugin::CallMethodAndReturn<int const&, 0x433A00, CObject*, int*>(this, z);
	0AA8: call_method_return 0x433A00 struct [CObject] num_params 1 pop 0 [z] func_ret [int const&]

	// CObject::GetRotation
	// plugin::CallMethodAndReturn<short const&, 0x433A40, CObject*, short*>(this, r);
	0AA8: call_method_return 0x433A40 struct [CObject] num_params 1 pop 0 [r] func_ret [short const&]

	// CObject::SetPosition
	// plugin::CallMethod<0x491E00, CObject*, CEncodedVector>(this, pos);
	0AA6: call_method 0x491E00 struct [CObject] num_params 1 pop 0 [pos]

	// CObject::SetRotation
	// plugin::CallMethod<0x433A30, CObject*, short>(this, rot);
	0AA6: call_method 0x433A30 struct [CObject] num_params 1 pop 0 [rot]

plugin_II\game_II\CPed.cpp:

	// CPed::GiveWeapon
	// plugin::CallMethod<0x43E4B0, CPed*, int, int>(this, id, ammo);
	0AA6: call_method 0x43E4B0 struct [CPed] num_params 2 pop 0 [id] [ammo]

	// CPed::SetWantedLevel
	// plugin::CallMethod<0x434CD0, CPed*, char>(this, level);
	0AA6: call_method 0x434CD0 struct [CPed] num_params 1 pop 0 [level]

	// CPed::ClearWantedLevel
	// plugin::CallMethod<0x420B80, CPed*>(this);
	0AA6: call_method 0x420B80 struct [CPed] num_params 0 pop 0

	// CPed::GetId
	// plugin::CallMethodAndReturn<unsigned int, 0x420B60, CPed*>(this);
	0AA8: call_method_return 0x420B60 struct [CPed] num_params 0 pop 0 func_ret [unsigned int]

	// CPed::SetHealth
	// plugin::CallMethod<0x4039A0, CPed*>(this, health);
	0AA6: call_method 0x4039A0 struct [CPed] num_params 1 pop 0 [health]

	// CPed::Clear
	// plugin::CallMethod<0x435720, CPed*>(this);
	0AA6: call_method 0x435720 struct [CPed] num_params 0 pop 0

	// CPed::SetSearchType
	// plugin::CallMethod<0x403920, CPed*>(this, type);
	0AA6: call_method 0x403920 struct [CPed] num_params 1 pop 0 [type]

	// CPed::GetSprite
	// plugin::CallMethodAndReturn<CSprite*, 0x434B80, CPed*>(this);
	0AA8: call_method_return 0x434B80 struct [CPed] num_params 0 pop 0 func_ret [CSprite*]

	// CPed::GetCar
	// plugin::CallMethodAndReturn<CCar*, 0x416B60, CPed*>(this);
	0AA8: call_method_return 0x416B60 struct [CPed] num_params 0 pop 0 func_ret [CCar*]

	// CPed::GetPositionX
	// plugin::CallMethodAndReturn<int const&, 0x403A00, CPed*, int*>(this, x);
	0AA8: call_method_return 0x403A00 struct [CPed] num_params 1 pop 0 [x] func_ret [int const&]

	// CPed::GetPositionY
	// plugin::CallMethodAndReturn<int const&, 0x403A10, CPed*, int*>(this, y);
	0AA8: call_method_return 0x403A10 struct [CPed] num_params 1 pop 0 [y] func_ret [int const&]

	// CPed::GetPositionZ
	// plugin::CallMethodAndReturn<int const&, 0x416B50, CPed*, int*>(this, z);
	0AA8: call_method_return 0x416B50 struct [CPed] num_params 1 pop 0 [z] func_ret [int const&]

	// CPed::GetRotation
	// plugin::CallMethodAndReturn<short const&, 0x4361B0, CPed*, short*>(this, r);
	0AA8: call_method_return 0x4361B0 struct [CPed] num_params 1 pop 0 [r] func_ret [short const&]

	// CPed::SetPosition2D
	// plugin::CallMethod<0x435C80, CPed*, CEncodedVector2D>(this, pos);
	0AA6: call_method 0x435C80 struct [CPed] num_params 1 pop 0 [pos]

	// CPed::SetRotation
	// plugin::CallMethod<0x433C00, CPed*, short>(this, rot);
	0AA6: call_method 0x433C00 struct [CPed] num_params 1 pop 0 [rot]

	// CPed::SetOccupation
	// plugin::CallMethod<0x403970, CPed*, int>(this, occupation);
	0AA6: call_method 0x403970 struct [CPed] num_params 1 pop 0 [occupation]

	// CPed::SetRemap
	// plugin::CallMethod<0x433B90, CPed*, char>(this, remap);
	0AA6: call_method 0x433B90 struct [CPed] num_params 1 pop 0 [remap]

	// CPed::GetRemap
	// plugin::CallMethodAndReturn<char, 0x433BA0, CPed*>(this);
	0AA8: call_method_return 0x433BA0 struct [CPed] num_params 0 pop 0 func_ret [char]

	// CPed::EnterCarAsPassenger
	// plugin::CallMethod<0x43E350, CPed*, CCar*>(this, target);
	0AA6: call_method 0x43E350 struct [CPed] num_params 1 pop 0 [target]

plugin_II\game_II\CPlayerPed.cpp:

	// CPlayerPed::CPlayerPed
	// plugin::CallMethod<0x4A83C0, CPlayerPed*, char>(this, index);
	0AA6: call_method 0x4A83C0 struct [CPlayerPed] num_params 1 pop 0 [index]

	// CPlayerPed::SetInitialState
	// plugin::CallMethod<0x4A81E0, CPlayerPed*>(this);
	0AA6: call_method 0x4A81E0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::Teleport
	// plugin::CallMethod<0x4A5AD0, CPlayerPed*>(this);
	0AA6: call_method 0x4A5AD0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ProcessKeyPresses
	// plugin::CallMethod<0x4A7010, CPlayerPed*, unsigned short>(this, key);
	0AA6: call_method 0x4A7010 struct [CPlayerPed] num_params 1 pop 0 [key]

	// CPlayerPed::ProcessActions
	// plugin::CallMethod<0x41EA10, CPlayerPed*, char, char, char, char, char, char>(this, forward, backward, left, right, prevWeap, nextWeap);
	0AA6: call_method 0x41EA10 struct [CPlayerPed] num_params 6 pop 0 [forward] [backward] [left] [right] [prevWeap] [nextWeap]

	// CPlayerPed::Process
	// plugin::CallMethod<0x4A7E80, CPlayerPed*>(this);
	0AA6: call_method 0x4A7E80 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetPed
	// plugin::CallMethod<0x4A5B40, CPlayerPed*, CPed*>(this, ped);
	0AA6: call_method 0x4A5B40 struct [CPlayerPed] num_params 1 pop 0 [ped]

	// CPlayerPed::GetPed
	// plugin::CallMethodAndReturn<CPed*, 0x4A5130, CPlayerPed*>(this);
	0AA8: call_method_return 0x4A5130 struct [CPlayerPed] num_params 0 pop 0 func_ret [CPed*]

	// CPlayerPed::SetAllControlStatusOn
	// plugin::CallMethod<0x4A4E50, CPlayerPed*>(this);
	0AA6: call_method 0x4A4E50 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetAllControlStatusOff
	// plugin::CallMethod<0x4A69A0, CPlayerPed*>(this);
	0AA6: call_method 0x4A69A0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetEnterControlStatusOn
	// plugin::CallMethod<0x4A4E90, CPlayerPed*>(this);
	0AA6: call_method 0x4A4E90 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetEnterControlStatusOff
	// plugin::CallMethod<0x4A4E80, CPlayerPed*>(this);
	0AA6: call_method 0x4A4E80 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::GetAuxCamera
	// plugin::CallMethodAndReturn<CCamera*, 0x434900, CPlayerPed*>(this);
	0AA8: call_method_return 0x434900 struct [CPlayerPed] num_params 0 pop 0 func_ret [CCamera*]

plugin_II\game_II\CPopulation.cpp:

	// CPopulation::SpawnCar
	// plugin::CallMethodAndReturn<CCar*, 0x426E10, CPopulation*, int, int, int, short, int>(this, x, y, z, rot, model);
	0AA8: call_method_return 0x426E10 struct [CPopulation] num_params 5 pop 0 [x] [y] [z] [rot] [model] func_ret [CCar*]

plugin_II\game_II\CReplay.cpp:

	// CReplay::IsPlayingBack
	// plugin::CallMethodAndReturn<bool, 0x44AA60, CReplay*>(this);
	0AA8: call_method_return 0x44AA60 struct [CReplay] num_params 0 pop 0 func_ret [bool]

	// CReplay::SetButton
	// plugin::CallMethod<0x45ED10, CReplay*>(this, button);
	0AA6: call_method 0x45ED10 struct [CReplay] num_params 1 pop 0 [button]

	// CReplay::ClearButton
	// plugin::CallMethod<0x45ED30, CReplay*>(this, button);
	0AA6: call_method 0x45ED30 struct [CReplay] num_params 1 pop 0 [button]

	// CReplay::GetButton
	// plugin::CallMethodAndReturn<bool, 0x44C050, CReplay*>(this, button);
	0AA8: call_method_return 0x44C050 struct [CReplay] num_params 1 pop 0 [button] func_ret [bool]

plugin_II\game_II\cSampleManager.cpp:

	// cSampleManager::PlayVocal
	// plugin::CallMethod<0x4B70C0, cSampleManager*, int, int, bool>(this, stream, vocal, append);
	0AA6: call_method 0x4B70C0 struct [cSampleManager] num_params 3 pop 0 [stream] [vocal] [append]

	// cSampleManager::CloseStream
	// plugin::CallMethod<0x4B6860, cSampleManager*, int>(this, stream);
	0AA6: call_method 0x4B6860 struct [cSampleManager] num_params 1 pop 0 [stream]

	// cSampleManager::SetStreamVolume
	// plugin::CallMethod<0x4B6890, cSampleManager*, int, unsigned char>(this, stream, volume);
	0AA6: call_method 0x4B6890 struct [cSampleManager] num_params 2 pop 0 [stream] [volume]

	// cSampleManager::PlaySample
	// plugin::CallMethod<0x4B69B0, cSampleManager*, int>(this, sample);
	0AA6: call_method 0x4B69B0 struct [cSampleManager] num_params 1 pop 0 [sample]

	// cSampleManager::SetSampleVolume
	// plugin::CallMethod<0x4B6990, cSampleManager*, unsigned char>(this, vol);
	0AA6: call_method 0x4B6990 struct [cSampleManager] num_params 1 pop 0 [vol]

	// cSampleManager::PlayFrontendTrack
	// plugin::CallMethod<0x4B6700, cSampleManager*, unsigned char>(this, id);
	0AA6: call_method 0x4B6700 struct [cSampleManager] num_params 1 pop 0 [id]

	// cSampleManager::StopFrontendTrack
	// plugin::CallMethod<0x4B67B0, cSampleManager*>(this);
	0AA6: call_method 0x4B67B0 struct [cSampleManager] num_params 0 pop 0

	// cSampleManager::IsFrontendTrackPlaying
	// plugin::CallMethodAndReturn<bool, 0x4B66A0, cSampleManager*>(this);
	0AA8: call_method_return 0x4B66A0 struct [cSampleManager] num_params 0 pop 0 func_ret [bool]

	// cSampleManager::IsSampleNotPlaying
	// plugin::CallMethodAndReturn<bool, 0x4B6A40, cSampleManager*>(this);
	0AA8: call_method_return 0x4B6A40 struct [cSampleManager] num_params 0 pop 0 func_ret [bool]

plugin_II\game_II\CSprite.cpp:

	// CSprite::GetObject
	// plugin::CallMethodAndReturn<CObject*, 0x40FEB0, CSprite*>(this);
	0AA8: call_method_return 0x40FEB0 struct [CSprite] num_params 0 pop 0 func_ret [CObject*]

	// CSprite::SetPosition
	// plugin::CallMethod<0x420600, CSprite*>(this, pos);
	0AA6: call_method 0x420600 struct [CSprite] num_params 1 pop 0 [pos]

	// CSprite::SetRotation
	// plugin::CallMethod<0x420690, CSprite*>(this, rot);
	0AA6: call_method 0x420690 struct [CSprite] num_params 1 pop 0 [rot]

	// CSprite::SetRemap
	// plugin::CallMethod<0x4B9B00, CSprite*>(this, remap);
	0AA6: call_method 0x4B9B00 struct [CSprite] num_params 1 pop 0 [remap]

	// CSprite::Render
	// plugin::CallMethod<0x4BE060, CSprite*>(this);
	0AA6: call_method 0x4BE060 struct [CSprite] num_params 0 pop 0

	// CSprite::DrawSprite
	// plugin::CallStd<0x4CBA50, int, int, int, int, int, int, int const&, int, int, int, int>(id1, id2, x, y, angle, scale, mode, enableAlpha, alpha, unk, lightFlag);
	0AA5: call_function 0x4CBA50 num_params 11 pop 0 [id1] [id2] [x] [y] [angle] [scale] [mode] [enableAlpha] [alpha] [unk] [lightFlag]

plugin_II\game_II\CStyle.cpp:

	// CStyle::CStyle
	// plugin::CallMethod<0x4C08D0, CStyle*>(this);
	0AA6: call_method 0x4C08D0 struct [CStyle] num_params 0 pop 0

	// CStyle::Load
	// plugin::CallMethod<0x4C0820, CStyle*, const char*>(this, path);
	0AA6: call_method 0x4C0820 struct [CStyle] num_params 1 pop 0 [path]

	// CStyle::Unload
	// plugin::CallMethod<0x4C0130, CStyle*>(this);
	0AA6: call_method 0x4C0130 struct [CStyle] num_params 0 pop 0

	// CStyle::GetBaseIndex
	// plugin::CallMethodAndReturn<short, 0x4BF2A0, CStyle*, int, short>(this, base, texture);
	0AA8: call_method_return 0x4BF2A0 struct [CStyle] num_params 2 pop 0 [base] [texture] func_ret [short]

	// CStyle::GetTileArray
	// plugin::CallMethodAndReturn<int*, 0x4C2EB0, CStyle*, unsigned short>(this, id);
	0AA8: call_method_return 0x4C2EB0 struct [CStyle] num_params 1 pop 0 [id] func_ret [int*]

	// CStyle::GetPhysPalette
	// plugin::CallMethodAndReturn<short, 0x4BF530, CStyle*, unsigned short>(this, id);
	0AA8: call_method_return 0x4BF530 struct [CStyle] num_params 1 pop 0 [id] func_ret [short]

	// CStyle::SetFontStyles
	// plugin::CallStd<0x4BFCC0, int>(fonts);
	0AA5: call_function 0x4BFCC0 num_params 1 pop 0 [fonts]

plugin_II\game_II\CText.cpp:

	// CText::CText
	// plugin::CallMethod<0x4C2620, CText*>(this);
	0AA6: call_method 0x4C2620 struct [CText] num_params 0 pop 0

	// CText::Get
	// plugin::CallMethodAndReturn<wchar_t*, 0x4C23A0, CText*>(this, str);
	0AA8: call_method_return 0x4C23A0 struct [CText] num_params 1 pop 0 [str] func_ret [wchar_t*]

	// CText::Load
	// plugin::CallMethod<0x4C2540, CText*>(this);
	0AA6: call_method 0x4C2540 struct [CText] num_params 0 pop 0

	// CText::Unload
	// plugin::CallMethod<0x4C26C0, CText*>(this);
	0AA6: call_method 0x4C26C0 struct [CText] num_params 0 pop 0

	// CText::LoadChunk
	// plugin::CallMethod<0x4C2330, CText*, const char*, int>(this, type, size);
	0AA6: call_method 0x4C2330 struct [CText] num_params 2 pop 0 [type] [size]

	// CText::Update
	// plugin::CallMethod<0x4C20B0, CText*, wchar_t*>(this, chars);
	0AA6: call_method 0x4C20B0 struct [CText] num_params 1 pop 0 [chars]

plugin_II\game_II\CTextureManager.cpp:

	// CTextureManager::CTextureManager
	// plugin::CallMethod<0x4C3190, CTextureManager*>(this);
	0AA6: call_method 0x4C3190 struct [CTextureManager] num_params 0 pop 0

	// CTextureManager::Load
	// plugin::CallMethod<0x4C30A0, CTextureManager*>(this);
	0AA6: call_method 0x4C30A0 struct [CTextureManager] num_params 0 pop 0

	// CTextureManager::Unload
	// plugin::CallMethod<0x4C2D60, CTextureManager*>(this);
	0AA6: call_method 0x4C2D60 struct [CTextureManager] num_params 0 pop 0

	// CTextureManager::GetTexture
	// plugin::CallMethodAndReturn<tTexture*, 0x4C2AC0, CTextureManager*, int, int, int, int>(this, id1, id2, mode, enableAlpha);
	0AA8: call_method_return 0x4C2AC0 struct [CTextureManager] num_params 4 pop 0 [id1] [id2] [mode] [enableAlpha] func_ret [tTexture*]

plugin_II\game_II\CTheScripts.cpp:

	// CTheScripts::CTheScripts
	// plugin::CallMethod<0x481960, CTheScripts*>(this);
	0AA6: call_method 0x481960 struct [CTheScripts] num_params 0 pop 0

	// CTheScripts::Save
	// plugin::CallMethod<0x47EF40, CTheScripts*, const char*>(this, saveName);
	0AA6: call_method 0x47EF40 struct [CTheScripts] num_params 1 pop 0 [saveName]

plugin_II\game_II\CWorld.cpp:

	// CWorld::FindGroundZForCoord
	// plugin::CallMethodAndReturn<int, 0x46A420, CWorld*, int*, int, int>(this, z, x, y);
	0AA8: call_method_return 0x46A420 struct [CWorld] num_params 3 pop 0 [z] [x] [y] func_ret [int]

plugin_II\game_II\tVideo.cpp:

	// ResetVideoDevice
	// plugin::Call<0x4CC5C0>();
	0AA5: call_function 0x4CC5C0 num_params 0 pop 0

plugin_III\game_III\C_PcSave.cpp:

	// C_PcSave::DeleteSlot
	// plugin::CallMethodAndReturnDynGlobal<bool, C_PcSave *, int>(gaddrof(C_PcSave::DeleteSlot), this, slot);
	0AA8: call_method_return 0x5922F0 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [bool]

	// C_PcSave::PcClassSaveRoutine
	// plugin::CallMethodAndReturnDynGlobal<bool, C_PcSave *, int, unsigned char *, unsigned int>(gaddrof(C_PcSave::PcClassSaveRoutine), this, file, data, size);
	0AA8: call_method_return 0x591F80 struct [C_PcSave] num_params 3 pop 0 [file] [data] [size] func_ret [bool]

	// C_PcSave::PopulateSlotInfo
	// plugin::CallMethodDynGlobal<C_PcSave *>(gaddrof(C_PcSave::PopulateSlotInfo), this);

	// C_PcSave::SaveSlot
	// plugin::CallMethodAndReturnDynGlobal<bool, C_PcSave *, int>(gaddrof(C_PcSave::SaveSlot), this, slot);
	0AA8: call_method_return 0x591EC0 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [bool]

	// C_PcSave::SetSaveDirectory
	// plugin::CallDynGlobal<char const *>(gaddrof(C_PcSave::SetSaveDirectory), path);

plugin_III\game_III\C2dEffect.cpp:

	// C2dEffect::Shutdown
	// plugin::CallMethodDynGlobal<C2dEffect *>(gaddrof(C2dEffect::Shutdown), this);

plugin_III\game_III\C3dMarker.cpp:

	// C3dMarker::AddMarker
	// plugin::CallMethodDynGlobal<C3dMarker *, unsigned int, unsigned short, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(gaddrof(C3dMarker::AddMarker), this, nId, nType, fSize, bRed, bGreen, bBlue, bAlpha, nPulsePeriod, fPulseFraction, nRotateRate);

	// C3dMarker::DeleteMarkerObject
	// plugin::CallMethodDynGlobal<C3dMarker *>(gaddrof(C3dMarker::DeleteMarkerObject), this);

	// C3dMarker::Render
	// plugin::CallMethodDynGlobal<C3dMarker *>(gaddrof(C3dMarker::Render), this);

	// *MarkerAtomicCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(MarkerAtomicCB), atomic, data);

plugin_III\game_III\C3dMarkers.cpp:

	// C3dMarkers::PlaceMarker
	// plugin::CallDynGlobal<unsigned int, unsigned short, CVector &, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(gaddrof(C3dMarkers::PlaceMarker), nId, nType, point, fSize, bRed, bGreen, bBlue, bAlpha, nPulsePeriod, fPulseFraction, nRotateRate);

	// C3dMarkers::PlaceMarkerSet
	// plugin::CallDynGlobal<unsigned int, unsigned short, CVector &, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(gaddrof(C3dMarkers::PlaceMarkerSet), nId, nType, point, fSize, bRed, bGreen, bBlue, bAlpha, nPulsePeriod, fPulseFraction, nRotateRate);

plugin_III\game_III\CAccidentManager.cpp:

	// CAccidentManager::CountActiveAccidents
	// plugin::CallMethodAndReturnDynGlobal<unsigned short, CAccidentManager *>(gaddrof(CAccidentManager::CountActiveAccidents), this);
	0AA8: call_method_return 0x456880 struct [CAccidentManager] num_params 0 pop 0 func_ret [unsigned short]

	// *CAccidentManager::FindNearestAccident
	// plugin::CallMethodAndReturnDynGlobal<CAccident *, CAccidentManager *, CVector, float *>(gaddrof(CAccidentManager::FindNearestAccident), this, pos, distance);
	0AA8: call_method_return 0x456760 struct [*CAccidentManager] num_params 2 pop 0 [pos] [distance] func_ret [CAccident *]

	// *CAccidentManager::GetNextFreeAccident
	// plugin::CallMethodAndReturnDynGlobal<CAccident *, CAccidentManager *>(gaddrof(CAccidentManager::GetNextFreeAccident), this);
	0AA8: call_method_return 0x4565A0 struct [*CAccidentManager] num_params 0 pop 0 func_ret [CAccident *]

	// CAccidentManager::ReportAccident
	// plugin::CallMethodDynGlobal<CAccidentManager *, CPed *>(gaddrof(CAccidentManager::ReportAccident), this, ped);

	// CAccidentManager::UnattendedAccidents
	// plugin::CallMethodAndReturnDynGlobal<bool, CAccidentManager *>(gaddrof(CAccidentManager::UnattendedAccidents), this);
	0AA8: call_method_return 0x4568D0 struct [CAccidentManager] num_params 0 pop 0 func_ret [bool]

	// CAccidentManager::Update
	// plugin::CallMethodDynGlobal<CAccidentManager *>(gaddrof(CAccidentManager::Update), this);

	// CAccidentManager::WorkToDoForMedics
	// plugin::CallMethodAndReturnDynGlobal<bool, CAccidentManager *>(gaddrof(CAccidentManager::WorkToDoForMedics), this);
	0AA8: call_method_return 0x4568A0 struct [CAccidentManager] num_params 0 pop 0 func_ret [bool]

plugin_III\game_III\CAnimBlendAssocGroup.cpp:

	// *CAnimBlendAssocGroup::CopyAnimation
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssocGroup *, char const *>(gaddrof_o(CAnimBlendAssocGroup::CopyAnimation, CAnimBlendAssociation *(CAnimBlendAssocGroup::*)(char const *)), this, name);
	0AA8: call_method_return 0x401420 struct [*CAnimBlendAssocGroup] num_params 1 pop 0 [name] func_ret [CAnimBlendAssociation *]

	// *CAnimBlendAssocGroup::CopyAnimation
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssocGroup *, unsigned int>(gaddrof_o(CAnimBlendAssocGroup::CopyAnimation, CAnimBlendAssociation *(CAnimBlendAssocGroup::*)(unsigned int)), this, id);
	0AA8: call_method_return 0x401420 struct [*CAnimBlendAssocGroup] num_params 1 pop 0 [id] func_ret [CAnimBlendAssociation *]

	// CAnimBlendAssocGroup::CreateAssociations
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *, char const *>(gaddrof_o(CAnimBlendAssocGroup::CreateAssociations, void (CAnimBlendAssocGroup::*)(char const *)), this, name);

	// CAnimBlendAssocGroup::CreateAssociations
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *, char const *, RpClump *, char **, int>(gaddrof_o(CAnimBlendAssocGroup::CreateAssociations, void (CAnimBlendAssocGroup::*)(char const *, RpClump *, char **, int)), this, blockName, clump, animNames, numAssocs);

	// CAnimBlendAssocGroup::DestroyAssociations
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(gaddrof(CAnimBlendAssocGroup::DestroyAssociations), this);

	// *CAnimBlendAssocGroup::GetAnimation
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssocGroup *, char const *>(gaddrof_o(CAnimBlendAssocGroup::GetAnimation, CAnimBlendAssociation *(CAnimBlendAssocGroup::*)(char const *)), this, name);
	0AA8: call_method_return 0x4013D0 struct [*CAnimBlendAssocGroup] num_params 1 pop 0 [name] func_ret [CAnimBlendAssociation *]

	// *CAnimBlendAssocGroup::GetAnimation
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssocGroup *, unsigned int>(gaddrof_o(CAnimBlendAssocGroup::GetAnimation, CAnimBlendAssociation *(CAnimBlendAssocGroup::*)(unsigned int)), this, id);
	0AA8: call_method_return 0x4013D0 struct [*CAnimBlendAssocGroup] num_params 1 pop 0 [id] func_ret [CAnimBlendAssociation *]

	// strcmpIgnoringDigits
	// plugin::CallAndReturnDynGlobal<bool, char const *, char const *>(gaddrof(strcmpIgnoringDigits), s1, s2);

	// *GetModelFromName
	// plugin::CallAndReturnDynGlobal<CBaseModelInfo *, char const *>(gaddrof(GetModelFromName), name);

plugin_III\game_III\CAnimBlendAssociation.cpp:

	// CAnimBlendAssociation::AllocateAnimBlendNodeArray
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, int>(gaddrof(CAnimBlendAssociation::AllocateAnimBlendNodeArray), this, n);

	// CAnimBlendAssociation::FreeAnimBlendNodeArray
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(gaddrof(CAnimBlendAssociation::FreeAnimBlendNodeArray), this);

	// *CAnimBlendAssociation::GetNode
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendNode *, CAnimBlendAssociation *, int>(gaddrof(CAnimBlendAssociation::GetNode), this, index);
	0AA8: call_method_return 0x4017B0 struct [*CAnimBlendAssociation] num_params 1 pop 0 [index] func_ret [CAnimBlendNode *]

	// CAnimBlendAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendHierarchy *>(gaddrof_o(CAnimBlendAssociation::Init, void (CAnimBlendAssociation::*)(RpClump *, CAnimBlendHierarchy *)), this, clump, hier);

	// CAnimBlendAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(gaddrof_o(CAnimBlendAssociation::Init, void (CAnimBlendAssociation::*)(CAnimBlendAssociation &)), this, assoc);

	// CAnimBlendAssociation::SetBlend
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::SetBlend), this, amount, delta);

	// CAnimBlendAssociation::SetCurrentTime
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::SetCurrentTime), this, time);

	// CAnimBlendAssociation::SetDeleteCallback
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, void(*)(CAnimBlendAssociation *, void *), void *>(gaddrof(CAnimBlendAssociation::SetDeleteCallback), this, func, data);

	// CAnimBlendAssociation::SetFinishCallback
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, void(*)(CAnimBlendAssociation *, void *), void *>(gaddrof(CAnimBlendAssociation::SetFinishCallback), this, func, data);

	// CAnimBlendAssociation::Start
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::Start), this, time);

	// CAnimBlendAssociation::SyncAnimation
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation *>(gaddrof(CAnimBlendAssociation::SyncAnimation), this, other);

	// CAnimBlendAssociation::UpdateBlend
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::UpdateBlend), this, timeDelta);
	0AA8: call_method_return 0x4032B0 struct [CAnimBlendAssociation] num_params 1 pop 0 [timeDelta] func_ret [bool]

	// CAnimBlendAssociation::UpdateTime
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::UpdateTime), this, timeDelta, relSpeed);

plugin_III\game_III\CAnimBlendClumpData.cpp:

	// CAnimBlendClumpData::ForAllFrames
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *, void(*)(AnimBlendFrameData *, void *), void *>(gaddrof(CAnimBlendClumpData::ForAllFrames), this, func, data);

	// CAnimBlendClumpData::SetNumberOfBones
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *, int>(gaddrof(CAnimBlendClumpData::SetNumberOfBones), this, n);

plugin_III\game_III\CAnimBlendHierarchy.cpp:

	// CAnimBlendHierarchy::CalcTotalTime
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::CalcTotalTime), this);

	// CAnimBlendHierarchy::RemoveAnimSequences
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::RemoveAnimSequences), this);

	// CAnimBlendHierarchy::RemoveQuaternionFlips
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::RemoveQuaternionFlips), this);

	// CAnimBlendHierarchy::RemoveUncompressedData
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::RemoveUncompressedData), this);

	// CAnimBlendHierarchy::SetName
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *, char const *>(gaddrof(CAnimBlendHierarchy::SetName), this, name);

	// CAnimBlendHierarchy::Shutdown
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::Shutdown), this);

	// CAnimBlendHierarchy::Uncompress
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimBlendHierarchy::Uncompress), this);

plugin_III\game_III\CAnimBlendNode.cpp:

	// CAnimBlendNode::CalcDeltas
	// plugin::CallMethodDynGlobal<CAnimBlendNode *>(gaddrof(CAnimBlendNode::CalcDeltas), this);

	// CAnimBlendNode::FindKeyFrame
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendNode *, float>(gaddrof(CAnimBlendNode::FindKeyFrame), this, t);
	0AA8: call_method_return 0x4021B0 struct [CAnimBlendNode] num_params 1 pop 0 [t] func_ret [bool]

	// CAnimBlendNode::GetCurrentTranslation
	// plugin::CallMethodDynGlobal<CAnimBlendNode *, CVector &, float>(gaddrof(CAnimBlendNode::GetCurrentTranslation), this, trans, weight);

	// CAnimBlendNode::GetEndTranslation
	// plugin::CallMethodDynGlobal<CAnimBlendNode *, CVector &, float>(gaddrof(CAnimBlendNode::GetEndTranslation), this, trans, weight);

	// CAnimBlendNode::Init
	// plugin::CallMethodDynGlobal<CAnimBlendNode *>(gaddrof(CAnimBlendNode::Init), this);

	// CAnimBlendNode::NextKeyFrame
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendNode *>(gaddrof(CAnimBlendNode::NextKeyFrame), this);
	0AA8: call_method_return 0x401DC0 struct [CAnimBlendNode] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendNode::Update
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendNode *, CVector &, CQuaternion &, float>(gaddrof(CAnimBlendNode::Update), this, trans, rot, weight);
	0AA8: call_method_return 0x401B30 struct [CAnimBlendNode] num_params 3 pop 0 [trans] [rot] [weight] func_ret [bool]

plugin_III\game_III\CAnimBlendSequence.cpp:

	// CAnimBlendSequence::RemoveQuaternionFlips
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *>(gaddrof(CAnimBlendSequence::RemoveQuaternionFlips), this);

	// CAnimBlendSequence::SetName
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *, char const *>(gaddrof(CAnimBlendSequence::SetName), this, name);

	// CAnimBlendSequence::SetNumFrames
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *, int, bool>(gaddrof(CAnimBlendSequence::SetNumFrames), this, numFrames, translation);

plugin_III\game_III\CAnimManager.cpp:

	// *CAnimManager::AddAnimation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, int, int>(gaddrof(CAnimManager::AddAnimation), clump, groupId, animId);

	// *CAnimManager::AddAnimationAndSync
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendAssociation *, int, int>(gaddrof(CAnimManager::AddAnimationAndSync), clump, association, groupId, animId);

	// *CAnimManager::BlendAnimation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, int, int, float>(gaddrof(CAnimManager::BlendAnimation), clump, groupId, animId, delta);

	// *CAnimManager::CreateAnimAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, int, int>(gaddrof(CAnimManager::CreateAnimAssociation), groupId, animId);

	// *CAnimManager::GetAnimAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, int, int>(gaddrof_o(CAnimManager::GetAnimAssociation, CAnimBlendAssociation *(*)(int, int)), groupId, animId);

	// *CAnimManager::GetAnimAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, int, char const *>(gaddrof_o(CAnimManager::GetAnimAssociation, CAnimBlendAssociation *(*)(int, char const *)), groupId, name);

	// *CAnimManager::GetAnimGroupName
	// plugin::CallAndReturnDynGlobal<char const *, int>(gaddrof(CAnimManager::GetAnimGroupName), groupId);

	// *CAnimManager::GetAnimation
	// plugin::CallAndReturnDynGlobal<CAnimBlendHierarchy *, char const *, CAnimBlock *>(gaddrof(CAnimManager::GetAnimation), name, animBlock);

	// *CAnimManager::GetAnimationBlock
	// plugin::CallAndReturnDynGlobal<CAnimBlock *, char const *>(gaddrof(CAnimManager::GetAnimationBlock), name);

	// CAnimManager::LoadAnimFile
	// plugin::CallDynGlobal<char const *>(gaddrof_o(CAnimManager::LoadAnimFile, void (*)(char const *)), name);

	// CAnimManager::LoadAnimFile
	// plugin::CallDynGlobal<int, bool>(gaddrof_o(CAnimManager::LoadAnimFile, void (*)(int, bool)), fileHandle, compress);

	// CAnimManager::UncompressAnimation
	// plugin::CallDynGlobal<CAnimBlendHierarchy *>(gaddrof(CAnimManager::UncompressAnimation), hier);

plugin_III\game_III\CAntenna.cpp:

	// CAntenna::Update
	// plugin::CallMethodDynGlobal<CAntenna *, CVector, CVector>(gaddrof(CAntenna::Update), this, dir, pos);

plugin_III\game_III\CAntennas.cpp:

	// CAntennas::RegisterOne
	// plugin::CallDynGlobal<unsigned int, CVector, CVector, float>(gaddrof(CAntennas::RegisterOne), id, dir, pos, length);

plugin_III\game_III\cAudioCollisionManager.cpp:

	// cAudioCollisionManager::AddCollisionToRequestedQueue
	// plugin::CallMethodDynGlobal<cAudioCollisionManager *>(gaddrof(cAudioCollisionManager::AddCollisionToRequestedQueue), this);

plugin_III\game_III\CAudioHydrant.cpp:

	// CAudioHydrant::Add
	// plugin::CallDynGlobal<CParticleObject *>(gaddrof(CAudioHydrant::Add), object);

	// CAudioHydrant::Remove
	// plugin::CallDynGlobal<CParticleObject *>(gaddrof(CAudioHydrant::Remove), object);

plugin_III\game_III\cAudioManager.cpp:

	// cAudioManager::cAudioManager
	// plugin::CallMethod<0x579AB0, cAudioManager *>(this);
	0AA6: call_method 0x579AB0 struct [cAudioManager] num_params 0 pop 0

	// cAudioManager::~cAudioManager
	// plugin::CallMethod<0x57A0A0, cAudioManager *>(this);
	0AA6: call_method 0x57A0A0 struct [cAudioManager] num_params 0 pop 0

	// cAudioManager::UsesSiren
	// plugin::CallMethodAndReturn<bool, 0x56C3C0, cAudioManager *, unsigned int>(this, index);
	0AA8: call_method_return 0x56C3C0 struct [cAudioManager] num_params 1 pop 0 [index] func_ret [bool]

	// cAudioManager::UsesSirenSwitching
	// plugin::CallMethodAndReturn<bool, 0x56C3F0, cAudioManager *, unsigned int>(this, index);
	0AA8: call_method_return 0x56C3F0 struct [cAudioManager] num_params 1 pop 0 [index] func_ret [bool]

plugin_III\game_III\cAudioScriptObject.cpp:

	// cAudioScriptObject::Reset
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(gaddrof(cAudioScriptObject::Reset), this);

	// cAudioScriptObject::LoadAllAudioScriptObjects
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(cAudioScriptObject::LoadAllAudioScriptObjects), buf, size);

	// cAudioScriptObject::SaveAllAudioScriptObjects
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(cAudioScriptObject::SaveAllAudioScriptObjects), buf, size);

	// PlayOneShotScriptObject
	// plugin::CallDynGlobal<unsigned char, CVector const &>(gaddrof(PlayOneShotScriptObject), id, pos);

plugin_III\game_III\CAutomobile.cpp:

	// CAutomobile::SetModelIndex
	// plugin::CallVirtualMethod<3, CAutomobile *, unsigned int>(this, modelIndex);

	// CAutomobile::ProcessControl
	// plugin::CallVirtualMethod<8, CAutomobile *>(this);

	// CAutomobile::Teleport
	// plugin::CallVirtualMethod<11, CAutomobile *, CVector>(this, pos);

	// CAutomobile::PreRender
	// plugin::CallVirtualMethod<12, CAutomobile *>(this);

	// CAutomobile::Render
	// plugin::CallVirtualMethod<13, CAutomobile *>(this);

	// CAutomobile::ProcessEntityCollision
	// plugin::CallVirtualMethod<17, CAutomobile *, CEntity *, CColPoint *>(this, entity, colPoint);

	// CAutomobile::ProcessControlInputs
	// plugin::CallVirtualMethod<18, CAutomobile *, unsigned char>(this, pad);

	// CAutomobile::GetComponentWorldPosition
	// plugin::CallVirtualMethod<19, CAutomobile *, int, CVector &>(this, component, pos);

	// CAutomobile::IsComponentPresent
	// plugin::CallVirtualMethodAndReturn<bool, 20, CAutomobile *, int>(this, component);

	// CAutomobile::SetComponentRotation
	// plugin::CallVirtualMethod<21, CAutomobile *, int, CVector>(this, component, rotation);

	// CAutomobile::OpenDoor
	// plugin::CallVirtualMethod<22, CAutomobile *, int, eDoors, float>(this, component, door, angle);

	// CAutomobile::ProcessOpenDoor
	// plugin::CallVirtualMethod<23, CAutomobile *, unsigned int, unsigned int, float>(this, component, anim, angle);

	// CAutomobile::IsDoorReady
	// plugin::CallVirtualMethodAndReturn<bool, 24, CAutomobile *, eDoors>(this, door);

	// CAutomobile::IsDoorFullyOpen
	// plugin::CallVirtualMethodAndReturn<bool, 25, CAutomobile *, eDoors>(this, door);

	// CAutomobile::IsDoorClosed
	// plugin::CallVirtualMethodAndReturn<bool, 26, CAutomobile *, eDoors>(this, door);

	// CAutomobile::IsDoorMissing
	// plugin::CallVirtualMethodAndReturn<bool, 27, CAutomobile *, eDoors>(this, door);

	// CAutomobile::RemoveRefsToVehicle
	// plugin::CallVirtualMethod<28, CAutomobile *, CEntity *>(this, entity);

	// CAutomobile::BlowUpCar
	// plugin::CallVirtualMethod<29, CAutomobile *, CEntity *>(this, culprit);

	// CAutomobile::SetUpWheelColModel
	// plugin::CallVirtualMethodAndReturn<bool, 30, CAutomobile *, CColModel *>(this, wheelCol);

	// CAutomobile::BurstTyre
	// plugin::CallVirtualMethod<31, CAutomobile *, unsigned char>(this, wheel);

	// CAutomobile::IsRoomForPedToLeaveCar
	// plugin::CallVirtualMethodAndReturn<bool, 32, CAutomobile *, unsigned int, CVector *>(this, component, doorOffset);

	// CAutomobile::GetHeightAboveRoad
	// plugin::CallVirtualMethodAndReturn<float, 33, CAutomobile *>(this);

	// CAutomobile::PlayCarHorn
	// plugin::CallVirtualMethod<34, CAutomobile *>(this);

	// CAutomobile::AddDamagedVehicleParticles
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::AddDamagedVehicleParticles), this);

	// CAutomobile::AddWheelDirtAndWater
	// plugin::CallMethodAndReturnDynGlobal<bool, CAutomobile *, CColPoint &, unsigned int>(gaddrof(CAutomobile::AddWheelDirtAndWater), this, point, belowEffectSpeed);
	0AA8: call_method_return 0x5357D0 struct [CAutomobile] num_params 2 pop 0 [point] [belowEffectSpeed] func_ret [bool]

	// CAutomobile::BlowUpCarsInPath
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::BlowUpCarsInPath), this);

	// CAutomobile::DoDriveByShootings
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::DoDriveByShootings), this);

	// CAutomobile::FireTruckControl
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::FireTruckControl), this);

	// CAutomobile::Fix
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::Fix), this);

	// CAutomobile::GetAllWheelsOffGround
	// plugin::CallMethodAndReturnDynGlobal<bool, CAutomobile *>(gaddrof(CAutomobile::GetAllWheelsOffGround), this);
	0AA8: call_method_return 0x53BC40 struct [CAutomobile] num_params 0 pop 0 func_ret [bool]

	// CAutomobile::HasCarStoppedBecauseOfLight
	// plugin::CallMethodAndReturnDynGlobal<bool, CAutomobile *>(gaddrof(CAutomobile::HasCarStoppedBecauseOfLight), this);
	0AA8: call_method_return 0x42E220 struct [CAutomobile] num_params 0 pop 0 func_ret [bool]

	// CAutomobile::HideAllComps
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::HideAllComps), this);

	// CAutomobile::HydraulicControl
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::HydraulicControl), this);

	// CAutomobile::PlaceOnRoadProperly
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::PlaceOnRoadProperly), this);

	// CAutomobile::PlayHornIfNecessary
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::PlayHornIfNecessary), this);

	// CAutomobile::ProcessAutoBusDoors
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ProcessAutoBusDoors), this);

	// CAutomobile::ProcessBuoyancy
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ProcessBuoyancy), this);

	// CAutomobile::ProcessSwingingDoor
	// plugin::CallMethodDynGlobal<CAutomobile *, int, eDoors>(gaddrof(CAutomobile::ProcessSwingingDoor), this, component, door);

	// CAutomobile::RcbanditCheck1CarWheels
	// plugin::CallMethodAndReturnDynGlobal<bool, CAutomobile *, CPtrList &>(gaddrof(CAutomobile::RcbanditCheck1CarWheels), this, list);
	0AA8: call_method_return 0x53CBA0 struct [CAutomobile] num_params 1 pop 0 [list] func_ret [bool]

	// CAutomobile::RcbanditCheckHitWheels
	// plugin::CallMethodAndReturnDynGlobal<bool, CAutomobile *>(gaddrof(CAutomobile::RcbanditCheckHitWheels), this);
	0AA8: call_method_return 0x53C990 struct [CAutomobile] num_params 0 pop 0 func_ret [bool]

	// CAutomobile::ReduceHornCounter
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ReduceHornCounter), this);

	// *CAutomobile::RemoveBonnetInPedCollision
	// plugin::CallMethodAndReturnDynGlobal<CObject *, CAutomobile *>(gaddrof(CAutomobile::RemoveBonnetInPedCollision), this);
	0AA8: call_method_return 0x535320 struct [*CAutomobile] num_params 0 pop 0 func_ret [CObject *]

	// CAutomobile::ResetSuspension
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ResetSuspension), this);

	// CAutomobile::ScanForCrimes
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ScanForCrimes), this);

	// CAutomobile::SetBumperDamage
	// plugin::CallMethodDynGlobal<CAutomobile *, int, ePanels, bool>(gaddrof(CAutomobile::SetBumperDamage), this, component, panel, noFlyingComponents);

	// CAutomobile::SetBusDoorTimer
	// plugin::CallMethodDynGlobal<CAutomobile *, unsigned int, unsigned char>(gaddrof(CAutomobile::SetBusDoorTimer), this, timer, type);

	// CAutomobile::SetComponentVisibility
	// plugin::CallMethodDynGlobal<CAutomobile *, RwFrame *, unsigned int>(gaddrof(CAutomobile::SetComponentVisibility), this, frame, flag);

	// CAutomobile::SetDoorDamage
	// plugin::CallMethodDynGlobal<CAutomobile *, int, eDoors, bool>(gaddrof(CAutomobile::SetDoorDamage), this, component, door, noFlyingComponents);

	// CAutomobile::SetPanelDamage
	// plugin::CallMethodDynGlobal<CAutomobile *, int, ePanels, bool>(gaddrof(CAutomobile::SetPanelDamage), this, component, panel, noFlyingComponents);

	// CAutomobile::SetTaxiLight
	// plugin::CallMethodDynGlobal<CAutomobile *, bool>(gaddrof(CAutomobile::SetTaxiLight), this, enable);

	// CAutomobile::SetupDamageAfterLoad
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::SetupDamageAfterLoad), this);

	// CAutomobile::SetupModelNodes
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::SetupModelNodes), this);

	// CAutomobile::SetupSuspensionLines
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::SetupSuspensionLines), this);

	// CAutomobile::ShowAllComps
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::ShowAllComps), this);

	// *CAutomobile::SpawnFlyingComponent
	// plugin::CallMethodAndReturnDynGlobal<CObject *, CAutomobile *, int, unsigned int>(gaddrof(CAutomobile::SpawnFlyingComponent), this, component, type);
	0AA8: call_method_return 0x530300 struct [*CAutomobile] num_params 2 pop 0 [component] [type] func_ret [CObject *]

	// CAutomobile::TankControl
	// plugin::CallMethodDynGlobal<CAutomobile *>(gaddrof(CAutomobile::TankControl), this);

	// CAutomobile::VehicleDamage
	// plugin::CallMethodDynGlobal<CAutomobile *, float, unsigned short>(gaddrof(CAutomobile::VehicleDamage), this, impulse, damagedPiece);

	// CAutomobile::dmgDrawCarCollidingParticles
	// plugin::CallMethodDynGlobal<CAutomobile *, CVector const &, float>(gaddrof(CAutomobile::dmgDrawCarCollidingParticles), this, pos, amount);

	// CAutomobile::SetAllTaxiLights
	// plugin::CallDynGlobal<bool>(gaddrof(CAutomobile::SetAllTaxiLights), enable);

	// *SetVehicleAtomicVisibilityCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(SetVehicleAtomicVisibilityCB), object, data);

	// *GetCurrentAtomicObjectCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(GetCurrentAtomicObjectCB), object, data);

plugin_III\game_III\CAutoPilot.cpp:

	// CAutoPilot::ModifySpeed
	// plugin::CallMethod<0x4137B0, CAutoPilot *, float>(this, speed);
	0AA6: call_method 0x4137B0 struct [CAutoPilot] num_params 1 pop 0 [speed]

	// CAutoPilot::RemoveOnePathNode
	// plugin::CallMethod<0x413A00, CAutoPilot *>(this);
	0AA6: call_method 0x413A00 struct [CAutoPilot] num_params 0 pop 0

plugin_III\game_III\CBaseModelInfo.cpp:

	// CBaseModelInfo::Shutdown
	// plugin::CallVirtualMethod<1, CBaseModelInfo *>(this);

	// CBaseModelInfo::Add2dEffect
	// plugin::CallMethodDynGlobal<CBaseModelInfo *, C2dEffect *>(gaddrof(CBaseModelInfo::Add2dEffect), this, effect);

	// CBaseModelInfo::AddRef
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::AddRef), this);

	// CBaseModelInfo::AddTexDictionaryRef
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::AddTexDictionaryRef), this);

	// CBaseModelInfo::ClearTexDictionary
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::ClearTexDictionary), this);

	// CBaseModelInfo::DeleteCollisionModel
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::DeleteCollisionModel), this);

	// *CBaseModelInfo::Get2dEffect
	// plugin::CallMethodAndReturnDynGlobal<C2dEffect *, CBaseModelInfo *, int>(gaddrof(CBaseModelInfo::Get2dEffect), this, effectNumber);
	0AA8: call_method_return 0x4F6B00 struct [*CBaseModelInfo] num_params 1 pop 0 [effectNumber] func_ret [C2dEffect *]

	// CBaseModelInfo::Init2dEffects
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::Init2dEffects), this);

	// CBaseModelInfo::RemoveRef
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::RemoveRef), this);

	// CBaseModelInfo::RemoveTexDictionaryRef
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(gaddrof(CBaseModelInfo::RemoveTexDictionaryRef), this);

	// CBaseModelInfo::SetTexDictionary
	// plugin::CallMethodDynGlobal<CBaseModelInfo *, char const *>(gaddrof(CBaseModelInfo::SetTexDictionary), this, txdName);

plugin_III\game_III\CBoat.cpp:

	// CBoat::SetModelIndex
	// plugin::CallVirtualMethod<3, CBoat *, unsigned int>(this, modelIndex);

	// CBoat::ProcessControl
	// plugin::CallVirtualMethod<8, CBoat *>(this);

	// CBoat::Teleport
	// plugin::CallVirtualMethod<11, CBoat *, CVector>(this, point);

	// CBoat::PreRender
	// plugin::CallVirtualMethod<12, CBoat *>(this);

	// CBoat::Render
	// plugin::CallVirtualMethod<13, CBoat *>(this);

	// CBoat::ProcessControlInputs
	// plugin::CallVirtualMethod<18, CBoat *, unsigned char>(this, padNumber);

	// CBoat::GetComponentWorldPosition
	// plugin::CallVirtualMethod<19, CBoat *, int, CVector &>(this, component, pos);

	// CBoat::IsComponentPresent
	// plugin::CallVirtualMethodAndReturn<bool, 20, CBoat *, int>(this, component);

	// CBoat::BlowUpCar
	// plugin::CallVirtualMethod<29, CBoat *, CEntity *>(this, entity);

	// CBoat::AddWakePoint
	// plugin::CallMethodDynGlobal<CBoat *, CVector>(gaddrof(CBoat::AddWakePoint), this, point);

	// CBoat::ApplyWaterResistance
	// plugin::CallMethodDynGlobal<CBoat *>(gaddrof(CBoat::ApplyWaterResistance), this);

	// CBoat::PruneWakeTrail
	// plugin::CallMethodDynGlobal<CBoat *>(gaddrof(CBoat::PruneWakeTrail), this);

	// CBoat::SetupModelNodes
	// plugin::CallMethodDynGlobal<CBoat *>(gaddrof(CBoat::SetupModelNodes), this);

	// CBoat::IsSectorAffectedByWake
	// plugin::CallAndReturnDynGlobal<bool, CVector2D, float, CBoat **>(gaddrof(CBoat::IsSectorAffectedByWake), sector, size, apBoats);

	// CBoat::IsVertexAffectedByWake
	// plugin::CallAndReturnDynGlobal<float, CVector, CBoat *>(gaddrof(CBoat::IsVertexAffectedByWake), vecVertex, boat);

	// *GetBoatAtomicObjectCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(GetBoatAtomicObjectCB), object, data);

plugin_III\game_III\CBridge.cpp:

	// CBridge::ShouldLightsBeFlashing
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CBridge::ShouldLightsBeFlashing));

	// CBridge::ThisIsABridgeObjectMovingUp
	// plugin::CallAndReturnDynGlobal<bool, unsigned int>(gaddrof(CBridge::ThisIsABridgeObjectMovingUp), modelIndex);

plugin_III\game_III\CBrightLights.cpp:

	// CBrightLights::RegisterOne
	// plugin::CallDynGlobal<CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char>(gaddrof(CBrightLights::RegisterOne), posn, right, up, at, red, green, blue, alpha);

plugin_III\game_III\CBuilding.cpp:

	// CBuilding::GetIsATreadable
	// plugin::CallVirtualMethodAndReturn<bool, 17, CBuilding *>(this);

	// CBuilding::ReplaceWithNewModel
	// plugin::CallMethodDynGlobal<CBuilding *, int>(gaddrof(CBuilding::ReplaceWithNewModel), this, modelIndex);

plugin_III\game_III\CBulletInfo.cpp:

	// CBulletInfo::AddBullet
	// plugin::CallDynGlobal<CEntity *, eWeaponType, CVector, CVector>(gaddrof(CBulletInfo::AddBullet), pSource, type, pos, speed);

	// CBulletInfo::TestForSniperBullet
	// plugin::CallAndReturnDynGlobal<bool, float, float, float, float, float, float>(gaddrof(CBulletInfo::TestForSniperBullet), x1, x2, y1, y2, z1, z2);

plugin_III\game_III\CBulletTrace.cpp:

	// CBulletTrace::Update
	// plugin::CallMethodDynGlobal<CBulletTrace *>(gaddrof(CBulletTrace::Update), this);

plugin_III\game_III\CBulletTraces.cpp:

	// CBulletTraces::AddTrace
	// plugin::CallDynGlobal<CVector *, CVector *>(gaddrof(CBulletTraces::AddTrace), origin, target);

plugin_III\game_III\CCamera.cpp:

	// CCamera::CalculateDerivedValues
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::CalculateDerivedValues), this);

	// CCamera::CamControl
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::CamControl), this);

	// CCamera::CamShake
	// plugin::CallMethodDynGlobal<CCamera *, float, float, float, float>(gaddrof(CCamera::CamShake), this, strength, x, y, z);

	// CCamera::ClearPlayerWeaponMode
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ClearPlayerWeaponMode), this);

	// CCamera::DontProcessObbeCinemaCamera
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::DontProcessObbeCinemaCamera), this);

	// CCamera::DrawBordersForWideScreen
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::DrawBordersForWideScreen), this);

	// CCamera::Fade
	// plugin::CallMethodDynGlobal<CCamera *, float, short>(gaddrof(CCamera::Fade), this, timeOut, direction);

	// CCamera::Find3rdPersonCamTargetVector
	// plugin::CallMethodDynGlobal<CCamera *, float, CVector, CVector &, CVector &>(gaddrof(CCamera::Find3rdPersonCamTargetVector), this, dist, pos, source, target);

	// CCamera::Find3rdPersonQuickAimPitch
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::Find3rdPersonQuickAimPitch), this);
	0AA8: call_method_return 0x46B850 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::FinishCutscene
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::FinishCutscene), this);

	// *CCamera::GetCameraMatrix
	// plugin::CallMethodAndReturnDynGlobal<CMatrix *, CCamera *>(gaddrof(CCamera::GetCameraMatrix), this);
	0AA8: call_method_return 0x42C8B0 struct [*CCamera] num_params 0 pop 0 func_ret [CMatrix *]

	// CCamera::GetCutSceneFinishTime
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CCamera *>(gaddrof(CCamera::GetCutSceneFinishTime), this);
	0AA8: call_method_return 0x46B920 struct [CCamera] num_params 0 pop 0 func_ret [unsigned int]

	// CCamera::GetFading
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetFading), this);
	0AA8: call_method_return 0x46B970 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetFadingDirection
	// plugin::CallMethodAndReturnDynGlobal<int, CCamera *>(gaddrof(CCamera::GetFadingDirection), this);
	0AA8: call_method_return 0x46B980 struct [CCamera] num_params 0 pop 0 func_ret [int]

	// *CCamera::GetGameCamPosition
	// plugin::CallMethodAndReturnDynGlobal<CVector *, CCamera *>(gaddrof(CCamera::GetGameCamPosition), this);
	0AA8: call_method_return 0x46BA10 struct [*CCamera] num_params 0 pop 0 func_ret [CVector *]

	// CCamera::GetLookDirection
	// plugin::CallMethodAndReturnDynGlobal<int, CCamera *>(gaddrof(CCamera::GetLookDirection), this);
	0AA8: call_method_return 0x46BA50 struct [CCamera] num_params 0 pop 0 func_ret [int]

	// CCamera::GetLookingForwardFirstPerson
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetLookingForwardFirstPerson), this);
	0AA8: call_method_return 0x46BA90 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetLookingLRBFirstPerson
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetLookingLRBFirstPerson), this);
	0AA8: call_method_return 0x46BA20 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetPositionAlongSpline
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::GetPositionAlongSpline), this);
	0AA8: call_method_return 0x46BAC0 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::GetScreenFadeStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CCamera *>(gaddrof(CCamera::GetScreenFadeStatus), this);
	0AA8: call_method_return 0x46B9C0 struct [CCamera] num_params 0 pop 0 func_ret [int]

	// CCamera::Get_Just_Switched_Status
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::Get_Just_Switched_Status), this);
	0AA8: call_method_return 0x46B9B0 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::Init
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Init), this);

	// CCamera::InitialiseCameraForDebugMode
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::InitialiseCameraForDebugMode), this);

	// CCamera::IsItTimeForNewcam
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, int, int>(gaddrof(CCamera::IsItTimeForNewcam), this, obbeMode, time);
	0AA8: call_method_return 0x46BF10 struct [CCamera] num_params 2 pop 0 [obbeMode] [time] func_ret [bool]

	// CCamera::IsSphereVisible
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CVector const &, float, CMatrix const *>(gaddrof_o(CCamera::IsSphereVisible, bool (CCamera::*)(CVector const &, float, CMatrix const *)), this, center, radius, matrix);
	0AA8: call_method_return 0x43D3B0 struct [CCamera] num_params 3 pop 0 [center] [radius] [matrix] func_ret [bool]

	// CCamera::IsSphereVisible
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CVector const &, float>(gaddrof_o(CCamera::IsSphereVisible, bool (CCamera::*)(CVector const &, float)), this, center, radius);
	0AA8: call_method_return 0x43D3B0 struct [CCamera] num_params 2 pop 0 [center] [radius] func_ret [bool]

	// CCamera::LoadPathSplines
	// plugin::CallMethodDynGlobal<CCamera *, int>(gaddrof(CCamera::LoadPathSplines), this, file);

	// CCamera::LoadTrainCamNodes
	// plugin::CallMethodDynGlobal<CCamera *, char const *>(gaddrof(CCamera::LoadTrainCamNodes), this, name);

	// CCamera::Process
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Process), this);

	// CCamera::ProcessFade
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessFade), this);

	// CCamera::ProcessMusicFade
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessMusicFade), this);

	// CCamera::ProcessObbeCinemaCameraCar
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraCar), this);

	// CCamera::ProcessObbeCinemaCameraPed
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraPed), this);

	// CCamera::ProcessWideScreenOn
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessWideScreenOn), this);

	// CCamera::Process_Train_Camera_Control
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Process_Train_Camera_Control), this);

	// CCamera::RenderMotionBlur
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::RenderMotionBlur), this);

	// CCamera::Restore
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Restore), this);

	// CCamera::RestoreWithJumpCut
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::RestoreWithJumpCut), this);

	// CCamera::SetCamCutSceneOffSet
	// plugin::CallMethodDynGlobal<CCamera *, CVector const &>(gaddrof(CCamera::SetCamCutSceneOffSet), this, pos);

	// CCamera::SetCamPositionForFixedMode
	// plugin::CallMethodDynGlobal<CCamera *, CVector const &, CVector const &>(gaddrof(CCamera::SetCamPositionForFixedMode), this, source, offset);

	// CCamera::SetCameraDirectlyBehindForFollowPed_CamOnAString
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetCameraDirectlyBehindForFollowPed_CamOnAString), this);

	// CCamera::SetCameraDirectlyInFrontForFollowPed_CamOnAString
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetCameraDirectlyInFrontForFollowPed_CamOnAString), this);

	// CCamera::SetFadeColour
	// plugin::CallMethodDynGlobal<CCamera *, unsigned char, unsigned char, unsigned char>(gaddrof(CCamera::SetFadeColour), this, red, green, blue);

	// CCamera::SetMotionBlur
	// plugin::CallMethodDynGlobal<CCamera *, int, int, int, int, int>(gaddrof(CCamera::SetMotionBlur), this, red, green, blue, value, type);

	// CCamera::SetMotionBlurAlpha
	// plugin::CallMethodDynGlobal<CCamera *, int>(gaddrof(CCamera::SetMotionBlurAlpha), this, alpha);

	// CCamera::SetNearClipScript
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof(CCamera::SetNearClipScript), this, clip);

	// CCamera::SetNewPlayerWeaponMode
	// plugin::CallMethodDynGlobal<CCamera *, short, short, short>(gaddrof(CCamera::SetNewPlayerWeaponMode), this, mode, minZoom, maxZoom);

	// CCamera::SetParametersForScriptInterpolation
	// plugin::CallMethodDynGlobal<CCamera *, float, float, unsigned int>(gaddrof(CCamera::SetParametersForScriptInterpolation), this, stopMoving, catchUp, time);

	// CCamera::SetPercentAlongCutScene
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof(CCamera::SetPercentAlongCutScene), this, percent);

	// CCamera::SetRwCamera
	// plugin::CallMethodDynGlobal<CCamera *, RwCamera *>(gaddrof(CCamera::SetRwCamera), this, rwCamera);

	// CCamera::SetWideScreenOff
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetWideScreenOff), this);

	// CCamera::SetWideScreenOn
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetWideScreenOn), this);

	// CCamera::SetZoomValueCamStringScript
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::SetZoomValueCamStringScript), this, dist);

	// CCamera::SetZoomValueFollowPedScript
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::SetZoomValueFollowPedScript), this, dist);

	// CCamera::StartTransition
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::StartTransition), this, newMode);

	// CCamera::StartTransitionWhenNotFinishedInter
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::StartTransitionWhenNotFinishedInter), this, mode);

	// CCamera::StoreValuesDuringInterPol
	// plugin::CallMethodDynGlobal<CCamera *, CVector &, CVector &, CVector &, float *>(gaddrof(CCamera::StoreValuesDuringInterPol), this, source, target, up, fov);

	// CCamera::TakeControl
	// plugin::CallMethodDynGlobal<CCamera *, CEntity *, short, short, int>(gaddrof(CCamera::TakeControl), this, target, mode, typeOfSwitch, controller);

	// CCamera::TakeControlNoEntity
	// plugin::CallMethodDynGlobal<CCamera *, CVector const &, short, int>(gaddrof(CCamera::TakeControlNoEntity), this, pos, typeOfSwitch, controller);

	// CCamera::TakeControlWithSpline
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::TakeControlWithSpline), this, typeOfSwitch);

	// CCamera::TryToStartNewCamMode
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, int>(gaddrof(CCamera::TryToStartNewCamMode), this, obbeMode);
	0AA8: call_method_return 0x471650 struct [CCamera] num_params 1 pop 0 [obbeMode] func_ret [bool]

	// CCamera::UpdateAimingCoors
	// plugin::CallMethodDynGlobal<CCamera *, CVector const &>(gaddrof(CCamera::UpdateAimingCoors), this, coors);

	// CCamera::UpdateSoundDistances
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::UpdateSoundDistances), this);

	// CCamera::UpdateTargetEntity
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::UpdateTargetEntity), this);

	// CamShakeNoPos
	// plugin::CallDynGlobal<CCamera *, float>(gaddrof(CamShakeNoPos), camera, strength);

plugin_III\game_III\CCarAI.cpp:

	// CCarAI::AddAmbulanceOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddAmbulanceOccupants), vehicle);

	// CCarAI::AddFiretruckOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddFiretruckOccupants), vehicle);

	// CCarAI::AddPoliceCarOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddPoliceCarOccupants), vehicle);

	// CCarAI::CarHasReasonToStop
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::CarHasReasonToStop), vehicle);

	// CCarAI::FindPoliceCarMissionForWantedLevel
	// plugin::CallAndReturnDynGlobal<eCarMission>(gaddrof(CCarAI::FindPoliceCarMissionForWantedLevel));

	// CCarAI::FindPoliceCarSpeedForWantedLevel
	// plugin::CallAndReturnDynGlobal<int, CVehicle *>(gaddrof(CCarAI::FindPoliceCarSpeedForWantedLevel), vehicle);

	// CCarAI::FindSwitchDistanceClose
	// plugin::CallAndReturnDynGlobal<float>(gaddrof(CCarAI::FindSwitchDistanceClose));

	// CCarAI::FindSwitchDistanceFar
	// plugin::CallAndReturnDynGlobal<float, CVehicle *>(gaddrof(CCarAI::FindSwitchDistanceFar), vehicle);

	// CCarAI::GetCarToGoToCoors
	// plugin::CallAndReturnDynGlobal<float, CVehicle *, CVector *>(gaddrof(CCarAI::GetCarToGoToCoors), vehicle, coors);

	// CCarAI::MakeWayForCarWithSiren
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::MakeWayForCarWithSiren), vehicle);

	// CCarAI::MellowOutChaseSpeed
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::MellowOutChaseSpeed), vehicle);

	// CCarAI::TellCarToBlockOtherCar
	// plugin::CallDynGlobal<CVehicle *, CVehicle *>(gaddrof(CCarAI::TellCarToBlockOtherCar), vehicle, blockVehicle);

	// CCarAI::TellCarToRamOtherCar
	// plugin::CallDynGlobal<CVehicle *, CVehicle *>(gaddrof(CCarAI::TellCarToRamOtherCar), vehicle, ramVehicle);

	// CCarAI::TellOccupantsToLeaveCar
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::TellOccupantsToLeaveCar), vehicle);

	// CCarAI::UpdateCarAI
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::UpdateCarAI), vehicle);

plugin_III\game_III\CCarCtrl.cpp:

	// CCarCtrl::AddToCarArray
	// plugin::CallDynGlobal<int, int>(gaddrof(CCarCtrl::AddToCarArray), id, vehicleClass);

	// CCarCtrl::ChooseCarModel
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CCarCtrl::ChooseCarModel), vehicleClass);

	// CCarCtrl::ChooseGangCarModel
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CCarCtrl::ChooseGangCarModel), gang);

	// CCarCtrl::ChooseModel
	// plugin::CallAndReturnDynGlobal<int, CZoneInfo *, CVector *, int *>(gaddrof(CCarCtrl::ChooseModel), info, pos, outVehicleClass);

	// CCarCtrl::ChoosePoliceCarModel
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CCarCtrl::ChoosePoliceCarModel));

	// CCarCtrl::CountCarsOfType
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CCarCtrl::CountCarsOfType), modelIndex);

	// CCarCtrl::DragCarToPoint
	// plugin::CallDynGlobal<CVehicle *, CVector *>(gaddrof(CCarCtrl::DragCarToPoint), vehicle, point);

	// CCarCtrl::FindAngleToWeaveThroughTraffic
	// plugin::CallAndReturnDynGlobal<float, CVehicle *, CPhysical *, float, float>(gaddrof(CCarCtrl::FindAngleToWeaveThroughTraffic), vehicle, target, angleToTarget, angleForward);

	// CCarCtrl::FindLinksToGoWithTheseNodes
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::FindLinksToGoWithTheseNodes), vehicle);

	// CCarCtrl::FindMaxSteerAngle
	// plugin::CallAndReturnDynGlobal<float, CVehicle *>(gaddrof(CCarCtrl::FindMaxSteerAngle), vehicle);

	// CCarCtrl::FindMaximumSpeedForThisCarInTraffic
	// plugin::CallAndReturnDynGlobal<float, CVehicle *>(gaddrof(CCarCtrl::FindMaximumSpeedForThisCarInTraffic), vehicle);

	// CCarCtrl::FindPathDirection
	// plugin::CallAndReturnDynGlobal<unsigned char, int, int, int>(gaddrof(CCarCtrl::FindPathDirection), prevNode, curNode, nextNode);

	// CCarCtrl::FindSpeedMultiplier
	// plugin::CallAndReturnDynGlobal<float, float, float, float, float>(gaddrof(CCarCtrl::FindSpeedMultiplier), angleChange, minAngle, maxAngle, coef);

	// CCarCtrl::GenerateOneEmergencyServicesCar
	// plugin::CallAndReturnDynGlobal<bool, unsigned int, CVector>(gaddrof(CCarCtrl::GenerateOneEmergencyServicesCar), modelIndex, point);

	// CCarCtrl::IsThisVehicleInteresting
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCarCtrl::IsThisVehicleInteresting), vehicle);

	// CCarCtrl::JoinCarWithRoadSystem
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::JoinCarWithRoadSystem), vehicle);

	// CCarCtrl::JoinCarWithRoadSystemGotoCoors
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *, CVector, bool>(gaddrof(CCarCtrl::JoinCarWithRoadSystemGotoCoors), vehicle, point, isProperNow);

	// CCarCtrl::MapCouldMoveInThisArea
	// plugin::CallAndReturnDynGlobal<bool, float, float>(gaddrof(CCarCtrl::MapCouldMoveInThisArea), x, y);

	// CCarCtrl::PickNextNodeAccordingStrategy
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCarCtrl::PickNextNodeAccordingStrategy), vehicle);

	// CCarCtrl::PickNextNodeRandomly
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::PickNextNodeRandomly), vehicle);

	// CCarCtrl::PickNextNodeToChaseCar
	// plugin::CallDynGlobal<CVehicle *, float, float, CVehicle *>(gaddrof(CCarCtrl::PickNextNodeToChaseCar), vehicle, targetX, targetY, target);

	// CCarCtrl::PickNextNodeToFollowPath
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCarCtrl::PickNextNodeToFollowPath), vehicle);

	// CCarCtrl::PossiblyRemoveVehicle
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::PossiblyRemoveVehicle), vehicle);

	// CCarCtrl::RegisterVehicleOfInterest
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::RegisterVehicleOfInterest), vehicle);

	// CCarCtrl::RemoveFromInterestingVehicleList
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::RemoveFromInterestingVehicleList), vehicle);

	// CCarCtrl::ScanForPedDanger
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::ScanForPedDanger), vehicle);

	// CCarCtrl::SlowCarDownForCarsSectorList
	// plugin::CallDynGlobal<CPtrList &, CVehicle *, float, float, float, float, float *, float>(gaddrof(CCarCtrl::SlowCarDownForCarsSectorList), list, vehicle, x_inf, y_inf, x_sup, y_sup, pSpeed, curSpeed);

	// CCarCtrl::SlowCarDownForOtherCar
	// plugin::CallDynGlobal<CEntity *, CVehicle *, float *, float>(gaddrof(CCarCtrl::SlowCarDownForOtherCar), entity, vehicle, pSpeed, curSpeed);

	// CCarCtrl::SlowCarDownForPedsSectorList
	// plugin::CallDynGlobal<CPtrList &, CVehicle *, float, float, float, float, float *, float>(gaddrof(CCarCtrl::SlowCarDownForPedsSectorList), list, vehicle, x_inf, y_inf, x_sup, y_sup, pSpeed, curSpeed);

	// CCarCtrl::SlowCarOnRailsDownForTrafficAndLights
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::SlowCarOnRailsDownForTrafficAndLights), vehicle);

	// CCarCtrl::SteerAIBoatWithPhysics
	// plugin::CallDynGlobal<CBoat *>(gaddrof(CCarCtrl::SteerAIBoatWithPhysics), boat);

	// CCarCtrl::SteerAIBoatWithPhysicsHeadingForTarget
	// plugin::CallDynGlobal<CBoat *, float, float, float *, float *, float *>(gaddrof(CCarCtrl::SteerAIBoatWithPhysicsHeadingForTarget), boat, targetX, targetY, steerAngle, gasPedal, breakPedal);

	// CCarCtrl::SteerAICarWithPhysics
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::SteerAICarWithPhysics), vehicle);

	// CCarCtrl::SteerAICarWithPhysicsFollowPath
	// plugin::CallDynGlobal<CVehicle *, float *, float *, float *, bool *>(gaddrof(CCarCtrl::SteerAICarWithPhysicsFollowPath), vehicle, steerAngle, gasPedal, breakPedal, bHandBrake);

	// CCarCtrl::SteerAICarWithPhysicsHeadingForTarget
	// plugin::CallDynGlobal<CVehicle *, CPhysical *, float, float, float *, float *, float *, bool *>(gaddrof(CCarCtrl::SteerAICarWithPhysicsHeadingForTarget), vehicle, target, targetX, targetY, steerAngle, gasPedal, breakPedal, bHandBrake);

	// CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget
	// plugin::CallDynGlobal<CVehicle *, float, float, float, float, float *, float *, float *, bool *>(gaddrof(CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget), vehicle, targetX, targetY, targetSpeedX, targetSpeedY, steerAngle, gasPedal, breakPedal, bHandBrake);

	// CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget_Stop
	// plugin::CallDynGlobal<CVehicle *, float, float, float, float, float *, float *, float *, bool *>(gaddrof(CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget_Stop), vehicle, targetX, targetY, targetSpeedX, targetSpeedY, steerAngle, gasPedal, breakPedal, bHandBrake);

	// CCarCtrl::SteerAICarWithPhysics_OnlyMission
	// plugin::CallDynGlobal<CVehicle *, float *, float *, float *, bool *>(gaddrof(CCarCtrl::SteerAICarWithPhysics_OnlyMission), vehicle, steerAngle, gasPedal, breakPedal, bHandBrake);

	// CCarCtrl::SwitchVehicleToRealPhysics
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::SwitchVehicleToRealPhysics), vehicle);

	// CCarCtrl::TestCollisionBetween2MovingRects
	// plugin::CallAndReturnDynGlobal<float, CVehicle *, CVehicle *, float, float, CVector *, CVector *, unsigned char>(gaddrof(CCarCtrl::TestCollisionBetween2MovingRects), vehicleA, vehicleB, projectionX, projectionY, pForwardA, pForwardB, id);

	// CCarCtrl::ThisRoadObjectCouldMove
	// plugin::CallAndReturnDynGlobal<bool, unsigned int>(gaddrof(CCarCtrl::ThisRoadObjectCouldMove), objectModelIndex);

	// CCarCtrl::UpdateCarCount
	// plugin::CallDynGlobal<CVehicle *, bool>(gaddrof(CCarCtrl::UpdateCarCount), vehicle, remove);

	// CCarCtrl::UpdateCarOnRails
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarCtrl::UpdateCarOnRails), vehicle);

	// CCarCtrl::WeaveForObject
	// plugin::CallDynGlobal<CEntity *, CVehicle *, float *, float *>(gaddrof(CCarCtrl::WeaveForObject), entity, vehicle, pAngleToWeaveLeft, pAngleToWeaveRight);

	// CCarCtrl::WeaveForOtherCar
	// plugin::CallDynGlobal<CEntity *, CVehicle *, float *, float *>(gaddrof(CCarCtrl::WeaveForOtherCar), entity, vehicle, pAngleToWeaveLeft, pAngleToWeaveRight);

	// CCarCtrl::WeaveForPed
	// plugin::CallDynGlobal<CEntity *, CVehicle *, float *, float *>(gaddrof(CCarCtrl::WeaveForPed), entity, vehicle, pAngleToWeaveLeft, pAngleToWeaveRight);

	// CCarCtrl::WeaveThroughCarsSectorList
	// plugin::CallDynGlobal<CPtrList &, CVehicle *, CPhysical *, float, float, float, float, float *, float *>(gaddrof(CCarCtrl::WeaveThroughCarsSectorList), list, vehicle, target, x_inf, y_inf, x_sup, y_sup, pAngleToWeaveLeft, pAngleToWeaveRight);

	// CCarCtrl::WeaveThroughObjectsSectorList
	// plugin::CallDynGlobal<CPtrList &, CVehicle *, float, float, float, float, float *, float *>(gaddrof(CCarCtrl::WeaveThroughObjectsSectorList), list, vehicle, x_inf, y_inf, x_sup, y_sup, pAngleToWeaveLeft, pAngleToWeaveRight);

	// CCarCtrl::WeaveThroughPedsSectorList
	// plugin::CallDynGlobal<CPtrList &, CVehicle *, CPhysical *, float, float, float, float, float *, float *>(gaddrof(CCarCtrl::WeaveThroughPedsSectorList), list, vehicle, target, x_inf, y_inf, x_sup, y_sup, pAngleToWeaveLeft, pAngleToWeaveRight);

plugin_III\game_III\CCarGenerator.cpp:

	// CCarGenerator::CalcNextGen
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CCarGenerator *>(gaddrof(CCarGenerator::CalcNextGen), this);
	0AA8: call_method_return 0x5426C0 struct [CCarGenerator] num_params 0 pop 0 func_ret [unsigned int]

	// CCarGenerator::CheckForBlockage
	// plugin::CallMethodAndReturnDynGlobal<bool, CCarGenerator *>(gaddrof(CCarGenerator::CheckForBlockage), this);
	0AA8: call_method_return 0x542DF0 struct [CCarGenerator] num_params 0 pop 0 func_ret [bool]

	// CCarGenerator::CheckIfWithinRangeOfAnyPlayers
	// plugin::CallMethodAndReturnDynGlobal<bool, CCarGenerator *>(gaddrof(CCarGenerator::CheckIfWithinRangeOfAnyPlayers), this);
	0AA8: call_method_return 0x542E50 struct [CCarGenerator] num_params 0 pop 0 func_ret [bool]

	// CCarGenerator::DoInternalProcessing
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::DoInternalProcessing), this);

	// CCarGenerator::Process
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::Process), this);

	// CCarGenerator::Setup
	// plugin::CallMethodDynGlobal<CCarGenerator *, float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short>(gaddrof(CCarGenerator::Setup), this, x, y, z, angle, modelId, primaryColor, secondaryColor, forceSpawn, alarm, doorLock, minDelay, maxDelay);

	// CCarGenerator::SwitchOff
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::SwitchOff), this);

	// CCarGenerator::SwitchOn
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::SwitchOn), this);

plugin_III\game_III\CCivilianPed.cpp:

	// CCivilianPed::ProcessControl
	// plugin::CallVirtualMethod<8, CCivilianPed *>(this);

	// CCivilianPed::CivilianAI
	// plugin::CallMethodDynGlobal<CCivilianPed *>(gaddrof(CCivilianPed::CivilianAI), this);

plugin_III\game_III\CClock.cpp:

	// CClock::GetGameClockMinutesUntil
	// plugin::CallAndReturnDynGlobal<int, unsigned char, unsigned char>(gaddrof(CClock::GetGameClockMinutesUntil), hours, minutes);

	// CClock::GetIsTimeInRange
	// plugin::CallAndReturnDynGlobal<bool, unsigned char, unsigned char>(gaddrof(CClock::GetIsTimeInRange), hourA, hourB);

	// CClock::Initialise
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CClock::Initialise), milisecondsPerGameMinute);

	// CClock::SetGameClock
	// plugin::CallDynGlobal<unsigned char, unsigned char>(gaddrof(CClock::SetGameClock), hours, minutes);

plugin_III\game_III\CClouds.cpp:

	// CClouds::RenderBackground
	// plugin::CallDynGlobal<short, short, short, short, short, short, short>(gaddrof(CClouds::RenderBackground), redTop, greenTop, blueTop, redBottom, greenBottom, blueBottom, alpha);

	// UseDarkBackground
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(UseDarkBackground));

plugin_III\game_III\CClumpModelInfo.cpp:

	// CClumpModelInfo::DeleteRwObject
	// plugin::CallVirtualMethod<2, CClumpModelInfo *>(this);

	// *CClumpModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 3, CClumpModelInfo *>(this);

	// *CClumpModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 4, CClumpModelInfo *, RwMatrix *>(this, matrix);

	// *CClumpModelInfo::GetRwObject
	// plugin::CallVirtualMethodAndReturn<RwObject *, 5, CClumpModelInfo *>(this);

	// CClumpModelInfo::SetClump
	// plugin::CallVirtualMethod<6, CClumpModelInfo *, RpClump *>(this, clump);

	// CClumpModelInfo::SetFrameIds
	// plugin::CallMethodDynGlobal<CClumpModelInfo *, RwObjectNameIdAssocation *>(gaddrof(CClumpModelInfo::SetFrameIds), this, id);

	// CClumpModelInfo::FillFrameArray
	// plugin::CallDynGlobal<RpClump *, RwFrame **>(gaddrof(CClumpModelInfo::FillFrameArray), clump, frames);

	// *CClumpModelInfo::FillFrameArrayCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(CClumpModelInfo::FillFrameArrayCB), frame, data);

	// *CClumpModelInfo::FindFrameFromIdCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(CClumpModelInfo::FindFrameFromIdCB), frame, data);

	// *CClumpModelInfo::FindFrameFromNameCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(CClumpModelInfo::FindFrameFromNameCB), frame, data);

	// *CClumpModelInfo::FindFrameFromNameWithoutIdCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(CClumpModelInfo::FindFrameFromNameWithoutIdCB), frame, data);

	// *CClumpModelInfo::GetFrameFromId
	// plugin::CallAndReturnDynGlobal<RwFrame *, RpClump *, int>(gaddrof(CClumpModelInfo::GetFrameFromId), clump, id);

	// *CClumpModelInfo::SetAtomicRendererCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CClumpModelInfo::SetAtomicRendererCB), atomic, data);

plugin_III\game_III\CColBox.cpp:

	// CColBox::operator=
	// plugin::CallMethodDynGlobal<CColBox *, CColBox const &>(gaddrof(CColBox::operator=), this, right);

	// CColBox::Set
	// plugin::CallMethodDynGlobal<CColBox *, CVector &, CVector &, unsigned char, unsigned char>(gaddrof(CColBox::Set), this, min, max, material, flag);

plugin_III\game_III\CColLine.cpp:

	// CColLine::Set
	// plugin::CallMethodDynGlobal<CColLine *, CVector const &, CVector const &>(gaddrof(CColLine::Set), this, start, end);

plugin_III\game_III\CCollision.cpp:

	// CCollision::Init
	// plugin::Call<0x40B380>();
	0AA5: call_function 0x40B380 num_params 0 pop 0

	// CCollision::Shutdown
	// plugin::Call<0x40B3A0>();
	0AA5: call_function 0x40B3A0 num_params 0 pop 0

	// CCollision::Update
	// plugin::Call<0x40B3B0>();
	0AA5: call_function 0x40B3B0 num_params 0 pop 0

	// CCollision::LoadCollisionScreen
	// plugin::Call<0x40B580, eLevelName>(levelName);
	0AA5: call_function 0x40B580 num_params 1 pop 1 [levelName]

	// CCollision::LoadCollisionWhenINeedIt
	// plugin::Call<0x40B5B0, bool>(arg0);
	0AA5: call_function 0x40B5B0 num_params 1 pop 1 [arg0]

	// CCollision::SortOutCollisionAfterLoad
	// plugin::Call<0x40B900>();
	0AA5: call_function 0x40B900 num_params 0 pop 0

	// CCollision::CalculateTrianglePlanes
	// plugin::Call<0x40B960, CColModel*>(colModel);
	0AA5: call_function 0x40B960 num_params 1 pop 1 [colModel]

	// CCollision::ProcessSphereSphere
	// plugin::CallAndReturn<bool, 0x40B9F0, CColSphere const&, CColSphere const&, CColPoint&, float&>(sphere1, sphere2, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x40B9F0 num_params 4 pop 4 [sphere1] [sphere2] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestSphereBox
	// plugin::CallAndReturn<bool, 0x40BB70, CColSphere const&, CColBox const&>(sphere, box);
	0AA7: call_function_return 0x40BB70 num_params 2 pop 2 [sphere] [box] func_ret [bool]

	// CCollision::ProcessSphereBox
	// plugin::CallAndReturn<bool, 0x40BC00, CColSphere const&, CColBox const&, CColPoint&, float&>(sphere, box, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x40BC00 num_params 4 pop 4 [sphere] [box] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestSphereTriangle
	// plugin::CallAndReturn<bool, 0x40C580, CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&>(sphere, verts, tri, triPlane);
	0AA7: call_function_return 0x40C580 num_params 4 pop 4 [sphere] [verts] [tri] [triPlane] func_ret [bool]

	// CCollision::ProcessSphereTriangle
	// plugin::CallAndReturn<bool, 0x40CE30, CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&>(sphere, verts, tri, triPlane, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x40CE30 num_params 6 pop 6 [sphere] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestLineSphere
	// plugin::CallAndReturn<bool, 0x40DAA0, CColLine const&, CColSphere const&>(colLine, sphere);
	0AA7: call_function_return 0x40DAA0 num_params 2 pop 2 [colLine] [sphere] func_ret [bool]

	// CCollision::DistToLine
	// plugin::CallAndReturn<float, 0x40DC70, CVector const*, CVector const*, CVector const*>(lineStart, lineEnd, point);
	0AA7: call_function_return 0x40DC70 num_params 3 pop 3 [lineStart] [lineEnd] [point] func_ret [float]

	// CCollision::ProcessLineSphere
	// plugin::CallAndReturn<bool, 0x40DE80, CColLine const&, CColSphere const&, CColPoint&, float&>(colLine, sphere, colPoint, depth);
	0AA7: call_function_return 0x40DE80 num_params 4 pop 4 [colLine] [sphere] [colPoint] [depth] func_ret [bool]

	// CCollision::TestLineBox
	// plugin::CallAndReturn<bool, 0x40E130, CColLine const&, CColBox const&>(colLine, colBox);
	0AA7: call_function_return 0x40E130 num_params 2 pop 2 [colLine] [colBox] func_ret [bool]

	// CCollision::TestVerticalLineBox
	// plugin::CallAndReturn<bool, 0x40E5C0, CColLine const&, CColBox const&>(colLine, colBox);
	0AA7: call_function_return 0x40E5C0 num_params 2 pop 2 [colLine] [colBox] func_ret [bool]

	// CCollision::ProcessLineBox
	// plugin::CallAndReturn<bool, 0x40E670, CColLine const&, CColBox const&, CColPoint&, float&>(colLine, colBox, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x40E670 num_params 4 pop 4 [colLine] [colBox] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestLineTriangle
	// plugin::CallAndReturn<bool, 0x40EC10, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&>(colLine, verts, tri, triPlane);
	0AA7: call_function_return 0x40EC10 num_params 4 pop 4 [colLine] [verts] [tri] [triPlane] func_ret [bool]

	// CCollision::ProcessLineTriangle
	// plugin::CallAndReturn<bool, 0x40F140, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&>(colLine, verts, tri, triPlane, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x40F140 num_params 6 pop 6 [colLine] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestLineOfSight
	// plugin::CallAndReturn<bool, 0x40F720, CColLine const&, CMatrix const&, CColModel&, bool>(colLine, transform, colModel, doSeeThroughCheck);
	0AA7: call_function_return 0x40F720 num_params 4 pop 4 [colLine] [transform] [colModel] [doSeeThroughCheck] func_ret [bool]

	// CCollision::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x40F910, CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool>(colLine, transform, colModel, colPoint, maxTouchDistance, doSeeThroughCheck);
	0AA7: call_function_return 0x40F910 num_params 6 pop 6 [colLine] [transform] [colModel] [colPoint] [maxTouchDistance] [doSeeThroughCheck] func_ret [bool]

	// CCollision::ProcessVerticalLineTriangle
	// plugin::CallAndReturn<bool, 0x40FB50, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&, CStoredCollPoly*>(colLine, verts, tri, triPlane, colPoint, maxTouchDistance, colPoly);
	0AA7: call_function_return 0x40FB50 num_params 7 pop 7 [colLine] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] [colPoly] func_ret [bool]

	// CCollision::ProcessVerticalLine
	// plugin::CallAndReturn<bool, 0x410120, CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool, CStoredCollPoly*>(colLine, transform, colModel, colPoint, maxTouchDistance, doSeeThroughCheck, colPoly);
	0AA7: call_function_return 0x410120 num_params 7 pop 7 [colLine] [transform] [colModel] [colPoint] [maxTouchDistance] [doSeeThroughCheck] [colPoly] func_ret [bool]

	// CCollision::IsStoredPolyStillValidVerticalLine
	// plugin::CallAndReturn<bool, 0x4105A0, CVector const&, float, CColPoint&, CStoredCollPoly*>(lineOrigin, lineDist, colPoint, colPoly);
	0AA7: call_function_return 0x4105A0 num_params 4 pop 4 [lineOrigin] [lineDist] [colPoint] [colPoly] func_ret [bool]

	// CCollision::ProcessColModels
	// plugin::CallAndReturn<int, 0x410BE0, CMatrix const&, CColModel&, CMatrix const&, CColModel&, CColPoint*, CColPoint*, float*>(transform1, colModel1, transform2, colModel2, colPoint1, colPoint2, maxTouchDistance);
	0AA7: call_function_return 0x410BE0 num_params 7 pop 7 [transform1] [colModel1] [transform2] [colModel2] [colPoint1] [colPoint2] [maxTouchDistance] func_ret [int]

plugin_III\game_III\CColModel.cpp:

	// CColModel::CColModel
	// plugin::CallMethodDynGlobal<CColModel *>(ctor_gaddr(CColModel), this);

	// CColModel::~CColModel
	// plugin::CallMethodDynGlobal<CColModel *>(dtor_gaddr(CColModel), this);

	// CColModel::operator=
	// plugin::CallMethodDynGlobal<CColModel *, CColModel const &>(gaddrof_o(CColModel::operator=, void (CColModel::*)(CColModel const &)), this, right);

	// CColModel::CalculateTrianglePlanes
	// plugin::CallMethodDynGlobal<CColModel *>(gaddrof(CColModel::CalculateTrianglePlanes), this);

	// *CColModel::GetLinkPtr
	// plugin::CallMethodAndReturnDynGlobal<CLink<CColModel *> *, CColModel *>(gaddrof(CColModel::GetLinkPtr), this);
	0AA8: call_method_return 0x411D60 struct [*CColModel] num_params 0 pop 0 func_ret [CLink<CColModel *> *]

	// CColModel::GetTrianglePoint
	// plugin::CallMethodDynGlobal<CColModel *, CVector &, int>(gaddrof(CColModel::GetTrianglePoint), this, outVec, vertId);

	// CColModel::RemoveCollisionVolumes
	// plugin::CallMethodDynGlobal<CColModel *>(gaddrof(CColModel::RemoveCollisionVolumes), this);

	// CColModel::RemoveTrianglePlanes
	// plugin::CallMethodDynGlobal<CColModel *>(gaddrof(CColModel::RemoveTrianglePlanes), this);

	// CColModel::SetLinkPtr
	// plugin::CallMethodDynGlobal<CColModel *, CLink<CColModel *> *>(gaddrof(CColModel::SetLinkPtr), this, link);

plugin_III\game_III\CColSphere.cpp:

	// CColSphere::CColSphere
	// plugin::CallMethodDynGlobal<CColSphere *>(ctor_gaddr(CColSphere), this);

	// CColSphere::Set
	// plugin::CallMethodDynGlobal<CColSphere *, float, CVector &, unsigned char, unsigned char>(gaddrof(CColSphere::Set), this, radius, center, material, flag);

plugin_III\game_III\CColTriangle.cpp:

	// CColTriangle::Set
	// plugin::CallMethodDynGlobal<CColTriangle *, CompressedVector const *, int, int, int, unsigned char, unsigned char>(gaddrof(CColTriangle::Set), this, verts, vertA, vertB, vertC, material, flag);

plugin_III\game_III\CColTrianglePlane.cpp:

	// CColTrianglePlane::GetNormal
	// plugin::CallMethodDynGlobal<CColTrianglePlane *, CVector &>(gaddrof(CColTrianglePlane::GetNormal), this, point);

	// CColTrianglePlane::Set
	// plugin::CallMethodDynGlobal<CColTrianglePlane *, CompressedVector const *, CColTriangle &>(gaddrof(CColTrianglePlane::Set), this, verts, tri);

plugin_III\game_III\CControllerState.cpp:

	// CControllerState::Clear
	// plugin::CallMethod<0x4916C0, CControllerState *>(this);
	0AA6: call_method 0x4916C0 struct [CControllerState] num_params 0 pop 0

plugin_III\game_III\CCopPed.cpp:

	// CCopPed::ProcessControl
	// plugin::CallVirtualMethod<8, CCopPed *>(this);

	// CCopPed::ArrestPlayer
	// plugin::CallMethodDynGlobal<CCopPed *>(gaddrof(CCopPed::ArrestPlayer), this);

	// CCopPed::ClearPursuit
	// plugin::CallMethodDynGlobal<CCopPed *>(gaddrof(CCopPed::ClearPursuit), this);

	// CCopPed::CopAI
	// plugin::CallMethodDynGlobal<CCopPed *>(gaddrof(CCopPed::CopAI), this);

	// CCopPed::ScanForCrimes
	// plugin::CallMethodDynGlobal<CCopPed *>(gaddrof(CCopPed::ScanForCrimes), this);

	// CCopPed::SetArrestPlayer
	// plugin::CallMethodDynGlobal<CCopPed *, CPed *>(gaddrof(CCopPed::SetArrestPlayer), this, player);

	// CCopPed::SetPursuit
	// plugin::CallMethodDynGlobal<CCopPed *, bool>(gaddrof(CCopPed::SetPursuit), this, ignoreCopLimit);

plugin_III\game_III\CCoronas.cpp:

	// CCoronas::RegisterCorona
	// plugin::CallDynGlobal<unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const &, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float>(gaddrof_o(CCoronas::RegisterCorona, void (*)(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const &, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float)), id, red, green, blue, alpha, coors, size, drawDist, coronaType, flareType, reflection, LOScheck, drawStreak, someAngle);

	// CCoronas::RegisterCorona
	// plugin::CallDynGlobal<unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const &, float, float, RwTexture *, unsigned char, unsigned char, unsigned char, unsigned char, float>(gaddrof_o(CCoronas::RegisterCorona, void (*)(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const &, float, float, RwTexture *, unsigned char, unsigned char, unsigned char, unsigned char, float)), id, red, green, blue, alpha, coors, size, drawDist, texture, flareType, reflection, LOScheck, drawStreak, someAngle);

	// CCoronas::UpdateCoronaCoors
	// plugin::CallDynGlobal<unsigned int, CVector const &, float, float>(gaddrof(CCoronas::UpdateCoronaCoors), id, coors, drawDist, someAngle);

plugin_III\game_III\CCrane.cpp:

	// CCrane::CalcHookCoordinates
	// plugin::CallMethodDynGlobal<CCrane *, float *, float *, float *>(gaddrof(CCrane::CalcHookCoordinates), this, pX, pY, pZ);

	// CCrane::DoesCranePickUpThisCarType
	// plugin::CallMethodAndReturnDynGlobal<bool, CCrane *, unsigned int>(gaddrof(CCrane::DoesCranePickUpThisCarType), this, vehicleModelIndex);
	0AA8: call_method_return 0x544A90 struct [CCrane] num_params 1 pop 0 [vehicleModelIndex] func_ret [bool]

	// CCrane::FindCarInSectorList
	// plugin::CallMethodDynGlobal<CCrane *, CPtrList *>(gaddrof(CCrane::FindCarInSectorList), this, list);

	// CCrane::FindParametersForTarget
	// plugin::CallMethodDynGlobal<CCrane *, float, float, float, float *, float *, float *>(gaddrof(CCrane::FindParametersForTarget), this, x, y, z, pAngle, pDistance, pHeight);

	// CCrane::GoTowardsHeightTarget
	// plugin::CallMethodAndReturnDynGlobal<bool, CCrane *, float, float>(gaddrof(CCrane::GoTowardsHeightTarget), this, targetHeight, speedMultiplier);
	0AA8: call_method_return 0x544E50 struct [CCrane] num_params 2 pop 0 [targetHeight] [speedMultiplier] func_ret [bool]

	// CCrane::GoTowardsTarget
	// plugin::CallMethodAndReturnDynGlobal<bool, CCrane *, float, float, float, float>(gaddrof(CCrane::GoTowardsTarget), this, angleToTarget, distanceToTarget, targetHeight, speedMultiplier);
	0AA8: call_method_return 0x544C00 struct [CCrane] num_params 4 pop 0 [angleToTarget] [distanceToTarget] [targetHeight] [speedMultiplier] func_ret [bool]

	// CCrane::RotateCarriedCarProperly
	// plugin::CallMethodAndReturnDynGlobal<bool, CCrane *>(gaddrof(CCrane::RotateCarriedCarProperly), this);
	0AA8: call_method_return 0x544700 struct [CCrane] num_params 0 pop 0 func_ret [bool]

	// CCrane::SetHookMatrix
	// plugin::CallMethodDynGlobal<CCrane *>(gaddrof(CCrane::SetHookMatrix), this);

	// CCrane::Update
	// plugin::CallMethodDynGlobal<CCrane *>(gaddrof(CCrane::Update), this);

plugin_III\game_III\CCranes.cpp:

	// CCranes::ActivateCrane
	// plugin::CallDynGlobal<float, float, float, float, float, float, float, float, bool, bool, float, float>(gaddrof(CCranes::ActivateCrane), infX, supX, infY, supY, dropOffX, dropOffY, dropOffZ, heading, isCrusher, isMilitary, posX, posY);

	// CCranes::AddThisOneCrane
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CCranes::AddThisOneCrane), entity);

	// CCranes::DeActivateCrane
	// plugin::CallDynGlobal<float, float>(gaddrof(CCranes::DeActivateCrane), x, y);

	// CCranes::DoesMilitaryCraneHaveThisOneAlready
	// plugin::CallAndReturnDynGlobal<bool, unsigned int>(gaddrof(CCranes::DoesMilitaryCraneHaveThisOneAlready), vehicleModelIndex);

	// CCranes::HaveAllCarsBeenCollectedByMilitaryCrane
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CCranes::HaveAllCarsBeenCollectedByMilitaryCrane));

	// CCranes::IsThisCarBeingCarriedByAnyCrane
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCranes::IsThisCarBeingCarriedByAnyCrane), vehicle);

	// CCranes::IsThisCarBeingTargettedByAnyCrane
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCranes::IsThisCarBeingTargettedByAnyCrane), vehicle);

	// CCranes::IsThisCarPickedUp
	// plugin::CallAndReturnDynGlobal<bool, float, float, CVehicle *>(gaddrof(CCranes::IsThisCarPickedUp), x, y, vehicle);

	// CCranes::RegisterCarForMilitaryCrane
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CCranes::RegisterCarForMilitaryCrane), vehicleModelIndex);

	// CCranes::Save
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CCranes::Save), buf, size);

	// CranesLoad
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CranesLoad), buf, size);

plugin_III\game_III\CCredits.cpp:

	// CCredits::AreCreditsDone
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CCredits::AreCreditsDone));

	// CCredits::PrintCreditSpace
	// plugin::CallDynGlobal<float, unsigned int *>(gaddrof(CCredits::PrintCreditSpace), space, line);

	// CCredits::PrintCreditText
	// plugin::CallDynGlobal<float, float, wchar_t *, unsigned int *, float>(gaddrof(CCredits::PrintCreditText), scaleX, scaleY, text, lineOffset, scrollOffset);

plugin_III\game_III\CCurrentVehicle.cpp:

	// CCurrentVehicle::Display
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(gaddrof(CCurrentVehicle::Display), this);

	// CCurrentVehicle::Init
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(gaddrof(CCurrentVehicle::Init), this);

	// CCurrentVehicle::Process
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(gaddrof(CCurrentVehicle::Process), this);

plugin_III\game_III\CCurves.cpp:

	// CCurves::CalcCurvePoint
	// plugin::CallDynGlobal<CVector *, CVector *, CVector *, CVector *, float, int, CVector *, CVector *>(gaddrof(CCurves::CalcCurvePoint), pPos1, pPos2, pDir1, pDir2, between, timeOnCurve, pOutPos, pOutDir);

	// CCurves::CalcSpeedScaleFactor
	// plugin::CallAndReturnDynGlobal<float, CVector *, CVector *, float, float, float, float>(gaddrof(CCurves::CalcSpeedScaleFactor), pPoint1, pPoint2, dir1X, dir1Y, dir2X, dir2Y);

plugin_III\game_III\CCutsceneHead.cpp:

	// CCutsceneHead::CreateRwObject
	// plugin::CallVirtualMethod<5, CCutsceneHead *>(this);

	// CCutsceneHead::DeleteRwObject
	// plugin::CallVirtualMethod<6, CCutsceneHead *>(this);

	// CCutsceneHead::ProcessControl
	// plugin::CallVirtualMethod<8, CCutsceneHead *>(this);

	// CCutsceneHead::Render
	// plugin::CallVirtualMethod<13, CCutsceneHead *>(this);

	// CCutsceneHead::PlayAnimation
	// plugin::CallMethodDynGlobal<CCutsceneHead *, char const *>(gaddrof(CCutsceneHead::PlayAnimation), this, name);

plugin_III\game_III\CCutsceneMgr.cpp:

	// CCutsceneMgr::AddCutsceneHead
	// plugin::CallAndReturn<CCutsceneHead*, 0x404CD0, CObject*, int>(object, modelIndex);
	0AA7: call_function_return 0x404CD0 num_params 2 pop 2 [object] [modelIndex] func_ret [CCutsceneHead*]

	// CCutsceneMgr::CreateCutsceneObject
	// plugin::CallAndReturn<CCutsceneObject*, 0x404BE0, int>(modelIndex);
	0AA7: call_function_return 0x404BE0 num_params 1 pop 1 [modelIndex] func_ret [CCutsceneObject*]

	// CCutsceneMgr::DeleteCutsceneData
	// plugin::Call<0x4048E0>();
	0AA5: call_function 0x4048E0 num_params 0 pop 0

	// CCutsceneMgr::FinishCutscene
	// plugin::Call<0x405140>();
	0AA5: call_function 0x405140 num_params 0 pop 0

	// CCutsceneMgr::GetCutsceneTimeInMilleseconds
	// plugin::CallAndReturn<int, 0x4051B0>();
	0AA7: call_function_return 0x4051B0 num_params 0 pop 0 func_ret [int]

	// CCutsceneMgr::HasCutsceneFinished
	// plugin::CallAndReturn<bool, 0x4051F0>();
	0AA7: call_function_return 0x4051F0 num_params 0 pop 0 func_ret [bool]

	// CCutsceneMgr::Initialise
	// plugin::Call<0x4045D0>();
	0AA5: call_function 0x4045D0 num_params 0 pop 0

	// CCutsceneMgr::LoadCutsceneData
	// plugin::Call<0x404650, char const*>(cutsceneName);
	0AA5: call_function 0x404650 num_params 1 pop 1 [cutsceneName]

	// CCutsceneMgr::SetCutsceneAnim
	// plugin::Call<0x404D20, char const*, CObject*>(animName, object);
	0AA5: call_function 0x404D20 num_params 2 pop 2 [animName] [object]

	// CCutsceneMgr::SetHeadAnim
	// plugin::Call<0x404D80, char const*, CObject*>(animName, object);
	0AA5: call_function 0x404D80 num_params 2 pop 2 [animName] [object]

	// CCutsceneMgr::SetupCutsceneToStart
	// plugin::Call<0x404DC0>();
	0AA5: call_function 0x404DC0 num_params 0 pop 0

	// CCutsceneMgr::Shutdown
	// plugin::Call<0x404630>();
	0AA5: call_function 0x404630 num_params 0 pop 0

	// CCutsceneMgr::Update
	// plugin::Call<0x404EE0>();
	0AA5: call_function 0x404EE0 num_params 0 pop 0

	// FindCutsceneAudioTrackId
	// plugin::CallAndReturn<int, 0x404530, char const*>(cutsceneName);
	0AA7: call_function_return 0x404530 num_params 1 pop 1 [cutsceneName] func_ret [int]

plugin_III\game_III\CCutsceneObject.cpp:

	// CCutsceneObject::SetModelIndex
	// plugin::CallVirtualMethod<3, CCutsceneObject *, unsigned int>(this, modelIndex);

	// CCutsceneObject::ProcessControl
	// plugin::CallVirtualMethod<8, CCutsceneObject *>(this);

	// CCutsceneObject::PreRender
	// plugin::CallVirtualMethod<12, CCutsceneObject *>(this);

	// CCutsceneObject::Render
	// plugin::CallVirtualMethod<13, CCutsceneObject *>(this);

	// CCutsceneObject::SetupLighting
	// plugin::CallVirtualMethodAndReturn<bool, 14, CCutsceneObject *>(this);

	// CCutsceneObject::RemoveLighting
	// plugin::CallVirtualMethod<15, CCutsceneObject *, bool>(this, resetWorldColors);

plugin_III\game_III\CDamageManager.cpp:

	// CDamageManager::ApplyDamage
	// plugin::CallMethodAndReturnDynGlobal<bool, CDamageManager *, tComponent, float, float>(gaddrof(CDamageManager::ApplyDamage), this, component, damage, unused);
	0AA8: call_method_return 0x545A80 struct [CDamageManager] num_params 3 pop 0 [component] [damage] [unused] func_ret [bool]

	// CDamageManager::FuckCarCompletely
	// plugin::CallMethodDynGlobal<CDamageManager *>(gaddrof(CDamageManager::FuckCarCompletely), this);

	// CDamageManager::GetComponentGroup
	// plugin::CallMethodAndReturnDynGlobal<bool, CDamageManager *, tComponent, tComponentGroup *, unsigned char *>(gaddrof(CDamageManager::GetComponentGroup), this, component, group, subComp);
	0AA8: call_method_return 0x545790 struct [CDamageManager] num_params 3 pop 0 [component] [group] [subComp] func_ret [bool]

	// CDamageManager::GetDoorStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CDamageManager *, int>(gaddrof(CDamageManager::GetDoorStatus), this, door);
	0AA8: call_method_return 0x545930 struct [CDamageManager] num_params 1 pop 0 [door] func_ret [int]

	// CDamageManager::GetEngineStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CDamageManager *>(gaddrof(CDamageManager::GetEngineStatus), this);
	0AA8: call_method_return 0x545960 struct [CDamageManager] num_params 0 pop 0 func_ret [int]

	// CDamageManager::GetLightStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CDamageManager *, eLights>(gaddrof(CDamageManager::GetLightStatus), this, light);
	0AA8: call_method_return 0x545890 struct [CDamageManager] num_params 1 pop 0 [light] func_ret [int]

	// CDamageManager::GetPanelStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CDamageManager *, int>(gaddrof(CDamageManager::GetPanelStatus), this, panel);
	0AA8: call_method_return 0x5458E0 struct [CDamageManager] num_params 1 pop 0 [panel] func_ret [int]

	// CDamageManager::GetWheelStatus
	// plugin::CallMethodAndReturnDynGlobal<int, CDamageManager *, int>(gaddrof(CDamageManager::GetWheelStatus), this, wheel);
	0AA8: call_method_return 0x545910 struct [CDamageManager] num_params 1 pop 0 [wheel] func_ret [int]

	// CDamageManager::ProgressDoorDamage
	// plugin::CallMethodDynGlobal<CDamageManager *, unsigned char>(gaddrof(CDamageManager::ProgressDoorDamage), this, door);

	// CDamageManager::ProgressEngineDamage
	// plugin::CallMethodDynGlobal<CDamageManager *>(gaddrof(CDamageManager::ProgressEngineDamage), this);

	// CDamageManager::ProgressPanelDamage
	// plugin::CallMethodDynGlobal<CDamageManager *, unsigned char>(gaddrof(CDamageManager::ProgressPanelDamage), this, panel);

	// CDamageManager::ProgressWheelDamage
	// plugin::CallMethodDynGlobal<CDamageManager *, unsigned char>(gaddrof(CDamageManager::ProgressWheelDamage), this, wheel);

	// CDamageManager::ResetDamageStatus
	// plugin::CallMethodDynGlobal<CDamageManager *>(gaddrof(CDamageManager::ResetDamageStatus), this);

	// CDamageManager::SetDoorStatus
	// plugin::CallMethodDynGlobal<CDamageManager *, int, unsigned int>(gaddrof(CDamageManager::SetDoorStatus), this, door, status);

	// CDamageManager::SetEngineStatus
	// plugin::CallMethodDynGlobal<CDamageManager *, unsigned int>(gaddrof(CDamageManager::SetEngineStatus), this, status);

	// CDamageManager::SetLightStatus
	// plugin::CallMethodDynGlobal<CDamageManager *, eLights, unsigned int>(gaddrof(CDamageManager::SetLightStatus), this, light, status);

	// CDamageManager::SetPanelStatus
	// plugin::CallMethodDynGlobal<CDamageManager *, int, unsigned int>(gaddrof(CDamageManager::SetPanelStatus), this, panel, status);

	// CDamageManager::SetWheelStatus
	// plugin::CallMethodDynGlobal<CDamageManager *, int, unsigned int>(gaddrof(CDamageManager::SetWheelStatus), this, wheel, status);

plugin_III\game_III\CDarkel.cpp:

	// CDarkel::CalcFade
	// plugin::CallAndReturnDynGlobal<unsigned char, unsigned int, unsigned int, unsigned int>(gaddrof(CDarkel::CalcFade), time, min, max);

	// CDarkel::FrenzyOnGoing
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CDarkel::FrenzyOnGoing));

	// CDarkel::QueryModelsKilledByPlayer
	// plugin::CallAndReturnDynGlobal<unsigned short, int>(gaddrof(CDarkel::QueryModelsKilledByPlayer), modelId);

	// CDarkel::ReadStatus
	// plugin::CallAndReturnDynGlobal<eDarkelStatus>(gaddrof(CDarkel::ReadStatus));

	// CDarkel::RegisterCarBlownUpByPlayer
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CDarkel::RegisterCarBlownUpByPlayer), vehicle);

	// CDarkel::RegisterKillByPlayer
	// plugin::CallDynGlobal<CPed *, eWeaponType, bool>(gaddrof(CDarkel::RegisterKillByPlayer), ped, weaponType, headShot);

	// CDarkel::RegisterKillNotByPlayer
	// plugin::CallDynGlobal<CPed *, eWeaponType>(gaddrof(CDarkel::RegisterKillNotByPlayer), ped, weaponType);

	// CDarkel::StartFrenzy
	// plugin::CallDynGlobal<eWeaponType, int, unsigned short, int, wchar_t *, int, int, int, bool, bool>(gaddrof(CDarkel::StartFrenzy), weaponType, time, kill, model, text, model2, model3, model4, standardSound, headShot);

plugin_III\game_III\CDigitalClock.cpp:

	// CDigitalClock::Init
	// plugin::CallMethodDynGlobal<CDigitalClock *, CVector, float, float, unsigned char, unsigned char, unsigned char, float, float>(gaddrof(CDigitalClock::Init), this, pos, sizeX, sizeY, red, green, blue, drawDistance, scale);

	// CDigitalClock::Render
	// plugin::CallMethodDynGlobal<CDigitalClock *>(gaddrof(CDigitalClock::Render), this);

	// CDigitalClock::Update
	// plugin::CallMethodDynGlobal<CDigitalClock *>(gaddrof(CDigitalClock::Update), this);

	// *CDigitalClock::GetString
	// plugin::CallAndReturnDynGlobal<char const *>(gaddrof(CDigitalClock::GetString));

plugin_III\game_III\CDirectory.cpp:

	// CDirectory::AddItem
	// plugin::CallMethodDynGlobal<CDirectory *, CDirectory::DirectoryInfo const &>(gaddrof(CDirectory::AddItem), this, entry);

	// CDirectory::FindItem
	// plugin::CallMethodAndReturnDynGlobal<bool, CDirectory *, char const *, unsigned int &, unsigned int &>(gaddrof(CDirectory::FindItem), this, name, outOffset, outSize);
	0AA8: call_method_return 0x4736E0 struct [CDirectory] num_params 3 pop 0 [name] [outOffset] [outSize] func_ret [bool]

	// CDirectory::ReadDirFile
	// plugin::CallMethodDynGlobal<CDirectory *, char const *>(gaddrof(CDirectory::ReadDirFile), this, fileName);

	// CDirectory::WriteDirFile
	// plugin::CallMethodAndReturnDynGlobal<bool, CDirectory *, char const *>(gaddrof(CDirectory::WriteDirFile), this, fileName);
	0AA8: call_method_return 0x473690 struct [CDirectory] num_params 1 pop 0 [fileName] func_ret [bool]

plugin_III\game_III\cDMAudio.cpp:

	// cDMAudio::ChangeMusicMode
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::ChangeMusicMode), this, mode);

	// cDMAudio::CheckForAnAudioFileOnCD
	// plugin::CallMethodAndReturnDynGlobal<bool, cDMAudio *>(gaddrof(cDMAudio::CheckForAnAudioFileOnCD), this);
	0AA8: call_method_return 0x57CA70 struct [cDMAudio] num_params 0 pop 0 func_ret [bool]

	// cDMAudio::ClearMissionAudio
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::ClearMissionAudio), this);

	// cDMAudio::CreateEntity
	// plugin::CallMethodAndReturnDynGlobal<int, cDMAudio *, eAudioType, void *>(gaddrof(cDMAudio::CreateEntity), this, type, data);
	0AA8: call_method_return 0x57C7C0 struct [cDMAudio] num_params 2 pop 0 [type] [data] func_ret [int]

	// cDMAudio::CreateLoopingScriptObject
	// plugin::CallMethodAndReturnDynGlobal<int, cDMAudio *, cAudioScriptObject *>(gaddrof(cDMAudio::CreateLoopingScriptObject), this, object);
	0AA8: call_method_return 0x57CB00 struct [cDMAudio] num_params 1 pop 0 [object] func_ret [int]

	// cDMAudio::CreateOneShotScriptObject
	// plugin::CallMethodDynGlobal<cDMAudio *, cAudioScriptObject *>(gaddrof(cDMAudio::CreateOneShotScriptObject), this, object);

	// cDMAudio::DestroyAllGameCreatedEntities
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::DestroyAllGameCreatedEntities), this);

	// cDMAudio::DestroyEntity
	// plugin::CallMethodDynGlobal<cDMAudio *, int>(gaddrof(cDMAudio::DestroyEntity), this, audioEntity);

	// cDMAudio::DestroyLoopingScriptObject
	// plugin::CallMethodDynGlobal<cDMAudio *, int>(gaddrof(cDMAudio::DestroyLoopingScriptObject), this, audioEntity);

	// *cDMAudio::Get3DProviderName
	// plugin::CallMethodAndReturnDynGlobal<char *, cDMAudio *, unsigned char>(gaddrof(cDMAudio::Get3DProviderName), this, id);
	0AA8: call_method_return 0x57C970 struct [*cDMAudio] num_params 1 pop 0 [id] func_ret [char *]

	// cDMAudio::GetCDAudioDriveLetter
	// plugin::CallMethodAndReturnDynGlobal<char, cDMAudio *>(gaddrof(cDMAudio::GetCDAudioDriveLetter), this);
	0AA8: call_method_return 0x57CA90 struct [cDMAudio] num_params 0 pop 0 func_ret [char]

	// cDMAudio::GetCurrent3DProviderIndex
	// plugin::CallMethodAndReturnDynGlobal<char, cDMAudio *>(gaddrof(cDMAudio::GetCurrent3DProviderIndex), this);
	0AA8: call_method_return 0x57C990 struct [cDMAudio] num_params 0 pop 0 func_ret [char]

	// cDMAudio::GetMissionAudioLoadingStatus
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cDMAudio *>(gaddrof(cDMAudio::GetMissionAudioLoadingStatus), this);
	0AA8: call_method_return 0x57CD90 struct [cDMAudio] num_params 0 pop 0 func_ret [unsigned char]

	// cDMAudio::GetNum3DProvidersAvailable
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cDMAudio *>(gaddrof(cDMAudio::GetNum3DProvidersAvailable), this);
	0AA8: call_method_return 0x57C950 struct [cDMAudio] num_params 0 pop 0 func_ret [unsigned char]

	// cDMAudio::GetRadioInCar
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cDMAudio *>(gaddrof(cDMAudio::GetRadioInCar), this);
	0AA8: call_method_return 0x57CE40 struct [cDMAudio] num_params 0 pop 0 func_ret [unsigned char]

	// cDMAudio::Initialise
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::Initialise), this);

	// cDMAudio::IsAudioInitialised
	// plugin::CallMethodAndReturnDynGlobal<bool, cDMAudio *>(gaddrof(cDMAudio::IsAudioInitialised), this);
	0AA8: call_method_return 0x57CAB0 struct [cDMAudio] num_params 0 pop 0 func_ret [bool]

	// cDMAudio::IsMP3RadioChannelAvailable
	// plugin::CallMethodAndReturnDynGlobal<bool, cDMAudio *>(gaddrof(cDMAudio::IsMP3RadioChannelAvailable), this);
	0AA8: call_method_return 0x57C9F0 struct [cDMAudio] num_params 0 pop 0 func_ret [bool]

	// cDMAudio::IsMissionAudioSampleFinished
	// plugin::CallMethodAndReturnDynGlobal<bool, cDMAudio *>(gaddrof(cDMAudio::IsMissionAudioSampleFinished), this);
	0AA8: call_method_return 0x57CE00 struct [cDMAudio] num_params 0 pop 0 func_ret [bool]

	// cDMAudio::PlayFrontEndSound
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned short, unsigned int>(gaddrof(cDMAudio::PlayFrontEndSound), this, frontend, volume);

	// cDMAudio::PlayFrontEndTrack
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char, unsigned char>(gaddrof(cDMAudio::PlayFrontEndTrack), this, track, frontendFlag);

	// cDMAudio::PlayLoadedMissionAudio
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::PlayLoadedMissionAudio), this);

	// cDMAudio::PlayOneShot
	// plugin::CallMethodDynGlobal<cDMAudio *, int, unsigned short, float>(gaddrof(cDMAudio::PlayOneShot), this, audioEntity, oneShot, volume);

	// cDMAudio::PlayPreloadedCutSceneMusic
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::PlayPreloadedCutSceneMusic), this);

	// cDMAudio::PlayRadioAnnouncement
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::PlayRadioAnnouncement), this, announcement);

	// cDMAudio::PlaySuspectLastSeen
	// plugin::CallMethodDynGlobal<cDMAudio *, float, float, float>(gaddrof(cDMAudio::PlaySuspectLastSeen), this, x, y, z);

	// cDMAudio::PreloadCutSceneMusic
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::PreloadCutSceneMusic), this, track);

	// cDMAudio::PreloadMissionAudio
	// plugin::CallMethodDynGlobal<cDMAudio *, char *>(gaddrof(cDMAudio::PreloadMissionAudio), this, name);

	// cDMAudio::ReacquireDigitalHandle
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::ReacquireDigitalHandle), this);

	// cDMAudio::ReleaseDigitalHandle
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::ReleaseDigitalHandle), this);

	// cDMAudio::ReportCollision
	// plugin::CallMethodDynGlobal<cDMAudio *, CEntity *, CEntity *, unsigned char, unsigned char, float, float>(gaddrof(cDMAudio::ReportCollision), this, entityA, entityB, surfaceTypeA, surfaceTypeB, collisionPower, velocity);

	// cDMAudio::ReportCrime
	// plugin::CallMethodDynGlobal<cDMAudio *, eCrimeType, CVector const &>(gaddrof(cDMAudio::ReportCrime), this, crime, pos);

	// cDMAudio::ResetTimers
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned int>(gaddrof(cDMAudio::ResetTimers), this, time);

	// cDMAudio::Service
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::Service), this);

	// cDMAudio::SetCurrent3DProvider
	// plugin::CallMethodAndReturnDynGlobal<char, cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetCurrent3DProvider), this, which);
	0AA8: call_method_return 0x57C9B0 struct [cDMAudio] num_params 1 pop 0 [which] func_ret [char]

	// cDMAudio::SetDynamicAcousticModelingStatus
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetDynamicAcousticModelingStatus), this, status);

	// cDMAudio::SetEffectsFadeVol
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetEffectsFadeVol), this, volume);

	// cDMAudio::SetEffectsMasterVolume
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetEffectsMasterVolume), this, volume);

	// cDMAudio::SetEntityStatus
	// plugin::CallMethodDynGlobal<cDMAudio *, int, unsigned char>(gaddrof(cDMAudio::SetEntityStatus), this, audioEntity, status);

	// cDMAudio::SetMissionAudioLocation
	// plugin::CallMethodDynGlobal<cDMAudio *, float, float, float>(gaddrof(cDMAudio::SetMissionAudioLocation), this, x, y, z);

	// cDMAudio::SetMusicFadeVol
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetMusicFadeVol), this, volume);

	// cDMAudio::SetMusicMasterVolume
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char>(gaddrof(cDMAudio::SetMusicMasterVolume), this, volume);

	// cDMAudio::SetRadioChannel
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned char, int>(gaddrof(cDMAudio::SetRadioChannel), this, radio, pos);

	// cDMAudio::SetRadioInCar
	// plugin::CallMethodDynGlobal<cDMAudio *, unsigned int>(gaddrof(cDMAudio::SetRadioInCar), this, radio);

	// cDMAudio::SetSpeakerConfig
	// plugin::CallMethodDynGlobal<cDMAudio *, int>(gaddrof(cDMAudio::SetSpeakerConfig), this, config);

	// cDMAudio::StopCutSceneMusic
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::StopCutSceneMusic), this);

	// cDMAudio::StopFrontEndTrack
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::StopFrontEndTrack), this);

	// cDMAudio::Terminate
	// plugin::CallMethodDynGlobal<cDMAudio *>(gaddrof(cDMAudio::Terminate), this);

plugin_III\game_III\CDoor.cpp:

	// CDoor::CDoor
	// plugin::CallMethod<0x52D150, CDoor *>(this);
	0AA6: call_method 0x52D150 struct [CDoor] num_params 0 pop 0

	// CDoor::GetAngleOpenRatio
	// plugin::CallMethodAndReturn<float, 0x545F80, CDoor *>(this);
	0AA8: call_method_return 0x545F80 struct [CDoor] num_params 0 pop 0 func_ret [float]

	// CDoor::IsClosed
	// plugin::CallMethodAndReturn<bool, 0x546060, CDoor *>(this);
	0AA8: call_method_return 0x546060 struct [CDoor] num_params 0 pop 0 func_ret [bool]

	// CDoor::IsFullyOpen
	// plugin::CallMethodAndReturn<bool, 0x546090, CDoor *>(this);
	0AA8: call_method_return 0x546090 struct [CDoor] num_params 0 pop 0 func_ret [bool]

	// CDoor::Open
	// plugin::CallMethod<0x545EF0, CDoor *, float>(this, angle);
	0AA6: call_method 0x545EF0 struct [CDoor] num_params 1 pop 0 [angle]

	// CDoor::Process
	// plugin::CallMethod<0x545BD0, CDoor *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x545BD0 struct [CDoor] num_params 1 pop 0 [vehicle]

	// CDoor::RetAngleWhenClosed
	// plugin::CallMethodAndReturn<float, 0x545FE0, CDoor *>(this);
	0AA8: call_method_return 0x545FE0 struct [CDoor] num_params 0 pop 0 func_ret [float]

	// CDoor::RetAngleWhenOpen
	// plugin::CallMethodAndReturn<float, 0x546020, CDoor *>(this);
	0AA8: call_method_return 0x546020 struct [CDoor] num_params 0 pop 0 func_ret [float]

plugin_III\game_III\CDraw.cpp:

	// CDraw::SetFOV
	// plugin::CallDynGlobal<float>(gaddrof(CDraw::SetFOV), fovValue);

plugin_III\game_III\CDummy.cpp:

	// CDummy::Add
	// plugin::CallVirtualMethod<1, CDummy *>(this);

	// CDummy::Remove
	// plugin::CallVirtualMethod<2, CDummy *>(this);

plugin_III\game_III\CEmergencyPed.cpp:

	// CEmergencyPed::ProcessControl
	// plugin::CallVirtualMethod<8, CEmergencyPed *>(this);

	// CEmergencyPed::FiremanAI
	// plugin::CallMethodDynGlobal<CEmergencyPed *>(gaddrof(CEmergencyPed::FiremanAI), this);

	// CEmergencyPed::InRange
	// plugin::CallMethodAndReturnDynGlobal<bool, CEmergencyPed *, CPed *>(gaddrof(CEmergencyPed::InRange), this, victim);
	0AA8: call_method_return 0x4C3EC0 struct [CEmergencyPed] num_params 1 pop 0 [victim] func_ret [bool]

	// CEmergencyPed::MedicAI
	// plugin::CallMethodDynGlobal<CEmergencyPed *>(gaddrof(CEmergencyPed::MedicAI), this);

plugin_III\game_III\CEntity.cpp:

	// CEntity::Add
	// plugin::CallVirtualMethod<1, CEntity *>(this);

	// CEntity::Remove
	// plugin::CallVirtualMethod<2, CEntity *>(this);

	// CEntity::SetModelIndex
	// plugin::CallVirtualMethod<3, CEntity *, unsigned int>(this, modelIndex);

	// CEntity::SetModelIndexNoCreate
	// plugin::CallVirtualMethod<4, CEntity *, unsigned int>(this, modelIndex);

	// CEntity::CreateRwObject
	// plugin::CallVirtualMethod<5, CEntity *>(this);

	// CEntity::DeleteRwObject
	// plugin::CallVirtualMethod<6, CEntity *>(this);

	// *CEntity::GetBoundRect
	// plugin::CallVirtualMethodAndReturn<CRect *, 7, CEntity *>(this);

	// CEntity::ProcessControl
	// plugin::CallVirtualMethod<8, CEntity *>(this);

	// CEntity::ProcessCollision
	// plugin::CallVirtualMethod<9, CEntity *>(this);

	// CEntity::ProcessShift
	// plugin::CallVirtualMethod<10, CEntity *>(this);

	// CEntity::Teleport
	// plugin::CallVirtualMethod<11, CEntity *, CVector>(this, point);

	// CEntity::PreRender
	// plugin::CallVirtualMethod<12, CEntity *>(this);

	// CEntity::Render
	// plugin::CallVirtualMethod<13, CEntity *>(this);

	// CEntity::SetupLighting
	// plugin::CallVirtualMethodAndReturn<bool, 14, CEntity *>(this);

	// CEntity::RemoveLighting
	// plugin::CallVirtualMethod<15, CEntity *, bool>(this, resetWorldColors);

	// CEntity::FlagToDestroyWhenNextProcessed
	// plugin::CallVirtualMethod<16, CEntity *>(this);

	// CEntity::AddSteamsFromGround
	// plugin::CallMethodDynGlobal<CEntity *, CVector *>(gaddrof(CEntity::AddSteamsFromGround), this, unused);

	// CEntity::AttachToRwObject
	// plugin::CallMethodDynGlobal<CEntity *, RwObject *>(gaddrof(CEntity::AttachToRwObject), this, rwObject);

	// CEntity::DetachFromRwObject
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::DetachFromRwObject), this);

	// *CEntity::GetBoundCentre
	// plugin::CallMethodAndReturnDynGlobal<CVector *, CEntity *>(gaddrof_o(CEntity::GetBoundCentre, CVector *(CEntity::*)()), this);
	0AA8: call_method_return 0x4742C0 struct [*CEntity] num_params 0 pop 0 func_ret [CVector *]

	// CEntity::GetBoundCentre
	// plugin::CallMethodDynGlobal<CEntity *, CVector &>(gaddrof_o(CEntity::GetBoundCentre, void (CEntity::*)(CVector &)), this, out);

	// CEntity::GetBoundRadius
	// plugin::CallMethodAndReturnDynGlobal<float, CEntity *>(gaddrof(CEntity::GetBoundRadius), this);
	0AA8: call_method_return 0x474310 struct [CEntity] num_params 0 pop 0 func_ret [float]

	// CEntity::GetDistanceFromCentreOfMassToBaseOfModel
	// plugin::CallMethodAndReturnDynGlobal<float, CEntity *>(gaddrof(CEntity::GetDistanceFromCentreOfMassToBaseOfModel), this);
	0AA8: call_method_return 0x4755C0 struct [CEntity] num_params 0 pop 0 func_ret [float]

	// CEntity::GetIsOnScreen
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntity *>(gaddrof(CEntity::GetIsOnScreen), this);
	0AA8: call_method_return 0x474CC0 struct [CEntity] num_params 0 pop 0 func_ret [bool]

	// CEntity::GetIsOnScreenComplex
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntity *>(gaddrof(CEntity::GetIsOnScreenComplex), this);
	0AA8: call_method_return 0x474D20 struct [CEntity] num_params 0 pop 0 func_ret [bool]

	// CEntity::GetIsTouching
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntity *, CVector const &, float>(gaddrof(CEntity::GetIsTouching), this, posn, radius);
	0AA8: call_method_return 0x474C10 struct [CEntity] num_params 2 pop 0 [posn] [radius] func_ret [bool]

	// CEntity::IsVisible
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntity *>(gaddrof(CEntity::IsVisible), this);
	0AA8: call_method_return 0x474CA0 struct [CEntity] num_params 0 pop 0 func_ret [bool]

	// CEntity::ModifyMatrixForBannerInWind
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::ModifyMatrixForBannerInWind), this);

	// CEntity::ModifyMatrixForTreeInWind
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::ModifyMatrixForTreeInWind), this);

	// CEntity::PreRenderForGlassWindow
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::PreRenderForGlassWindow), this);

	// CEntity::ProcessLightsForEntity
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::ProcessLightsForEntity), this);

	// CEntity::PruneReferences
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::PruneReferences), this);

	// CEntity::RegisterReference
	// plugin::CallMethodDynGlobal<CEntity *, CEntity **>(gaddrof(CEntity::RegisterReference), this, entity);

	// CEntity::ResolveReferences
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::ResolveReferences), this);

	// CEntity::SetState
	// plugin::CallMethodDynGlobal<CEntity *, unsigned char>(gaddrof(CEntity::SetState), this, state);

	// CEntity::SetupBigBuilding
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::SetupBigBuilding), this);

	// CEntity::UpdateRwFrame
	// plugin::CallMethodDynGlobal<CEntity *>(gaddrof(CEntity::UpdateRwFrame), this);

plugin_III\game_III\CEventList.cpp:

	// CEventList::ClearEvent
	// plugin::CallDynGlobal<int>(gaddrof(CEventList::ClearEvent), event);

	// CEventList::FindClosestEvent
	// plugin::CallAndReturnDynGlobal<bool, eEventType, CVector, int *>(gaddrof(CEventList::FindClosestEvent), type, pos, event);

	// CEventList::GetEvent
	// plugin::CallAndReturnDynGlobal<bool, eEventType, int *>(gaddrof(CEventList::GetEvent), type, event);

	// CEventList::RegisterEvent
	// plugin::CallDynGlobal<eEventType, eEventEntity, CEntity *, CPed *, int>(gaddrof_o(CEventList::RegisterEvent, void (*)(eEventType, eEventEntity, CEntity *, CPed *, int)), type, entityType, entity, criminal, time);

	// CEventList::RegisterEvent
	// plugin::CallDynGlobal<eEventType, CVector, int>(gaddrof_o(CEventList::RegisterEvent, void (*)(eEventType, CVector, int)), type, pos, time);

	// CEventList::ReportCrimeForEvent
	// plugin::CallDynGlobal<eEventType, int, bool>(gaddrof(CEventList::ReportCrimeForEvent), type, crimeId, bPoliceDontReallyCare);

plugin_III\game_III\CExplosion.cpp:

	// CExplosion::AddExplosion
	// plugin::CallAndReturn<bool, 0x5591C0, CEntity*, CEntity*, eExplosionType, CVector const&, unsigned int>(victim, creator, explosionType, posn, time);
	0AA7: call_function_return 0x5591C0 num_params 5 pop 5 [victim] [creator] [explosionType] [posn] [time] func_ret [bool]

	// CExplosion::CExplosion
	// plugin::CallMethod<0x55ADE0, CExplosion *>(this);
	0AA6: call_method 0x55ADE0 struct [CExplosion] num_params 0 pop 0

	// CExplosion::GetExplosionActiveCounter
	// plugin::CallAndReturn<unsigned char, 0x559140, unsigned char>(index);
	0AA7: call_function_return 0x559140 num_params 1 pop 1 [index] func_ret [unsigned char]

	// CExplosion::GetExplosionPosition
	// plugin::CallAndReturn<CVector*, 0x5591A0, unsigned char>(index);
	0AA7: call_function_return 0x5591A0 num_params 1 pop 1 [index] func_ret [CVector*]

	// CExplosion::Initialise
	// plugin::Call<0x559030>();
	0AA5: call_function 0x559030 num_params 0 pop 0

	// CExplosion::RemoveAllExplosionsInArea
	// plugin::Call<0x55AD40, CVector, float>(posn, radius);
	0AA5: call_function 0x55AD40 num_params 2 pop 2 [posn] [radius]

	// CExplosion::ResetExplosionActiveCounter
	// plugin::Call<0x559160, unsigned char>(index);
	0AA5: call_function 0x559160 num_params 1 pop 1 [index]

	// CExplosion::Shutdown
	// plugin::Call<0x559100>();
	0AA5: call_function 0x559100 num_params 0 pop 0

	// CExplosion::TestForExplosionInArea
	// plugin::CallAndReturn<bool, 0x55AC80, eExplosionType, float, float, float, float, float, float>(explosionType, x1, y1, z1, x2, y2, z2);
	0AA7: call_function_return 0x55AC80 num_params 7 pop 7 [explosionType] [x1] [y1] [z1] [x2] [y2] [z2] func_ret [bool]

	// CExplosion::Update
	// plugin::Call<0x55A0C0>();
	0AA5: call_function 0x55A0C0 num_params 0 pop 0

plugin_III\game_III\CFallingGlassPane.cpp:

	// CFallingGlassPane::Render
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(gaddrof(CFallingGlassPane::Render), this);

	// CFallingGlassPane::Update
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(gaddrof(CFallingGlassPane::Update), this);

plugin_III\game_III\CFileLoader.cpp:

	// CFileLoader::LoadLine
	// plugin::CallAndReturn<char*, 0x4761D0, int>(fileHandle);
	0AA7: call_function_return 0x4761D0 num_params 1 pop 1 [fileHandle] func_ret [char*]

	// GetFilename
	// plugin::CallAndReturn<char*, 0x476230, char const*>(filepath);
	0AA7: call_function_return 0x476230 num_params 1 pop 1 [filepath] func_ret [char*]

	// LoadingScreenLoadingFile
	// plugin::Call<0x476250, char const*>(filepath);
	0AA5: call_function 0x476250 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadLevel
	// plugin::Call<0x476290, char const*>(datFilePath);
	0AA5: call_function 0x476290 num_params 1 pop 1 [datFilePath]

	// CFileLoader::LoadCollisionFromDatFile
	// plugin::Call<0x476520, unsigned int>(gameLevel);
	0AA5: call_function 0x476520 num_params 1 pop 1 [gameLevel]

	// CFileLoader::LoadTexDictionary
	// plugin::CallAndReturn<RwTexDictionary *, 0x4765B0, char const*>(filepath);
	0AA7: call_function_return 0x4765B0 num_params 1 pop 1 [filepath] func_ret [RwTexDictionary *]

	// MoveTexturesCB
	// plugin::CallAndReturn<RwTexture*, 0x476610, RwTexture*, void*>(texture, data);
	0AA7: call_function_return 0x476610 num_params 2 pop 2 [texture] [data] func_ret [RwTexture*]

	// CFileLoader::AddTexDictionaries
	// plugin::Call<0x476630, RwTexDictionary*, RwTexDictionary*>(dst, src);
	0AA5: call_function 0x476630 num_params 2 pop 2 [dst] [src]

	// GetNameAndLOD
	// plugin::Call<0x476650, char*, char*, unsigned int *>(nodeName, outName, outLodIndex);
	0AA5: call_function 0x476650 num_params 3 pop 3 [nodeName] [outName] [outLodIndex]

	// CFileLoader::FindRelatedModelInfoCB
	// plugin::CallAndReturn<RpAtomic*, 0x4766C0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x4766C0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CFileLoader::LoadAtomicFile
	// plugin::Call<0x476750, char const*>(filepath);
	0AA5: call_function 0x476750 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadAtomicFile2Return
	// plugin::CallAndReturn<RpClump*, 0x4767C0, char const*>(filepath);
	0AA7: call_function_return 0x4767C0 num_params 1 pop 1 [filepath] func_ret [RpClump*]

	// CFileLoader::LoadClumpFile
	// plugin::Call<0x476810, char const*>(filepath);
	0AA5: call_function 0x476810 num_params 1 pop 1 [filepath]

	// CFileLoader::SetRelatedModelInfoCB
	// plugin::CallAndReturn<RpAtomic*, 0x4768C0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x4768C0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CFileLoader::LoadAtomicFile
	// plugin::CallAndReturn<bool, 0x476930, RwStream*, unsigned int>(stream, modelIndex);
	0AA7: call_function_return 0x476930 num_params 2 pop 2 [stream] [modelIndex] func_ret [bool]

	// CFileLoader::LoadClumpFile
	// plugin::CallAndReturn<bool, 0x476990, RwStream*, unsigned int>(stream, modelIndex);
	0AA7: call_function_return 0x476990 num_params 2 pop 2 [stream] [modelIndex] func_ret [bool]

	// CFileLoader::StartLoadClumpFile
	// plugin::CallAndReturn<bool, 0x476A20, RwStream*, unsigned int>(stream, modelIndex);
	0AA7: call_function_return 0x476A20 num_params 2 pop 2 [stream] [modelIndex] func_ret [bool]

	// CFileLoader::FinishLoadClumpFile
	// plugin::CallAndReturn<bool, 0x476A70, RwStream*, unsigned int>(stream, modelIndex);
	0AA7: call_function_return 0x476A70 num_params 2 pop 2 [stream] [modelIndex] func_ret [bool]

	// CFileLoader::LoadObjectTypes
	// plugin::Call<0x476AC0, char const*>(filepath);
	0AA5: call_function 0x476AC0 num_params 1 pop 1 [filepath]

	// CFileLoader::ReloadPaths
	// plugin::Call<0x476DB0, char const*>(filepath);
	0AA5: call_function 0x476DB0 num_params 1 pop 1 [filepath]

	// CFileLoader::ReloadObjectTypes
	// plugin::Call<0x476F30, char const*>(filepath);
	0AA5: call_function 0x476F30 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadObject
	// plugin::Call<0x477040, char const*>(line);
	0AA5: call_function 0x477040 num_params 1 pop 1 [line]

	// CFileLoader::ReloadObject
	// plugin::Call<0x4772B0, char const*>(line);
	0AA5: call_function 0x4772B0 num_params 1 pop 1 [line]

	// CFileLoader::LoadTimeObject
	// plugin::Call<0x4774B0, char const*>(line);
	0AA5: call_function 0x4774B0 num_params 1 pop 1 [line]

	// CFileLoader::LoadMLO
	// plugin::Call<0x477750, char const*>(line);
	0AA5: call_function 0x477750 num_params 1 pop 1 [line]

	// CFileLoader::LoadMLOInstance
	// plugin::Call<0x4777C0, int, char const*>(modelIndex, line);
	0AA5: call_function 0x4777C0 num_params 2 pop 2 [modelIndex] [line]

	// CFileLoader::LoadClumpObject
	// plugin::Call<0x477920, char const*>(line);
	0AA5: call_function 0x477920 num_params 1 pop 1 [line]

	// CFileLoader::LoadVehicleObject
	// plugin::Call<0x477990, char const*>(line);
	0AA5: call_function 0x477990 num_params 1 pop 1 [line]

	// CFileLoader::LoadPedObject
	// plugin::Call<0x477DE0, char const*>(line);
	0AA5: call_function 0x477DE0 num_params 1 pop 1 [line]

	// CFileLoader::LoadPathHeader
	// plugin::CallAndReturn<int, 0x477ED0, char const*, char*>(line, outPathType);
	0AA7: call_function_return 0x477ED0 num_params 2 pop 2 [line] [outPathType] func_ret [int]

	// CFileLoader::LoadPedPathNode
	// plugin::Call<0x477F00, char const*, int, int>(line, id, index);
	0AA5: call_function 0x477F00 num_params 3 pop 3 [line] [id] [index]

	// CFileLoader::LoadCarPathNode
	// plugin::Call<0x477FF0, char const*, int, int>(line, id, index);
	0AA5: call_function 0x477FF0 num_params 3 pop 3 [line] [id] [index]

	// CFileLoader::Load2dEffect
	// plugin::Call<0x4780E0, char const*>(line);
	0AA5: call_function 0x4780E0 num_params 1 pop 1 [line]

	// CFileLoader::LoadScene
	// plugin::Call<0x478370, char const*>(filepath);
	0AA5: call_function 0x478370 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadMapZones
	// plugin::Call<0x478550, char const*>(filepath);
	0AA5: call_function 0x478550 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadObjectInstance
	// plugin::Call<0x4786B0, char const*>(line);
	0AA5: call_function 0x4786B0 num_params 1 pop 1 [line]

	// CFileLoader::LoadPickup
	// plugin::Call<0x4789C0, char const*>(line);
	0AA5: call_function 0x4789C0 num_params 1 pop 1 [line]

	// CFileLoader::LoadZone
	// plugin::Call<0x478A00, char const*>(line);
	0AA5: call_function 0x478A00 num_params 1 pop 1 [line]

	// CFileLoader::LoadCullZone
	// plugin::Call<0x478A90, char const*>(line);
	0AA5: call_function 0x478A90 num_params 1 pop 1 [line]

	// CFileLoader::LoadCollisionFile
	// plugin::Call<0x478B20, char*>(filepath);
	0AA5: call_function 0x478B20 num_params 1 pop 1 [filepath]

	// CFileLoader::LoadCollisionModel
	// plugin::Call<0x478C20, unsigned char*, CColModel&, char*>(buffer, outColModel, name);
	0AA5: call_function 0x478C20 num_params 3 pop 3 [buffer] [outColModel] [name]

plugin_III\game_III\CFileMgr.cpp:

	// CFileMgr::ChangeDir
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileMgr::ChangeDir), dir);

	// CFileMgr::CloseFile
	// plugin::CallAndReturnDynGlobal<int, FILESTREAM>(gaddrof(CFileMgr::CloseFile), fileHandle);

	// CFileMgr::GetErrorReadWrite
	// plugin::CallAndReturnDynGlobal<int, FILESTREAM>(gaddrof(CFileMgr::GetErrorReadWrite), fileHandle);

	// CFileMgr::LoadTextFile
	// plugin::CallAndReturnDynGlobal<FILESTREAM, char const *, unsigned char *, int, char const *>(gaddrof(CFileMgr::LoadTextFile), filePath, buf, size, mode);

	// CFileMgr::OpenFile
	// plugin::CallAndReturnDynGlobal<FILESTREAM, char const *, char const *>(gaddrof(CFileMgr::OpenFile), filePath, mode);

	// CFileMgr::OpenFileForWriting
	// plugin::CallAndReturnDynGlobal<FILESTREAM, char const *>(gaddrof(CFileMgr::OpenFileForWriting), filePath);

	// CFileMgr::Read
	// plugin::CallAndReturnDynGlobal<int, FILESTREAM, char *, int>(gaddrof(CFileMgr::Read), fileHandle, buf, size);

	// CFileMgr::ReadLine
	// plugin::CallAndReturnDynGlobal<bool, FILESTREAM, char *, int>(gaddrof(CFileMgr::ReadLine), fileHandle, buf, len);

	// CFileMgr::Seek
	// plugin::CallAndReturnDynGlobal<bool, FILESTREAM, int, int>(gaddrof(CFileMgr::Seek), fileHandle, offset, origin);

	// CFileMgr::SetDir
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileMgr::SetDir), dir);

	// CFileMgr::Write
	// plugin::CallAndReturnDynGlobal<int, FILESTREAM, char *, int>(gaddrof(CFileMgr::Write), fileHandle, buf, size);

plugin_III\game_III\CFire.cpp:

	// CFire::Extinguish
	// plugin::CallMethodDynGlobal<CFire *>(gaddrof(CFire::Extinguish), this);

	// CFire::ProcessFire
	// plugin::CallMethodDynGlobal<CFire *>(gaddrof(CFire::ProcessFire), this);

	// CFire::ReportThisFire
	// plugin::CallMethodDynGlobal<CFire *>(gaddrof(CFire::ReportThisFire), this);

plugin_III\game_III\CFireManager.cpp:

	// CFireManager::ExtinguishPoint
	// plugin::CallMethodDynGlobal<CFireManager *, CVector, float>(gaddrof(CFireManager::ExtinguishPoint), this, point, range);

	// *CFireManager::FindFurthestFire_NeverMindFireMen
	// plugin::CallMethodAndReturnDynGlobal<CFire *, CFireManager *, CVector, float, float>(gaddrof(CFireManager::FindFurthestFire_NeverMindFireMen), this, pos, minRange, maxRange);
	0AA8: call_method_return 0x479430 struct [*CFireManager] num_params 3 pop 0 [pos] [minRange] [maxRange] func_ret [CFire *]

	// *CFireManager::FindNearestFire
	// plugin::CallMethodAndReturnDynGlobal<CFire *, CFireManager *, CVector, float *>(gaddrof(CFireManager::FindNearestFire), this, pos, pDistance);
	0AA8: call_method_return 0x479340 struct [*CFireManager] num_params 2 pop 0 [pos] [pDistance] func_ret [CFire *]

	// *CFireManager::GetNextFreeFire
	// plugin::CallMethodAndReturnDynGlobal<CFire *, CFireManager *>(gaddrof(CFireManager::GetNextFreeFire), this);
	0AA8: call_method_return 0x4792E0 struct [*CFireManager] num_params 0 pop 0 func_ret [CFire *]

	// CFireManager::IsScriptFireExtinguished
	// plugin::CallMethodAndReturnDynGlobal<bool, CFireManager *, short>(gaddrof(CFireManager::IsScriptFireExtinguished), this, fireIndex);
	0AA8: call_method_return 0x479FC0 struct [CFireManager] num_params 1 pop 0 [fireIndex] func_ret [bool]

	// CFireManager::RemoveAllScriptFires
	// plugin::CallMethodDynGlobal<CFireManager *>(gaddrof(CFireManager::RemoveAllScriptFires), this);

	// CFireManager::RemoveScriptFire
	// plugin::CallMethodDynGlobal<CFireManager *, short>(gaddrof(CFireManager::RemoveScriptFire), this, fireIndex);

	// CFireManager::SetScriptFireAudio
	// plugin::CallMethodDynGlobal<CFireManager *, short, bool>(gaddrof(CFireManager::SetScriptFireAudio), this, fireIndex, state);

	// CFireManager::StartFire
	// plugin::CallMethodDynGlobal<CFireManager *, CVector, float, unsigned char>(gaddrof_o(CFireManager::StartFire, void (CFireManager::*)(CVector, float, unsigned char)), this, pos, strength, propagation);

	// CFireManager::StartFire
	// plugin::CallMethodDynGlobal<CFireManager *, CEntity *, CEntity *, float, unsigned char>(gaddrof_o(CFireManager::StartFire, void (CFireManager::*)(CEntity *, CEntity *, float, unsigned char)), this, entityOnFire, fleeFrom, strength, propagation);

	// CFireManager::StartScriptFire
	// plugin::CallMethodAndReturnDynGlobal<int, CFireManager *, CVector const &, CEntity *, float, unsigned char>(gaddrof(CFireManager::StartScriptFire), this, pos, target, strength, propagation);
	0AA8: call_method_return 0x479E60 struct [CFireManager] num_params 4 pop 0 [pos] [target] [strength] [propagation] func_ret [int]

	// CFireManager::Update
	// plugin::CallMethodDynGlobal<CFireManager *>(gaddrof(CFireManager::Update), this);

plugin_III\game_III\CFont.cpp:

	// CFont::DrawFonts
	// plugin::Call<0x501B50>();
	0AA5: call_function 0x501B50 num_params 0 pop 0

	// CFont::GetNextSpace
	// plugin::CallAndReturn<wchar_t*, 0x501960, const wchar_t*>(str);
	0AA7: call_function_return 0x501960 num_params 1 pop 1 [str] func_ret [wchar_t*]

	// CFont::GetNumberLines
	// plugin::CallAndReturn<int, 0x501260, float, float, const wchar_t*>(x, y, text);
	0AA7: call_function_return 0x501260 num_params 3 pop 3 [x] [y] [text] func_ret [int]

	// CFont::GetStringWidth
	// plugin::CallAndReturn<float, 0x5018A0, const wchar_t*, bool>(str, sentence);
	0AA7: call_function_return 0x5018A0 num_params 2 pop 2 [str] [sentence] func_ret [float]

	// CFont::GetTextRect
	// plugin::CallAndReturn<CRect*, 0x5013B0, CRect*, float, float, const wchar_t*>(rect_out, x, y, text);
	0AA7: call_function_return 0x5013B0 num_params 4 pop 4 [rect_out] [x] [y] [text] func_ret [CRect*]

	// CFont::InitPerFrame
	// plugin::Call<0x500BE0>();
	0AA5: call_function 0x500BE0 num_params 0 pop 0

	// CFont::Initialise
	// plugin::Call<0x500A40>();
	0AA5: call_function 0x500A40 num_params 0 pop 0

	// CFont::ParseToken
	// plugin::CallAndReturn<wchar_t*, 0x5019A0, wchar_t*>(str);
	0AA7: call_function_return 0x5019A0 num_params 1 pop 1 [str] func_ret [wchar_t*]

	// CFont::PrintChar
	// plugin::Call<0x500C30, float, float, short>(x, y, character);
	0AA5: call_function 0x500C30 num_params 3 pop 3 [x] [y] [character]

	// CFont::PrintString
	// plugin::Call<0x500F50, float, float, const wchar_t*>(x, y, text);
	0AA5: call_function 0x500F50 num_params 3 pop 3 [x] [y] [text]

	// CFont::PrintString
	// plugin::Call<0x501730, float, float, const wchar_t*, const wchar_t*, float>(x, y, start, end, arg4);
	0AA5: call_function 0x501730 num_params 5 pop 5 [x] [y] [start] [end] [arg4]

	// CFont::SetAlphaFade
	// plugin::Call<0x501DD0, float>(alpha);
	0AA5: call_function 0x501DD0 num_params 1 pop 1 [alpha]

	// CFont::SetBackGroundOnlyTextOff
	// plugin::Call<0x501D40>();
	0AA5: call_function 0x501D40 num_params 0 pop 0

	// CFont::SetBackGroundOnlyTextOn
	// plugin::Call<0x501D30>();
	0AA5: call_function 0x501D30 num_params 0 pop 0

	// CFont::SetBackgroundColor
	// plugin::Call<0x501D00, CRGBA*>(&color);
	0AA5: call_function 0x501D00 num_params 1 pop 1 [&color]

	// CFont::SetBackgroundOff
	// plugin::Call<0x501CF0>();
	0AA5: call_function 0x501CF0 num_params 0 pop 0

	// CFont::SetBackgroundOn
	// plugin::Call<0x501CE0>();
	0AA5: call_function 0x501CE0 num_params 0 pop 0

	// CFont::SetCentreOff
	// plugin::Call<0x501CB0>();
	0AA5: call_function 0x501CB0 num_params 0 pop 0

	// CFont::SetCentreOn
	// plugin::Call<0x501C90>();
	0AA5: call_function 0x501C90 num_params 0 pop 0

	// CFont::SetCentreSize
	// plugin::Call<0x501CD0, float>(size);
	0AA5: call_function 0x501CD0 num_params 1 pop 1 [size]

	// CFont::SetColor
	// plugin::Call<0x501BD0, CRGBA*>(&color);
	0AA5: call_function 0x501BD0 num_params 1 pop 1 [&color]

	// CFont::SetDropColor
	// plugin::Call<0x501DE0, CRGBA*>(&color);
	0AA5: call_function 0x501DE0 num_params 1 pop 1 [&color]

	// CFont::SetDropShadowPosition
	// plugin::Call<0x501E70, short>(value);
	0AA5: call_function 0x501E70 num_params 1 pop 1 [value]

	// CFont::SetFontStyle
	// plugin::Call<0x501DB0, short>(style);
	0AA5: call_function 0x501DB0 num_params 1 pop 1 [style]

	// CFont::SetJustifyOff
	// plugin::Call<0x501C80>();
	0AA5: call_function 0x501C80 num_params 0 pop 0

	// CFont::SetJustifyOn
	// plugin::Call<0x501C60>();
	0AA5: call_function 0x501C60 num_params 0 pop 0

	// CFont::SetPropOff
	// plugin::Call<0x501D90>();
	0AA5: call_function 0x501D90 num_params 0 pop 0

	// CFont::SetPropOn
	// plugin::Call<0x501DA0>();
	0AA5: call_function 0x501DA0 num_params 0 pop 0

	// CFont::SetRightJustifyOff
	// plugin::Call<0x501D70>();
	0AA5: call_function 0x501D70 num_params 0 pop 0

	// CFont::SetRightJustifyOn
	// plugin::Call<0x501D50>();
	0AA5: call_function 0x501D50 num_params 0 pop 0

	// CFont::SetRightJustifyWrap
	// plugin::Call<0x501DC0, float>(value);
	0AA5: call_function 0x501DC0 num_params 1 pop 1 [value]

	// CFont::SetScale
	// plugin::Call<0x501B80, float, float>(width, height);
	0AA5: call_function 0x501B80 num_params 2 pop 2 [width] [height]

	// CFont::SetSlant
	// plugin::Call<0x501BC0, float>(value);
	0AA5: call_function 0x501BC0 num_params 1 pop 1 [value]

	// CFont::SetSlantRefPoint
	// plugin::Call<0x501BA0, float, float>(x, y);
	0AA5: call_function 0x501BA0 num_params 2 pop 2 [x] [y]

	// CFont::SetWrapx
	// plugin::Call<0x501CC0, float>(value);
	0AA5: call_function 0x501CC0 num_params 1 pop 1 [value]

	// CFont::Shutdown
	// plugin::Call<0x500BA0>();
	0AA5: call_function 0x500BA0 num_params 0 pop 0

	// CFont::character_code
	// plugin::CallAndReturn<short, 0x501E80, unsigned char>(character);
	0AA7: call_function_return 0x501E80 num_params 1 pop 1 [character] func_ret [short]

	// AsciiToUnicode
	// plugin::Call<0x5009C0, char const*, wchar_t*>(str_ascii, str_unicode);
	0AA5: call_function 0x5009C0 num_params 2 pop 2 [str_ascii] [str_unicode]

	// UnicodeStrlen
	// plugin::CallAndReturn<int, 0x500A20, wchar_t const*>(str);
	0AA7: call_function_return 0x500A20 num_params 1 pop 1 [str] func_ret [int]

plugin_III\game_III\CFontDetails.cpp:

	// CFontDetails::~CFontDetails
	// plugin::CallMethod<0x501F10, CFontDetails *>(this);
	0AA6: call_method 0x501F10 struct [CFontDetails] num_params 0 pop 0

plugin_III\game_III\CGame.cpp:

	// CGame::DrasticTidyUpMemory
	// plugin::CallDynGlobal<bool>(gaddrof(CGame::DrasticTidyUpMemory), flushDraw);

	// CGame::Initialise
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Initialise), datFile);

	// CGame::InitialiseOnceAfterRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseOnceAfterRW));

	// CGame::InitialiseOnceBeforeRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseOnceBeforeRW));

	// CGame::InitialiseRenderWare
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseRenderWare));

	// CGame::Shutdown
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::Shutdown));

	// CGame::TidyUpMemory
	// plugin::CallDynGlobal<bool, bool>(gaddrof(CGame::TidyUpMemory), moveTextures, flushDraw);

plugin_III\game_III\CGameLogic.cpp:

	// CGameLogic::PassTime
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CGameLogic::PassTime), time);

	// CGameLogic::RestorePlayerStuffDuringResurrection
	// plugin::CallDynGlobal<CPlayerPed *, CVector, float>(gaddrof(CGameLogic::RestorePlayerStuffDuringResurrection), player, pos, angle);

	// CGameLogic::SortOutStreamingAndMemory
	// plugin::CallDynGlobal<CVector const &>(gaddrof(CGameLogic::SortOutStreamingAndMemory), pos);

plugin_III\game_III\CGangs.cpp:

	// CGangs::GetGangPedModelOverride
	// plugin::CallAndReturnDynGlobal<char, short>(gaddrof(CGangs::GetGangPedModelOverride), gang);

	// CGangs::LoadAllGangData
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CGangs::LoadAllGangData), buf, size);

	// CGangs::SaveAllGangData
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CGangs::SaveAllGangData), buf, size);

	// CGangs::SetGangPedModelOverride
	// plugin::CallDynGlobal<short, char>(gaddrof(CGangs::SetGangPedModelOverride), gang, ovrd);

	// CGangs::SetGangVehicleModel
	// plugin::CallDynGlobal<short, int>(gaddrof(CGangs::SetGangVehicleModel), gang, model);

	// CGangs::SetGangWeapons
	// plugin::CallDynGlobal<short, int, int>(gaddrof(CGangs::SetGangWeapons), gang, weaponOne, weaponTwo);

plugin_III\game_III\CGarage.cpp:

	// CGarage::BuildRotatedDoorMatrix
	// plugin::CallMethod<0x4267C0, CGarage *, CEntity*, float>(this, door, angle);
	0AA6: call_method 0x4267C0 struct [CGarage] num_params 2 pop 0 [door] [angle]

	// CGarage::CalcDistToGarageRectangleSquared
	// plugin::CallMethodAndReturn<float, 0x426F50, CGarage *, float, float>(this, x, y);
	0AA8: call_method_return 0x426F50 struct [CGarage] num_params 2 pop 0 [x] [y] func_ret [float]

	// CGarage::CalcSmallestDistToGarageDoorSquared
	// plugin::CallMethodAndReturn<float, 0x426FE0, CGarage *, float, float>(this, x, y);
	0AA8: call_method_return 0x426FE0 struct [CGarage] num_params 2 pop 0 [x] [y] func_ret [float]

	// CGarage::CenterCarInGarage
	// plugin::CallMethodAndReturn<bool, 0x428000, CGarage *, CVehicle*>(this, vehicle);
	0AA8: call_method_return 0x428000 struct [CGarage] num_params 1 pop 0 [vehicle] func_ret [bool]

	// CGarage::CountCarsWithCenterPointWithinGarage
	// plugin::CallMethodAndReturn<int, 0x426130, CGarage *, CEntity*>(this, vehicle);
	0AA8: call_method_return 0x426130 struct [CGarage] num_params 1 pop 0 [vehicle] func_ret [int]

	// CGarage::DoesCraigNeedThisCar
	// plugin::CallMethodAndReturn<bool, 0x426D90, CGarage *, int>(this, modelIndex);
	0AA8: call_method_return 0x426D90 struct [CGarage] num_params 1 pop 0 [modelIndex] func_ret [bool]

	// CGarage::EntityHasASphereWayOutsideGarage
	// plugin::CallMethodAndReturn<bool, 0x425B30, CGarage *, CEntity*, float>(this, entity, radius);
	0AA8: call_method_return 0x425B30 struct [CGarage] num_params 2 pop 0 [entity] [radius] func_ret [bool]

	// CGarage::FindDoorsEntities
	// plugin::CallMethod<0x427060, CGarage *>(this);
	0AA6: call_method 0x427060 struct [CGarage] num_params 0 pop 0

	// CGarage::FindDoorsEntitiesSectorList
	// plugin::CallMethodAndReturn<char, 0x427300, CGarage *, CPtrList&, bool>(this, list, arg1);
	0AA8: call_method_return 0x427300 struct [CGarage] num_params 2 pop 0 [list] [arg1] func_ret [char]

	// CGarage::HasCraigCollectedThisCar
	// plugin::CallMethodAndReturn<bool, 0x426DF0, CGarage *, int>(this, modelIndex);
	0AA8: call_method_return 0x426DF0 struct [CGarage] num_params 1 pop 0 [modelIndex] func_ret [bool]

	// CGarage::IsAnyCarBlockingDoor
	// plugin::CallMethodAndReturn<bool, 0x425FB0, CGarage *>(this);
	0AA8: call_method_return 0x425FB0 struct [CGarage] num_params 0 pop 0 func_ret [bool]

	// CGarage::IsAnyOtherCarTouchingGarage
	// plugin::CallMethodAndReturn<bool, 0x425C90, CGarage *, CVehicle*>(this, vehicle);
	0AA8: call_method_return 0x425C90 struct [CGarage] num_params 1 pop 0 [vehicle] func_ret [bool]

	// CGarage::IsAnyOtherPedTouchingGarage
	// plugin::CallMethodAndReturn<bool, 0x425E20, CGarage *, CPed*>(this, ped);
	0AA8: call_method_return 0x425E20 struct [CGarage] num_params 1 pop 0 [ped] func_ret [bool]

	// CGarage::IsEntityEntirelyInside
	// plugin::CallMethodAndReturn<bool, 0x425370, CGarage *, CEntity*>(this, entity);
	0AA8: call_method_return 0x425370 struct [CGarage] num_params 1 pop 0 [entity] func_ret [bool]

	// CGarage::IsEntityEntirelyInside3D
	// plugin::CallMethodAndReturn<bool, 0x4254F0, CGarage *, CEntity*, float>(this, entity, radius);
	0AA8: call_method_return 0x4254F0 struct [CGarage] num_params 2 pop 0 [entity] [radius] func_ret [bool]

	// CGarage::IsEntityEntirelyOutside
	// plugin::CallMethodAndReturn<bool, 0x425740, CGarage *, CEntity*, float>(this, entity, radius);
	0AA8: call_method_return 0x425740 struct [CGarage] num_params 2 pop 0 [entity] [radius] func_ret [bool]

	// CGarage::IsEntityTouching3D
	// plugin::CallMethodAndReturn<bool, 0x425950, CGarage *, CEntity*>(this, entity);
	0AA8: call_method_return 0x425950 struct [CGarage] num_params 1 pop 0 [entity] func_ret [bool]

	// CGarage::IsGarageEmpty
	// plugin::CallMethodAndReturn<bool, 0x425890, CGarage *>(this);
	0AA8: call_method_return 0x425890 struct [CGarage] num_params 0 pop 0 func_ret [bool]

	// CGarage::IsPlayerOutsideGarage
	// plugin::CallMethodAndReturn<bool, 0x425910, CGarage *>(this);
	0AA8: call_method_return 0x425910 struct [CGarage] num_params 0 pop 0 func_ret [bool]

	// CGarage::IsStaticPlayerCarEntirelyInside
	// plugin::CallMethodAndReturn<bool, 0x4251C0, CGarage *>(this);
	0AA8: call_method_return 0x4251C0 struct [CGarage] num_params 0 pop 0 func_ret [bool]

	// CGarage::Load
	// plugin::CallMethod<0x4288E0, CGarage *, unsigned char*, unsigned int>(this, bufferPointer, structSize);
	0AA6: call_method 0x4288E0 struct [CGarage] num_params 2 pop 0 [bufferPointer] [structSize]

	// CGarage::MarkThisCarAsCollectedForCraig
	// plugin::CallMethodAndReturn<bool, 0x426E50, CGarage *, int>(this, modelIndex);
	0AA8: call_method_return 0x426E50 struct [CGarage] num_params 1 pop 0 [modelIndex] func_ret [bool]

	// CGarage::PlayerArrestedOrDied
	// plugin::CallMethod<0x427FC0, CGarage *>(this);
	0AA6: call_method 0x427FC0 struct [CGarage] num_params 0 pop 0

	// CGarage::RefreshDoorPointers
	// plugin::CallMethod<0x426980, CGarage *, bool>(this, arg0);
	0AA6: call_method 0x426980 struct [CGarage] num_params 1 pop 0 [arg0]

	// CGarage::RemoveCarsBlockingDoorNotInside
	// plugin::CallMethod<0x4261F0, CGarage *>(this);
	0AA6: call_method 0x4261F0 struct [CGarage] num_params 0 pop 0

	// CGarage::RestoreCarsForThisHideOut
	// plugin::CallMethodAndReturn<bool, 0x427A40, CGarage *, CStoredCar*>(this, car);
	0AA8: call_method_return 0x427A40 struct [CGarage] num_params 1 pop 0 [car] func_ret [bool]

	// CGarage::StoreAndRemoveCarsForThisHideOut
	// plugin::CallMethod<0x427840, CGarage *, CStoredCar*, int>(this, car, count);
	0AA6: call_method 0x427840 struct [CGarage] num_params 2 pop 0 [car] [count]

	// CGarage::TidyUpGarage
	// plugin::CallMethod<0x427C30, CGarage *>(this);
	0AA6: call_method 0x427C30 struct [CGarage] num_params 0 pop 0

	// CGarage::TidyUpGarageClose
	// plugin::CallMethod<0x427D90, CGarage *>(this);
	0AA6: call_method 0x427D90 struct [CGarage] num_params 0 pop 0

	// CGarage::Update
	// plugin::CallMethod<0x4222D0, CGarage *>(this);
	0AA6: call_method 0x4222D0 struct [CGarage] num_params 0 pop 0

	// CGarage::UpdateCrusherAngle
	// plugin::CallMethod<0x4268A0, CGarage *>(this);
	0AA6: call_method 0x4268A0 struct [CGarage] num_params 0 pop 0

	// CGarage::UpdateCrusherShake
	// plugin::CallMethod<0x4268E0, CGarage *, float, float>(this, x, y);
	0AA6: call_method 0x4268E0 struct [CGarage] num_params 2 pop 0 [x] [y]

	// CGarage::UpdateDoorsHeight
	// plugin::CallMethod<0x426730, CGarage *>(this);
	0AA6: call_method 0x426730 struct [CGarage] num_params 0 pop 0

plugin_III\game_III\CGarages.cpp:

	// CGarages::ActivateGarage
	// plugin::Call<0x426C60, short>(index);
	0AA5: call_function 0x426C60 num_params 1 pop 1 [index]

	// CGarages::AddOne
	// plugin::CallAndReturn<int, 0x421FA0, CVector, CVector, unsigned char, unsigned int>(pointFront, pointBack, type, vehicleModelIndex);
	0AA7: call_function_return 0x421FA0 num_params 4 pop 4 [pointFront] [pointBack] [type] [vehicleModelIndex] func_ret [int]

	// CGarages::CameraShouldBeOutside
	// plugin::CallAndReturn<bool, 0x427BC0>();
	0AA7: call_function_return 0x427BC0 num_params 0 pop 0 func_ret [bool]

	// CGarages::ChangeGarageType
	// plugin::Call<0x4222A0, short, unsigned char, unsigned int>(index, type, vehicleModelIndex);
	0AA5: call_function 0x4222A0 num_params 3 pop 3 [index] [type] [vehicleModelIndex]

	// CGarages::CloseHideOutGaragesBeforeSave
	// plugin::Call<0x428130>();
	0AA5: call_function 0x428130 num_params 0 pop 0

	// CGarages::CountCarsInHideoutGarage
	// plugin::CallAndReturn<int, 0x4281E0, unsigned char>(type);
	0AA7: call_function_return 0x4281E0 num_params 1 pop 1 [type] func_ret [int]

	// CGarages::DeActivateGarage
	// plugin::Call<0x426C40, short>(index);
	0AA5: call_function 0x426C40 num_params 1 pop 1 [index]

	// CGarages::FindDoorHeightForMI
	// plugin::CallAndReturn<float, 0x427C10, unsigned int>(vehicleModelIndex);
	0AA7: call_function_return 0x427C10 num_params 1 pop 1 [vehicleModelIndex] func_ret [float]

	// CGarages::FindMaxNumStoredCarsForGarage
	// plugin::CallAndReturn<int, 0x428230, unsigned char>(type);
	0AA7: call_function_return 0x428230 num_params 1 pop 1 [type] func_ret [int]

	// CGarages::GivePlayerDetonator
	// plugin::Call<0x427BD0>();
	0AA5: call_function 0x427BD0 num_params 0 pop 0

	// CGarages::HasCarBeenCrushed
	// plugin::CallAndReturn<bool, 0x4275A0, int>(vehicleModelIndex);
	0AA7: call_function_return 0x4275A0 num_params 1 pop 1 [vehicleModelIndex] func_ret [bool]

	// CGarages::HasCarBeenDroppedOffYet
	// plugin::CallAndReturn<bool, 0x426C20, short>(index);
	0AA7: call_function_return 0x426C20 num_params 1 pop 1 [index] func_ret [bool]

	// CGarages::HasImportExportGarageCollectedThisCar
	// plugin::CallAndReturn<bool, 0x426CB0, short, int>(index, vehicleModelIndex);
	0AA7: call_function_return 0x426CB0 num_params 2 pop 2 [index] [vehicleModelIndex] func_ret [bool]

	// CGarages::HasResprayHappened
	// plugin::CallAndReturn<bool, 0x4274F0, short>(index);
	0AA7: call_function_return 0x4274F0 num_params 1 pop 1 [index] func_ret [bool]

	// CGarages::HasThisCarBeenCollected
	// plugin::CallAndReturn<bool, 0x426D50, short, int>(index, vehicleModelIndex);
	0AA7: call_function_return 0x426D50 num_params 2 pop 2 [index] [vehicleModelIndex] func_ret [bool]

	// CGarages::Init
	// plugin::Call<0x421C60>();
	0AA5: call_function 0x421C60 num_params 0 pop 0

	// CGarages::IsCarSprayable
	// plugin::CallAndReturn<bool, 0x426700, CAutomobile*>(car);
	0AA7: call_function_return 0x426700 num_params 1 pop 1 [car] func_ret [bool]

	// CGarages::IsGarageClosed
	// plugin::CallAndReturn<bool, 0x426D20, short>(index);
	0AA7: call_function_return 0x426D20 num_params 1 pop 1 [index] func_ret [bool]

	// CGarages::IsGarageOpen
	// plugin::CallAndReturn<bool, 0x426CF0, short>(index);
	0AA7: call_function_return 0x426CF0 num_params 1 pop 1 [index] func_ret [bool]

	// CGarages::IsModelIndexADoor
	// plugin::CallAndReturn<bool, 0x428D90, unsigned int>(modelIndexDoor);
	0AA7: call_function_return 0x428D90 num_params 1 pop 1 [modelIndexDoor] func_ret [bool]

	// CGarages::IsPointInAGarageCameraZone
	// plugin::CallAndReturn<bool, 0x427AB0, CVector>(point);
	0AA7: call_function_return 0x427AB0 num_params 1 pop 1 [point] func_ret [bool]

	// CGarages::IsPointWithinAnyGarage
	// plugin::CallAndReturn<bool, 0x428320, CVector&>(point);
	0AA7: call_function_return 0x428320 num_params 1 pop 1 [point] func_ret [bool]

	// CGarages::IsPointWithinHideOutGarage
	// plugin::CallAndReturn<bool, 0x428260, CVector&>(point);
	0AA7: call_function_return 0x428260 num_params 1 pop 1 [point] func_ret [bool]

	// CGarages::IsThisCarWithinGarageArea
	// plugin::CallAndReturn<bool, 0x427570, short, CEntity*>(index, entity);
	0AA7: call_function_return 0x427570 num_params 2 pop 2 [index] [entity] func_ret [bool]

	// CGarages::Load
	// plugin::Call<0x428940, unsigned char*, unsigned int>(bufferPointer, structSize);
	0AA5: call_function 0x428940 num_params 2 pop 2 [bufferPointer] [structSize]

	// CGarages::PlayerArrestedOrDied
	// plugin::Call<0x427F60>();
	0AA5: call_function 0x427F60 num_params 0 pop 0

	// CGarages::PrintMessages
	// plugin::Call<0x426310>();
	0AA5: call_function 0x426310 num_params 0 pop 0

	// CGarages::QueryCarsCollected
	// plugin::CallAndReturn<int, 0x426CA0, short>(index);
	0AA7: call_function_return 0x426CA0 num_params 1 pop 1 [index] func_ret [int]

	// CGarages::Save
	// plugin::Call<0x4284E0, unsigned char*, unsigned int*>(bufferPointer, structSize);
	0AA5: call_function 0x4284E0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CGarages::SetAllDoorsBackToOriginalHeight
	// plugin::Call<0x4283D0>();
	0AA5: call_function 0x4283D0 num_params 0 pop 0

	// CGarages::SetGarageDoorToRotate
	// plugin::Call<0x427510, short>(index);
	0AA5: call_function 0x427510 num_params 1 pop 1 [index]

	// CGarages::SetLeaveCameraForThisGarage
	// plugin::Call<0x427550, short>(index);
	0AA5: call_function 0x427550 num_params 1 pop 1 [index]

	// CGarages::SetTargetCarForMissionGarage
	// plugin::Call<0x426BD0, short, CAutomobile*>(index, car);
	0AA5: call_function 0x426BD0 num_params 2 pop 2 [index] [car]

	// CGarages::Shutdown
	// plugin::Call<0x421E10>();
	0AA5: call_function 0x421E10 num_params 0 pop 0

	// CGarages::TriggerMessage
	// plugin::Call<0x426B20, char*, short, unsigned short, short>(text, numberInString, time, numberInString2);
	0AA5: call_function 0x426B20 num_params 4 pop 4 [text] [numberInString] [time] [numberInString2]

	// CGarages::Update
	// plugin::Call<0x421E40>();
	0AA5: call_function 0x421E40 num_params 0 pop 0

plugin_III\game_III\CGeneral.cpp:

	// CGeneral::GetATanOfXY
	// plugin::CallAndReturnDynGlobal<float, float, float>(gaddrof(CGeneral::GetATanOfXY), x, y);

	// CGeneral::GetAngleBetweenPoints
	// plugin::CallAndReturnDynGlobal<float, float, float, float, float>(gaddrof(CGeneral::GetAngleBetweenPoints), x1, y1, x2, y2);

	// CGeneral::GetNodeHeadingFromVector
	// plugin::CallAndReturnDynGlobal<int, float, float>(gaddrof(CGeneral::GetNodeHeadingFromVector), x, y);

	// CGeneral::GetRadianAngleBetweenPoints
	// plugin::CallAndReturnDynGlobal<float, float, float, float, float>(gaddrof(CGeneral::GetRadianAngleBetweenPoints), x1, y1, x2, y2);

	// CGeneral::LimitAngle
	// plugin::CallAndReturnDynGlobal<float, float>(gaddrof(CGeneral::LimitAngle), angle);

	// CGeneral::LimitRadianAngle
	// plugin::CallAndReturnDynGlobal<float, float>(gaddrof(CGeneral::LimitRadianAngle), angle);

plugin_III\game_III\CGlass.cpp:

	// CGlass::AskForObjectToBeRenderedInGlass
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CGlass::AskForObjectToBeRenderedInGlass), entity);

	// CGlass::CalcAlphaWithNormal
	// plugin::CallAndReturnDynGlobal<int, CVector *>(gaddrof(CGlass::CalcAlphaWithNormal), normal);

	// *CGlass::FindFreePane
	// plugin::CallAndReturnDynGlobal<CFallingGlassPane *>(gaddrof(CGlass::FindFreePane));

	// CGlass::GeneratePanesForWindow
	// plugin::CallDynGlobal<unsigned int, CVector, CVector, CVector, CVector, CVector, float, bool, bool>(gaddrof(CGlass::GeneratePanesForWindow), type, pos, at, right, speed, point, moveSpeed, cracked, explosion);

	// CGlass::RenderEntityInGlass
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CGlass::RenderEntityInGlass), entity);

	// CGlass::WasGlassHitByBullet
	// plugin::CallDynGlobal<CEntity *, CVector>(gaddrof(CGlass::WasGlassHitByBullet), entity, point);

	// CGlass::WindowRespondsToCollision
	// plugin::CallDynGlobal<CEntity *, float, CVector, CVector, bool>(gaddrof(CGlass::WindowRespondsToCollision), entity, amount, speed, point, explosion);

	// CGlass::WindowRespondsToExplosion
	// plugin::CallDynGlobal<CEntity *, CVector>(gaddrof(CGlass::WindowRespondsToExplosion), entity, point);

	// CGlass::WindowRespondsToSoftCollision
	// plugin::CallDynGlobal<CEntity *, float>(gaddrof(CGlass::WindowRespondsToSoftCollision), entity, amount);

plugin_III\game_III\CHeli.cpp:

	// CHeli::SetModelIndex
	// plugin::CallVirtualMethod<3, CHeli *, unsigned int>(this, modelIndex);

	// CHeli::ProcessControl
	// plugin::CallVirtualMethod<8, CHeli *>(this);

	// CHeli::PreRender
	// plugin::CallVirtualMethod<12, CHeli *>(this);

	// CHeli::Render
	// plugin::CallVirtualMethod<13, CHeli *>(this);

	// CHeli::PreRenderAlways
	// plugin::CallMethodDynGlobal<CHeli *>(gaddrof(CHeli::PreRenderAlways), this);

	// *CHeli::SpawnFlyingComponent
	// plugin::CallMethodAndReturnDynGlobal<CObject *, CHeli *, int>(gaddrof(CHeli::SpawnFlyingComponent), this, component);
	0AA8: call_method_return 0x54AE50 struct [*CHeli] num_params 1 pop 0 [component] func_ret [CObject *]

	// CHeli::ActivateHeli
	// plugin::CallDynGlobal<bool>(gaddrof(CHeli::ActivateHeli), activate);

	// *CHeli::FindPointerToCatalinasHeli
	// plugin::CallAndReturnDynGlobal<CHeli *>(gaddrof(CHeli::FindPointerToCatalinasHeli));

	// CHeli::HasCatalinaBeenShotDown
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CHeli::HasCatalinaBeenShotDown));

	// CHeli::TestBulletCollision
	// plugin::CallAndReturnDynGlobal<bool, CVector *, CVector *, CVector *, int>(gaddrof(CHeli::TestBulletCollision), lineStart, lineEnd, bulletPos, damage);

	// CHeli::TestRocketCollision
	// plugin::CallAndReturnDynGlobal<bool, CVector *>(gaddrof(CHeli::TestRocketCollision), coors);

	// *GenerateHeli
	// plugin::CallAndReturnDynGlobal<CHeli *, bool>(gaddrof(GenerateHeli), catalina);

	// *GetHeliAtomicObjectCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(GetHeliAtomicObjectCB), object, data);

plugin_III\game_III\CHud.cpp:

	// CHud::Draw
	// plugin::Call<0x5052A0>();
	0AA5: call_function 0x5052A0 num_params 0 pop 0

	// CHud::DrawAfterFade
	// plugin::Call<0x509030>();
	0AA5: call_function 0x509030 num_params 0 pop 0

	// CHud::GetRidOfAllHudMessages
	// plugin::Call<0x504F90>();
	0AA5: call_function 0x504F90 num_params 0 pop 0

	// CHud::Initialise
	// plugin::Call<0x5048F0>();
	0AA5: call_function 0x5048F0 num_params 0 pop 0

	// CHud::ReInitialise
	// plugin::Call<0x504CC0>();
	0AA5: call_function 0x504CC0 num_params 0 pop 0

	// CHud::SetBigMessage
	// plugin::Call<0x50A250, wchar_t *, char>(message, style);
	0AA5: call_function 0x50A250 num_params 2 pop 2 [message] [style]

	// CHud::SetHelpMessage
	// plugin::Call<0x5051E0, wchar_t *, bool>(message, quick);
	0AA5: call_function 0x5051E0 num_params 2 pop 2 [message] [quick]

	// CHud::SetMessage
	// plugin::Call<0x50A210, wchar_t *>(message);
	0AA5: call_function 0x50A210 num_params 1 pop 1 [message]

	// CHud::SetPagerMessage
	// plugin::Call<0x50A320, wchar_t *>(message);
	0AA5: call_function 0x50A320 num_params 1 pop 1 [message]

	// CHud::SetVehicleName
	// plugin::Call<0x505290, wchar_t *>(name);
	0AA5: call_function 0x505290 num_params 1 pop 1 [name]

	// CHud::SetZoneName
	// plugin::Call<0x5051D0, wchar_t *>(name);
	0AA5: call_function 0x5051D0 num_params 1 pop 1 [name]

	// CHud::Shutdown
	// plugin::Call<0x504C50>();
	0AA5: call_function 0x504C50 num_params 0 pop 0

plugin_III\game_III\CInstance.cpp:

	// CInstance::Shutdown
	// plugin::CallMethodDynGlobal<CInstance *>(gaddrof(CInstance::Shutdown), this);

plugin_III\game_III\CKeyboardState.cpp:

	// CKeyboardState::Clear
	// plugin::CallMethod<0x491760, CKeyboardState *>(this);
	0AA6: call_method 0x491760 struct [CKeyboardState] num_params 0 pop 0

plugin_III\game_III\CLines.cpp:

	// CLines::RenderLineWithClipping
	// plugin::CallDynGlobal<float, float, float, float, float, float, unsigned int, unsigned int>(gaddrof(CLines::RenderLineWithClipping), x1, y1, z1, x2, y2, z2, color1, color2);

plugin_III\game_III\CMatrix.cpp:

	// CMatrix::CMatrix
	// plugin::CallMethodDynGlobal<CMatrix *>(ctor_gaddr(CMatrix), this);

	// CMatrix::CMatrix
	// plugin::CallMethodDynGlobal<CMatrix *, RwMatrix *, bool>(ctor_gaddr_o(CMatrix, void(RwMatrix *, bool)), this, rwMatrix, deleteOnDetach);

	// CMatrix::CMatrix
	// plugin::CallMethodDynGlobal<CMatrix *, CMatrix const &>(ctor_gaddr_o(CMatrix, void(CMatrix const &)), this, matrix);

	// CMatrix::~CMatrix
	// plugin::CallMethodDynGlobal<CMatrix *>(dtor_gaddr(CMatrix), this);

	// CMatrix::operator+=
	// plugin::CallMethodDynGlobal<CMatrix *, CMatrix const &>(gaddrof_o(CMatrix::operator+=, void (CMatrix::*)(CMatrix const &)), this, right);

	// CMatrix::operator=
	// plugin::CallMethodDynGlobal<CMatrix *, CMatrix const &>(gaddrof_o(CMatrix::operator=, void (CMatrix::*)(CMatrix const &)), this, right);

	// CMatrix::Attach
	// plugin::CallMethodDynGlobal<CMatrix *, RwMatrix *, bool>(gaddrof(CMatrix::Attach), this, rwMatrix, deleteOnDetach);

	// CMatrix::AttachRW
	// plugin::CallMethodDynGlobal<CMatrix *, RwMatrix *, bool>(gaddrof(CMatrix::AttachRW), this, rwMatrix, deleteOnDetach);

	// CMatrix::CopyOnlyMatrix
	// plugin::CallMethodDynGlobal<CMatrix *, CMatrix const &>(gaddrof(CMatrix::CopyOnlyMatrix), this, matrix);

	// CMatrix::Detach
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::Detach), this);

	// CMatrix::Reorthogonalise
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::Reorthogonalise), this);

	// CMatrix::ResetOrientation
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::ResetOrientation), this);

	// CMatrix::Rotate
	// plugin::CallMethodDynGlobal<CMatrix *, float, float, float>(gaddrof(CMatrix::Rotate), this, x, y, z);

	// CMatrix::RotateX
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::RotateX), this, angle);

	// CMatrix::RotateZ
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::RotateZ), this, angle);

	// CMatrix::SetRotate
	// plugin::CallMethodDynGlobal<CMatrix *, float, float, float>(gaddrof(CMatrix::SetRotate), this, x, y, z);

	// CMatrix::SetRotateX
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateX), this, angle);

	// CMatrix::SetRotateXOnly
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateXOnly), this, angle);

	// CMatrix::SetRotateY
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateY), this, angle);

	// CMatrix::SetRotateYOnly
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateYOnly), this, angle);

	// CMatrix::SetRotateZ
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateZ), this, angle);

	// CMatrix::SetRotateZOnly
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetRotateZOnly), this, angle);

	// CMatrix::SetScale
	// plugin::CallMethodDynGlobal<CMatrix *, float>(gaddrof(CMatrix::SetScale), this, factor);

	// CMatrix::SetTranslate
	// plugin::CallMethodDynGlobal<CMatrix *, float, float, float>(gaddrof_o(CMatrix::SetTranslate, void (CMatrix::*)(float, float, float)), this, x, y, z);

	// CMatrix::SetTranslate
	// plugin::CallMethodDynGlobal<CMatrix *, CVector *>(gaddrof_o(CMatrix::SetTranslate, void (CMatrix::*)(CVector *)), this, pos);

	// CMatrix::SetTranslateOnly
	// plugin::CallMethodDynGlobal<CMatrix *, float, float, float>(gaddrof(CMatrix::SetTranslateOnly), this, x, y, z);

	// CMatrix::SetUnity
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::SetUnity), this);

	// CMatrix::Update
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::Update), this);

	// CMatrix::UpdateRW
	// plugin::CallMethodDynGlobal<CMatrix *>(gaddrof(CMatrix::UpdateRW), this);

plugin_III\game_III\CMBlur.cpp:

	// CMBlur::CreateImmediateModeData
	// plugin::CallDynGlobal<RwCamera *, RwRect *>(gaddrof(CMBlur::CreateImmediateModeData), cam, rect);

	// CMBlur::MotionBlurClose
	// plugin::CallAndReturnDynGlobal<RwBool>(gaddrof(CMBlur::MotionBlurClose));

	// CMBlur::MotionBlurOpen
	// plugin::CallAndReturnDynGlobal<RwBool, RwCamera *>(gaddrof(CMBlur::MotionBlurOpen), cam);

	// CMBlur::MotionBlurRender
	// plugin::CallDynGlobal<RwCamera *, unsigned int, unsigned int, unsigned int, unsigned int, int, unsigned int>(gaddrof(CMBlur::MotionBlurRender), cam, red, green, blue, blur, type, blurAlpha);

	// CMBlur::OverlayRender
	// plugin::CallDynGlobal<RwCamera *, RwRaster *, RwRGBA, int, int>(gaddrof(CMBlur::OverlayRender), cam, raster, color, type, blurAlpha);

plugin_III\game_III\CMenuManager.cpp:

	// CMenuManager::BuildStatLine
	// plugin::CallMethod<0x483870, CMenuManager *, char *, float *, bool, float*>(this, text, stat, aFloat, stat2);
	0AA6: call_method 0x483870 struct [CMenuManager] num_params 4 pop 0 [text] [stat] [aFloat] [stat2]

	// CMenuManager::CentreMousePointer
	// plugin::Call<0x48ACE0>();
	0AA5: call_function 0x48ACE0 num_params 0 pop 0

	// CMenuManager::CheckCodesForControls
	// plugin::CallMethodAndReturn<int, 0x483870, CMenuManager *, int>(this, type);
	0AA8: call_method_return 0x483870 struct [CMenuManager] num_params 1 pop 0 [type] func_ret [int]

	// CMenuManager::CheckHover
	// plugin::CallMethodAndReturn<bool, 0x48ACA0, CMenuManager *, int, int, int, int>(this, x1, x2, y1, y2);
	0AA8: call_method_return 0x48ACA0 struct [CMenuManager] num_params 4 pop 0 [x1] [x2] [y1] [y2] func_ret [bool]

	// CMenuManager::CheckSliderMovement
	// plugin::CallMethod<0x48B210, CMenuManager *, int>(this, direction);
	0AA6: call_method 0x48B210 struct [CMenuManager] num_params 1 pop 0 [direction]

	// CMenuManager::CostructStatLine
	// plugin::CallMethodAndReturn<int, 0x482800, CMenuManager *, int>(this, line);
	0AA8: call_method_return 0x482800 struct [CMenuManager] num_params 1 pop 0 [line] func_ret [int]

	// CMenuManager::DisplayHelperText
	// plugin::CallMethod<0x48B490, CMenuManager *>(this);
	0AA6: call_method 0x48B490 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DisplaySlider
	// plugin::CallMethodAndReturn<float, 0x00, CMenuManager *>(this);
	0AA8: call_method_return 0x00 struct [CMenuManager] num_params 0 pop 0 func_ret [float]

	// CMenuManager::DoSettingsBeforeStartingAGame
	// plugin::CallMethod<0x48AB40, CMenuManager *>(this);
	0AA6: call_method 0x48AB40 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::Draw
	// plugin::CallMethod<0x47AE00, CMenuManager *>(this);
	0AA6: call_method 0x47AE00 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DrawControllerBound
	// plugin::CallMethod<0x489710, CMenuManager *, int, int, int, char>(this, arg0, arg1, arg2, arg3);
	0AA6: call_method 0x489710 struct [CMenuManager] num_params 4 pop 0 [arg0] [arg1] [arg2] [arg3]

	// CMenuManager::DrawControllerScreenExtraText
	// plugin::CallMethod<0x4892F0, CMenuManager *, int, int, int>(this, arg0, arg1, arg2);
	0AA6: call_method 0x4892F0 struct [CMenuManager] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CMenuManager::DrawControllerSetupScreen
	// plugin::CallMethod<0x481210, CMenuManager *>(this);
	0AA6: call_method 0x481210 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DrawFrontEnd
	// plugin::CallMethod<0x47A540, CMenuManager *>(this);
	0AA6: call_method 0x47A540 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DrawFrontEndNormal
	// plugin::CallMethod<0x47A5B0, CMenuManager *>(this);
	0AA6: call_method 0x47A5B0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DrawPlayerSetupScreen
	// plugin::CallMethod<0x47F2B0, CMenuManager *>(this);
	0AA6: call_method 0x47F2B0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::FadeIn
	// plugin::CallMethodAndReturn<int, 0x48AC60, CMenuManager *, int>(this, alpha);
	0AA8: call_method_return 0x48AC60 struct [CMenuManager] num_params 1 pop 0 [alpha] func_ret [int]

	// CMenuManager::FilterOutColorMarkersFromString
	// plugin::CallMethod<0x4889C0, CMenuManager *, char, CRGBA &>(this, s, color);
	0AA6: call_method 0x4889C0 struct [CMenuManager] num_params 2 pop 0 [s] [color]

	// CMenuManager::GetStartOptionsCntrlConfigScreens
	// plugin::CallMethodAndReturn<int, 0x489270, CMenuManager *>(this);
	0AA8: call_method_return 0x489270 struct [CMenuManager] num_params 0 pop 0 func_ret [int]

	// CMenuManager::InitialiseChangedLanguageSettings
	// plugin::Call<0x47A4D0>();
	0AA5: call_function 0x47A4D0 num_params 0 pop 0

	// CMenuManager::LoadAllTextures
	// plugin::CallMethod<0x47A230, CMenuManager *>(this);
	0AA6: call_method 0x47A230 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::LoadSettings
	// plugin::CallMethod<0x488EE0, CMenuManager *>(this);
	0AA6: call_method 0x488EE0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::MessageScreen
	// plugin::Call<0x48B7E0, char *>(message);
	0AA5: call_function 0x48B7E0 num_params 1 pop 1 [message]

	// CMenuManager::PickNewPlayerColour
	// plugin::Call<0x488C40>();
	0AA5: call_function 0x488C40 num_params 0 pop 0

	// CMenuManager::PrintBriefs
	// plugin::CallMethod<0x484D60, CMenuManager *>(this);
	0AA6: call_method 0x484D60 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::PrintErrorMessage
	// plugin::Call<0x484F70>();
	0AA5: call_function 0x484F70 num_params 0 pop 0

	// CMenuManager::PrintStats
	// plugin::CallMethod<0x482100, CMenuManager *>(this);
	0AA6: call_method 0x482100 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::Process
	// plugin::CallMethod<0x485100, CMenuManager *>(this);
	0AA6: call_method 0x485100 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::ProcessButtonPresses
	// plugin::CallMethod<0x4856F0, CMenuManager *>(this);
	0AA6: call_method 0x4856F0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::ProcessOnOffMenuOptions
	// plugin::CallMethod<0x48AE60, CMenuManager *>(this);
	0AA6: call_method 0x48AE60 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::RequestFrontEndShutDown
	// plugin::Call<0x488750>();
	0AA5: call_function 0x488750 num_params 0 pop 0

	// CMenuManager::RequestFrontEndStartUp
	// plugin::Call<0x488770>();
	0AA5: call_function 0x488770 num_params 0 pop 0

	// CMenuManager::ResetHelperText
	// plugin::CallMethod<0x48B470, CMenuManager *>(this);
	0AA6: call_method 0x48B470 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SaveLoadFileError_SetUpErrorScreen
	// plugin::CallMethod<0x488930, CMenuManager *>(this);
	0AA6: call_method 0x488930 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SaveSettings
	// plugin::CallMethod<0x488CC0, CMenuManager *>(this);
	0AA6: call_method 0x488CC0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SetHelperText
	// plugin::CallMethod<0x48B450, CMenuManager *, int>(this, text);
	0AA6: call_method 0x48B450 struct [CMenuManager] num_params 1 pop 0 [text]

	// CMenuManager::ShutdownJustMenu
	// plugin::CallMethod<0x488920, CMenuManager *>(this);
	0AA6: call_method 0x488920 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::StretchX
	// plugin::CallMethodAndReturn<float, 0x48ABE0, CMenuManager *, float>(this, x);
	0AA8: call_method_return 0x48ABE0 struct [CMenuManager] num_params 1 pop 0 [x] func_ret [float]

	// CMenuManager::StretchY
	// plugin::CallMethodAndReturn<float, 0x48AC20, CMenuManager *, float>(this, y);
	0AA8: call_method_return 0x48AC20 struct [CMenuManager] num_params 1 pop 0 [y] func_ret [float]

	// CMenuManager::SwitchMenuOnAndOff
	// plugin::CallMethod<0x488790, CMenuManager *>(this);
	0AA6: call_method 0x488790 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::UnloadTextures
	// plugin::CallMethod<0x47A440, CMenuManager *>(this);
	0AA6: call_method 0x47A440 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::WaitForUserCD
	// plugin::CallMethod<0x48ADD0, CMenuManager *>(this);
	0AA6: call_method 0x48ADD0 struct [CMenuManager] num_params 0 pop 0

plugin_III\game_III\CMessages.cpp:

	// CMessages::Init
	// plugin::Call<0x529310>();
	0AA5: call_function 0x529310 num_params 0 pop 0

	// CMessages::GetWideStringLength
	// plugin::CallAndReturn<int, 0x529490, wchar_t*>(str);
	0AA7: call_function_return 0x529490 num_params 1 pop 1 [str] func_ret [int]

	// CMessages::WideStringCopy
	// plugin::CallAndReturn<int, 0x5294B0, wchar_t*, wchar_t*, unsigned short>(dst, src, size);
	0AA7: call_function_return 0x5294B0 num_params 3 pop 3 [dst] [src] [size] func_ret [int]

	// CMessages::WideStringCompare
	// plugin::CallAndReturn<bool, 0x529510, wchar_t*, wchar_t*, unsigned short>(str1, str2, size);
	0AA7: call_function_return 0x529510 num_params 3 pop 3 [str1] [str2] [size] func_ret [bool]

	// CMessages::Process
	// plugin::Call<0x529580>();
	0AA5: call_function 0x529580 num_params 0 pop 0

	// CMessages::Display
	// plugin::Call<0x529800>();
	0AA5: call_function 0x529800 num_params 0 pop 0

	// CMessages::AddMessage
	// plugin::Call<0x529900, wchar_t*, unsigned int, unsigned short>(text, time, flag);
	0AA5: call_function 0x529900 num_params 3 pop 3 [text] [time] [flag]

	// CMessages::AddMessageJumpQ
	// plugin::Call<0x529A10, wchar_t*, unsigned int, unsigned short>(text, time, flag);
	0AA5: call_function 0x529A10 num_params 3 pop 3 [text] [time] [flag]

	// CMessages::AddMessageSoon
	// plugin::Call<0x529AF0, wchar_t*, unsigned int, unsigned short>(text, time, flag);
	0AA5: call_function 0x529AF0 num_params 3 pop 3 [text] [time] [flag]

	// CMessages::ClearMessages
	// plugin::Call<0x529CE0>();
	0AA5: call_function 0x529CE0 num_params 0 pop 0

	// CMessages::ClearSmallMessagesOnly
	// plugin::Call<0x529E00>();
	0AA5: call_function 0x529E00 num_params 0 pop 0

	// CMessages::AddBigMessage
	// plugin::Call<0x529EB0, wchar_t*, unsigned int, unsigned short>(text, time, flag);
	0AA5: call_function 0x529EB0 num_params 3 pop 3 [text] [time] [flag]

	// CMessages::AddBigMessageQ
	// plugin::Call<0x529F60, wchar_t*, unsigned int, unsigned short>(text, time, flag);
	0AA5: call_function 0x529F60 num_params 3 pop 3 [text] [time] [flag]

	// CMessages::AddToPreviousBriefArray
	// plugin::Call<0x52A040, wchar_t*, int, int, int, int, int, int, wchar_t*>(text, n1, n2, n3, n4, n5, n6, str);
	0AA5: call_function 0x52A040 num_params 8 pop 8 [text] [n1] [n2] [n3] [n4] [n5] [n6] [str]

	// CMessages::InsertNumberInString
	// plugin::Call<0x52A1A0, wchar_t*, int, int, int, int, int, int, wchar_t*>(src, n1, n2, n3, n4, n5, n6, dst);
	0AA5: call_function 0x52A1A0 num_params 8 pop 8 [src] [n1] [n2] [n3] [n4] [n5] [n6] [dst]

	// CMessages::InsertStringInString
	// plugin::Call<0x52A300, wchar_t*, wchar_t*>(text, str);
	0AA5: call_function 0x52A300 num_params 2 pop 2 [text] [str]

	// CMessages::InsertPlayerControlKeysInString
	// plugin::Call<0x52A490, wchar_t*>(text);
	0AA5: call_function 0x52A490 num_params 1 pop 1 [text]

	// CMessages::AddMessageWithNumber
	// plugin::Call<0x52A850, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(text, time, flag, n1, n2, n3, n4, n5, n6);
	0AA5: call_function 0x52A850 num_params 9 pop 9 [text] [time] [flag] [n1] [n2] [n3] [n4] [n5] [n6]

	// CMessages::AddMessageJumpQWithNumber
	// plugin::Call<0x52A9A0, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(text, time, flag, n1, n2, n3, n4, n5, n6);
	0AA5: call_function 0x52A9A0 num_params 9 pop 9 [text] [time] [flag] [n1] [n2] [n3] [n4] [n5] [n6]

	// CMessages::AddMessageSoonWithNumber
	// plugin::Call<0x52AAC0, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(text, time, flag, n1, n2, n3, n4, n5, n6);
	0AA5: call_function 0x52AAC0 num_params 9 pop 9 [text] [time] [flag] [n1] [n2] [n3] [n4] [n5] [n6]

	// CMessages::AddBigMessageWithNumber
	// plugin::Call<0x52AD10, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(text, time, flag, n1, n2, n3, n4, n5, n6);
	0AA5: call_function 0x52AD10 num_params 9 pop 9 [text] [time] [flag] [n1] [n2] [n3] [n4] [n5] [n6]

	// CMessages::AddBigMessageWithNumberQ
	// plugin::Call<0x52AE00, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(text, time, flag, n1, n2, n3, n4, n5, n6);
	0AA5: call_function 0x52AE00 num_params 9 pop 9 [text] [time] [flag] [n1] [n2] [n3] [n4] [n5] [n6]

	// CMessages::AddMessageWithString
	// plugin::Call<0x52AF30, wchar_t*, unsigned int, unsigned short, wchar_t*>(text, time, flag, str);
	0AA5: call_function 0x52AF30 num_params 4 pop 4 [text] [time] [flag] [str]

	// CMessages::AddMessageJumpQWithString
	// plugin::Call<0x52B050, wchar_t*, unsigned int, unsigned short, wchar_t*>(text, time, flag, str);
	0AA5: call_function 0x52B050 num_params 4 pop 4 [text] [time] [flag] [str]

	// CMessages::ClearThisPrint
	// plugin::Call<0x52B140, wchar_t*>(text);
	0AA5: call_function 0x52B140 num_params 1 pop 1 [text]

	// CMessages::ClearThisBigPrint
	// plugin::Call<0x52B3C0, wchar_t*>(text);
	0AA5: call_function 0x52B3C0 num_params 1 pop 1 [text]

	// CMessages::ClearAllMessagesDisplayedByGame
	// plugin::Call<0x52B670>();
	0AA5: call_function 0x52B670 num_params 0 pop 0

plugin_III\game_III\CMissionCleanup.cpp:

	// CMissionCleanup::AddEntityToList
	// plugin::CallMethodDynGlobal<CMissionCleanup *, int, unsigned char>(gaddrof(CMissionCleanup::AddEntityToList), this, id, type);

	// *CMissionCleanup::FindFree
	// plugin::CallMethodAndReturnDynGlobal<tCleanupEntity *, CMissionCleanup *>(gaddrof(CMissionCleanup::FindFree), this);
	0AA8: call_method_return 0x437B80 struct [*CMissionCleanup] num_params 0 pop 0 func_ret [tCleanupEntity *]

	// CMissionCleanup::Init
	// plugin::CallMethodDynGlobal<CMissionCleanup *>(gaddrof(CMissionCleanup::Init), this);

	// CMissionCleanup::Process
	// plugin::CallMethodDynGlobal<CMissionCleanup *>(gaddrof(CMissionCleanup::Process), this);

	// CMissionCleanup::RemoveEntityFromList
	// plugin::CallMethodDynGlobal<CMissionCleanup *, int, unsigned char>(gaddrof(CMissionCleanup::RemoveEntityFromList), this, id, type);

plugin_III\game_III\CMloModelInfo.cpp:

	// CMloModelInfo::ConstructClump
	// plugin::CallMethodDynGlobal<CMloModelInfo *>(gaddrof(CMloModelInfo::ConstructClump), this);

plugin_III\game_III\CModelInfo.cpp:

	// *CModelInfo::AddClumpModel
	// plugin::CallAndReturnDynGlobal<CClumpModelInfo *, int>(gaddrof(CModelInfo::AddClumpModel), index);

	// *CModelInfo::AddMloModel
	// plugin::CallAndReturnDynGlobal<CMloModelInfo *, int>(gaddrof(CModelInfo::AddMloModel), index);

	// *CModelInfo::AddPedModel
	// plugin::CallAndReturnDynGlobal<CPedModelInfo *, int>(gaddrof(CModelInfo::AddPedModel), index);

	// *CModelInfo::AddSimpleModel
	// plugin::CallAndReturnDynGlobal<CSimpleModelInfo *, int>(gaddrof(CModelInfo::AddSimpleModel), index);

	// *CModelInfo::AddTimeModel
	// plugin::CallAndReturnDynGlobal<CTimeModelInfo *, int>(gaddrof(CModelInfo::AddTimeModel), index);

	// *CModelInfo::AddVehicleModel
	// plugin::CallAndReturnDynGlobal<CVehicleModelInfo *, int>(gaddrof(CModelInfo::AddVehicleModel), index);

	// *CModelInfo::Get2dEffectStore
	// plugin::CallAndReturnDynGlobal<CStore<C2dEffect, 2000> *>(gaddrof(CModelInfo::Get2dEffectStore));

	// *CModelInfo::GetMloInstanceStore
	// plugin::CallAndReturnDynGlobal<CStore<CInstance, 1> *>(gaddrof(CModelInfo::GetMloInstanceStore));

	// *CModelInfo::GetModelInfo
	// plugin::CallAndReturnDynGlobal<CBaseModelInfo *, char const *, int *>(gaddrof(CModelInfo::GetModelInfo), name, index);

	// CModelInfo::IsBoatModel
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CModelInfo::IsBoatModel), index);

	// CModelInfo::RemoveColModelsFromOtherLevels
	// plugin::CallDynGlobal<eLevelName>(gaddrof(CModelInfo::RemoveColModelsFromOtherLevels), level);

plugin_III\game_III\CMoneyMessage.cpp:

	// CMoneyMessage::Render
	// plugin::CallMethodDynGlobal<CMoneyMessage *>(gaddrof(CMoneyMessage::Render), this);

plugin_III\game_III\CMotionBlurStreaks.cpp:

	// CMotionBlurStreaks::RegisterStreak
	// plugin::CallDynGlobal<unsigned int, unsigned char, unsigned char, unsigned char, CVector, CVector>(gaddrof(CMotionBlurStreaks::RegisterStreak), id, red, green, blue, leftPoint, rightPoint);

plugin_III\game_III\CMouseControllerState.cpp:

	// CMouseControllerState::CMouseControllerState
	// plugin::CallMethodDynGlobal<CMouseControllerState *>(ctor_gaddr(CMouseControllerState), this);

	// CMouseControllerState::Clear
	// plugin::CallMethodDynGlobal<CMouseControllerState *>(gaddrof(CMouseControllerState::Clear), this);

plugin_III\game_III\CMousePointerStateHelper.cpp:

plugin_III\game_III\CMovingThing.cpp:

	// CMovingThing::AddToList
	// plugin::CallMethodDynGlobal<CMovingThing *, CMovingThing *>(gaddrof(CMovingThing::AddToList), this, pThing);

	// CMovingThing::RemoveFromList
	// plugin::CallMethodDynGlobal<CMovingThing *>(gaddrof(CMovingThing::RemoveFromList), this);

	// CMovingThing::Update
	// plugin::CallMethodDynGlobal<CMovingThing *>(gaddrof(CMovingThing::Update), this);

plugin_III\game_III\cMusicManager.cpp:

	// cMusicManager::ChangeMusicMode
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char>(gaddrof(cMusicManager::ChangeMusicMode), this, mode);

	// cMusicManager::ChangeRadioChannel
	// plugin::CallMethodAndReturnDynGlobal<bool, cMusicManager *>(gaddrof(cMusicManager::ChangeRadioChannel), this);
	0AA8: call_method_return 0x57E130 struct [cMusicManager] num_params 0 pop 0 func_ret [bool]

	// cMusicManager::ComputeAmbienceVol
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char, unsigned char &>(gaddrof(cMusicManager::ComputeAmbienceVol), this, reset, outVolume);

	// cMusicManager::DisplayRadioStationName
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::DisplayRadioStationName), this);

	// cMusicManager::GetCarTuning
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cMusicManager *>(gaddrof(cMusicManager::GetCarTuning), this);
	0AA8: call_method_return 0x57E530 struct [cMusicManager] num_params 0 pop 0 func_ret [unsigned char]

	// cMusicManager::GetNextCarTuning
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cMusicManager *>(gaddrof(cMusicManager::GetNextCarTuning), this);
	0AA8: call_method_return 0x57E5A0 struct [cMusicManager] num_params 0 pop 0 func_ret [unsigned char]

	// cMusicManager::GetRadioInCar
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, cMusicManager *>(gaddrof(cMusicManager::GetRadioInCar), this);
	0AA8: call_method_return 0x57D1D0 struct [cMusicManager] num_params 0 pop 0 func_ret [unsigned char]

	// cMusicManager::GetTrackStartPos
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, cMusicManager *, unsigned char>(gaddrof(cMusicManager::GetTrackStartPos), this, track);
	0AA8: call_method_return 0x57E450 struct [cMusicManager] num_params 1 pop 0 [track] func_ret [unsigned int]

	// cMusicManager::Initialise
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::Initialise), this);

	// cMusicManager::PlayAnnouncement
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char>(gaddrof(cMusicManager::PlayAnnouncement), this, announcement);

	// cMusicManager::PlayFrontEndTrack
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char, unsigned char>(gaddrof(cMusicManager::PlayFrontEndTrack), this, track, bPlayInFrontend);

	// cMusicManager::PlayPreloadedCutSceneMusic
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::PlayPreloadedCutSceneMusic), this);

	// cMusicManager::PlayerInCar
	// plugin::CallMethodAndReturnDynGlobal<bool, cMusicManager *>(gaddrof(cMusicManager::PlayerInCar), this);
	0AA8: call_method_return 0x57E4B0 struct [cMusicManager] num_params 0 pop 0 func_ret [bool]

	// cMusicManager::PreloadCutSceneMusic
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char>(gaddrof(cMusicManager::PreloadCutSceneMusic), this, sound);

	// cMusicManager::ResetMusicAfterReload
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::ResetMusicAfterReload), this);

	// cMusicManager::ResetTimers
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned int>(gaddrof(cMusicManager::ResetTimers), this, time);

	// cMusicManager::Service
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::Service), this);

	// cMusicManager::ServiceAmbience
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::ServiceAmbience), this);

	// cMusicManager::ServiceAnnouncement
	// plugin::CallMethodAndReturnDynGlobal<bool, cMusicManager *>(gaddrof(cMusicManager::ServiceAnnouncement), this);
	0AA8: call_method_return 0x57DFC0 struct [cMusicManager] num_params 0 pop 0 func_ret [bool]

	// cMusicManager::ServiceFrontEndMode
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::ServiceFrontEndMode), this);

	// cMusicManager::ServiceGameMode
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::ServiceGameMode), this);

	// cMusicManager::ServiceTrack
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::ServiceTrack), this);

	// cMusicManager::SetRadioChannelByScript
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned char, int>(gaddrof(cMusicManager::SetRadioChannelByScript), this, station, position);

	// cMusicManager::SetRadioInCar
	// plugin::CallMethodDynGlobal<cMusicManager *, unsigned int>(gaddrof(cMusicManager::SetRadioInCar), this, radioStation);

	// cMusicManager::StopCutSceneMusic
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::StopCutSceneMusic), this);

	// cMusicManager::StopFrontEndTrack
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::StopFrontEndTrack), this);

	// cMusicManager::Terminate
	// plugin::CallMethodDynGlobal<cMusicManager *>(gaddrof(cMusicManager::Terminate), this);

	// cMusicManager::UsesPoliceRadio
	// plugin::CallMethodAndReturnDynGlobal<bool, cMusicManager *, CVehicle *>(gaddrof(cMusicManager::UsesPoliceRadio), this, vehicle);
	0AA8: call_method_return 0x57E6A0 struct [cMusicManager] num_params 1 pop 0 [vehicle] func_ret [bool]

plugin_III\game_III\CObject.cpp:

	// CObject::ProcessControl
	// plugin::CallVirtualMethod<8, CObject *>(this);

	// CObject::Teleport
	// plugin::CallVirtualMethod<11, CObject *, CVector>(this, pos);

	// CObject::Render
	// plugin::CallVirtualMethod<13, CObject *>(this);

	// CObject::SetupLighting
	// plugin::CallVirtualMethodAndReturn<bool, 14, CObject *>(this);

	// CObject::RemoveLighting
	// plugin::CallVirtualMethod<15, CObject *, bool>(this, resetWorldColors);

	// CObject::CanBeDeleted
	// plugin::CallMethodAndReturnDynGlobal<bool, CObject *>(gaddrof(CObject::CanBeDeleted), this);
	0AA8: call_method_return 0x4BB010 struct [CObject] num_params 0 pop 0 func_ret [bool]

	// CObject::Init
	// plugin::CallMethodDynGlobal<CObject *>(gaddrof(CObject::Init), this);

	// CObject::ObjectDamage
	// plugin::CallMethodDynGlobal<CObject *, float>(gaddrof(CObject::ObjectDamage), this, amount);

	// CObject::RefModelInfo
	// plugin::CallMethodDynGlobal<CObject *, int>(gaddrof(CObject::RefModelInfo), this, modelIndex);

	// CObject::DeleteAllTempObjectsInArea
	// plugin::CallDynGlobal<CVector, float>(gaddrof(CObject::DeleteAllTempObjectsInArea), point, radius);

plugin_III\game_III\CObjectData.cpp:

	// CObjectData::Initialise
	// plugin::CallDynGlobal<char const *>(gaddrof(CObjectData::Initialise), fileName);

	// CObjectData::SetObjectData
	// plugin::CallDynGlobal<int, CObject &>(gaddrof(CObjectData::SetObjectData), modelIndex, object);

plugin_III\game_III\common.cpp:

	// FindPlayerHeading
	// plugin::CallAndReturn<float, 0x4A1220>();
	0AA7: call_function_return 0x4A1220 num_params 0 pop 0 func_ret [float]

	// FindPlayerCentreOfWorld_NoSniperShift
	// plugin::CallAndReturn<CVector&, 0x4A11C0>();
	0AA7: call_function_return 0x4A11C0 num_params 0 pop 0 func_ret [CVector&]

	// FindPlayerCentreOfWorld
	// plugin::CallAndReturn<CVector&, 0x4A1170, int>(playerId);
	0AA7: call_function_return 0x4A1170 num_params 1 pop 1 [playerId] func_ret [CVector&]

	// FindPlayerPed
	// plugin::CallAndReturn<CPlayerPed*, 0x4A1150>();
	0AA7: call_function_return 0x4A1150 num_params 0 pop 0 func_ret [CPlayerPed*]

	// FindPlayerTrain
	// plugin::CallAndReturn<CTrain*, 0x4A1120>();
	0AA7: call_function_return 0x4A1120 num_params 0 pop 0 func_ret [CTrain*]

	// FindPlayerEntity
	// plugin::CallAndReturn<CEntity*, 0x4A10F0>();
	0AA7: call_function_return 0x4A10F0 num_params 0 pop 0 func_ret [CEntity*]

	// FindPlayerVehicle
	// plugin::CallAndReturn<CVehicle*, 0x4A10C0>();
	0AA7: call_function_return 0x4A10C0 num_params 0 pop 0 func_ret [CVehicle*]

	// FindPlayerSpeed
	// plugin::CallAndReturn<CVector&, 0x4A1090>();
	0AA7: call_function_return 0x4A1090 num_params 0 pop 0 func_ret [CVector&]

	// FindPlayerCoors
	// plugin::CallAndReturn<CVector&, 0x4A1030>();
	0AA7: call_function_return 0x4A1030 num_params 0 pop 0 func_ret [CVector&]

	// GetFirstTexture
	// plugin::CallAndReturn<RwTexture*, 0x5264E0, RwTexDictionary*>(texDictionary);
	0AA7: call_function_return 0x5264E0 num_params 1 pop 1 [texDictionary] func_ret [RwTexture*]

	// GetFirstObject
	// plugin::CallAndReturn<RwObject*, 0x526460, RwFrame*>(frame);
	0AA7: call_function_return 0x526460 num_params 1 pop 1 [frame] func_ret [RwObject*]

	// GetFirstAtomic
	// plugin::CallAndReturn<RpAtomic*, 0x526420, RpClump*>(clump);
	0AA7: call_function_return 0x526420 num_params 1 pop 1 [clump] func_ret [RpAtomic*]

	// SetAmbientColours
	// plugin::Call<0x526FA0, RwRGBAReal*>(colours);
	0AA5: call_function 0x526FA0 num_params 1 pop 1 [colours]

	// SetAmbientColoursForPedsCarsAndObjects
	// plugin::Call<0x526F80>();
	0AA5: call_function 0x526F80 num_params 0 pop 0

	// SetAmbientColours
	// plugin::Call<0x526F60>();
	0AA5: call_function 0x526F60 num_params 0 pop 0

	// ActivateDirectional
	// plugin::Call<0x526F50>();
	0AA5: call_function 0x526F50 num_params 0 pop 0

	// DeActivateDirectional
	// plugin::Call<0x526F40>();
	0AA5: call_function 0x526F40 num_params 0 pop 0

	// ReSetAmbientAndDirectionalColours
	// plugin::Call<0x526F10>();
	0AA5: call_function 0x526F10 num_params 0 pop 0

	// SetBrightMarkerColours
	// plugin::Call<0x526E60, float>(power);
	0AA5: call_function 0x526E60 num_params 1 pop 1 [power]

	// SetAmbientAndDirectionalColours
	// plugin::Call<0x526DE0, float>(power);
	0AA5: call_function 0x526DE0 num_params 1 pop 1 [power]

	// RemoveExtraDirectionalLights
	// plugin::Call<0x526DB0, RpWorld*>(world);
	0AA5: call_function 0x526DB0 num_params 1 pop 1 [world]

	// AddAnExtraDirectionalLight
	// plugin::Call<0x526C70, RpWorld*, float, float, float, float, float, float>(world, x, y, z, red, green, blue);
	0AA5: call_function 0x526C70 num_params 7 pop 7 [world] [x] [y] [z] [red] [green] [blue]

	// WorldReplaceNormalLightsWithScorched
	// plugin::Call<0x526C10, RpWorld*, float>(world, intensity);
	0AA5: call_function 0x526C10 num_params 2 pop 2 [world] [intensity]

	// LightsDestroy
	// plugin::CallAndReturn<RpWorld*, 0x526B40, RpWorld*>(world);
	0AA7: call_function_return 0x526B40 num_params 1 pop 1 [world] func_ret [RpWorld*]

	// LightsCreate
	// plugin::CallAndReturn<RpWorld*, 0x5269A0, RpWorld*>(world);
	0AA7: call_function_return 0x5269A0 num_params 1 pop 1 [world] func_ret [RpWorld*]

	// SetLightsWithTimeOfDayColour
	// plugin::Call<0x526510, RpWorld*>(world);
	0AA5: call_function 0x526510 num_params 1 pop 1 [world]

	// GetFirstChild
	// plugin::CallAndReturn<RwFrame*, 0x5264A0, RwFrame*>(frame);
	0AA7: call_function_return 0x5264A0 num_params 1 pop 1 [frame] func_ret [RwFrame*]

	// GetFirstAtomicCallback
	// plugin::CallAndReturn<RpAtomic*, 0x526410, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x526410 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// GetFirstObjectCallback
	// plugin::CallAndReturn<RwObject*, 0x526450, RwObject*, void*>(object, data);
	0AA7: call_function_return 0x526450 num_params 2 pop 2 [object] [data] func_ret [RwObject*]

	// GetFirstFrameCallback
	// plugin::CallAndReturn<RwFrame*, 0x526490, RwFrame*, void*>(frame, data);
	0AA7: call_function_return 0x526490 num_params 2 pop 2 [frame] [data] func_ret [RwFrame*]

	// GetFirstTextureCallback
	// plugin::CallAndReturn<RwTexture*, 0x5264D0, RwTexture*, void*>(texture, data);
	0AA7: call_function_return 0x5264D0 num_params 2 pop 2 [texture] [data] func_ret [RwTexture*]

	// WorldReplaceScorchedLightsWithNormal
	// plugin::Call<0x526C50, RpWorld*>(world);
	0AA5: call_function 0x526C50 num_params 1 pop 1 [world]

	// CreateDebugFont
	// plugin::Call<0x526300>();
	0AA5: call_function 0x526300 num_params 0 pop 0

	// DestroyDebugFont
	// plugin::Call<0x526310>();
	0AA5: call_function 0x526310 num_params 0 pop 0

	// FlushObrsPrintfs
	// plugin::Call<0x526320>();
	0AA5: call_function 0x526320 num_params 0 pop 0

	// DefinedState
	// plugin::Call<0x526330>();
	0AA5: call_function 0x526330 num_params 0 pop 0

	// RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4055C0>(clump, animId);
	0AA7: call_function_return 0x4055C0 num_params 2 pop 2 [clump] [animId] func_ret [CAnimBlendAssociation*]

plugin_III\game_III\COneSheet.cpp:

	// COneSheet::AddToList
	// plugin::CallMethodDynGlobal<COneSheet *, COneSheet *>(gaddrof(COneSheet::AddToList), this, list);

	// COneSheet::RemoveFromList
	// plugin::CallMethodDynGlobal<COneSheet *>(gaddrof(COneSheet::RemoveFromList), this);

plugin_III\game_III\COnscreenTimer.cpp:

	// COnscreenTimer::AddClock
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, char *>(gaddrof(COnscreenTimer::AddClock), this, offset, gxt);

	// COnscreenTimer::AddCounter
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, unsigned short, char *>(gaddrof(COnscreenTimer::AddCounter), this, offset, type, gxt);

	// COnscreenTimer::ClearClock
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int>(gaddrof(COnscreenTimer::ClearClock), this, offset);

	// COnscreenTimer::ClearCounter
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int>(gaddrof(COnscreenTimer::ClearCounter), this, offset);

	// COnscreenTimer::Init
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::Init), this);

	// COnscreenTimer::Process
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::Process), this);

	// COnscreenTimer::ProcessForDisplay
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::ProcessForDisplay), this);

plugin_III\game_III\COnscreenTimerEntry.cpp:

	// COnscreenTimerEntry::Process
	// plugin::CallMethodDynGlobal<COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::Process), this);

	// COnscreenTimerEntry::ProcessForDisplay
	// plugin::CallMethodAndReturnDynGlobal<bool, COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::ProcessForDisplay), this);
	0AA8: call_method_return 0x429110 struct [COnscreenTimerEntry] num_params 0 pop 0 func_ret [bool]

	// COnscreenTimerEntry::ProcessForDisplayClock
	// plugin::CallMethodDynGlobal<COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::ProcessForDisplayClock), this);

	// COnscreenTimerEntry::ProcessForDisplayCounter
	// plugin::CallMethodDynGlobal<COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::ProcessForDisplayCounter), this);

plugin_III\game_III\CPacManPickup.cpp:

	// CPacManPickup::Update
	// plugin::CallMethodDynGlobal<CPacManPickup *>(gaddrof(CPacManPickup::Update), this);

plugin_III\game_III\CPacManPickups.cpp:

	// CPacManPickups::GenerateOnePMPickUp
	// plugin::CallDynGlobal<CVector>(gaddrof(CPacManPickups::GenerateOnePMPickUp), pos);

	// CPacManPickups::GeneratePMPickUps
	// plugin::CallDynGlobal<CVector, float, short, unsigned char>(gaddrof(CPacManPickups::GeneratePMPickUps), pos, scrambleMult, count, type);

	// CPacManPickups::GeneratePMPickUpsForRace
	// plugin::CallDynGlobal<int>(gaddrof(CPacManPickups::GeneratePMPickUpsForRace), race);

	// CPacManPickups::QueryPowerPillsCarriedByPlayer
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CPacManPickups::QueryPowerPillsCarriedByPlayer));

	// CPacManPickups::QueryPowerPillsEatenInRace
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CPacManPickups::QueryPowerPillsEatenInRace));

	// CPacManPickups::StartPacManRace
	// plugin::CallDynGlobal<int>(gaddrof(CPacManPickups::StartPacManRace), race);

	// CPacManPickups::StartPacManScramble
	// plugin::CallDynGlobal<CVector, float, short>(gaddrof(CPacManPickups::StartPacManScramble), pos, scrambleMult, count);

plugin_III\game_III\CPad.cpp:

	// CPad::AddToPCCheatString
	// plugin::CallMethod<0x492450, CPad *, char>(this, name);
	0AA6: call_method 0x492450 struct [CPad] num_params 1 pop 0 [name]

	// CPad::CPad
	// plugin::CallMethod<0x494EE0, CPad *>(this);
	0AA6: call_method 0x494EE0 struct [CPad] num_params 0 pop 0

	// CPad::CarGunJustDown
	// plugin::CallMethodAndReturn<bool, 0x4934F0, CPad *>(this);
	0AA8: call_method_return 0x4934F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ChangeStationJustDown
	// plugin::CallMethodAndReturn<bool, 0x493870, CPad *>(this);
	0AA8: call_method_return 0x493870 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::Clear
	// plugin::CallMethod<0x491A10, CPad *, bool>(this, enable);
	0AA6: call_method 0x491A10 struct [CPad] num_params 1 pop 0 [enable]

	// CPad::ClearMouseHistory
	// plugin::CallMethod<0x491B50, CPad *>(this);
	0AA6: call_method 0x491B50 struct [CPad] num_params 0 pop 0

	// CPad::CycleCameraModeDownJustDown
	// plugin::CallMethodAndReturn<bool, 0x493830, CPad *>(this);
	0AA8: call_method_return 0x493830 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleCameraModeUpJustDown
	// plugin::CallMethodAndReturn<bool, 0x4937D0, CPad *>(this);
	0AA8: call_method_return 0x4937D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponLeftJustDown
	// plugin::CallMethodAndReturn<bool, 0x493910, CPad *>(this);
	0AA8: call_method_return 0x493910 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponRightJustDown
	// plugin::CallMethodAndReturn<bool, 0x493940, CPad *>(this);
	0AA8: call_method_return 0x493940 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::DoCheats
	// plugin::CallMethod<0x492F20, CPad *, short>(this, arg0);
	0AA6: call_method 0x492F20 struct [CPad] num_params 1 pop 0 [arg0]

	// CPad::DoCheats
	// plugin::Call<0x492F00>();
	0AA5: call_function 0x492F00 num_params 0 pop 0

	// CPad::EditCodesForControls
	// plugin::Call<0x494690, int*>(arg0);
	0AA5: call_function 0x494690 num_params 1 pop 1 [arg0]

	// CPad::EditString
	// plugin::Call<0x4944B0, char*, int>(name, arg1);
	0AA5: call_function 0x4944B0 num_params 2 pop 2 [name] [arg1]

	// CPad::ExitVehicleJustDown
	// plugin::CallMethodAndReturn<bool, 0x493650, CPad *>(this);
	0AA8: call_method_return 0x493650 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ForceCameraBehindPlayer
	// plugin::CallMethodAndReturn<bool, 0x493D80, CPad *>(this);
	0AA8: call_method_return 0x493D80 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAccelerate
	// plugin::CallMethodAndReturn<short, 0x493780, CPad *>(this);
	0AA8: call_method_return 0x493780 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetAnaloguePadDown
	// plugin::CallAndReturn<bool, 0x493BA0>();
	0AA7: call_function_return 0x493BA0 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadLeft
	// plugin::CallAndReturn<bool, 0x493C00>();
	0AA7: call_function_return 0x493C00 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadLeftJustUp
	// plugin::CallAndReturn<bool, 0x493CC0>();
	0AA7: call_function_return 0x493CC0 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadRight
	// plugin::CallAndReturn<bool, 0x493C60>();
	0AA7: call_function_return 0x493C60 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadRightJustUp
	// plugin::CallAndReturn<bool, 0x493D20>();
	0AA7: call_function_return 0x493D20 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadUp
	// plugin::CallAndReturn<bool, 0x493B40>();
	0AA7: call_function_return 0x493B40 num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnalogueUpDown
	// plugin::CallMethodAndReturn<short, 0x493210, CPad *>(this);
	0AA8: call_method_return 0x493210 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetBrake
	// plugin::CallMethodAndReturn<short, 0x4935A0, CPad *>(this);
	0AA8: call_method_return 0x4935A0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetCarGunFired
	// plugin::CallMethodAndReturn<bool, 0x493490, CPad *>(this);
	0AA8: call_method_return 0x493490 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetCarGunLeftRight
	// plugin::CallMethodAndReturn<short, 0x4930C0, CPad *>(this);
	0AA8: call_method_return 0x4930C0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetCarGunUpDown
	// plugin::CallMethodAndReturn<short, 0x493070, CPad *>(this);
	0AA8: call_method_return 0x493070 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetExitVehicle
	// plugin::CallMethodAndReturn<bool, 0x4935F0, CPad *>(this);
	0AA8: call_method_return 0x4935F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetHandBrake
	// plugin::CallMethodAndReturn<short, 0x493560, CPad *>(this);
	0AA8: call_method_return 0x493560 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetHorn
	// plugin::CallMethodAndReturn<bool, 0x493350, CPad *>(this);
	0AA8: call_method_return 0x493350 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForCar
	// plugin::CallMethodAndReturn<bool, 0x4932F0, CPad *>(this);
	0AA8: call_method_return 0x4932F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForPed
	// plugin::CallMethodAndReturn<bool, 0x493320, CPad *>(this);
	0AA8: call_method_return 0x493320 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookLeft
	// plugin::CallMethodAndReturn<bool, 0x493290, CPad *>(this);
	0AA8: call_method_return 0x493290 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookRight
	// plugin::CallMethodAndReturn<bool, 0x4932C0, CPad *>(this);
	0AA8: call_method_return 0x4932C0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetPad
	// plugin::CallAndReturn<CPad*, 0x492F60, int>(padNumber);
	0AA7: call_function_return 0x492F60 num_params 1 pop 1 [padNumber] func_ret [CPad*]

	// CPad::GetPedWalkLeftRight
	// plugin::CallMethodAndReturn<short, 0x493110, CPad *>(this);
	0AA8: call_method_return 0x493110 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetPedWalkUpDown
	// plugin::CallMethodAndReturn<short, 0x493190, CPad *>(this);
	0AA8: call_method_return 0x493190 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetSprint
	// plugin::CallMethodAndReturn<bool, 0x493A70, CPad *>(this);
	0AA8: call_method_return 0x493A70 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetSteeringLeftRight
	// plugin::CallMethodAndReturn<short, 0x492F70, CPad *>(this);
	0AA8: call_method_return 0x492F70 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetSteeringUpDown
	// plugin::CallMethodAndReturn<short, 0x492FF0, CPad *>(this);
	0AA8: call_method_return 0x492FF0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetTarget
	// plugin::CallMethodAndReturn<bool, 0x493970, CPad *>(this);
	0AA8: call_method_return 0x493970 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetWeapon
	// plugin::CallMethodAndReturn<bool, 0x4936C0, CPad *>(this);
	0AA8: call_method_return 0x4936C0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::HornJustDown
	// plugin::CallMethodAndReturn<bool, 0x4933F0, CPad *>(this);
	0AA8: call_method_return 0x4933F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::JumpJustDown
	// plugin::CallMethodAndReturn<bool, 0x493A40, CPad *>(this);
	0AA8: call_method_return 0x493A40 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::LookAroundLeftRight
	// plugin::CallMethodAndReturn<int, 0x493F80, CPad *>(this);
	0AA8: call_method_return 0x493F80 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::LookAroundUpDown
	// plugin::CallMethodAndReturn<int, 0x494130, CPad *>(this);
	0AA8: call_method_return 0x494130 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::PrintErrorMessage
	// plugin::Call<0x4942B0>();
	0AA5: call_function 0x4942B0 num_params 0 pop 0

	// CPad::ProcessPCSpecificStuff
	// plugin::CallMethod<0x492C60, CPad *>(this);
	0AA6: call_method 0x492C60 struct [CPad] num_params 0 pop 0

	// CPad::ReconcileTwoControllersInput
	// plugin::CallMethod<0x491E60, CPad *, CControllerState const&, CControllerState const&>(this, controllerA, controllerB);
	0AA6: call_method 0x491E60 struct [CPad] num_params 2 pop 0 [controllerA] [controllerB]

	// CPad::ResetAverageWeapon
	// plugin::CallMethod<0x494290, CPad *>(this);
	0AA6: call_method 0x494290 struct [CPad] num_params 0 pop 0

	// CPad::ResetCheats
	// plugin::Call<0x494450>();
	0AA5: call_function 0x494450 num_params 0 pop 0

	// CPad::ShiftTargetLeftJustDown
	// plugin::CallMethodAndReturn<bool, 0x493AE0, CPad *>(this);
	0AA8: call_method_return 0x493AE0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ShiftTargetRightJustDown
	// plugin::CallMethodAndReturn<bool, 0x493B10, CPad *>(this);
	0AA8: call_method_return 0x493B10 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperModeLookLeftRight
	// plugin::CallMethodAndReturn<short, 0x493EE0, CPad *>(this);
	0AA8: call_method_return 0x493EE0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::SniperModeLookUpDown
	// plugin::CallMethodAndReturn<short, 0x493F30, CPad *>(this);
	0AA8: call_method_return 0x493F30 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::SniperZoomIn
	// plugin::CallMethodAndReturn<bool, 0x493E00, CPad *>(this);
	0AA8: call_method_return 0x493E00 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperZoomOut
	// plugin::CallMethodAndReturn<bool, 0x493E70, CPad *>(this);
	0AA8: call_method_return 0x493E70 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::StartShake
	// plugin::CallMethod<0x492230, CPad *, short, unsigned char>(this, time, frequency);
	0AA6: call_method 0x492230 struct [CPad] num_params 2 pop 0 [time] [frequency]

	// CPad::StartShake_Distance
	// plugin::CallMethod<0x492290, CPad *, short, unsigned char, float, float, float>(this, time, frequency, x, y, z);
	0AA6: call_method 0x492290 struct [CPad] num_params 5 pop 0 [time] [frequency] [x] [y] [z]

	// CPad::StartShake_Train
	// plugin::CallMethod<0x492360, CPad *, float, float>(this, x, y);
	0AA6: call_method 0x492360 struct [CPad] num_params 2 pop 0 [x] [y]

	// CPad::StopPadsShaking
	// plugin::Call<0x492F30>();
	0AA5: call_function 0x492F30 num_params 0 pop 0

	// CPad::StopShaking
	// plugin::CallMethod<0x492F50, CPad *, short>(this, arg0);
	0AA6: call_method 0x492F50 struct [CPad] num_params 1 pop 0 [arg0]

	// CPad::TargetJustDown
	// plugin::CallMethodAndReturn<bool, 0x4939D0, CPad *>(this);
	0AA8: call_method_return 0x4939D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::Update
	// plugin::CallMethod<0x492C70, CPad *>(this);
	0AA6: call_method 0x492C70 struct [CPad] num_params 0 pop 0

	// CPad::UpdateMouse
	// plugin::CallMethod<0x491CA0, CPad *>(this);
	0AA6: call_method 0x491CA0 struct [CPad] num_params 0 pop 0

	// CPad::UpdatePads
	// plugin::Call<0x492720>();
	0AA5: call_function 0x492720 num_params 0 pop 0

	// CPad::WeaponJustDown
	// plugin::CallMethodAndReturn<bool, 0x493700, CPad *>(this);
	0AA8: call_method_return 0x493700 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::~CPad
	// plugin::CallMethod<0x494ED0, CPad *>(this);
	0AA6: call_method 0x494ED0 struct [CPad] num_params 0 pop 0

plugin_III\game_III\CPager.cpp:

	// CPager::Init
	// plugin::CallMethod<0x52B6F0, CPager *>(this);
	0AA6: call_method 0x52B6F0 struct [CPager] num_params 0 pop 0

	// CPager::Process
	// plugin::CallMethod<0x52B740, CPager *>(this);
	0AA6: call_method 0x52B740 struct [CPager] num_params 0 pop 0

	// CPager::Display
	// plugin::CallMethod<0x52B890, CPager *>(this);
	0AA6: call_method 0x52B890 struct [CPager] num_params 0 pop 0

	// CPager::AddMessage
	// plugin::CallMethod<0x52B940, CPager *, wchar_t*, unsigned short, unsigned short, unsigned short>(this, text, speed, priority, arg3);
	0AA6: call_method 0x52B940 struct [CPager] num_params 4 pop 0 [text] [speed] [priority] [arg3]

	// CPager::AddMessageWithNumber
	// plugin::CallMethod<0x52BB50, CPager *, wchar_t*, int, int, int, int, int, int, unsigned short, unsigned short, unsigned short>(this, text, n1, n2, n3, n4, n5, n6, speed, priority, arg9);
	0AA6: call_method 0x52BB50 struct [CPager] num_params 10 pop 0 [text] [n1] [n2] [n3] [n4] [n5] [n6] [speed] [priority] [arg9]

	// CPager::ClearMessages
	// plugin::CallMethod<0x52BE00, CPager *>(this);
	0AA6: call_method 0x52BE00 struct [CPager] num_params 0 pop 0

	// CPager::RestartCurrentMessage
	// plugin::CallMethod<0x52BE50, CPager *>(this);
	0AA6: call_method 0x52BE50 struct [CPager] num_params 0 pop 0

plugin_III\game_III\CParticle.cpp:

	// CParticle::AddJetExplosion
	// plugin::CallDynGlobal<CVector const &, float, float>(gaddrof(CParticle::AddJetExplosion), pos, power, size);

	// *CParticle::AddParticle
	// plugin::CallAndReturnDynGlobal<CParticle *, tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int>(gaddrof_o(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int)), type, pos, direction, entity, size, rotationSpeed, rotation, currentFrame, lifeSpan);

	// *CParticle::AddParticle
	// plugin::CallAndReturnDynGlobal<CParticle *, tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const &, int, int, int, int>(gaddrof_o(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const &, int, int, int, int)), type, pos, direction, entity, size, color, rotationSpeed, rotation, currentFrame, lifeSpan);

	// CParticle::AddYardieDoorSmoke
	// plugin::CallDynGlobal<CVector const &, CMatrix const &>(gaddrof(CParticle::AddYardieDoorSmoke), pos, matrix);

	// CParticle::RemovePSystem
	// plugin::CallDynGlobal<tParticleType>(gaddrof(CParticle::RemovePSystem), type);

	// CParticle::RemoveParticle
	// plugin::CallDynGlobal<CParticle *, CParticle *, tParticleSystemData *>(gaddrof(CParticle::RemoveParticle), particle, previousParticle, particleSystem);

plugin_III\game_III\CParticleObject.cpp:

	// CParticleObject::RemoveObject
	// plugin::CallMethodDynGlobal<CParticleObject *>(gaddrof(CParticleObject::RemoveObject), this);

	// CParticleObject::UpdateClose
	// plugin::CallMethodDynGlobal<CParticleObject *>(gaddrof(CParticleObject::UpdateClose), this);

	// CParticleObject::UpdateFar
	// plugin::CallMethodDynGlobal<CParticleObject *>(gaddrof(CParticleObject::UpdateFar), this);

	// *CParticleObject::AddObject
	// plugin::CallAndReturnDynGlobal<CParticleObject *, unsigned short, CVector const &, unsigned char>(gaddrof_o(CParticleObject::AddObject, CParticleObject *(*)(unsigned short, CVector const &, unsigned char)), type, pos, remove);

	// *CParticleObject::AddObject
	// plugin::CallAndReturnDynGlobal<CParticleObject *, unsigned short, CVector const &, float, unsigned char>(gaddrof_o(CParticleObject::AddObject, CParticleObject *(*)(unsigned short, CVector const &, float, unsigned char)), type, pos, size, remove);

	// *CParticleObject::AddObject
	// plugin::CallAndReturnDynGlobal<CParticleObject *, unsigned short, CVector const &, CVector const &, float, unsigned char>(gaddrof_o(CParticleObject::AddObject, CParticleObject *(*)(unsigned short, CVector const &, CVector const &, float, unsigned char)), type, pos, target, size, remove);

	// *CParticleObject::AddObject
	// plugin::CallAndReturnDynGlobal<CParticleObject *, unsigned short, CVector const &, CVector const &, float, unsigned int, RwRGBA const &, unsigned char>(gaddrof_o(CParticleObject::AddObject, CParticleObject *(*)(unsigned short, CVector const &, CVector const &, float, unsigned int, RwRGBA const &, unsigned char)), type, pos, target, size, lifeTime, color, remove);

	// CParticleObject::LoadParticle
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CParticleObject::LoadParticle), buffer, size);

	// CParticleObject::MoveToList
	// plugin::CallDynGlobal<CParticleObject **, CParticleObject **, CParticleObject *>(gaddrof(CParticleObject::MoveToList), from, to, object);

	// CParticleObject::SaveParticle
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CParticleObject::SaveParticle), buffer, size);

plugin_III\game_III\cParticleSystemMgr.cpp:

	// cParticleSystemMgr::cParticleSystemMgr
	// plugin::CallMethod<0x50FCB0, cParticleSystemMgr *>(this);
	0AA6: call_method 0x50FCB0 struct [cParticleSystemMgr] num_params 0 pop 0

	// cParticleSystemMgr::Initialise
	// plugin::CallMethod<0x50FCD0, cParticleSystemMgr *>(this);
	0AA6: call_method 0x50FCD0 struct [cParticleSystemMgr] num_params 0 pop 0

	// cParticleSystemMgr::LoadParticleData
	// plugin::CallMethod<0x50FDF0, cParticleSystemMgr *>(this);
	0AA6: call_method 0x50FDF0 struct [cParticleSystemMgr] num_params 0 pop 0

plugin_III\game_III\CPathFind.cpp:

	// CPathFind::AddNodeToList
	// plugin::CallMethodDynGlobal<CPathFind *, CPathNode *, int>(gaddrof(CPathFind::AddNodeToList), this, node, listId);

	// CPathFind::AllocatePathFindInfoMem
	// plugin::CallMethodDynGlobal<CPathFind *, short>(gaddrof(CPathFind::AllocatePathFindInfoMem), this, numPathGroups);

	// CPathFind::CalcNodeCoors
	// plugin::CallMethodDynGlobal<CPathFind *, short, short, short, int, CVector *>(gaddrof(CPathFind::CalcNodeCoors), this, x, y, z, id, out);

	// CPathFind::CalcRoadDensity
	// plugin::CallMethodAndReturnDynGlobal<float, CPathFind *, float, float>(gaddrof(CPathFind::CalcRoadDensity), this, x, y);
	0AA8: call_method_return 0x42C990 struct [CPathFind] num_params 2 pop 0 [x] [y] func_ret [float]

	// CPathFind::CountFloodFillGroups
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char>(gaddrof(CPathFind::CountFloodFillGroups), this, type);

	// CPathFind::DoPathSearch
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char, CVector, int, CVector, CPathNode **, short *, short, CVehicle *, float *, float, int>(gaddrof(CPathFind::DoPathSearch), this, type, start, startNodeId, target, nodes, numNodes, maxNumNodes, vehicle, dist, distLimit, forcedTargetNode);

	// CPathFind::FindNextNodeWandering
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char, CVector, CPathNode **, CPathNode **, unsigned char, unsigned char *>(gaddrof(CPathFind::FindNextNodeWandering), this, type, coors, lastNode, nextNode, curDir, nextDir);

	// CPathFind::FindNodeClosestToCoors
	// plugin::CallMethodAndReturnDynGlobal<int, CPathFind *, CVector, unsigned char, float, bool, bool>(gaddrof(CPathFind::FindNodeClosestToCoors), this, coors, type, distLimit, ignoreDisabled, ignoreBetweenLevels);
	0AA8: call_method_return 0x42CC30 struct [CPathFind] num_params 5 pop 0 [coors] [type] [distLimit] [ignoreDisabled] [ignoreBetweenLevels] func_ret [int]

	// CPathFind::FindNodeClosestToCoorsFavourDirection
	// plugin::CallMethodAndReturnDynGlobal<int, CPathFind *, CVector, unsigned char, float, float>(gaddrof(CPathFind::FindNodeClosestToCoorsFavourDirection), this, coors, type, dirX, dirY);
	0AA8: call_method_return 0x42CDC0 struct [CPathFind] num_params 4 pop 0 [coors] [type] [dirX] [dirY] func_ret [int]

	// CPathFind::FindNodeOrientationForCarPlacement
	// plugin::CallMethodAndReturnDynGlobal<float, CPathFind *, unsigned int>(gaddrof(CPathFind::FindNodeOrientationForCarPlacement), this, nodeId);
	0AA8: call_method_return 0x42CFC0 struct [CPathFind] num_params 1 pop 0 [nodeId] func_ret [float]

	// CPathFind::FindNodeOrientationForCarPlacementFacingDestination
	// plugin::CallMethodAndReturnDynGlobal<float, CPathFind *, unsigned int, float, float, bool>(gaddrof(CPathFind::FindNodeOrientationForCarPlacementFacingDestination), this, nodeId, x, y, towards);
	0AA8: call_method_return 0x42D060 struct [CPathFind] num_params 4 pop 0 [nodeId] [x] [y] [towards] func_ret [float]

	// *CPathFind::FindRoadObjectClosestToCoors
	// plugin::CallMethodAndReturnDynGlobal<CTreadable *, CPathFind *, CVector, unsigned char>(gaddrof(CPathFind::FindRoadObjectClosestToCoors), this, coors, type);
	0AA8: call_method_return 0x42D2A0 struct [*CPathFind] num_params 2 pop 0 [coors] [type] func_ret [CTreadable *]

	// CPathFind::GeneratePedCreationCoors
	// plugin::CallMethodAndReturnDynGlobal<bool, CPathFind *, float, float, float, float, float, float, CVector *, int *, int *, float *, CMatrix *>(gaddrof(CPathFind::GeneratePedCreationCoors), this, x, y, minDist, maxDist, minDistOffScreen, maxDistOffScreen, posn, pNode1, pNode2, positionBetweenNodes, camMatrix);
	0AA8: call_method_return 0x42C1E0 struct [CPathFind] num_params 11 pop 0 [x] [y] [minDist] [maxDist] [minDistOffScreen] [maxDistOffScreen] [posn] [pNode1] [pNode2] [positionBetweenNodes] [camMatrix] func_ret [bool]

	// CPathFind::Init
	// plugin::CallMethodDynGlobal<CPathFind *>(gaddrof(CPathFind::Init), this);

	// CPathFind::Load
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char *, unsigned int>(gaddrof(CPathFind::Load), this, buf, size);

	// CPathFind::MarkRoadsBetweenLevelsInArea
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, float, float>(gaddrof(CPathFind::MarkRoadsBetweenLevelsInArea), this, x1, x2, y1, y2, z1, z2);

	// CPathFind::MarkRoadsBetweenLevelsNodeAndNeighbours
	// plugin::CallMethodDynGlobal<CPathFind *, int>(gaddrof(CPathFind::MarkRoadsBetweenLevelsNodeAndNeighbours), this, nodeId);

	// CPathFind::NewGenerateCarCreationCoors
	// plugin::CallMethodAndReturnDynGlobal<bool, CPathFind *, float, float, float, float, float, float, bool, CVector *, int *, int *, float *, bool>(gaddrof(CPathFind::NewGenerateCarCreationCoors), this, x, y, dirX, dirY, spawnDist, angleLimit, forward, posn, pNode1, pNode2, positionBetweenNodes, ignoreDisabled);
	0AA8: call_method_return 0x42BF10 struct [CPathFind] num_params 12 pop 0 [x] [y] [dirX] [dirY] [spawnDist] [angleLimit] [forward] [posn] [pNode1] [pNode2] [positionBetweenNodes] [ignoreDisabled] func_ret [bool]

	// CPathFind::PedMarkRoadsBetweenLevelsInArea
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, float, float>(gaddrof(CPathFind::PedMarkRoadsBetweenLevelsInArea), this, x1, x2, y1, y2, z1, z2);

	// CPathFind::PreparePathData
	// plugin::CallMethodDynGlobal<CPathFind *>(gaddrof(CPathFind::PreparePathData), this);

	// CPathFind::PreparePathDataForType
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char, CTempNode *, CPathInfoForObject *, float, CTempDetachedNode *, int>(gaddrof(CPathFind::PreparePathDataForType), this, type, tempNodes, info, maxDist, detachedNodes, numDetached);

	// CPathFind::RegisterMapObject
	// plugin::CallMethodDynGlobal<CPathFind *, CTreadable *>(gaddrof(CPathFind::RegisterMapObject), this, mapObject);

	// CPathFind::RemoveBadStartNode
	// plugin::CallMethodDynGlobal<CPathFind *, CVector, CPathNode **, short *>(gaddrof(CPathFind::RemoveBadStartNode), this, pos, nodes, nodeCount);

	// CPathFind::RemoveNodeFromList
	// plugin::CallMethodDynGlobal<CPathFind *, CPathNode *>(gaddrof(CPathFind::RemoveNodeFromList), this, node);

	// CPathFind::Save
	// plugin::CallMethodDynGlobal<CPathFind *, unsigned char *, unsigned int *>(gaddrof(CPathFind::Save), this, buf, size);

	// CPathFind::SetLinksBridgeLights
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, bool>(gaddrof(CPathFind::SetLinksBridgeLights), this, x1, y1, x2, y2, enable);

	// CPathFind::StoreNodeInfoCar
	// plugin::CallMethodDynGlobal<CPathFind *, short, short, char, char, short, short, short, short, char, char>(gaddrof(CPathFind::StoreNodeInfoCar), this, id, node, type, next, x, y, z, width, numLeft, numRight);

	// CPathFind::StoreNodeInfoPed
	// plugin::CallMethodDynGlobal<CPathFind *, short, short, char, char, short, short, short, short, bool>(gaddrof(CPathFind::StoreNodeInfoPed), this, id, node, type, next, x, y, z, width, crossing);

	// CPathFind::SwitchOffNodeAndNeighbours
	// plugin::CallMethodDynGlobal<CPathFind *, int, bool>(gaddrof(CPathFind::SwitchOffNodeAndNeighbours), this, nodeId, disable);

	// CPathFind::SwitchPedRoadsOffInArea
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, float, float, bool>(gaddrof(CPathFind::SwitchPedRoadsOffInArea), this, x1, x2, y1, y2, z1, z2, disable);

	// CPathFind::SwitchRoadsInAngledArea
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, float, float, float, unsigned char, unsigned char>(gaddrof(CPathFind::SwitchRoadsInAngledArea), this, x1, y1, z1, x2, y2, z2, length, type, enable);

	// CPathFind::SwitchRoadsOffInArea
	// plugin::CallMethodDynGlobal<CPathFind *, float, float, float, float, float, float, bool>(gaddrof(CPathFind::SwitchRoadsOffInArea), this, x1, x2, y1, y2, z1, z2, disable);

	// CPathFind::TestCoorsCloseness
	// plugin::CallMethodAndReturnDynGlobal<bool, CPathFind *, CVector, unsigned char, CVector>(gaddrof(CPathFind::TestCoorsCloseness), this, target, type, start);
	0AA8: call_method_return 0x42C8C0 struct [CPathFind] num_params 3 pop 0 [target] [type] [start] func_ret [bool]

	// CPathFind::TestCrossesRoad
	// plugin::CallMethodAndReturnDynGlobal<bool, CPathFind *, CPathNode *, CPathNode *>(gaddrof(CPathFind::TestCrossesRoad), this, node1, node2);
	0AA8: call_method_return 0x42E340 struct [CPathFind] num_params 2 pop 0 [node1] [node2] func_ret [bool]

	// CPathFind::TestForPedTrafficLight
	// plugin::CallMethodAndReturnDynGlobal<bool, CPathFind *, CPathNode *, CPathNode *>(gaddrof(CPathFind::TestForPedTrafficLight), this, node1, node2);
	0AA8: call_method_return 0x42E1B0 struct [CPathFind] num_params 2 pop 0 [node1] [node2] func_ret [bool]

	// CPathFind::LoadPathFindData
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CPathFind::LoadPathFindData));

plugin_III\game_III\CPed.cpp:

	// CPed::SetModelIndex
	// plugin::CallVirtualMethod<3, CPed *, unsigned int>(this, modelIndex);

	// CPed::ProcessControl
	// plugin::CallVirtualMethod<8, CPed *>(this);

	// CPed::Teleport
	// plugin::CallVirtualMethod<11, CPed *, CVector>(this, pos);

	// CPed::PreRender
	// plugin::CallVirtualMethod<12, CPed *>(this);

	// CPed::Render
	// plugin::CallVirtualMethod<13, CPed *>(this);

	// CPed::SetupLighting
	// plugin::CallVirtualMethodAndReturn<bool, 14, CPed *>(this);

	// CPed::RemoveLighting
	// plugin::CallVirtualMethod<15, CPed *, bool>(this, resetWorldColors);

	// CPed::FlagToDestroyWhenNextProcessed
	// plugin::CallVirtualMethod<16, CPed *>(this);

	// CPed::ProcessEntityCollision
	// plugin::CallVirtualMethod<17, CPed *, CEntity *, CColPoint *>(this, entity, colPoint);

	// CPed::SetMoveAnim
	// plugin::CallVirtualMethod<18, CPed *>(this);

	// CPed::AddWeaponModel
	// plugin::CallMethodDynGlobal<CPed *, int>(gaddrof(CPed::AddWeaponModel), this, modelIndex);

	// CPed::AimGun
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::AimGun), this);

	// CPed::ApplyHeadShot
	// plugin::CallMethodDynGlobal<CPed *, eWeaponType, CVector, unsigned char>(gaddrof(CPed::ApplyHeadShot), this, type, pos, evenOnPlayer);

	// CPed::Attack
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Attack), this);

	// CPed::Avoid
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Avoid), this);

	// CPed::BeingDraggedFromCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::BeingDraggedFromCar), this);

	// CPed::BuildPedLists
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::BuildPedLists), this);

	// CPed::CalculateNewOrientation
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::CalculateNewOrientation), this);

	// CPed::CalculateNewVelocity
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::CalculateNewVelocity), this);

	// CPed::CanBeDeleted
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanBeDeleted), this);
	0AA8: call_method_return 0x4CF8B0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanPedDriveOff
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanPedDriveOff), this);
	0AA8: call_method_return 0x4D7AC0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanPedJumpThis
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanPedJumpThis), this);
	0AA8: call_method_return 0x4D72F0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanPedReturnToState
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanPedReturnToState), this);
	0AA8: call_method_return 0x4CE760 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanSeeEntity
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CEntity *, float>(gaddrof(CPed::CanSeeEntity), this, entity, threshold);
	0AA8: call_method_return 0x4DD820 struct [CPed] num_params 2 pop 0 [entity] [threshold] func_ret [bool]

	// CPed::CanSetPedState
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanSetPedState), this);
	0AA8: call_method_return 0x4CE7A0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanStrafeOrMouseControl
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CanStrafeOrMouseControl), this);
	0AA8: call_method_return 0x4CE7D0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Chat
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Chat), this);

	// CPed::CheckAroundForPossibleCollisions
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::CheckAroundForPossibleCollisions), this);

	// *CPed::CheckForDeadPeds
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CPed *>(gaddrof(CPed::CheckForDeadPeds), this);
	0AA8: call_method_return 0x4D4860 struct [*CPed] num_params 0 pop 0 func_ret [CPed *]

	// CPed::CheckForExplosions
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVector2D &>(gaddrof(CPed::CheckForExplosions), this, area);
	0AA8: call_method_return 0x4D4650 struct [CPed] num_params 1 pop 0 [area] func_ret [bool]

	// *CPed::CheckForGunShots
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CPed *>(gaddrof(CPed::CheckForGunShots), this);
	0AA8: call_method_return 0x4D47D0 struct [*CPed] num_params 0 pop 0 func_ret [CPed *]

	// CPed::CheckForPointBlankPeds
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, CPed *, CPed *>(gaddrof(CPed::CheckForPointBlankPeds), this, pedToVerify);
	0AA8: call_method_return 0x4E6990 struct [CPed] num_params 1 pop 0 [pedToVerify] func_ret [unsigned char]

	// CPed::CheckIfInTheAir
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::CheckIfInTheAir), this);
	0AA8: call_method_return 0x4D0BE0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::ClearAimFlag
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearAimFlag), this);

	// CPed::ClearAll
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearAll), this);

	// CPed::ClearAttack
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearAttack), this);

	// CPed::ClearAttackByRemovingAnim
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearAttackByRemovingAnim), this);

	// CPed::ClearChat
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearChat), this);

	// CPed::ClearDuck
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearDuck), this);

	// CPed::ClearFall
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearFall), this);

	// CPed::ClearFlee
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearFlee), this);

	// CPed::ClearInvestigateEvent
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearInvestigateEvent), this);

	// CPed::ClearLeader
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearLeader), this);

	// CPed::ClearLook
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearLook), this);

	// CPed::ClearLookFlag
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearLookFlag), this);

	// CPed::ClearObjective
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearObjective), this);

	// CPed::ClearPause
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearPause), this);

	// CPed::ClearPointGunAt
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearPointGunAt), this);

	// CPed::ClearSeek
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearSeek), this);

	// CPed::ClearWeapons
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ClearWeapons), this);

	// CPed::CollideWithPed
	// plugin::CallMethodDynGlobal<CPed *, CPed *>(gaddrof(CPed::CollideWithPed), this, collideWith);

	// CPed::CreateDeadPedMoney
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::CreateDeadPedMoney), this);

	// CPed::CreateDeadPedWeaponPickups
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::CreateDeadPedWeaponPickups), this);

	// CPed::Die
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Die), this);

	// CPed::DoesLOSBulletHitPed
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, CPed *, CColPoint &>(gaddrof(CPed::DoesLOSBulletHitPed), this, colPoint);
	0AA8: call_method_return 0x4EB5C0 struct [CPed] num_params 1 pop 0 [colPoint] func_ret [unsigned char]

	// CPed::Duck
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Duck), this);

	// CPed::DuckAndCover
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::DuckAndCover), this);
	0AA8: call_method_return 0x4E3EC0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::EndFight
	// plugin::CallMethodDynGlobal<CPed *, unsigned char>(gaddrof(CPed::EndFight), this, endType);

	// CPed::EnterCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::EnterCar), this);

	// CPed::EnterTrain
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::EnterTrain), this);

	// CPed::ExitCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ExitCar), this);

	// CPed::ExitTrain
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ExitTrain), this);

	// CPed::FacePhone
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::FacePhone), this);
	0AA8: call_method_return 0x4D3CC0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Fall
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Fall), this);

	// CPed::Fight
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Fight), this);

	// CPed::FightStrike
	// plugin::CallMethodDynGlobal<CPed *, CVector &>(gaddrof(CPed::FightStrike), this, touchedNodePos);

	// CPed::FindBestCoordsFromNodes
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVector, CVector *>(gaddrof(CPed::FindBestCoordsFromNodes), this, unused, bestCoords);
	0AA8: call_method_return 0x4E3A90 struct [CPed] num_params 2 pop 0 [unused] [bestCoords] func_ret [bool]

	// CPed::Flee
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Flee), this);

	// CPed::FollowPath
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::FollowPath), this);

	// CPed::ForceStoredObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective>(gaddrof(CPed::ForceStoredObjective), this, objective);

	// *CPed::GetFormationPosition
	// plugin::CallMethodAndReturnDynGlobal<CVector *, CPed *>(gaddrof(CPed::GetFormationPosition), this);
	0AA8: call_method_return 0x4DF420 struct [*CPed] num_params 0 pop 0 func_ret [CVector *]

	// CPed::GetLocalDirection
	// plugin::CallMethodAndReturnDynGlobal<int, CPed *, CVector2D const &>(gaddrof(CPed::GetLocalDirection), this, posOffset);
	0AA8: call_method_return 0x4CCE20 struct [CPed] num_params 1 pop 0 [posOffset] func_ret [int]

	// CPed::GetNearestDoor
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, CVector &>(gaddrof(CPed::GetNearestDoor), this, vehicle, posToOpen);

	// CPed::GetNearestPassengerDoor
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVehicle *, CVector &>(gaddrof(CPed::GetNearestPassengerDoor), this, vehicle, posToOpen);
	0AA8: call_method_return 0x4E1F30 struct [CPed] num_params 2 pop 0 [vehicle] [posToOpen] func_ret [bool]

	// CPed::GetNearestTrainDoor
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVehicle *, CVector &>(gaddrof(CPed::GetNearestTrainDoor), this, vehicle, doorPos);
	0AA8: call_method_return 0x4E2D70 struct [CPed] num_params 2 pop 0 [vehicle] [doorPos] func_ret [bool]

	// CPed::GetNearestTrainPedPosition
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, CVector &>(gaddrof(CPed::GetNearestTrainPedPosition), this, vehicle, enterPos);

	// CPed::GetNextPointOnRoute
	// plugin::CallMethodAndReturnDynGlobal<short, CPed *>(gaddrof(CPed::GetNextPointOnRoute), this);
	0AA8: call_method_return 0x4DD720 struct [CPed] num_params 0 pop 0 func_ret [short]

	// CPed::GetPedRadioCategory
	// plugin::CallMethodAndReturnDynGlobal<unsigned char, CPed *, unsigned int>(gaddrof(CPed::GetPedRadioCategory), this, modelIndex);
	0AA8: call_method_return 0x4D7B50 struct [CPed] num_params 1 pop 0 [modelIndex] func_ret [unsigned char]

	// CPed::GetWeaponSlot
	// plugin::CallMethodAndReturnDynGlobal<int, CPed *, eWeaponType>(gaddrof(CPed::GetWeaponSlot), this, type);
	0AA8: call_method_return 0x4CFA40 struct [CPed] num_params 1 pop 0 [type] func_ret [int]

	// CPed::GiveWeapon
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CPed *, eWeaponType, unsigned int>(gaddrof(CPed::GiveWeapon), this, type, ammo);
	0AA8: call_method_return 0x4CF9B0 struct [CPed] num_params 2 pop 0 [type] [ammo] func_ret [unsigned int]

	// CPed::GoToNearestDoor
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *>(gaddrof(CPed::GoToNearestDoor), this, vehicle);

	// CPed::GrantAmmo
	// plugin::CallMethodDynGlobal<CPed *, eWeaponType, unsigned int>(gaddrof(CPed::GrantAmmo), this, type, ammo);

	// CPed::HaveReachedNextPointOnRoute
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, float>(gaddrof(CPed::HaveReachedNextPointOnRoute), this, distToCountReached);
	0AA8: call_method_return 0x4DD7B0 struct [CPed] num_params 1 pop 0 [distToCountReached] func_ret [bool]

	// CPed::Idle
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Idle), this);

	// CPed::InTheAir
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::InTheAir), this);

	// CPed::InflictDamage
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CEntity *, eWeaponType, float, ePedPieceTypes, unsigned char>(gaddrof(CPed::InflictDamage), this, damagedBy, type, damage, pedPiece, direction);
	0AA8: call_method_return 0x4EA420 struct [CPed] num_params 5 pop 0 [damagedBy] [type] [damage] [pedPiece] [direction] func_ret [bool]

	// CPed::InformMyGangOfAttack
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::InformMyGangOfAttack), this, attacker);

	// CPed::InvestigateEvent
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::InvestigateEvent), this);

	// CPed::IsGangMember
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsGangMember), this);
	0AA8: call_method_return 0x4D4910 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPedHeadAbovePos
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, float>(gaddrof(CPed::IsPedHeadAbovePos), this, zOffset);
	0AA8: call_method_return 0x4EB670 struct [CPed] num_params 1 pop 0 [zOffset] func_ret [bool]

	// CPed::IsPedInControl
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsPedInControl), this);
	0AA8: call_method_return 0x4CE6C0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPedShootable
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsPedShootable), this);
	0AA8: call_method_return 0x4CE710 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPlayer
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsPlayer), this);
	0AA8: call_method_return 0x4D48E0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPointerValid
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsPointerValid), this);
	0AA8: call_method_return 0x4D4930 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsRoomToBeCarJacked
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::IsRoomToBeCarJacked), this);
	0AA8: call_method_return 0x4E4D90 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsTemporaryObjective
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, eObjective>(gaddrof(CPed::IsTemporaryObjective), this, objective);
	0AA8: call_method_return 0x4D8290 struct [CPed] num_params 1 pop 0 [objective] func_ret [bool]

	// CPed::KillPedWithCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, float>(gaddrof(CPed::KillPedWithCar), this, vehicle, impulse);

	// CPed::LineUpPedWithCar
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::LineUpPedWithCar), this, phase);

	// CPed::LineUpPedWithTrain
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::LineUpPedWithTrain), this);

	// CPed::Look
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Look), this);

	// CPed::LookForInterestingNodes
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::LookForInterestingNodes), this);
	0AA8: call_method_return 0x4D5040 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::LookForSexyCars
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::LookForSexyCars), this);

	// CPed::LookForSexyPeds
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::LookForSexyPeds), this);

	// CPed::MakePhonecall
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::MakePhonecall), this);
	0AA8: call_method_return 0x4D3E20 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::MoveHeadToLook
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::MoveHeadToLook), this);

	// CPed::Mug
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Mug), this);

	// CPed::OurPedCanSeeThisOne
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CEntity *>(gaddrof(CPed::OurPedCanSeeThisOne), this, entity);
	0AA8: call_method_return 0x4C5700 struct [CPed] num_params 1 pop 0 [entity] func_ret [bool]

	// CPed::Pause
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Pause), this);

	// CPed::PlacePedOnDryLand
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::PlacePedOnDryLand), this);
	0AA8: call_method_return 0x4EB6E0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::PlayFootSteps
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::PlayFootSteps), this);

	// CPed::PlayHitSound
	// plugin::CallMethodDynGlobal<CPed *, CPed *>(gaddrof(CPed::PlayHitSound), this, hitTo);

	// CPed::PointGunAt
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::PointGunAt), this);

	// CPed::PositionPedOutOfCollision
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::PositionPedOutOfCollision), this);
	0AA8: call_method_return 0x4E4F30 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::PossiblyFindBetterPosToSeekCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVector *, CVehicle *>(gaddrof(CPed::PossiblyFindBetterPosToSeekCar), this, pos, vehicle);
	0AA8: call_method_return 0x4D6A00 struct [CPed] num_params 2 pop 0 [pos] [vehicle] func_ret [bool]

	// CPed::ProcessBuoyancy
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ProcessBuoyancy), this);

	// CPed::ProcessObjective
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ProcessObjective), this);

	// CPed::QuitEnteringCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::QuitEnteringCar), this);

	// CPed::ReactToAttack
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::ReactToAttack), this, attacker);

	// CPed::ReactToPointGun
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::ReactToPointGun), this, entWithGun);

	// CPed::RegisterThreatWithGangPeds
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::RegisterThreatWithGangPeds), this, attacker);

	// CPed::RemoveBodyPart
	// plugin::CallMethodDynGlobal<CPed *, int, char>(gaddrof(CPed::RemoveBodyPart), this, nodeId, direction);

	// CPed::RemoveInCarAnims
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RemoveInCarAnims), this);

	// CPed::RemoveWeaponModel
	// plugin::CallMethodDynGlobal<CPed *, int>(gaddrof(CPed::RemoveWeaponModel), this, modelIndex);

	// CPed::RestartNonPartialAnims
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestartNonPartialAnims), this);

	// CPed::RestoreGunPosition
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestoreGunPosition), this);

	// CPed::RestoreHeadPosition
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestoreHeadPosition), this);

	// CPed::RestoreHeadingRate
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestoreHeadingRate), this);

	// CPed::RestorePreviousObjective
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestorePreviousObjective), this);

	// CPed::RestorePreviousState
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::RestorePreviousState), this);

	// CPed::RunToReportCrime
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, eCrimeType>(gaddrof(CPed::RunToReportCrime), this, type);
	0AA8: call_method_return 0x4C10C0 struct [CPed] num_params 1 pop 0 [type] func_ret [bool]

	// CPed::Say
	// plugin::CallMethodDynGlobal<CPed *, unsigned short>(gaddrof(CPed::Say), this, audio);

	// CPed::ScanForInterestingStuff
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ScanForInterestingStuff), this);

	// CPed::ScanForThreats
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CPed *>(gaddrof(CPed::ScanForThreats), this);
	0AA8: call_method_return 0x4C5FE0 struct [CPed] num_params 0 pop 0 func_ret [unsigned int]

	// CPed::Seek
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::Seek), this);
	0AA8: call_method_return 0x4D1640 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SeekBoatPosition
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SeekBoatPosition), this);

	// CPed::SeekCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SeekCar), this);

	// CPed::SeekFollowingPath
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVector *>(gaddrof(CPed::SeekFollowingPath), this, unused);
	0AA8: call_method_return 0x4D2E70 struct [CPed] num_params 1 pop 0 [unused] func_ret [bool]

	// CPed::SelectGunIfArmed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::SelectGunIfArmed), this);
	0AA8: call_method_return 0x4DD920 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::ServiceTalking
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::ServiceTalking), this);

	// CPed::ServiceTalkingWhenDead
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::ServiceTalkingWhenDead), this);
	0AA8: call_method_return 0x4E5850 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SetAimFlag
	// plugin::CallMethodDynGlobal<CPed *, float>(gaddrof_o(CPed::SetAimFlag, void (CPed::*)(float)), this, direction);

	// CPed::SetAimFlag
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof_o(CPed::SetAimFlag, void (CPed::*)(CEntity *)), this, entity);

	// CPed::SetAmmo
	// plugin::CallMethodDynGlobal<CPed *, eWeaponType, unsigned int>(gaddrof(CPed::SetAmmo), this, type, ammo);

	// CPed::SetAttack
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::SetAttack), this, victim);

	// CPed::SetAttackTimer
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetAttackTimer), this, time);

	// CPed::SetBeingDraggedFromCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int, bool>(gaddrof(CPed::SetBeingDraggedFromCar), this, vehicle, doorNode, quickJack);

	// CPed::SetBuyIceCream
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetBuyIceCream), this);

	// CPed::SetCarJack
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *>(gaddrof(CPed::SetCarJack), this, vehicle);

	// CPed::SetCarJack_AllClear
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int, unsigned int>(gaddrof(CPed::SetCarJack_AllClear), this, vehicle, doorNode, doorFlag);

	// CPed::SetChat
	// plugin::CallMethodDynGlobal<CPed *, CEntity *, unsigned int>(gaddrof(CPed::SetChat), this, chatWith, time);

	// CPed::SetCurrentWeapon
	// plugin::CallMethodDynGlobal<CPed *, int>(gaddrof(CPed::SetCurrentWeapon), this, type);

	// CPed::SetDead
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetDead), this);

	// CPed::SetDie
	// plugin::CallMethodDynGlobal<CPed *, int, float, float>(gaddrof(CPed::SetDie), this, animId, delta, speed);

	// CPed::SetDirectionToWalkAroundObject
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::SetDirectionToWalkAroundObject), this, entity);

	// CPed::SetDuck
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetDuck), this, time);

	// CPed::SetEnterCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int>(gaddrof(CPed::SetEnterCar), this, vehicle, unused);

	// CPed::SetEnterCar_AllClear
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int, unsigned int>(gaddrof(CPed::SetEnterCar_AllClear), this, vehicle, doorNode, doorFlag);

	// CPed::SetEnterTrain
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int>(gaddrof(CPed::SetEnterTrain), this, train, unused);

	// CPed::SetEvasiveDive
	// plugin::CallMethodDynGlobal<CPed *, CPhysical *, unsigned char>(gaddrof(CPed::SetEvasiveDive), this, reason, onlyRandomJump);

	// CPed::SetEvasiveStep
	// plugin::CallMethodDynGlobal<CPed *, CPhysical *, unsigned char>(gaddrof(CPed::SetEvasiveStep), this, reason, animType);

	// CPed::SetExitCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int>(gaddrof(CPed::SetExitCar), this, vehicle, doorNode);

	// CPed::SetExitTrain
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *>(gaddrof(CPed::SetExitTrain), this, train);

	// CPed::SetFall
	// plugin::CallMethodDynGlobal<CPed *, int, int, unsigned char>(gaddrof(CPed::SetFall), this, extraTime, animId, evenIfNotInControl);

	// CPed::SetFlee
	// plugin::CallMethodDynGlobal<CPed *, CVector2D const &, int>(gaddrof_o(CPed::SetFlee, void (CPed::*)(CVector2D const &, int)), this, from, time);

	// CPed::SetFlee
	// plugin::CallMethodDynGlobal<CPed *, CEntity *, int>(gaddrof_o(CPed::SetFlee, void (CPed::*)(CEntity *, int)), this, fleeFrom, time);

	// CPed::SetFollowPath
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CVector>(gaddrof(CPed::SetFollowPath), this, dest);
	0AA8: call_method_return 0x4D2EA0 struct [CPed] num_params 1 pop 0 [dest] func_ret [bool]

	// CPed::SetFollowRoute
	// plugin::CallMethodDynGlobal<CPed *, short, short>(gaddrof(CPed::SetFollowRoute), this, currentPoint, routeType);

	// CPed::SetFormation
	// plugin::CallMethodDynGlobal<CPed *, eFormation>(gaddrof(CPed::SetFormation), this, formation);

	// CPed::SetGetUp
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetGetUp), this);

	// CPed::SetIdle
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetIdle), this);

	// CPed::SetInTheAir
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetInTheAir), this);

	// CPed::SetInvestigateEvent
	// plugin::CallMethodDynGlobal<CPed *, eEventType, CVector2D, float, unsigned short, float>(gaddrof(CPed::SetInvestigateEvent), this, type, pos, distanceToCountDone, time, angle);

	// CPed::SetJump
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetJump), this);

	// CPed::SetLanding
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetLanding), this);

	// CPed::SetLeader
	// plugin::CallMethodDynGlobal<CPed *, CPed *>(gaddrof(CPed::SetLeader), this, leader);

	// CPed::SetLookFlag
	// plugin::CallMethodDynGlobal<CPed *, float, bool>(gaddrof_o(CPed::SetLookFlag, void (CPed::*)(float, bool)), this, direction, keepTryingToLook);

	// CPed::SetLookFlag
	// plugin::CallMethodDynGlobal<CPed *, CEntity *, bool>(gaddrof_o(CPed::SetLookFlag, void (CPed::*)(CEntity *, bool)), this, target, keepTryingToLook);

	// CPed::SetLookTimer
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetLookTimer), this, time);

	// CPed::SetMoveState
	// plugin::CallMethodDynGlobal<CPed *, eMoveState>(gaddrof(CPed::SetMoveState), this, state);

	// CPed::SetObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective>(gaddrof_o(CPed::SetObjective, void (CPed::*)(eObjective)), this, objective);

	// CPed::SetObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective, void *>(gaddrof_o(CPed::SetObjective, void (CPed::*)(eObjective, void *)), this, objective, entity);

	// CPed::SetObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective, CVector, float>(gaddrof_o(CPed::SetObjective, void (CPed::*)(eObjective, CVector, float)), this, objective, dest, safeDist);

	// CPed::SetObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective, short, short>(gaddrof_o(CPed::SetObjective, void (CPed::*)(eObjective, short, short)), this, objective, routePoint, routeType);

	// CPed::SetObjective
	// plugin::CallMethodDynGlobal<CPed *, eObjective, CVector>(gaddrof_o(CPed::SetObjective, void (CPed::*)(eObjective, CVector)), this, objective, dest);

	// CPed::SetObjectiveTimer
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetObjectiveTimer), this, time);

	// CPed::SetPedPositionInCar
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetPedPositionInCar), this);

	// CPed::SetPedPositionInTrain
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetPedPositionInTrain), this);

	// CPed::SetPedStats
	// plugin::CallMethodDynGlobal<CPed *, ePedStats>(gaddrof(CPed::SetPedStats), this, stat);

	// CPed::SetPointGunAt
	// plugin::CallMethodDynGlobal<CPed *, CEntity *>(gaddrof(CPed::SetPointGunAt), this, entity);

	// CPed::SetRadioStation
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetRadioStation), this);

	// CPed::SetSeek
	// plugin::CallMethodDynGlobal<CPed *, CVector, float>(gaddrof_o(CPed::SetSeek, void (CPed::*)(CVector, float)), this, pos, distanceToCountDone);

	// CPed::SetSeek
	// plugin::CallMethodDynGlobal<CPed *, CEntity *, float>(gaddrof_o(CPed::SetSeek, void (CPed::*)(CEntity *, float)), this, seeking, distanceToCountDone);

	// CPed::SetSeekBoatPosition
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *>(gaddrof(CPed::SetSeekBoatPosition), this, boat);

	// CPed::SetSeekCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *, unsigned int>(gaddrof(CPed::SetSeekCar), this, vehicle, doorNode);

	// CPed::SetShootTimer
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetShootTimer), this, time);

	// CPed::SetSolicit
	// plugin::CallMethodDynGlobal<CPed *, unsigned int>(gaddrof(CPed::SetSolicit), this, time);

	// CPed::SetStoredObjective
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetStoredObjective), this);

	// CPed::SetStoredState
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::SetStoredState), this);

	// CPed::SetWaitState
	// plugin::CallMethodDynGlobal<CPed *, eWaitState, void *>(gaddrof(CPed::SetWaitState), this, state, time);

	// CPed::SetWanderPath
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, char>(gaddrof(CPed::SetWanderPath), this, pathStateDest);
	0AA8: call_method_return 0x4D2750 struct [CPed] num_params 1 pop 0 [pathStateDest] func_ret [bool]

	// CPed::Solicit
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Solicit), this);

	// CPed::SortPeds
	// plugin::CallMethodDynGlobal<CPed *, CPed **, int, int>(gaddrof(CPed::SortPeds), this, list, min, max);

	// CPed::SpawnFlyingComponent
	// plugin::CallMethodDynGlobal<CPed *, int, char>(gaddrof(CPed::SpawnFlyingComponent), this, nodeId, direction);

	// CPed::StartFightAttack
	// plugin::CallMethodDynGlobal<CPed *, unsigned char>(gaddrof(CPed::StartFightAttack), this, buttonPressure);

	// CPed::StartFightDefend
	// plugin::CallMethodDynGlobal<CPed *, unsigned char, unsigned char, unsigned char>(gaddrof(CPed::StartFightDefend), this, direction, hitLevel, strength);

	// CPed::StopNonPartialAnims
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::StopNonPartialAnims), this);

	// CPed::TurnBody
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::TurnBody), this);
	0AA8: call_method_return 0x4D1390 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::UpdateFromLeader
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::UpdateFromLeader), this);

	// CPed::UpdatePosition
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::UpdatePosition), this);

	// CPed::UseGroundColModel
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::UseGroundColModel), this);
	0AA8: call_method_return 0x4CE730 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Wait
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::Wait), this);

	// CPed::WanderPath
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::WanderPath), this);

	// CPed::WanderRange
	// plugin::CallMethodDynGlobal<CPed *>(gaddrof(CPed::WanderRange), this);

	// CPed::WarpPedIntoCar
	// plugin::CallMethodDynGlobal<CPed *, CVehicle *>(gaddrof(CPed::WarpPedIntoCar), this, vehicle);

	// CPed::WarpPedToNearEntityOffScreen
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CEntity *>(gaddrof(CPed::WarpPedToNearEntityOffScreen), this, warpTo);
	0AA8: call_method_return 0x4E5570 struct [CPed] num_params 1 pop 0 [warpTo] func_ret [bool]

	// CPed::WarpPedToNearLeaderOffScreen
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *>(gaddrof(CPed::WarpPedToNearLeaderOffScreen), this);
	0AA8: call_method_return 0x4E52A0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::WillChat
	// plugin::CallMethodAndReturnDynGlobal<bool, CPed *, CPed *>(gaddrof(CPed::WillChat), this, stranger);
	0AA8: call_method_return 0x4C7340 struct [CPed] num_params 1 pop 0 [stranger] func_ret [bool]

	// CPed::WorkOutHeadingForMovingFirstPerson
	// plugin::CallMethodAndReturnDynGlobal<float, CPed *, float>(gaddrof(CPed::WorkOutHeadingForMovingFirstPerson), this, offset);
	0AA8: call_method_return 0x4C78F0 struct [CPed] num_params 1 pop 0 [offset] func_ret [float]

	// CPed::FinishDieAnimCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishDieAnimCB), association, data);

	// CPed::FinishFightMoveCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishFightMoveCB), association, data);

	// CPed::FinishHitHeadCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishHitHeadCB), association, data);

	// CPed::FinishJumpCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishJumpCB), association, data);

	// CPed::FinishLaunchCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishLaunchCB), association, data);

	// CPed::FinishedAttackCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishedAttackCB), association, data);

	// CPed::FinishedWaitCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::FinishedWaitCB), association, data);

	// CPed::PedAnimAlignCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimAlignCB), association, data);

	// CPed::PedAnimDoorCloseCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimDoorCloseCB), association, data);

	// CPed::PedAnimDoorCloseRollingCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimDoorCloseRollingCB), association, data);

	// CPed::PedAnimDoorOpenCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimDoorOpenCB), association, data);

	// CPed::PedAnimGetInCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimGetInCB), association, data);

	// CPed::PedAnimPullPedOutCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimPullPedOutCB), association, data);

	// CPed::PedAnimStepOutCarCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedAnimStepOutCarCB), association, data);

	// CPed::PedEvadeCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedEvadeCB), association, data);

	// CPed::PedGetupCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedGetupCB), association, data);

	// CPed::PedLandCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedLandCB), association, data);

	// CPed::PedSetDraggedOutCarCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetDraggedOutCarCB), association, data);

	// CPed::PedSetDraggedOutCarPositionCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetDraggedOutCarPositionCB), association, data);

	// CPed::PedSetInCarCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetInCarCB), association, data);

	// CPed::PedSetInTrainCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetInTrainCB), association, data);

	// CPed::PedSetOutCarCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetOutCarCB), association, data);

	// CPed::PedSetOutTrainCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetOutTrainCB), association, data);

	// CPed::PedSetQuickDraggedOutCarPositionCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedSetQuickDraggedOutCarPositionCB), association, data);

	// CPed::PedStaggerCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::PedStaggerCB), association, data);

	// CPed::RestoreHeadingRateCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(CPed::RestoreHeadingRateCB), association, data);

	// FinishFuckUCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(FinishFuckUCB), anim, data);

	// particleProduceFootSplash
	// plugin::CallDynGlobal<CPed *, CVector const &, float, int>(gaddrof(particleProduceFootSplash), ped, pos, size, times);

	// particleProduceFootDust
	// plugin::CallDynGlobal<CPed *, CVector const &, float, int>(gaddrof(particleProduceFootDust), ped, pos, size, times);

	// *RemoveAllModelCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(RemoveAllModelCB), object, data);

	// AddYardieDoorSmoke
	// plugin::CallDynGlobal<CVehicle *, unsigned int>(gaddrof(AddYardieDoorSmoke), vehicle, doorNode);

	// CheckForPedsOnGroundToAttack
	// plugin::CallAndReturnDynGlobal<int, CPed *, CPed **>(gaddrof(CheckForPedsOnGroundToAttack), attacker, pedOnGround);

	// *SetPedAtomicVisibilityCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(SetPedAtomicVisibilityCB), object, data);

	// *RecurseFrameChildrenVisibilityCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(RecurseFrameChildrenVisibilityCB), frame, data);

	// *CloneAtomicToFrameCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(CloneAtomicToFrameCB), object, data);

	// *RecurseFrameChildrenToCloneCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(RecurseFrameChildrenToCloneCB), frame, data);

plugin_III\game_III\CPedIK.cpp:

	// CPedIK::ExtractYawAndPitchLocal
	// plugin::CallMethodDynGlobal<CPedIK *, RwMatrix *, float *, float *>(gaddrof(CPedIK::ExtractYawAndPitchLocal), this, matrix, yaw, pitch);

	// CPedIK::ExtractYawAndPitchWorld
	// plugin::CallMethodDynGlobal<CPedIK *, RwMatrix *, float *, float *>(gaddrof(CPedIK::ExtractYawAndPitchWorld), this, matrix, yaw, pitch);

	// CPedIK::GetComponentPosition
	// plugin::CallMethodDynGlobal<CPedIK *, RwV3d &, unsigned int>(gaddrof(CPedIK::GetComponentPosition), this, pos, node);

	// CPedIK::Init
	// plugin::CallMethodDynGlobal<CPedIK *, CPed *>(gaddrof(CPedIK::Init), this, ped);

	// CPedIK::LookAtPosition
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *, CVector const &>(gaddrof(CPedIK::LookAtPosition), this, pos);
	0AA8: call_method_return 0x4ED590 struct [CPedIK] num_params 1 pop 0 [pos] func_ret [bool]

	// CPedIK::LookInDirection
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *, float, float>(gaddrof(CPedIK::LookInDirection), this, targetYaw, targetPitch);
	0AA8: call_method_return 0x4ED620 struct [CPedIK] num_params 2 pop 0 [targetYaw] [targetPitch] func_ret [bool]

	// CPedIK::MoveLimb
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CPedIK *, LimbOrientation &, float, float, LimbMovementInfo &>(gaddrof(CPedIK::MoveLimb), this, limb, targetYaw, targetPitch, moveInfo);
	0AA8: call_method_return 0x4ED440 struct [CPedIK] num_params 4 pop 0 [limb] [targetYaw] [targetPitch] [moveInfo] func_ret [unsigned int]

	// CPedIK::PointGunAtPosition
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *, CVector const &>(gaddrof(CPedIK::PointGunAtPosition), this, pos);
	0AA8: call_method_return 0x4ED920 struct [CPedIK] num_params 1 pop 0 [pos] func_ret [bool]

	// CPedIK::PointGunInDirection
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *, float, float>(gaddrof(CPedIK::PointGunInDirection), this, targetYaw, targetPitch);
	0AA8: call_method_return 0x4ED9B0 struct [CPedIK] num_params 2 pop 0 [targetYaw] [targetPitch] func_ret [bool]

	// CPedIK::PointGunInDirectionUsingArm
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *, float, float>(gaddrof(CPedIK::PointGunInDirectionUsingArm), this, targetYaw, targetPitch);
	0AA8: call_method_return 0x4EDB20 struct [CPedIK] num_params 2 pop 0 [targetYaw] [targetPitch] func_ret [bool]

	// CPedIK::RestoreGunPosn
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *>(gaddrof(CPedIK::RestoreGunPosn), this);
	0AA8: call_method_return 0x4EDD70 struct [CPedIK] num_params 0 pop 0 func_ret [bool]

	// CPedIK::RestoreLookAt
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedIK *>(gaddrof(CPedIK::RestoreLookAt), this);
	0AA8: call_method_return 0x4ED810 struct [CPedIK] num_params 0 pop 0 func_ret [bool]

	// CPedIK::RotateTorso
	// plugin::CallMethodDynGlobal<CPedIK *, AnimBlendFrameData *, LimbOrientation &, bool>(gaddrof(CPedIK::RotateTorso), this, frameData, limb, changeRoll);

	// *CPedIK::GetWorldMatrix
	// plugin::CallAndReturnDynGlobal<RwMatrix *, RwFrame *, RwMatrix *>(gaddrof(CPedIK::GetWorldMatrix), frame, matrix);

plugin_III\game_III\CPedModelInfo.cpp:

	// CPedModelInfo::DeleteRwObject
	// plugin::CallVirtualMethod<2, CPedModelInfo *>(this);

	// CPedModelInfo::SetClump
	// plugin::CallVirtualMethod<6, CPedModelInfo *, RpClump *>(this, clump);

	// CPedModelInfo::CreateHitColModel
	// plugin::CallMethodDynGlobal<CPedModelInfo *>(gaddrof(CPedModelInfo::CreateHitColModel), this);

	// CPedModelInfo::SetLowDetailClump
	// plugin::CallMethodDynGlobal<CPedModelInfo *, RpClump *>(gaddrof(CPedModelInfo::SetLowDetailClump), this, clump);

plugin_III\game_III\CPedPath.cpp:

	// CPedPath::AddBlockade
	// plugin::CallDynGlobal<CEntity *, CPedPathNode(*)[40], CVector *>(gaddrof(CPedPath::AddBlockade), entity, pathNodes, posn);

	// CPedPath::AddBlockadeSectorList
	// plugin::CallDynGlobal<CPtrList *, CPedPathNode(*)[40], CVector *>(gaddrof(CPedPath::AddBlockadeSectorList), list, pathNodes, posn);

	// CPedPath::AddNodeToList
	// plugin::CallDynGlobal<CPedPathNode *, short, CPedPathNode *>(gaddrof(CPedPath::AddNodeToList), pNode, index, pList);

	// CPedPath::AddNodeToPathList
	// plugin::CallDynGlobal<CPedPathNode *, short, CPedPathNode *>(gaddrof(CPedPath::AddNodeToPathList), pNode, index, pNodeList);

	// CPedPath::CalcPedRoute
	// plugin::CallAndReturnDynGlobal<bool, unsigned char, CVector, CVector, CVector *, short *, short>(gaddrof(CPedPath::CalcPedRoute), pathType, position, destination, pointPoses, pointsFound, maxPoints);

	// CPedPath::RemoveNodeFromList
	// plugin::CallDynGlobal<CPedPathNode *>(gaddrof(CPedPath::RemoveNodeFromList), node);

plugin_III\game_III\CPedPlacement.cpp:

	// CPedPlacement::FindZCoorForPed
	// plugin::CallDynGlobal<CVector *>(gaddrof(CPedPlacement::FindZCoorForPed), position);

	// CPedPlacement::IsPositionClearForPed
	// plugin::CallAndReturnDynGlobal<bool, CVector *>(gaddrof(CPedPlacement::IsPositionClearForPed), position);

	// *CPedPlacement::IsPositionClearOfCars
	// plugin::CallAndReturnDynGlobal<CEntity *, CVector *>(gaddrof(CPedPlacement::IsPositionClearOfCars), position);

plugin_III\game_III\CPedStats.cpp:

	// CPedStats::GetPedStatType
	// plugin::CallAndReturnDynGlobal<unsigned int, char *>(gaddrof(CPedStats::GetPedStatType), name);

plugin_III\game_III\CPedType.cpp:

	// CPedType::FindPedFlag
	// plugin::CallAndReturn<unsigned int, 0x4EEF40, char*>(flagName);
	0AA7: call_function_return 0x4EEF40 num_params 1 pop 1 [flagName] func_ret [unsigned int]

	// CPedType::FindPedType
	// plugin::CallAndReturn<unsigned int, 0x4EEC10, char*>(pedName);
	0AA7: call_function_return 0x4EEC10 num_params 1 pop 1 [pedName] func_ret [unsigned int]

	// CPedType::Initialise
	// plugin::Call<0x4EE7E0>();
	0AA5: call_function 0x4EE7E0 num_params 0 pop 0

	// CPedType::Load
	// plugin::Call<0x4EF3D0, unsigned char*, unsigned int>(bufferPointer, structSize);
	0AA5: call_function 0x4EF3D0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CPedType::LoadPedData
	// plugin::Call<0x4EE8D0>();
	0AA5: call_function 0x4EE8D0 num_params 0 pop 0

	// CPedType::Save
	// plugin::Call<0x4EF320, unsigned char*, unsigned int*>(bufferPointer, structSize);
	0AA5: call_function 0x4EF320 num_params 2 pop 2 [bufferPointer] [structSize]

	// CPedType::Shutdown
	// plugin::Call<0x4EE890>();
	0AA5: call_function 0x4EE890 num_params 0 pop 0

plugin_III\game_III\CPhoneInfo.cpp:

	// CPhoneInfo::FindNearestFreePhone
	// plugin::CallMethodAndReturnDynGlobal<int, CPhoneInfo *, CVector *>(gaddrof(CPhoneInfo::FindNearestFreePhone), this, point);
	0AA8: call_method_return 0x42F720 struct [CPhoneInfo] num_params 1 pop 0 [point] func_ret [int]

	// CPhoneInfo::GrabPhone
	// plugin::CallMethodAndReturnDynGlobal<int, CPhoneInfo *, float, float>(gaddrof(CPhoneInfo::GrabPhone), this, x, y);
	0AA8: call_method_return 0x42FDB0 struct [CPhoneInfo] num_params 2 pop 0 [x] [y] func_ret [int]

	// CPhoneInfo::HasMessageBeenDisplayed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhoneInfo *, int>(gaddrof(CPhoneInfo::HasMessageBeenDisplayed), this, index);
	0AA8: call_method_return 0x42FFF0 struct [CPhoneInfo] num_params 1 pop 0 [index] func_ret [bool]

	// CPhoneInfo::Initialise
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Initialise), this);

	// CPhoneInfo::IsMessageBeingDisplayed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhoneInfo *, int>(gaddrof(CPhoneInfo::IsMessageBeingDisplayed), this, index);
	0AA8: call_method_return 0x430030 struct [CPhoneInfo] num_params 1 pop 0 [index] func_ret [bool]

	// CPhoneInfo::Load
	// plugin::CallMethodDynGlobal<CPhoneInfo *, unsigned char *, unsigned int>(gaddrof(CPhoneInfo::Load), this, buf, size);

	// CPhoneInfo::PhoneAtThisPosition
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhoneInfo *, CVector>(gaddrof(CPhoneInfo::PhoneAtThisPosition), this, point);
	0AA8: call_method_return 0x42FD50 struct [CPhoneInfo] num_params 1 pop 0 [point] func_ret [bool]

	// CPhoneInfo::Save
	// plugin::CallMethodDynGlobal<CPhoneInfo *, unsigned char *, unsigned int *>(gaddrof(CPhoneInfo::Save), this, buf, size);

	// CPhoneInfo::SetPhoneMessage_JustOnce
	// plugin::CallMethodDynGlobal<CPhoneInfo *, int, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *>(gaddrof(CPhoneInfo::SetPhoneMessage_JustOnce), this, index, text_1, text_2, text_3, text_4, text_5, text_6);

	// CPhoneInfo::SetPhoneMessage_Repeatedly
	// plugin::CallMethodDynGlobal<CPhoneInfo *, int, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *>(gaddrof(CPhoneInfo::SetPhoneMessage_Repeatedly), this, index, text_1, text_2, text_3, text_4, text_5, text_6);

	// CPhoneInfo::Shutdown
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Shutdown), this);

	// CPhoneInfo::Update
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Update), this);

	// PhonePickUpCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(PhonePickUpCB), association, data);

	// PhonePutDownCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, void *>(gaddrof(PhonePutDownCB), association, data);

plugin_III\game_III\CPhysical.cpp:

	// CPhysical::Add
	// plugin::CallVirtualMethod<1, CPhysical *>(this);

	// CPhysical::Remove
	// plugin::CallVirtualMethod<2, CPhysical *>(this);

	// *CPhysical::GetBoundRect
	// plugin::CallVirtualMethodAndReturn<CRect *, 7, CPhysical *>(this);

	// CPhysical::ProcessControl
	// plugin::CallVirtualMethod<8, CPhysical *>(this);

	// CPhysical::ProcessCollision
	// plugin::CallVirtualMethod<9, CPhysical *>(this);

	// CPhysical::ProcessShift
	// plugin::CallVirtualMethod<10, CPhysical *>(this);

	// CPhysical::ProcessEntityCollision
	// plugin::CallVirtualMethod<17, CPhysical *, CEntity *, CColPoint *>(this, entity, colPoint);

	// CPhysical::AddCollisionRecord
	// plugin::CallMethodDynGlobal<CPhysical *, CEntity *>(gaddrof(CPhysical::AddCollisionRecord), this, entity);

	// CPhysical::AddCollisionRecord_Treadable
	// plugin::CallMethodDynGlobal<CPhysical *, CEntity *>(gaddrof(CPhysical::AddCollisionRecord_Treadable), this, entity);

	// CPhysical::AddToMovingList
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::AddToMovingList), this);

	// CPhysical::ApplyAirResistance
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::ApplyAirResistance), this);

	// CPhysical::ApplyCollision
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CPhysical *, CColPoint &, float *, float *>(gaddrof(CPhysical::ApplyCollision), this, physical, colPoint, impulseA, impulseB);
	0AA8: call_method_return 0x4973A0 struct [CPhysical] num_params 4 pop 0 [physical] [colPoint] [impulseA] [impulseB] func_ret [bool]

	// CPhysical::ApplyCollisionAlt
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CEntity *, CColPoint &, float *, CVector &, CVector &>(gaddrof(CPhysical::ApplyCollisionAlt), this, entity, colPoint, impulse, moveSpeed, turnSpeed);
	0AA8: call_method_return 0x4992A0 struct [CPhysical] num_params 5 pop 0 [entity] [colPoint] [impulse] [moveSpeed] [turnSpeed] func_ret [bool]

	// CPhysical::ApplyFriction
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof_o(CPhysical::ApplyFriction, void (CPhysical::*)()), this);

	// CPhysical::ApplyFriction
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, float, CColPoint &>(gaddrof_o(CPhysical::ApplyFriction, bool (CPhysical::*)(float, CColPoint &)), this, adhesiveLimit, colPoint);
	0AA8: call_method_return 0x49A180 struct [CPhysical] num_params 2 pop 0 [adhesiveLimit] [colPoint] func_ret [bool]

	// CPhysical::ApplyFriction
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CPhysical *, float, CColPoint &>(gaddrof_o(CPhysical::ApplyFriction, bool (CPhysical::*)(CPhysical *, float, CColPoint &)), this, physical, adhesiveLimit, colPoint);
	0AA8: call_method_return 0x49A180 struct [CPhysical] num_params 3 pop 0 [physical] [adhesiveLimit] [colPoint] func_ret [bool]

	// CPhysical::ApplyFrictionMoveForce
	// plugin::CallMethodDynGlobal<CPhysical *, float, float, float>(gaddrof(CPhysical::ApplyFrictionMoveForce), this, jx, jy, jz);

	// CPhysical::ApplyFrictionTurnForce
	// plugin::CallMethodDynGlobal<CPhysical *, float, float, float, float, float, float>(gaddrof(CPhysical::ApplyFrictionTurnForce), this, jx, jy, jz, rx, ry, rz);

	// CPhysical::ApplyGravity
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::ApplyGravity), this);

	// CPhysical::ApplyMoveForce
	// plugin::CallMethodDynGlobal<CPhysical *, float, float, float>(gaddrof(CPhysical::ApplyMoveForce), this, jx, jy, jz);

	// CPhysical::ApplyMoveSpeed
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::ApplyMoveSpeed), this);

	// CPhysical::ApplySpringCollisionAlt
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, float, CVector &, CVector &, float, float>(gaddrof(CPhysical::ApplySpringCollisionAlt), this, springConst, springDir, point, springRatio, bias);
	0AA8: call_method_return 0x499890 struct [CPhysical] num_params 5 pop 0 [springConst] [springDir] [point] [springRatio] [bias] func_ret [bool]

	// CPhysical::ApplySpringDampening
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, float, CVector &, CVector &, CVector &>(gaddrof(CPhysical::ApplySpringDampening), this, damping, springDir, point, speed);
	0AA8: call_method_return 0x499990 struct [CPhysical] num_params 4 pop 0 [damping] [springDir] [point] [speed] func_ret [bool]

	// CPhysical::ApplyTurnForce
	// plugin::CallMethodDynGlobal<CPhysical *, float, float, float, float, float, float>(gaddrof(CPhysical::ApplyTurnForce), this, jx, jy, jz, px, py, pz);

	// CPhysical::ApplyTurnSpeed
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::ApplyTurnSpeed), this);

	// CPhysical::CheckCollision
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *>(gaddrof(CPhysical::CheckCollision), this);
	0AA8: call_method_return 0x496E50 struct [CPhysical] num_params 0 pop 0 func_ret [bool]

	// CPhysical::CheckCollision_SimpleCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *>(gaddrof(CPhysical::CheckCollision_SimpleCar), this);
	0AA8: call_method_return 0x496EB0 struct [CPhysical] num_params 0 pop 0 func_ret [bool]

	// CPhysical::GetHasCollidedWith
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CEntity *>(gaddrof(CPhysical::GetHasCollidedWith), this, entity);
	0AA8: call_method_return 0x497240 struct [CPhysical] num_params 1 pop 0 [entity] func_ret [bool]

	// CPhysical::ProcessCollisionSectorList
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CPtrList *>(gaddrof(CPhysical::ProcessCollisionSectorList), this, list);
	0AA8: call_method_return 0x49B620 struct [CPhysical] num_params 1 pop 0 [list] func_ret [bool]

	// CPhysical::ProcessCollisionSectorList_SimpleCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CSector *>(gaddrof(CPhysical::ProcessCollisionSectorList_SimpleCar), this, sector);
	0AA8: call_method_return 0x49E790 struct [CPhysical] num_params 1 pop 0 [sector] func_ret [bool]

	// CPhysical::ProcessShiftSectorList
	// plugin::CallMethodAndReturnDynGlobal<bool, CPhysical *, CPtrList *>(gaddrof(CPhysical::ProcessShiftSectorList), this, list);
	0AA8: call_method_return 0x49DA10 struct [CPhysical] num_params 1 pop 0 [list] func_ret [bool]

	// CPhysical::RemoveAndAdd
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::RemoveAndAdd), this);

	// CPhysical::RemoveFromMovingList
	// plugin::CallMethodDynGlobal<CPhysical *>(gaddrof(CPhysical::RemoveFromMovingList), this);

	// CPhysical::RemoveRefsToEntity
	// plugin::CallMethodDynGlobal<CPhysical *, CEntity *>(gaddrof(CPhysical::RemoveRefsToEntity), this, entity);

	// CPhysical::PlacePhysicalRelativeToOtherPhysical
	// plugin::CallDynGlobal<CPhysical *, CPhysical *, CVector>(gaddrof(CPhysical::PlacePhysicalRelativeToOtherPhysical), other, physical, localPos);

plugin_III\game_III\CPickup.cpp:

	// *CPickup::GiveUsAPickUpObject
	// plugin::CallMethodAndReturnDynGlobal<CObject *, CPickup *, int>(gaddrof(CPickup::GiveUsAPickUpObject), this, handle);
	0AA8: call_method_return 0x433BA0 struct [*CPickup] num_params 1 pop 0 [handle] func_ret [CObject *]

	// CPickup::Update
	// plugin::CallMethodAndReturnDynGlobal<bool, CPickup *, CPlayerPed *, CVehicle *, int>(gaddrof(CPickup::Update), this, player, vehicle, playerId);
	0AA8: call_method_return 0x430860 struct [CPickup] num_params 3 pop 0 [player] [vehicle] [playerId] func_ret [bool]

plugin_III\game_III\CPickups.cpp:

	// CPickups::AddToCollectedPickupsArray
	// plugin::CallDynGlobal<int>(gaddrof(CPickups::AddToCollectedPickupsArray), index);

	// CPickups::DoCollectableEffects
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CPickups::DoCollectableEffects), entity);

	// CPickups::DoMineEffects
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CPickups::DoMineEffects), entity);

	// CPickups::DoMoneyEffects
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CPickups::DoMoneyEffects), entity);

	// CPickups::DoPickUpEffects
	// plugin::CallDynGlobal<CObject *>(gaddrof(CPickups::DoPickUpEffects), entity);

	// CPickups::FindColourIndexForWeaponMI
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CPickups::FindColourIndexForWeaponMI), model);

	// CPickups::GenerateNewOne
	// plugin::CallAndReturnDynGlobal<int, CVector, unsigned int, unsigned char, unsigned int>(gaddrof(CPickups::GenerateNewOne), pos, modelIndex, type, quantity);

	// CPickups::GenerateNewOne_WeaponType
	// plugin::CallAndReturnDynGlobal<int, CVector, eWeaponType, unsigned char, unsigned int>(gaddrof(CPickups::GenerateNewOne_WeaponType), pos, weaponType, type, quantity);

	// CPickups::GetActualPickupIndex
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CPickups::GetActualPickupIndex), index);

	// CPickups::GetNewUniquePickupIndex
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CPickups::GetNewUniquePickupIndex), handle);

	// CPickups::GivePlayerGoodiesWithPickUpMI
	// plugin::CallAndReturnDynGlobal<bool, unsigned short, int>(gaddrof(CPickups::GivePlayerGoodiesWithPickUpMI), modelId, playerId);

	// CPickups::IsPickUpPickedUp
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CPickups::IsPickUpPickedUp), handle);

	// CPickups::Load
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPickups::Load), buf, size);

	// CPickups::ModelForWeapon
	// plugin::CallAndReturnDynGlobal<int, eWeaponType>(gaddrof(CPickups::ModelForWeapon), weaponType);

	// CPickups::PassTime
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CPickups::PassTime), time);

	// CPickups::RemovePickUp
	// plugin::CallDynGlobal<int>(gaddrof(CPickups::RemovePickUp), handle);

	// CPickups::Save
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPickups::Save), buf, size);

	// CPickups::WeaponForModel
	// plugin::CallAndReturnDynGlobal<eWeaponType, int>(gaddrof(CPickups::WeaponForModel), model);

plugin_III\game_III\CPlaceable.cpp:

	// &CPlaceable::GetPosition
	// plugin::CallMethodAndReturnDynGlobal<CVector &, CPlaceable *>(gaddrof(CPlaceable::GetPosition), this);
	0AA8: call_method_return 0x4CBAC0 struct [&CPlaceable] num_params 0 pop 0 func_ret [CVector &]

	// CPlaceable::IsWithinArea
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlaceable *, float, float, float, float>(gaddrof_o(CPlaceable::IsWithinArea, bool (CPlaceable::*)(float, float, float, float)), this, x1, y1, x2, y2);
	0AA8: call_method_return 0x49FAF0 struct [CPlaceable] num_params 4 pop 0 [x1] [y1] [x2] [y2] func_ret [bool]

	// CPlaceable::IsWithinArea
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlaceable *, float, float, float, float, float, float>(gaddrof_o(CPlaceable::IsWithinArea, bool (CPlaceable::*)(float, float, float, float, float, float)), this, x1, y1, z1, x2, y2, z2);
	0AA8: call_method_return 0x49FAF0 struct [CPlaceable] num_params 6 pop 0 [x1] [y1] [z1] [x2] [y2] [z2] func_ret [bool]

	// CPlaceable::SetHeading
	// plugin::CallMethodDynGlobal<CPlaceable *, float>(gaddrof(CPlaceable::SetHeading), this, angle);

	// CPlaceable::SetPosition
	// plugin::CallMethodDynGlobal<CPlaceable *, float, float, float>(gaddrof(CPlaceable::SetPosition), this, x, y, z);

plugin_III\game_III\CPlaceName.cpp:

	// CPlaceName::Display
	// plugin::CallMethodDynGlobal<CPlaceName *>(gaddrof(CPlaceName::Display), this);

	// CPlaceName::Init
	// plugin::CallMethodDynGlobal<CPlaceName *>(gaddrof(CPlaceName::Init), this);

	// CPlaceName::Process
	// plugin::CallMethodDynGlobal<CPlaceName *>(gaddrof(CPlaceName::Process), this);

plugin_III\game_III\CPlane.cpp:

	// CPlane::SetModelIndex
	// plugin::CallVirtualMethod<3, CPlane *, unsigned int>(this, modelIndex);

	// CPlane::DeleteRwObject
	// plugin::CallVirtualMethod<6, CPlane *>(this);

	// CPlane::ProcessControl
	// plugin::CallVirtualMethod<8, CPlane *>(this);

	// CPlane::PreRender
	// plugin::CallVirtualMethod<12, CPlane *>(this);

	// CPlane::Render
	// plugin::CallVirtualMethod<13, CPlane *>(this);

	// CPlane::FlagToDestroyWhenNextProcessed
	// plugin::CallVirtualMethod<16, CPlane *>(this);

	// CPlane::HasCesnaBeenDestroyed
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CPlane::HasCesnaBeenDestroyed));

	// CPlane::HasCesnaLanded
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CPlane::HasCesnaLanded));

	// CPlane::HasDropOffCesnaBeenShotDown
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CPlane::HasDropOffCesnaBeenShotDown));

	// *CPlane::LoadPath
	// plugin::CallAndReturnDynGlobal<CPlaneNode *, char const *, int *, float *, bool>(gaddrof(CPlane::LoadPath), filename, numNodes, totalLength, loop);

	// CPlane::TestRocketCollision
	// plugin::CallAndReturnDynGlobal<bool, CVector *>(gaddrof(CPlane::TestRocketCollision), coors);

plugin_III\game_III\CPlayerInfo.cpp:

	// CPlayerInfo::ArrestPlayer
	// plugin::CallMethod<0x4A1330, CPlayerInfo *>(this);
	0AA6: call_method 0x4A1330 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::AwardMoneyForExplosion
	// plugin::CallMethod<0x4A15F0, CPlayerInfo *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x4A15F0 struct [CPlayerInfo] num_params 1 pop 0 [vehicle]

	// CPlayerInfo::BlowUpRCBuggy
	// plugin::CallMethod<0x4A15C0, CPlayerInfo *>(this);
	0AA6: call_method 0x4A15C0 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::CancelPlayerEnteringCars
	// plugin::CallMethod<0x4A13B0, CPlayerInfo *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x4A13B0 struct [CPlayerInfo] num_params 1 pop 0 [vehicle]

	// CPlayerInfo::Clear
	// plugin::CallMethod<0x49FC10, CPlayerInfo *>(this);
	0AA6: call_method 0x49FC10 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::DeletePlayerSkin
	// plugin::CallMethod<0x4A1750, CPlayerInfo *>(this);
	0AA6: call_method 0x4A1750 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::EvaluateCarPosition
	// plugin::CallMethod<0x4A0EC0, CPlayerInfo *, CEntity*, CPed*, float, float*, CVehicle**>(this, entity, ped, radius, dist, vehicle);
	0AA6: call_method 0x4A0EC0 struct [CPlayerInfo] num_params 5 pop 0 [entity] [ped] [radius] [dist] [vehicle]

	// CPlayerInfo::FindClosestCarSectorList
	// plugin::CallMethod<0x4A0CD0, CPlayerInfo *, CPtrList&, CPed*, float, float, float, float, float*, CVehicle**>(this, list, ped, conrerAX, cornerAY, cornerBX, cornerBY, dist, closestCar);
	0AA6: call_method 0x4A0CD0 struct [CPlayerInfo] num_params 8 pop 0 [list] [ped] [conrerAX] [cornerAY] [cornerBX] [cornerBY] [dist] [closestCar]

	// CPlayerInfo::GetPos
	// plugin::CallMethodAndReturn<CVector*, 0x4A0FE0, CPlayerInfo *, CVector*>(this, point);
	0AA8: call_method_return 0x4A0FE0 struct [CPlayerInfo] num_params 1 pop 0 [point] func_ret [CVector*]

	// CPlayerInfo::IsPlayerInRemoteMode
	// plugin::CallMethodAndReturn<bool, 0x4A0930, CPlayerInfo *>(this);
	0AA8: call_method_return 0x4A0930 struct [CPlayerInfo] num_params 0 pop 0 func_ret [bool]

	// CPlayerInfo::IsRestartingAfterArrest
	// plugin::CallMethodAndReturn<bool, 0x4A12C0, CPlayerInfo *>(this);
	0AA8: call_method_return 0x4A12C0 struct [CPlayerInfo] num_params 0 pop 0 func_ret [bool]

	// CPlayerInfo::IsRestartingAfterDeath
	// plugin::CallMethodAndReturn<bool, 0x4A12A0, CPlayerInfo *>(this);
	0AA8: call_method_return 0x4A12A0 struct [CPlayerInfo] num_params 0 pop 0 func_ret [bool]

	// CPlayerInfo::KillPlayer
	// plugin::CallMethod<0x4A12E0, CPlayerInfo *>(this);
	0AA6: call_method 0x4A12E0 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::LoadPlayerInfo
	// plugin::CallMethod<0x4A0B20, CPlayerInfo *, unsigned char*, unsigned int>(this, bufferPointer, structSize);
	0AA6: call_method 0x4A0B20 struct [CPlayerInfo] num_params 2 pop 0 [bufferPointer] [structSize]

	// CPlayerInfo::LoadPlayerSkin
	// plugin::CallMethod<0x4A1700, CPlayerInfo *>(this);
	0AA6: call_method 0x4A1700 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::MakePlayerSafe
	// plugin::CallMethod<0x4A1400, CPlayerInfo *, bool>(this, safe);
	0AA6: call_method 0x4A1400 struct [CPlayerInfo] num_params 1 pop 0 [safe]

	// CPlayerInfo::PlayerFailedCriticalMission
	// plugin::CallMethod<0x4A1380, CPlayerInfo *>(this);
	0AA6: call_method 0x4A1380 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::Process
	// plugin::CallMethod<0x49FD30, CPlayerInfo *>(this);
	0AA6: call_method 0x49FD30 struct [CPlayerInfo] num_params 0 pop 0

	// CPlayerInfo::SavePlayerInfo
	// plugin::CallMethod<0x4A0960, CPlayerInfo *, unsigned char*, unsigned int*>(this, bufferPointer, structSize);
	0AA6: call_method 0x4A0960 struct [CPlayerInfo] num_params 2 pop 0 [bufferPointer] [structSize]

	// CPlayerInfo::SetPlayerSkin
	// plugin::CallMethod<0x4A16D0, CPlayerInfo *, char const*>(this, skinName);
	0AA6: call_method 0x4A16D0 struct [CPlayerInfo] num_params 1 pop 0 [skinName]

	// CPlayerInfo::~CPlayerInfo
	// plugin::CallMethod<0x4B5DC0, CPlayerInfo *>(this);
	0AA6: call_method 0x4B5DC0 struct [CPlayerInfo] num_params 0 pop 0

plugin_III\game_III\CPlayerPed.cpp:

	// CPlayerPed::ProcessControl
	// plugin::CallVirtualMethod<8, CPlayerPed *>(this);

	// CPlayerPed::SetMoveAnim
	// plugin::CallVirtualMethod<18, CPlayerPed *>(this);

	// CPlayerPed::AnnoyPlayerPed
	// plugin::CallMethodDynGlobal<CPlayerPed *, bool>(gaddrof(CPlayerPed::AnnoyPlayerPed), this, annoyedByPassingEntity);

	// CPlayerPed::ClearAdrenaline
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::ClearAdrenaline), this);

	// CPlayerPed::ClearWeaponTarget
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::ClearWeaponTarget), this);

	// CPlayerPed::DoStuffToGoOnFire
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::DoStuffToGoOnFire), this);

	// CPlayerPed::DoWeaponSmoothSpray
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlayerPed *>(gaddrof(CPlayerPed::DoWeaponSmoothSpray), this);
	0AA8: call_method_return 0x4F1380 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::DoesTargetHaveToBeBroken
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlayerPed *, CVector, CWeapon *>(gaddrof(CPlayerPed::DoesTargetHaveToBeBroken), this, target, weapon);
	0AA8: call_method_return 0x4F3350 struct [CPlayerPed] num_params 2 pop 0 [target] [weapon] func_ret [bool]

	// CPlayerPed::EvaluateNeighbouringTarget
	// plugin::CallMethodDynGlobal<CPlayerPed *, CEntity *, CEntity **, float *, float, float, bool>(gaddrof(CPlayerPed::EvaluateNeighbouringTarget), this, candidate, targetPtr, lastCloseness, distLimit, angleOffset, lookToLeft);

	// CPlayerPed::EvaluateTarget
	// plugin::CallMethodDynGlobal<CPlayerPed *, CEntity *, CEntity **, float *, float, float, bool>(gaddrof(CPlayerPed::EvaluateTarget), this, candidate, targetPtr, lastCloseness, distLimit, angleOffset, priority);

	// CPlayerPed::FindNextWeaponLockOnTarget
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlayerPed *, CEntity *, bool>(gaddrof(CPlayerPed::FindNextWeaponLockOnTarget), this, previousTarget, lookToLeft);
	0AA8: call_method_return 0x4F2D50 struct [CPlayerPed] num_params 2 pop 0 [previousTarget] [lookToLeft] func_ret [bool]

	// CPlayerPed::FindWeaponLockOnTarget
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlayerPed *>(gaddrof(CPlayerPed::FindWeaponLockOnTarget), this);
	0AA8: call_method_return 0x4F28D0 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// *CPlayerPed::GetPlayerInfoForThisPlayerPed
	// plugin::CallMethodAndReturnDynGlobal<CPlayerInfo *, CPlayerPed *>(gaddrof(CPlayerPed::GetPlayerInfoForThisPlayerPed), this);
	0AA8: call_method_return 0x4F36C0 struct [*CPlayerPed] num_params 0 pop 0 func_ret [CPlayerInfo *]

	// CPlayerPed::IsThisPedAttackingPlayer
	// plugin::CallMethodAndReturnDynGlobal<bool, CPlayerPed *, CPed *>(gaddrof(CPlayerPed::IsThisPedAttackingPlayer), this, ped);
	0AA8: call_method_return 0x4F2D00 struct [CPlayerPed] num_params 1 pop 0 [ped] func_ret [bool]

	// CPlayerPed::KeepAreaAroundPlayerClear
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::KeepAreaAroundPlayerClear), this);

	// CPlayerPed::MakeChangesForNewWeapon
	// plugin::CallMethodDynGlobal<CPlayerPed *, char>(gaddrof(CPlayerPed::MakeChangesForNewWeapon), this, weaponType);

	// CPlayerPed::MakeObjectTargettable
	// plugin::CallMethodDynGlobal<CPlayerPed *, int>(gaddrof(CPlayerPed::MakeObjectTargettable), this, handle);

	// CPlayerPed::PlayerControl1stPersonRunAround
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::PlayerControl1stPersonRunAround), this, pad);

	// CPlayerPed::PlayerControlFighter
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::PlayerControlFighter), this, pad);

	// CPlayerPed::PlayerControlM16
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::PlayerControlM16), this, pad);

	// CPlayerPed::PlayerControlSniper
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::PlayerControlSniper), this, pad);

	// CPlayerPed::PlayerControlZelda
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::PlayerControlZelda), this, pad);

	// CPlayerPed::ProcessAnimGroups
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::ProcessAnimGroups), this);

	// CPlayerPed::ProcessPlayerWeapon
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::ProcessPlayerWeapon), this, pad);

	// CPlayerPed::ProcessWeaponSwitch
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::ProcessWeaponSwitch), this, pad);

	// CPlayerPed::ReApplyMoveAnims
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::ReApplyMoveAnims), this);

	// CPlayerPed::RestoreSprintEnergy
	// plugin::CallMethodDynGlobal<CPlayerPed *, float>(gaddrof(CPlayerPed::RestoreSprintEnergy), this, restoreSpeed);

	// CPlayerPed::RunningLand
	// plugin::CallMethodDynGlobal<CPlayerPed *, CPad *>(gaddrof(CPlayerPed::RunningLand), this, pad);

	// CPlayerPed::SetInitialState
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::SetInitialState), this);

	// CPlayerPed::SetRealMoveAnim
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::SetRealMoveAnim), this);

	// CPlayerPed::SetWantedLevel
	// plugin::CallMethodDynGlobal<CPlayerPed *, int>(gaddrof(CPlayerPed::SetWantedLevel), this, level);

	// CPlayerPed::SetWantedLevelNoDrop
	// plugin::CallMethodDynGlobal<CPlayerPed *, int>(gaddrof(CPlayerPed::SetWantedLevelNoDrop), this, level);

	// CPlayerPed::UseSprintEnergy
	// plugin::CallMethodDynGlobal<CPlayerPed *>(gaddrof(CPlayerPed::UseSprintEnergy), this);

	// CPlayerPed::DeactivatePlayerPed
	// plugin::CallDynGlobal<int>(gaddrof(CPlayerPed::DeactivatePlayerPed), playerId);

	// CPlayerPed::ReactivatePlayerPed
	// plugin::CallDynGlobal<int>(gaddrof(CPlayerPed::ReactivatePlayerPed), playerId);

	// CPlayerPed::SetupPlayerPed
	// plugin::CallDynGlobal<int>(gaddrof(CPlayerPed::SetupPlayerPed), playerId);

plugin_III\game_III\CPlayerSkin.cpp:

	// *CPlayerSkin::GetSkinTexture
	// plugin::CallAndReturnDynGlobal<RwTexture *, char const *>(gaddrof(CPlayerSkin::GetSkinTexture), name);

	// FindPlayerDff
	// plugin::CallDynGlobal<unsigned int &, unsigned int &>(gaddrof(FindPlayerDff), offset, size);

plugin_III\game_III\CPointLights.cpp:

	// CPointLights::AddLight
	// plugin::Call<0x510790, unsigned char, CVector, CVector, float, float, float, float, unsigned char, bool>(lightType, point, direction, radius, red, green, blue, fogType, generateExtraShadows);
	0AA5: call_function 0x510790 num_params 9 pop 9 [lightType] [point] [direction] [radius] [red] [green] [blue] [fogType] [generateExtraShadows]

	// CPointLights::GenerateLightsAffectingObject
	// plugin::CallAndReturn<float, 0x510960, CVector*>(point);
	0AA7: call_function_return 0x510960 num_params 1 pop 1 [point] func_ret [float]

	// CPointLights::RemoveLightsAffectingObject
	// plugin::Call<0x510C20>();
	0AA5: call_function 0x510C20 num_params 0 pop 0

	// CPointLights::RenderFogEffect
	// plugin::Call<0x510C30>();
	0AA5: call_function 0x510C30 num_params 0 pop 0

	// CPointLight::CPointLight
	// plugin::CallMethod<0x511930, CPointLight *>(this);
	0AA6: call_method 0x511930 struct [CPointLight] num_params 0 pop 0

plugin_III\game_III\CPools.cpp:

	// *CPools::GetBuildingPool
	// plugin::CallAndReturnDynGlobal<CPool<CBuilding> *>(gaddrof(CPools::GetBuildingPool));

	// CPools::GetCCutsceneHeadSize
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CPools::GetCCutsceneHeadSize));

	// *CPools::GetObject
	// plugin::CallAndReturnDynGlobal<CObject *, int>(gaddrof(CPools::GetObject), handle);

	// *CPools::GetObjectPool
	// plugin::CallAndReturnDynGlobal<CPool<CObject, CCutsceneObject> *>(gaddrof(CPools::GetObjectPool));

	// CPools::GetObjectRef
	// plugin::CallAndReturnDynGlobal<int, CObject *>(gaddrof(CPools::GetObjectRef), object);

	// *CPools::GetPed
	// plugin::CallAndReturnDynGlobal<CPed *, int>(gaddrof(CPools::GetPed), handle);

	// CPools::GetPedRef
	// plugin::CallAndReturnDynGlobal<int, CPed *>(gaddrof(CPools::GetPedRef), ped);

	// *CPools::GetVehicle
	// plugin::CallAndReturnDynGlobal<CVehicle *, int>(gaddrof(CPools::GetVehicle), handle);

	// *CPools::GetVehiclePool
	// plugin::CallAndReturnDynGlobal<CPool<CVehicle, CAutomobile> *>(gaddrof(CPools::GetVehiclePool));

	// CPools::GetVehicleRef
	// plugin::CallAndReturnDynGlobal<int, CVehicle *>(gaddrof(CPools::GetVehicleRef), vehicle);

	// CPools::LoadObjectPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadObjectPool), buffer, size);

	// CPools::LoadPedPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadPedPool), buffer, size);

	// CPools::LoadVehiclePool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadVehiclePool), buffer, size);

	// CPools::MakeSureSlotInObjectPoolIsEmpty
	// plugin::CallDynGlobal<int>(gaddrof(CPools::MakeSureSlotInObjectPoolIsEmpty), slot);

	// CPools::SaveObjectPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SaveObjectPool), buffer, outSize);

	// CPools::SavePedPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SavePedPool), buffer, outSize);

	// CPools::SaveVehiclePool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SaveVehiclePool), buffer, outSize);

plugin_III\game_III\CPopulation.cpp:

	// *CPopulation::AddPed
	// plugin::CallAndReturnDynGlobal<CPed *, ePedType, unsigned int, CVector const &>(gaddrof(CPopulation::AddPed), pedType, modelIndexOrCopType, coors);

	// *CPopulation::AddPedInCar
	// plugin::CallAndReturnDynGlobal<CPed *, CVehicle *>(gaddrof(CPopulation::AddPedInCar), vehicle);

	// CPopulation::AddToPopulation
	// plugin::CallDynGlobal<float, float, float, float>(gaddrof(CPopulation::AddToPopulation), minDist, maxDist, minDistOffScreen, maxDistOffScreen);

	// CPopulation::ChooseCivilianOccupation
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CPopulation::ChooseCivilianOccupation), group);

	// CPopulation::ChooseGangOccupation
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CPopulation::ChooseGangOccupation), gangId);

	// CPopulation::ChoosePolicePedOccupation
	// plugin::CallAndReturnDynGlobal<eCopType>(gaddrof(CPopulation::ChoosePolicePedOccupation));

	// CPopulation::ConvertToDummyObject
	// plugin::CallDynGlobal<CObject *>(gaddrof(CPopulation::ConvertToDummyObject), object);

	// CPopulation::ConvertToRealObject
	// plugin::CallDynGlobal<CDummyObject *>(gaddrof(CPopulation::ConvertToRealObject), dummy);

	// CPopulation::DealWithZoneChange
	// plugin::CallDynGlobal<eLevelName, eLevelName, bool>(gaddrof(CPopulation::DealWithZoneChange), oldLevel, newLevel, forceIndustrialZone);

	// CPopulation::FindClosestZoneForCoors
	// plugin::CallDynGlobal<CVector *, int *, eLevelName, eLevelName>(gaddrof(CPopulation::FindClosestZoneForCoors), coors, safeZoneOut, level1, level2);

	// CPopulation::FindCollisionZoneForCoors
	// plugin::CallDynGlobal<CVector *, int *, eLevelName *>(gaddrof(CPopulation::FindCollisionZoneForCoors), coors, safeZoneOut, levelOut);

	// CPopulation::IsPointInSafeZone
	// plugin::CallAndReturnDynGlobal<bool, CVector *>(gaddrof(CPopulation::IsPointInSafeZone), coors);

	// CPopulation::PedCreationDistMultiplier
	// plugin::CallAndReturnDynGlobal<float>(gaddrof(CPopulation::PedCreationDistMultiplier));

	// CPopulation::RemovePed
	// plugin::CallDynGlobal<CPed *>(gaddrof(CPopulation::RemovePed), ped);

	// CPopulation::TestRoomForDummyObject
	// plugin::CallAndReturnDynGlobal<bool, CObject *>(gaddrof(CPopulation::TestRoomForDummyObject), object);

	// CPopulation::TestSafeForRealObject
	// plugin::CallAndReturnDynGlobal<bool, CDummyObject *>(gaddrof(CPopulation::TestSafeForRealObject), dummy);

	// CPopulation::UpdatePedCount
	// plugin::CallDynGlobal<ePedType, bool>(gaddrof(CPopulation::UpdatePedCount), pedType, decrease);

plugin_III\game_III\CProjectileInfo.cpp:

	// CProjectileInfo::AddProjectile
	// plugin::CallAndReturn<bool, 0x55B030, CEntity*, eWeaponType, CVector, float>(creator, weaponType, posn, force);
	0AA7: call_function_return 0x55B030 num_params 4 pop 4 [creator] [weaponType] [posn] [force] func_ret [bool]

	// CProjectileInfo::CProjectileInfo
	// plugin::CallMethod<0x55BC50, CProjectileInfo *>(this);
	0AA6: call_method 0x55BC50 struct [CProjectileInfo] num_params 0 pop 0

	// CProjectileInfo::GetProjectileInfo
	// plugin::CallAndReturn<CProjectileInfo*, 0x55B010, int>(index);
	0AA7: call_function_return 0x55B010 num_params 1 pop 1 [index] func_ret [CProjectileInfo*]

	// CProjectileInfo::Initialise
	// plugin::Call<0x55ADF0>();
	0AA5: call_function 0x55ADF0 num_params 0 pop 0

	// CProjectileInfo::IsProjectileInRange
	// plugin::CallAndReturn<bool, 0x55BA50, float, float, float, float, float, float, bool>(x1, y1, z1, x2, y2, z2, bDestroy);
	0AA7: call_function_return 0x55BA50 num_params 7 pop 7 [x1] [y1] [z1] [x2] [y2] [z2] [bDestroy] func_ret [bool]

	// CProjectileInfo::RemoveAllProjectiles
	// plugin::Call<0x55BB80>();
	0AA5: call_function 0x55BB80 num_params 0 pop 0

	// CProjectileInfo::RemoveIfThisIsAProjectile
	// plugin::CallAndReturn<bool, 0x55BBD0, CObject*>(object);
	0AA7: call_function_return 0x55BBD0 num_params 1 pop 1 [object] func_ret [bool]

	// CProjectileInfo::RemoveNotAdd
	// plugin::Call<0x55B770, CEntity*, eWeaponType, CVector>(creator, weaponType, posn);
	0AA5: call_function 0x55B770 num_params 3 pop 3 [creator] [weaponType] [posn]

	// CProjectileInfo::RemoveProjectile
	// plugin::Call<0x55B700, CProjectileInfo*, CProjectile*>(info, projectileObject);
	0AA5: call_function 0x55B700 num_params 2 pop 2 [info] [projectileObject]

	// CProjectileInfo::Shutdown
	// plugin::Call<0x55AFF0>();
	0AA5: call_function 0x55AFF0 num_params 0 pop 0

	// CProjectileInfo::Update
	// plugin::Call<0x55B7C0>();
	0AA5: call_function 0x55B7C0 num_params 0 pop 0

plugin_III\game_III\CQuaternion.cpp:

	// CQuaternion::Get
	// plugin::CallMethodDynGlobal<CQuaternion *, RwMatrix *>(gaddrof(CQuaternion::Get), this, matrix);

	// CQuaternion::Slerp
	// plugin::CallMethodDynGlobal<CQuaternion *, CQuaternion const &, CQuaternion const &, float, float, float>(gaddrof(CQuaternion::Slerp), this, from, to, halftheta, sintheta_inv, t);

plugin_III\game_III\CRadar.cpp:

	// CRadar::CalculateBlipAlpha
	// plugin::CallAndReturnDynGlobal<unsigned char, float>(gaddrof(CRadar::CalculateBlipAlpha), distance);

	// CRadar::ChangeBlipBrightness
	// plugin::CallDynGlobal<int, int>(gaddrof(CRadar::ChangeBlipBrightness), i, bright);

	// CRadar::ChangeBlipColour
	// plugin::CallDynGlobal<int, unsigned int>(gaddrof(CRadar::ChangeBlipColour), i, colour);

	// CRadar::ChangeBlipDisplay
	// plugin::CallDynGlobal<int, eBlipDisplay>(gaddrof(CRadar::ChangeBlipDisplay), i, display);

	// CRadar::ChangeBlipScale
	// plugin::CallDynGlobal<int, int>(gaddrof(CRadar::ChangeBlipScale), i, scale);

	// CRadar::ClearBlip
	// plugin::CallDynGlobal<int>(gaddrof(CRadar::ClearBlip), i);

	// CRadar::ClearBlipForEntity
	// plugin::CallDynGlobal<eBlipType, int>(gaddrof(CRadar::ClearBlipForEntity), type, handle);

	// CRadar::ClipRadarPoly
	// plugin::CallAndReturnDynGlobal<int, CVector2D *, CVector2D const *>(gaddrof(CRadar::ClipRadarPoly), out, in);

	// CRadar::DrawRadarSection
	// plugin::CallDynGlobal<int, int>(gaddrof(CRadar::DrawRadarSection), x, y);

	// CRadar::DrawRadarSprite
	// plugin::CallDynGlobal<unsigned short, float, float, unsigned char>(gaddrof(CRadar::DrawRadarSprite), sprite, x, y, alpha);

	// CRadar::DrawRotatingRadarSprite
	// plugin::CallDynGlobal<CSprite2d *, float, float, float, unsigned char>(gaddrof(CRadar::DrawRotatingRadarSprite), sprite, x, y, angle, alpha);

	// CRadar::GetActualBlipArrayIndex
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CRadar::GetActualBlipArrayIndex), i);

	// CRadar::GetNewUniqueBlipIndex
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CRadar::GetNewUniqueBlipIndex), i);

	// CRadar::GetRadarTraceColour
	// plugin::CallAndReturnDynGlobal<unsigned int, unsigned int, bool>(gaddrof(CRadar::GetRadarTraceColour), colour, bright);

	// CRadar::LimitRadarPoint
	// plugin::CallAndReturnDynGlobal<float, CVector2D &>(gaddrof(CRadar::LimitRadarPoint), point);

	// CRadar::LoadAllRadarBlips
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CRadar::LoadAllRadarBlips), buf, size);

	// CRadar::SaveAllRadarBlips
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CRadar::SaveAllRadarBlips), buf, size);

	// CRadar::SetBlipSprite
	// plugin::CallDynGlobal<int, int>(gaddrof(CRadar::SetBlipSprite), i, icon);

	// CRadar::SetCoordBlip
	// plugin::CallAndReturnDynGlobal<int, eBlipType, CVector, unsigned int, eBlipDisplay>(gaddrof(CRadar::SetCoordBlip), type, pos, colour, display);

	// CRadar::SetEntityBlip
	// plugin::CallDynGlobal<eBlipType, int, unsigned int, eBlipDisplay>(gaddrof(CRadar::SetEntityBlip), type, handle, colour, display);

	// CRadar::SetRadarMarkerState
	// plugin::CallDynGlobal<int, unsigned char>(gaddrof(CRadar::SetRadarMarkerState), i, flag);

	// CRadar::ShowRadarMarker
	// plugin::CallDynGlobal<CVector, unsigned int, float>(gaddrof(CRadar::ShowRadarMarker), pos, colour, radius);

	// CRadar::ShowRadarTrace
	// plugin::CallDynGlobal<float, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char>(gaddrof(CRadar::ShowRadarTrace), x, y, size, red, green, blue, alpha);

	// CRadar::StreamRadarSections
	// plugin::CallDynGlobal<int, int>(gaddrof_o(CRadar::StreamRadarSections, void (*)(int, int)), x, y);

	// CRadar::StreamRadarSections
	// plugin::CallDynGlobal<CVector const &>(gaddrof_o(CRadar::StreamRadarSections, void (*)(CVector const &)), pos);

	// CRadar::TransformRadarPointToRealWorldSpace
	// plugin::CallDynGlobal<CVector2D &, CVector2D const &>(gaddrof(CRadar::TransformRadarPointToRealWorldSpace), out, in);

	// CRadar::TransformRadarPointToScreenSpace
	// plugin::CallDynGlobal<CVector2D &, CVector2D const &>(gaddrof(CRadar::TransformRadarPointToScreenSpace), out, in);

	// CRadar::TransformRealWorldPointToRadarSpace
	// plugin::CallDynGlobal<CVector2D &, CVector2D const &>(gaddrof(CRadar::TransformRealWorldPointToRadarSpace), out, in);

	// CRadar::TransformRealWorldToTexCoordSpace
	// plugin::CallDynGlobal<CVector2D &, CVector2D const &, int, int>(gaddrof(CRadar::TransformRealWorldToTexCoordSpace), out, in, x, y);

	// ClipRadarTileCoords
	// plugin::CallDynGlobal<int &, int &>(gaddrof(ClipRadarTileCoords), x, y);

	// RequestMapSection
	// plugin::CallDynGlobal<int, int>(gaddrof(RequestMapSection), x, y);

	// RemoveMapSection
	// plugin::CallDynGlobal<int, int>(gaddrof(RemoveMapSection), x, y);

	// IsPointInsideRadar
	// plugin::CallAndReturnDynGlobal<bool, CVector2D const &>(gaddrof(IsPointInsideRadar), point);

	// GetTextureCorners
	// plugin::CallDynGlobal<int, int, CVector2D *>(gaddrof(GetTextureCorners), x, y, out);

	// LineRadarBoxCollision
	// plugin::CallAndReturnDynGlobal<int, CVector2D &, CVector2D const &, CVector2D const &>(gaddrof(LineRadarBoxCollision), out, lineStart, lineEnd);

plugin_III\game_III\CRange2D.cpp:

	// *CRange2D::GetRandomPointInRange
	// plugin::CallMethodAndReturnDynGlobal<CVector2D *, CRange2D *>(gaddrof(CRange2D::GetRandomPointInRange), this);
	0AA8: call_method_return 0x4A7270 struct [*CRange2D] num_params 0 pop 0 func_ret [CVector2D *]

plugin_III\game_III\CRecordDataForChase.cpp:

	// CRecordDataForChase::GiveUsACar
	// plugin::CallDynGlobal<int, CVector, float, CAutomobile **, unsigned char, unsigned char>(gaddrof(CRecordDataForChase::GiveUsACar), modelIndex, pos, angleZ, pCar, prim, sec);

	// CRecordDataForChase::RemoveCarFromChase
	// plugin::CallDynGlobal<int>(gaddrof(CRecordDataForChase::RemoveCarFromChase), index);

	// CRecordDataForChase::RestoreInfoForCar
	// plugin::CallDynGlobal<CAutomobile *, CCarStateEachFrame *, bool>(gaddrof(CRecordDataForChase::RestoreInfoForCar), car, carState, stop);

	// CRecordDataForChase::RestoreInfoForMatrix
	// plugin::CallDynGlobal<CMatrix &, CCarStateEachFrame *>(gaddrof(CRecordDataForChase::RestoreInfoForMatrix), matrix, carState);

	// CRecordDataForChase::StartChaseScene
	// plugin::CallDynGlobal<float>(gaddrof(CRecordDataForChase::StartChaseScene), startTime);

	// CRecordDataForChase::StoreInfoForCar
	// plugin::CallDynGlobal<CAutomobile *, CCarStateEachFrame *>(gaddrof(CRecordDataForChase::StoreInfoForCar), car, carState);

	// *CRecordDataForChase::TurnChaseCarIntoScriptCar
	// plugin::CallAndReturnDynGlobal<CVehicle *, int>(gaddrof(CRecordDataForChase::TurnChaseCarIntoScriptCar), index);

plugin_III\game_III\CRecordDataForGame.cpp:

	// CRecordDataForGame::CalcGameChecksum
	// plugin::CallAndReturnDynGlobal<unsigned short>(gaddrof(CRecordDataForGame::CalcGameChecksum));

	// *CRecordDataForGame::PackCurrentPadValues
	// plugin::CallAndReturnDynGlobal<unsigned char *, unsigned char *, CControllerState *, CControllerState *>(gaddrof(CRecordDataForGame::PackCurrentPadValues), buf, os, ns);

	// *CRecordDataForGame::UnPackCurrentPadValues
	// plugin::CallAndReturnDynGlobal<unsigned char *, unsigned char *, unsigned char, CControllerState *>(gaddrof(CRecordDataForGame::UnPackCurrentPadValues), buf, total, state);

plugin_III\game_III\CRegisteredCorona.cpp:

	// CRegisteredCorona::Update
	// plugin::CallMethodDynGlobal<CRegisteredCorona *>(gaddrof(CRegisteredCorona::Update), this);

plugin_III\game_III\CRegisteredMotionBlurStreak.cpp:

	// CRegisteredMotionBlurStreak::Render
	// plugin::CallMethodDynGlobal<CRegisteredMotionBlurStreak *>(gaddrof(CRegisteredMotionBlurStreak::Render), this);

	// CRegisteredMotionBlurStreak::Update
	// plugin::CallMethodDynGlobal<CRegisteredMotionBlurStreak *>(gaddrof(CRegisteredMotionBlurStreak::Update), this);

plugin_III\game_III\CRemote.cpp:

	// CRemote::GivePlayerRemoteControlledCar
	// plugin::CallDynGlobal<float, float, float, float, unsigned short>(gaddrof(CRemote::GivePlayerRemoteControlledCar), x, y, z, angle, modelIndex);

plugin_III\game_III\CRestart.cpp:

	// CRestart::AddHospitalRestartPoint
	// plugin::CallDynGlobal<CVector const &, float>(gaddrof(CRestart::AddHospitalRestartPoint), pos, heading);

	// CRestart::AddPoliceRestartPoint
	// plugin::CallDynGlobal<CVector const &, float>(gaddrof(CRestart::AddPoliceRestartPoint), pos, heading);

	// CRestart::FindClosestHospitalRestartPoint
	// plugin::CallDynGlobal<CVector const &, CVector *, float *>(gaddrof(CRestart::FindClosestHospitalRestartPoint), pos, outPos, outHeading);

	// CRestart::FindClosestPoliceRestartPoint
	// plugin::CallDynGlobal<CVector const &, CVector *, float *>(gaddrof(CRestart::FindClosestPoliceRestartPoint), pos, outPos, outHeading);

	// CRestart::LoadAllRestartPoints
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CRestart::LoadAllRestartPoints), buf, size);

	// CRestart::OverrideNextRestart
	// plugin::CallDynGlobal<CVector const &, float>(gaddrof(CRestart::OverrideNextRestart), pos, heading);

	// CRestart::SaveAllRestartPoints
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CRestart::SaveAllRestartPoints), buf, size);

plugin_III\game_III\CRoadBlocks.cpp:

	// CRoadBlocks::GenerateRoadBlockCopsForCar
	// plugin::CallDynGlobal<CVehicle *, int, short>(gaddrof(CRoadBlocks::GenerateRoadBlockCopsForCar), vehicle, roadBlockType, roadBlockNode);

plugin_III\game_III\CRouteNode.cpp:

	// CRouteNode::AddRoutePoint
	// plugin::CallDynGlobal<short, CVector>(gaddrof(CRouteNode::AddRoutePoint), route, pos);

	// CRouteNode::GetRouteStart
	// plugin::CallAndReturnDynGlobal<short, short>(gaddrof(CRouteNode::GetRouteStart), route);

	// CRouteNode::GetRouteThisPointIsOn
	// plugin::CallAndReturnDynGlobal<short, short>(gaddrof(CRouteNode::GetRouteThisPointIsOn), point);

	// CRouteNode::RemoveRoute
	// plugin::CallDynGlobal<short>(gaddrof(CRouteNode::RemoveRoute), route);

plugin_III\game_III\CRubbish.cpp:

	// CRubbish::SetVisibility
	// plugin::CallDynGlobal<bool>(gaddrof(CRubbish::SetVisibility), visible);

	// CRubbish::StirUp
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CRubbish::StirUp), vehicle);

plugin_III\game_III\CRunningScript.cpp:

	// CRunningScript::Init
	// plugin::CallMethod<0x4386C0, CRunningScript *>(this);
	0AA6: call_method 0x4386C0 struct [CRunningScript] num_params 0 pop 0

	// CRunningScript::ProcessOneCommand
	// plugin::CallMethodAndReturn<char, 0x439500, CRunningScript *>(this);
	0AA8: call_method_return 0x439500 struct [CRunningScript] num_params 0 pop 0 func_ret [char]

	// CRunningScript::CollectParameters
	// plugin::CallMethod<0x4382E0, CRunningScript *, int*, short>(this, arg0, count);
	0AA6: call_method 0x4382E0 struct [CRunningScript] num_params 2 pop 0 [arg0] [count]

	// CRunningScript::UpdateCompareFlag
	// plugin::CallMethod<0x44FD90, CRunningScript *, unsigned char>(this, flag);
	0AA6: call_method 0x44FD90 struct [CRunningScript] num_params 1 pop 0 [flag]

plugin_III\game_III\CSceneEdit.cpp:

	// CSceneEdit::LoadMovie
	// plugin::Call<0x5850A0>();
	0AA5: call_function 0x5850A0 num_params 0 pop 0

	// CSceneEdit::SaveMovie
	// plugin::Call<0x585110>();
	0AA5: call_function 0x585110 num_params 0 pop 0

	// CSceneEdit::Initialise
	// plugin::Call<0x585170>();
	0AA5: call_function 0x585170 num_params 0 pop 0

	// CSceneEdit::InitPlayBack
	// plugin::Call<0x5852C0>();
	0AA5: call_function 0x5852C0 num_params 0 pop 0

	// CSceneEdit::ReInitialise
	// plugin::Call<0x5853F0>();
	0AA5: call_function 0x5853F0 num_params 0 pop 0

	// CSceneEdit::Update
	// plugin::Call<0x585570>();
	0AA5: call_function 0x585570 num_params 0 pop 0

	// CSceneEdit::Draw
	// plugin::Call<0x5855F0>();
	0AA5: call_function 0x5855F0 num_params 0 pop 0

	// CSceneEdit::ProcessCommand
	// plugin::Call<0x585BB0>();
	0AA5: call_function 0x585BB0 num_params 0 pop 0

	// CSceneEdit::PlayBack
	// plugin::Call<0x587200>();
	0AA5: call_function 0x587200 num_params 0 pop 0

	// CSceneEdit::ClearForNewCommand
	// plugin::Call<0x587AF0>();
	0AA5: call_function 0x587AF0 num_params 0 pop 0

	// CSceneEdit::SelectActor
	// plugin::CallAndReturn<bool, 0x587B30>();
	0AA7: call_function_return 0x587B30 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectActor2
	// plugin::CallAndReturn<bool, 0x587DC0>();
	0AA7: call_function_return 0x587DC0 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectVehicle
	// plugin::CallAndReturn<bool, 0x588040>();
	0AA7: call_function_return 0x588040 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectWeapon
	// plugin::CallAndReturn<bool, 0x588220>();
	0AA7: call_function_return 0x588220 num_params 0 pop 0 func_ret [bool]

	// NextValidModelId
	// plugin::CallAndReturn<int, 0x585050, int, int>(currentModelIndex, PrevOrNextModelIndex);
	0AA7: call_function_return 0x585050 num_params 2 pop 2 [currentModelIndex] [PrevOrNextModelIndex] func_ret [int]

plugin_III\game_III\CScrollBar.cpp:

	// CScrollBar::Init
	// plugin::CallMethodDynGlobal<CScrollBar *, CVector, unsigned char, float, float, float, unsigned char, unsigned char, unsigned char, float>(gaddrof(CScrollBar::Init), this, pos, type, sizeX, sizeY, sizeZ, red, green, blue, scale);

	// CScrollBar::Render
	// plugin::CallMethodDynGlobal<CScrollBar *>(gaddrof(CScrollBar::Render), this);

	// CScrollBar::Update
	// plugin::CallMethodDynGlobal<CScrollBar *>(gaddrof(CScrollBar::Update), this);

	// *CScrollBar::GetBridgeString
	// plugin::CallAndReturnDynGlobal<char const *>(gaddrof(CScrollBar::GetBridgeString));

	// *CScrollBar::GetTunnelString
	// plugin::CallAndReturnDynGlobal<char const *>(gaddrof(CScrollBar::GetTunnelString));

plugin_III\game_III\CShadows.cpp:

	// CPermanentShadow::CPermanentShadow
	// plugin::CallMethod<0x517900, CPermanentShadow *>(this);
	0AA6: call_method 0x517900 struct [CPermanentShadow] num_params 0 pop 0

	// CStaticShadow::CStaticShadow
	// plugin::CallMethod<0x517910, CStaticShadow *>(this);
	0AA6: call_method 0x517910 struct [CStaticShadow] num_params 0 pop 0

	// CStaticShadow::Free
	// plugin::CallMethod<0x516E70, CStaticShadow *>(this);
	0AA6: call_method 0x516E70 struct [CStaticShadow] num_params 0 pop 0

	// CPolyBunch::CPolyBunch
	// plugin::CallMethod<0x517920, CPolyBunch *>(this);
	0AA6: call_method 0x517920 struct [CPolyBunch] num_params 0 pop 0

	// CRegisteredShadow::CRegisteredShadow
	// plugin::CallMethod<0x517940, CRegisteredShadow *>(this);
	0AA6: call_method 0x517940 struct [CRegisteredShadow] num_params 0 pop 0

	// CShadows::RenderIndicatorShadow
	// plugin::Call<0x517810, unsigned int, unsigned char, RwTexture*, CVector*, float, float, float, float, short>(id, shadowType, texture, posn, frontX, frontY, sideX, sideY, intensity);
	0AA5: call_function 0x517810 num_params 9 pop 9 [id] [shadowType] [texture] [posn] [frontX] [frontY] [sideX] [sideY] [intensity]

	// CShadows::Init
	// plugin::Call<0x512AB0>();
	0AA5: call_function 0x512AB0 num_params 0 pop 0

	// CShadows::Shutdown
	// plugin::Call<0x512F20>();
	0AA5: call_function 0x512F20 num_params 0 pop 0

	// CShadows::AddPermanentShadow
	// plugin::Call<0x512FD0, unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, unsigned int, float>(type, texture, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue, zDistance, time, upDistance);
	0AA5: call_function 0x512FD0 num_params 14 pop 14 [type] [texture] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue] [zDistance] [time] [upDistance]

	// CShadows::StoreStaticShadow
	// plugin::Call<0x5130A0, unsigned int, unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, float, bool, float>(id, type, texture, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue, zDistance, scale, drawDistance, temporaryShadow, upDistance);
	0AA5: call_function 0x5130A0 num_params 17 pop 17 [id] [type] [texture] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue] [zDistance] [scale] [drawDistance] [temporaryShadow] [upDistance]

	// CShadows::StoreShadowToBeRendered
	// plugin::Call<0x513550, unsigned char, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char>(shadowTextureType, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue);
	0AA5: call_function 0x513550 num_params 10 pop 10 [shadowTextureType] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue]

	// CShadows::StoreShadowToBeRendered
	// plugin::Call<0x513750, unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, bool, float>(type, texture, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue, zDistance, drawOnWater, scale);
	0AA5: call_function 0x513750 num_params 14 pop 14 [type] [texture] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue] [zDistance] [drawOnWater] [scale]

	// CShadows::StoreShadowForCar
	// plugin::Call<0x513830, CAutomobile*>(car);
	0AA5: call_function 0x513830 num_params 1 pop 1 [car]

	// CShadows::StoreCarLightShadow
	// plugin::Call<0x513A70, CVehicle*, int, RwTexture*, CVector*, float, float, float, float, unsigned char, unsigned char, unsigned char, float>(vehicle, id, texture, posn, frontX, frontY, sideX, sideY, red, green, blue, maxViewAngle);
	0AA5: call_function 0x513A70 num_params 12 pop 12 [vehicle] [id] [texture] [posn] [frontX] [frontY] [sideX] [sideY] [red] [green] [blue] [maxViewAngle]

	// CShadows::StoreShadowForPed
	// plugin::Call<0x513C50, CPed*, float, float, float, float, float, float>(ped, displacementX, displacementY, frontX, frontY, sideX, sideY);
	0AA5: call_function 0x513C50 num_params 7 pop 7 [ped] [displacementX] [displacementY] [frontX] [frontY] [sideX] [sideY]

	// CShadows::StoreShadowForPedObject
	// plugin::Call<0x513CB0, CEntity*, float, float, float, float, float, float>(entity, displacementX, displacementY, frontX, frontY, sideX, sideY);
	0AA5: call_function 0x513CB0 num_params 7 pop 7 [entity] [displacementX] [displacementY] [frontX] [frontY] [sideX] [sideY]

	// CShadows::StoreShadowForTree
	// plugin::Call<0x513E00, CEntity*>(entity);
	0AA5: call_function 0x513E00 num_params 1 pop 1 [entity]

	// CShadows::StoreShadowForPole
	// plugin::Call<0x513E10, CEntity*, float, float, float, float, float, unsigned int>(entity, offsetX, offsetY, offsetZ, poleHeight, poleWidth, localId);
	0AA5: call_function 0x513E10 num_params 7 pop 7 [entity] [offsetX] [offsetY] [offsetZ] [poleHeight] [poleWidth] [localId]

	// CShadows::SetRenderModeForShadowType
	// plugin::Call<0x513FC0, unsigned char>(shadowType);
	0AA5: call_function 0x513FC0 num_params 1 pop 1 [shadowType]

	// CShadows::RenderStoredShadows
	// plugin::Call<0x514010>();
	0AA5: call_function 0x514010 num_params 0 pop 0

	// CShadows::RenderStaticShadows
	// plugin::Call<0x5145F0>();
	0AA5: call_function 0x5145F0 num_params 0 pop 0

	// CShadows::GeneratePolysForStaticShadow
	// plugin::Call<0x514910, short>(staticShadowIndex);
	0AA5: call_function 0x514910 num_params 1 pop 1 [staticShadowIndex]

	// CShadows::CastShadowSectorList
	// plugin::Call<0x514C90, CPtrList&, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**>(ptrList, conrerAX, cornerAY, cornerBX, cornerBY, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue, zDistance, scale, ppPolyBunch);
	0AA5: call_function 0x514C90 num_params 17 pop 17 [ptrList] [conrerAX] [cornerAY] [cornerBX] [cornerBY] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue] [zDistance] [scale] [ppPolyBunch]

	// CShadows::CastShadowEntity
	// plugin::Call<0x514E30, CEntity*, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**>(entity, conrerAX, cornerAY, cornerBX, cornerBY, posn, frontX, frontY, sideX, sideY, intensity, red, green, blue, zDistance, scale, ppPolyBunch);
	0AA5: call_function 0x514E30 num_params 17 pop 17 [entity] [conrerAX] [cornerAY] [cornerBX] [cornerBY] [posn] [frontX] [frontY] [sideX] [sideY] [intensity] [red] [green] [blue] [zDistance] [scale] [ppPolyBunch]

	// CShadows::UpdateStaticShadows
	// plugin::Call<0x516BE0>();
	0AA5: call_function 0x516BE0 num_params 0 pop 0

	// CShadows::UpdatePermanentShadows
	// plugin::Call<0x516C40>();
	0AA5: call_function 0x516C40 num_params 0 pop 0

	// CShadows::CalcPedShadowValues
	// plugin::Call<0x516EB0, CVector, float*, float*, float*, float*, float*, float*>(sunPosn, displacementX, displacementY, frontX, frontY, sideX, sideY);
	0AA5: call_function 0x516EB0 num_params 7 pop 7 [sunPosn] [displacementX] [displacementY] [frontX] [frontY] [sideX] [sideY]

	// CShadows::RenderExtraPlayerShadows
	// plugin::Call<0x516F90>();
	0AA5: call_function 0x516F90 num_params 0 pop 0

	// CShadows::TidyUpShadows
	// plugin::Call<0x517570>();
	0AA5: call_function 0x517570 num_params 0 pop 0

plugin_III\game_III\CShinyTexts.cpp:

	// CShinyTexts::RegisterOne
	// plugin::CallDynGlobal<CVector, CVector, CVector, CVector, float, float, float, float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, float>(gaddrof(CShinyTexts::RegisterOne), cornerAA, cornerAB, cornerBA, cornerBB, u1, v1, u2, v2, u3, v3, u4, v4, type, red, green, blue, maxDistance);

plugin_III\game_III\CShotInfo.cpp:

	// CShotInfo::AddShot
	// plugin::CallAndReturnDynGlobal<bool, CEntity *, eWeaponType, CVector, CVector>(gaddrof(CShotInfo::AddShot), sourceEntity, weaponType, startPos, endPos);

plugin_III\game_III\CSimpleModelInfo.cpp:

	// CSimpleModelInfo::DeleteRwObject
	// plugin::CallVirtualMethod<2, CSimpleModelInfo *>(this);

	// *CSimpleModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 3, CSimpleModelInfo *>(this);

	// *CSimpleModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 4, CSimpleModelInfo *, RwMatrix *>(this, matrix);

	// *CSimpleModelInfo::GetRwObject
	// plugin::CallVirtualMethodAndReturn<RwObject *, 5, CSimpleModelInfo *>(this);

	// CSimpleModelInfo::FindRelatedModel
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::FindRelatedModel), this);

	// *CSimpleModelInfo::GetAtomicFromDistance
	// plugin::CallMethodAndReturnDynGlobal<RpAtomic *, CSimpleModelInfo *, float>(gaddrof(CSimpleModelInfo::GetAtomicFromDistance), this, distance);
	0AA8: call_method_return 0x517A00 struct [*CSimpleModelInfo] num_params 1 pop 0 [distance] func_ret [RpAtomic *]

	// CSimpleModelInfo::GetLargestLodDistance
	// plugin::CallMethodAndReturnDynGlobal<float, CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::GetLargestLodDistance), this);
	0AA8: call_method_return 0x517A60 struct [CSimpleModelInfo] num_params 0 pop 0 func_ret [float]

	// CSimpleModelInfo::GetNearDistance
	// plugin::CallMethodAndReturnDynGlobal<float, CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::GetNearDistance), this);
	0AA8: call_method_return 0x517A90 struct [CSimpleModelInfo] num_params 0 pop 0 func_ret [float]

	// CSimpleModelInfo::IncreaseAlpha
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::IncreaseAlpha), this);

	// CSimpleModelInfo::Init
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::Init), this);

	// CSimpleModelInfo::SetAtomic
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *, int, RpAtomic *>(gaddrof(CSimpleModelInfo::SetAtomic), this, number, atomic);

	// CSimpleModelInfo::SetLodDistances
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *, float *>(gaddrof(CSimpleModelInfo::SetLodDistances), this, distance);

	// CSimpleModelInfo::SetupBigBuilding
	// plugin::CallMethodDynGlobal<CSimpleModelInfo *>(gaddrof(CSimpleModelInfo::SetupBigBuilding), this);

plugin_III\game_III\CSkidmarks.cpp:

	// CSkidmarks::RegisterOne
	// plugin::CallDynGlobal<unsigned int, CVector, float, float, bool *, bool *>(gaddrof(CSkidmarks::RegisterOne), id, pos, fwdX, fwdY, isMuddy, isBloody);

plugin_III\game_III\CSpecialFX.cpp:

	// *LookForBatCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(LookForBatCB), object, data);

plugin_III\game_III\CSpecialParticleStuff.cpp:

	// CSpecialParticleStuff::CreateFoamAroundObject
	// plugin::CallDynGlobal<CMatrix *, float, float, float, int>(gaddrof(CSpecialParticleStuff::CreateFoamAroundObject), matrix, x, y, z, particles);

	// CSpecialParticleStuff::UpdateBoatFoamAnimation
	// plugin::CallDynGlobal<CMatrix *>(gaddrof(CSpecialParticleStuff::UpdateBoatFoamAnimation), matrix);

plugin_III\game_III\CSprite.cpp:

	// CSprite::CalcHorizonCoors
	// plugin::CallAndReturnDynGlobal<float>(gaddrof(CSprite::CalcHorizonCoors));

	// CSprite::CalcScreenCoors
	// plugin::CallAndReturnDynGlobal<bool, RwV3d const &, RwV3d *, float *, float *, bool>(gaddrof(CSprite::CalcScreenCoors), in, out, outW, outH, farClip);

	// CSprite::RenderBufferedOneXLUSprite
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite), x, y, z, w, h, red, green, blue, alpha, rhw, intensity);

	// CSprite::RenderBufferedOneXLUSprite2D
	// plugin::CallDynGlobal<float, float, float, float, RwRGBA const &, short, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite2D), x, y, w, h, color, intensity, alpha);

	// CSprite::RenderBufferedOneXLUSprite2D_Rotate_Dimension
	// plugin::CallDynGlobal<float, float, float, float, RwRGBA const &, short, float, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite2D_Rotate_Dimension), x, y, w, h, color, intensity, angle, alpha);

	// CSprite::RenderBufferedOneXLUSprite_Rotate_2Colours
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float, float, float, float, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite_Rotate_2Colours), x, y, z, w, h, red, green, blue, red2, green2, blue2, colx, coly, rhw, angle, intensity);

	// CSprite::RenderBufferedOneXLUSprite_Rotate_Aspect
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite_Rotate_Aspect), x, y, z, w, h, red, green, blue, alpha, rhw, angle, intensity);

	// CSprite::RenderBufferedOneXLUSprite_Rotate_Dimension
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char>(gaddrof(CSprite::RenderBufferedOneXLUSprite_Rotate_Dimension), x, y, z, w, h, red, green, blue, alpha, rhw, angle, intensity);

	// CSprite::RenderOneXLUSprite
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, unsigned char>(gaddrof(CSprite::RenderOneXLUSprite), x, y, z, w, h, red, green, blue, alpha, rhw, intensity);

	// CSprite::RenderOneXLUSprite_Rotate_Aspect
	// plugin::CallDynGlobal<float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char>(gaddrof(CSprite::RenderOneXLUSprite_Rotate_Aspect), x, y, z, w, h, red, green, blue, alpha, rhw, angle, intensity);

	// CSprite::Set6Vertices2D
	// plugin::CallDynGlobal<RwIm2DVertex *, CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof_o(CSprite::Set6Vertices2D, void (*)(RwIm2DVertex *, CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &)), vertex, rect, color1, color2, color3, color4);

	// CSprite::Set6Vertices2D
	// plugin::CallDynGlobal<RwIm2DVertex *, float, float, float, float, float, float, float, float, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof_o(CSprite::Set6Vertices2D, void (*)(RwIm2DVertex *, float, float, float, float, float, float, float, float, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &)), vertex, x1, y1, x2, y2, x3, y3, x4, y4, color1, color2, color3, color4);

plugin_III\game_III\CSprite2d.cpp:

	// CSprite2d::Delete
	// plugin::CallMethodDynGlobal<CSprite2d *>(gaddrof(CSprite2d::Delete), this);

	// CSprite2d::Draw
	// plugin::CallMethodDynGlobal<CSprite2d *, float, float, float, float, CRGBA const &>(gaddrof_o(CSprite2d::Draw, void (CSprite2d::*)(float, float, float, float, CRGBA const &)), this, x, y, w, h, color);

	// CSprite2d::Draw
	// plugin::CallMethodDynGlobal<CSprite2d *, CRect const &, CRGBA const &>(gaddrof_o(CSprite2d::Draw, void (CSprite2d::*)(CRect const &, CRGBA const &)), this, rect, color);

	// CSprite2d::Draw
	// plugin::CallMethodDynGlobal<CSprite2d *, CRect const &, CRGBA const &, float, float, float, float, float, float, float, float>(gaddrof_o(CSprite2d::Draw, void (CSprite2d::*)(CRect const &, CRGBA const &, float, float, float, float, float, float, float, float)), this, rect, color, u1, v1, u2, v2, u3, v3, u4, v4);

	// CSprite2d::Draw
	// plugin::CallMethodDynGlobal<CSprite2d *, CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof_o(CSprite2d::Draw, void (CSprite2d::*)(CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &)), this, rect, color1, color2, color3, color4);

	// CSprite2d::Draw
	// plugin::CallMethodDynGlobal<CSprite2d *, float, float, float, float, float, float, float, float, CRGBA const &>(gaddrof_o(CSprite2d::Draw, void (CSprite2d::*)(float, float, float, float, float, float, float, float, CRGBA const &)), this, x1, y1, x2, y2, x3, y3, x4, y4, color);

	// CSprite2d::SetAddressing
	// plugin::CallMethodDynGlobal<CSprite2d *, RwTextureAddressMode>(gaddrof(CSprite2d::SetAddressing), this, modeUV);

	// CSprite2d::SetRenderState
	// plugin::CallMethodDynGlobal<CSprite2d *>(gaddrof(CSprite2d::SetRenderState), this);

	// CSprite2d::SetTexture
	// plugin::CallMethodDynGlobal<CSprite2d *, char *>(gaddrof_o(CSprite2d::SetTexture, void (CSprite2d::*)(char *)), this, name);

	// CSprite2d::SetTexture
	// plugin::CallMethodDynGlobal<CSprite2d *, char *, char *>(gaddrof_o(CSprite2d::SetTexture, void (CSprite2d::*)(char *, char *)), this, name, maskName);

	// CSprite2d::AddSpriteToBank
	// plugin::CallDynGlobal<int, CRect const &, CRGBA const &, float, float, float, float, float, float, float, float>(gaddrof(CSprite2d::AddSpriteToBank), bank, rect, color, u1, v1, u2, v2, u3, v3, u4, v4);

	// CSprite2d::DrawBank
	// plugin::CallDynGlobal<int>(gaddrof(CSprite2d::DrawBank), bank);

	// CSprite2d::DrawRect
	// plugin::CallDynGlobal<CRect const &, CRGBA const &>(gaddrof_o(CSprite2d::DrawRect, void (*)(CRect const &, CRGBA const &)), rect, color);

	// CSprite2d::DrawRect
	// plugin::CallDynGlobal<CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof_o(CSprite2d::DrawRect, void (*)(CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &)), rect, color1, color2, color3, color4);

	// CSprite2d::DrawRectXLU
	// plugin::CallDynGlobal<CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof(CSprite2d::DrawRectXLU), rect, color1, color2, color3, color4);

	// CSprite2d::GetBank
	// plugin::CallAndReturnDynGlobal<int, int, RwTexture *>(gaddrof(CSprite2d::GetBank), n, texture);

	// CSprite2d::SetMaskVertices
	// plugin::CallDynGlobal<int, float *>(gaddrof(CSprite2d::SetMaskVertices), numVerts, pos);

	// CSprite2d::SetVertices
	// plugin::CallDynGlobal<CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, unsigned int>(gaddrof_o(CSprite2d::SetVertices, void (*)(CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, unsigned int)), rect, color1, color2, color3, color4, bFar);

	// CSprite2d::SetVertices
	// plugin::CallDynGlobal<float, float, float, float, float, float, float, float, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &>(gaddrof_o(CSprite2d::SetVertices, void (*)(float, float, float, float, float, float, float, float, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &)), x1, y1, x2, y2, x3, y3, x4, y4, color1, color2, color3, color4);

	// CSprite2d::SetVertices
	// plugin::CallDynGlobal<CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, float, float, float, float, float, float, float, float>(gaddrof_o(CSprite2d::SetVertices, void (*)(CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, float, float, float, float, float, float, float, float)), rect, color1, color2, color3, color4, u1, v1, u2, v2, u3, v3, u4, v4);

	// CSprite2d::SetVertices
	// plugin::CallDynGlobal<int, float *, float *, CRGBA const &>(gaddrof_o(CSprite2d::SetVertices, void (*)(int, float *, float *, CRGBA const &)), numVerts, pos, texCoors, color);

	// CSprite2d::SetVertices
	// plugin::CallDynGlobal<RwIm2DVertex *, CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, float, float, float, float, float, float, float, float>(gaddrof_o(CSprite2d::SetVertices, void (*)(RwIm2DVertex *, CRect const &, CRGBA const &, CRGBA const &, CRGBA const &, CRGBA const &, float, float, float, float, float, float, float, float)), vertices, rect, color1, color2, color3, color4, u1, v1, u2, v2, u3, v3, u4, v4);

plugin_III\game_III\CStats.cpp:

	// CStats::AnotherCriminalCaught
	// plugin::Call<0x4AB050>();
	0AA5: call_function 0x4AB050 num_params 0 pop 0

	// CStats::AnotherFireExtinguished
	// plugin::Call<0x4AB080>();
	0AA5: call_function 0x4AB080 num_params 0 pop 0

	// CStats::AnotherKillFrenzyPassed
	// plugin::Call<0x4AB240>();
	0AA5: call_function 0x4AB240 num_params 0 pop 0

	// CStats::AnotherLifeSavedWithAmbulance
	// plugin::Call<0x4AB040>();
	0AA5: call_function 0x4AB040 num_params 0 pop 0

	// CStats::CheckPointReachedSuccessfully
	// plugin::Call<0x4AB270>();
	0AA5: call_function 0x4AB270 num_params 0 pop 0

	// CStats::CheckPointReachedUnsuccessfully
	// plugin::Call<0x4AB290>();
	0AA5: call_function 0x4AB290 num_params 0 pop 0

	// CStats::FindCriminalRatingNumber
	// plugin::CallAndReturn<int, 0x4AB2A0>();
	0AA7: call_function_return 0x4AB2A0 num_params 0 pop 0 func_ret [int]

	// CStats::FindCriminalRatingString
	// plugin::CallAndReturn<wchar_t*, 0x4AB090>();
	0AA7: call_function_return 0x4AB090 num_params 0 pop 0 func_ret [wchar_t*]

	// CStats::Init
	// plugin::Call<0x4AAC60>();
	0AA5: call_function 0x4AAC60 num_params 0 pop 0

	// CStats::LoadStats
	// plugin::Call<0x4AB670, unsigned char*, unsigned int>(bufferPointer, structSize);
	0AA5: call_function 0x4AB670 num_params 2 pop 2 [bufferPointer] [structSize]

	// CStats::Register4x4MayhemTime
	// plugin::Call<0x4AB020, int>(time);
	0AA5: call_function 0x4AB020 num_params 1 pop 1 [time]

	// CStats::Register4x4OneTime
	// plugin::Call<0x4AAFC0, int>(time);
	0AA5: call_function 0x4AAFC0 num_params 1 pop 1 [time]

	// CStats::Register4x4ThreeTime
	// plugin::Call<0x4AB000, int>(time);
	0AA5: call_function 0x4AB000 num_params 1 pop 1 [time]

	// CStats::Register4x4TwoTime
	// plugin::Call<0x4AAFE0, int>(time);
	0AA5: call_function 0x4AAFE0 num_params 1 pop 1 [time]

	// CStats::RegisterElBurroTime
	// plugin::Call<0x4AAFA0, int>(time);
	0AA5: call_function 0x4AAFA0 num_params 1 pop 1 [time]

	// CStats::RegisterFastestTime
	// plugin::Call<0x4AAF50, int, int>(statID, time);
	0AA5: call_function 0x4AAF50 num_params 2 pop 2 [statID] [time]

	// CStats::RegisterHighestScore
	// plugin::Call<0x4AAF80, int, int>(statID, score);
	0AA5: call_function 0x4AAF80 num_params 2 pop 2 [statID] [score]

	// CStats::RegisterLevelAmbulanceMission
	// plugin::Call<0x4AB060, int>(level);
	0AA5: call_function 0x4AB060 num_params 1 pop 1 [level]

	// CStats::RegisterLongestFlightInDodo
	// plugin::Call<0x4AB200, int>(distance);
	0AA5: call_function 0x4AB200 num_params 1 pop 1 [distance]

	// CStats::RegisterTimeTakenDefuseMission
	// plugin::Call<0x4AB220, int>(time);
	0AA5: call_function 0x4AB220 num_params 1 pop 1 [time]

	// CStats::SaveStats
	// plugin::Call<0x4AB3E0, unsigned char*, unsigned int*>(bufferPointer, structSize);
	0AA5: call_function 0x4AB3E0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CStats::SetTotalNumberKillFrenzies
	// plugin::Call<0x4AB250, int>(number);
	0AA5: call_function 0x4AB250 num_params 1 pop 1 [number]

	// CStats::SetTotalNumberMissions
	// plugin::Call<0x4AB260, int>(number);
	0AA5: call_function 0x4AB260 num_params 1 pop 1 [number]

plugin_III\game_III\CStoredCar.cpp:

	// *CStoredCar::RestoreCar
	// plugin::CallMethodAndReturnDynGlobal<CVehicle *, CStoredCar *>(gaddrof(CStoredCar::RestoreCar), this);
	0AA8: call_method_return 0x427690 struct [*CStoredCar] num_params 0 pop 0 func_ret [CVehicle *]

	// CStoredCar::StoreCar
	// plugin::CallMethodDynGlobal<CStoredCar *, CVehicle *>(gaddrof(CStoredCar::StoreCar), this, vehicle);

	// CStoredCar::SetExtras
	// plugin::CallDynGlobal<char, char>(gaddrof(CStoredCar::SetExtras), first, second);

plugin_III\game_III\CStreaming.cpp:

	// CStreaming::RequestModel
	// plugin::Call<0x407EA0, int, int>(modelIndex, flags);
	0AA5: call_function 0x407EA0 num_params 2 pop 2 [modelIndex] [flags]

	// CStreaming::LoadRequestedModels
	// plugin::Call<0x40A390>();
	0AA5: call_function 0x40A390 num_params 0 pop 0

	// CStreaming::Init
	// plugin::Call<0x406430>();
	0AA5: call_function 0x406430 num_params 0 pop 0

	// CStreaming::FlushChannels
	// plugin::Call<0x40A610>();
	0AA5: call_function 0x40A610 num_params 0 pop 0

	// CStreaming::FlushRequestList
	// plugin::Call<0x40A680>();
	0AA5: call_function 0x40A680 num_params 0 pop 0

	// CStreaming::GetAvailableVehicleSlot
	// plugin::CallAndReturn<int, 0x40B160>();
	0AA7: call_function_return 0x40B160 num_params 0 pop 0 func_ret [int]

	// CStreaming::IsTxdUsedByRequestedModels
	// plugin::CallAndReturn<bool, 0x4094C0, int>(index);
	0AA7: call_function_return 0x4094C0 num_params 1 pop 1 [index] func_ret [bool]

	// CStreaming::LoadAllRequestedModels
	// plugin::Call<0x40A440, bool>(onlyQuickRequests);
	0AA5: call_function 0x40A440 num_params 1 pop 1 [onlyQuickRequests]

	// CStreaming::RemoveModel
	// plugin::Call<0x408830, int>(modelIndex);
	0AA5: call_function 0x408830 num_params 1 pop 1 [modelIndex]

	// CStreaming::RemoveLeastUsedModel
	// plugin::CallAndReturn<bool, 0x4089B0>();
	0AA7: call_function_return 0x4089B0 num_params 0 pop 0 func_ret [bool]

	// CStreaming::RemoveLoadedVehicle
	// plugin::CallAndReturn<bool, 0x40B180>();
	0AA7: call_function_return 0x40B180 num_params 0 pop 0 func_ret [bool]

	// CStreaming::RemoveAllUnusedModels
	// plugin::Call<0x408940>();
	0AA5: call_function 0x408940 num_params 0 pop 0

	// CStreaming::RemoveCurrentZonesModels
	// plugin::Call<0x40AD00>();
	0AA5: call_function 0x40AD00 num_params 0 pop 0

	// CStreaming::RemoveUnusedModelsInLoadedList
	// plugin::Call<0x4089A0>();
	0AA5: call_function 0x4089A0 num_params 0 pop 0

	// CStreaming::RequestModelStream
	// plugin::Call<0x40A060, int>(streamnum);
	0AA5: call_function 0x40A060 num_params 1 pop 1 [streamnum]

	// CStreaming::RequestSpecialChar
	// plugin::Call<0x40ADA0, int, char const*, int>(index, txdname, modelrequestflag);
	0AA5: call_function 0x40ADA0 num_params 3 pop 3 [index] [txdname] [modelrequestflag]

	// CStreaming::RequestSpecialModel
	// plugin::Call<0x40A890, int, char const*, int>(slot, name, modelrequestflag);
	0AA5: call_function 0x40A890 num_params 3 pop 3 [slot] [name] [modelrequestflag]

	// CStreaming::RequestSubway
	// plugin::Call<0x407FD0>();
	0AA5: call_function 0x407FD0 num_params 0 pop 0

	// CStreaming::SetMissionDoesntRequireModel
	// plugin::Call<0x40A820, int>(modelIndex);
	0AA5: call_function 0x40A820 num_params 1 pop 1 [modelIndex]

	// CStreaming::SetMissionDoesntRequireSpecialChar
	// plugin::Call<0x40ADE0, int>(index);
	0AA5: call_function 0x40ADE0 num_params 1 pop 1 [index]

	// CStreaming::SetModelIsDeletable
	// plugin::Call<0x40A790, int>(modelIndex);
	0AA5: call_function 0x40A790 num_params 1 pop 1 [modelIndex]

	// CStreaming::SetModelTxdIsDeletable
	// plugin::Call<0x40A800, int>(modelIndex);
	0AA5: call_function 0x40A800 num_params 1 pop 1 [modelIndex]

	// CStreaming::Shutdown
	// plugin::Call<0x406C80>();
	0AA5: call_function 0x406C80 num_params 0 pop 0

	// CStreaming::StreamVehiclesAndPeds
	// plugin::Call<0x40AE60>();
	0AA5: call_function 0x40AE60 num_params 0 pop 0

	// CStreaming::Update
	// plugin::Call<0x4076C0>();
	0AA5: call_function 0x4076C0 num_params 0 pop 0

	// CStreaming::UpdateMemoryUsed
	// plugin::Call<0x4076B0>();
	0AA5: call_function 0x4076B0 num_params 0 pop 0

	// CStreaming::AddModelsToRequestList
	// plugin::Call<0x4078F0, CVector const&>(point);
	0AA5: call_function 0x4078F0 num_params 1 pop 1 [point]

	// CStreaming::AddToLoadedVehiclesList
	// plugin::Call<0x40B060, int>(vehicleId);
	0AA5: call_function 0x40B060 num_params 1 pop 1 [vehicleId]

	// CStreaming::ConvertBufferToObject
	// plugin::CallAndReturn<bool, 0x409740, char*, int>(pFileContect, modelIndex);
	0AA7: call_function_return 0x409740 num_params 2 pop 2 [pFileContect] [modelIndex] func_ret [bool]

	// CStreaming::DeleteAllRwObjects
	// plugin::Call<0x407390>();
	0AA5: call_function 0x407390 num_params 0 pop 0

	// CStreaming::DeleteFarAwayRwObjects
	// plugin::Call<0x407070, CVector const&>(point);
	0AA5: call_function 0x407070 num_params 1 pop 1 [point]

	// CStreaming::DeleteRwObjectsAfterDeath
	// plugin::Call<0x407400, CVector const&>(point);
	0AA5: call_function 0x407400 num_params 1 pop 1 [point]

	// CStreaming::DeleteRwObjectsBehindCamera
	// plugin::Call<0x408A60, int>(size);
	0AA5: call_function 0x408A60 num_params 1 pop 1 [size]

	// CStreaming::DeleteRwObjectsBehindCameraInSectorList
	// plugin::CallAndReturn<bool, 0x409340, CPtrList&, int>(list, size);
	0AA7: call_function_return 0x409340 num_params 2 pop 2 [list] [size] func_ret [bool]

	// CStreaming::DeleteRwObjectsInOverlapSectorList
	// plugin::Call<0x4075A0, CPtrList&, int, int>(list, arg1, arg2);
	0AA5: call_function 0x4075A0 num_params 3 pop 3 [list] [arg1] [arg2]

	// CStreaming::DeleteRwObjectsInSectorList
	// plugin::Call<0x407560, CPtrList&>(list);
	0AA5: call_function 0x407560 num_params 1 pop 1 [list]

	// CStreaming::DeleteRwObjectsNotInFrustumInSectorList
	// plugin::CallAndReturn<bool, 0x4093C0, CPtrList&, int>(list, size);
	0AA7: call_function_return 0x4093C0 num_params 2 pop 2 [list] [size] func_ret [bool]

	// CStreaming::FinishLoadingLargeFile
	// plugin::CallAndReturn<bool, 0x409580, char*, int>(FileName, modelIndex);
	0AA7: call_function_return 0x409580 num_params 2 pop 2 [FileName] [modelIndex] func_ret [bool]

	// CStreaming::GetCdImageOffset
	// plugin::CallAndReturn<unsigned int, 0x409FF0, int>(arg0);
	0AA7: call_function_return 0x409FF0 num_params 1 pop 1 [arg0] func_ret [unsigned int]

	// CStreaming::GetNextFileOnCd
	// plugin::CallAndReturn<int, 0x409E50, int, bool>(arg0, arg1);
	0AA7: call_function_return 0x409E50 num_params 2 pop 2 [arg0] [arg1] func_ret [int]

	// CStreaming::HasSpecialCharLoaded
	// plugin::CallAndReturn<bool, 0x40ADC0, int>(modelIndex);
	0AA7: call_function_return 0x40ADC0 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CStreaming::HaveAllBigBuildingsLoaded
	// plugin::Call<0x408280, eLevelName>(levelName);
	0AA5: call_function 0x408280 num_params 1 pop 1 [levelName]

	// CStreaming::IHaveUsedStreamingMemory
	// plugin::Call<0x409BD0>();
	0AA5: call_function 0x409BD0 num_params 0 pop 0

	// CStreaming::ImGonnaUseStreamingMemory
	// plugin::Call<0x409BC0>();
	0AA5: call_function 0x409BC0 num_params 0 pop 0

	// CStreaming::IsObjectInCdImage
	// plugin::CallAndReturn<bool, 0x407E70, int>(modelIndex);
	0AA7: call_function_return 0x407E70 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CStreaming::LoadCdDirectory
	// plugin::Call<0x406DA0, char const*, int>(archivename, archiveID);
	0AA5: call_function 0x406DA0 num_params 2 pop 2 [archivename] [archiveID]

	// CStreaming::LoadCdDirectory
	// plugin::Call<0x406CC0>();
	0AA5: call_function 0x406CC0 num_params 0 pop 0

	// CStreaming::LoadInitialPeds
	// plugin::Call<0x40AA00>();
	0AA5: call_function 0x40AA00 num_params 0 pop 0

	// CStreaming::LoadInitialVehicles
	// plugin::Call<0x40ADF0>();
	0AA5: call_function 0x40ADF0 num_params 0 pop 0

	// CStreaming::LoadScene
	// plugin::Call<0x40A6D0, CVector const&>(point);
	0AA5: call_function 0x40A6D0 num_params 1 pop 1 [point]

	// CStreaming::MakeSpaceFor
	// plugin::Call<0x409B70, int>(size);
	0AA5: call_function 0x409B70 num_params 1 pop 1 [size]

	// CStreaming::MemoryCardLoad
	// plugin::Call<0x40B250, unsigned char*, unsigned int>(arg0, arg1);
	0AA5: call_function 0x40B250 num_params 2 pop 2 [arg0] [arg1]

	// CStreaming::MemoryCardSave
	// plugin::Call<0x40B210, unsigned char*, unsigned int*>(arg0, arg1);
	0AA5: call_function 0x40B210 num_params 2 pop 2 [arg0] [arg1]

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::Call<0x407DD0, CPtrList&>(list);
	0AA5: call_function 0x407DD0 num_params 1 pop 1 [list]

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::Call<0x407C50, CPtrList&, float, float, float, float, float, float>(list, x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x407C50 num_params 7 pop 7 [list] [x1] [y1] [z1] [x2] [y2] [z2]

	// CStreaming::ProcessLoadingChannel
	// plugin::CallAndReturn<bool, 0x409BE0, int>(channelindex);
	0AA7: call_function_return 0x409BE0 num_params 1 pop 1 [channelindex] func_ret [bool]

	// CStreaming::RemoveBigBuildings
	// plugin::Call<0x408680, eLevelName>(levelName);
	0AA5: call_function 0x408680 num_params 1 pop 1 [levelName]

	// CStreaming::RemoveBuildings
	// plugin::Call<0x4083D0, eLevelName>(levelName);
	0AA5: call_function 0x4083D0 num_params 1 pop 1 [levelName]

	// CStreaming::RemoveIslandsNotUsed
	// plugin::Call<0x408780, eLevelName>(levelName);
	0AA5: call_function 0x408780 num_params 1 pop 1 [levelName]

	// CStreaming::RemoveReferencedTxds
	// plugin::CallAndReturn<bool, 0x409450, int>(arg0);
	0AA7: call_function_return 0x409450 num_params 1 pop 1 [arg0] func_ret [bool]

	// CStreaming::RemoveUnusedBigBuildings
	// plugin::Call<0x408640, eLevelName>(levelName);
	0AA5: call_function 0x408640 num_params 1 pop 1 [levelName]

	// CStreaming::RemoveUnusedBuildings
	// plugin::Call<0x4083A0, eLevelName>(levelName);
	0AA5: call_function 0x4083A0 num_params 1 pop 1 [levelName]

	// CStreaming::RequestBigBuildings
	// plugin::Call<0x408190, eLevelName>(levelName);
	0AA5: call_function 0x408190 num_params 1 pop 1 [levelName]

	// CStreaming::RequestIslands
	// plugin::Call<0x408210, eLevelName>(levelName);
	0AA5: call_function 0x408210 num_params 1 pop 1 [levelName]

	// CStreaming::RetryLoadFile
	// plugin::Call<0x4077F0, int>(streamnum);
	0AA5: call_function 0x4077F0 num_params 1 pop 1 [streamnum]

	// CStreaming::StreamZoneModels
	// plugin::Call<0x40AA30, CVector const&>(point);
	0AA5: call_function 0x40AA30 num_params 1 pop 1 [point]

	// DeleteIsland
	// plugin::Call<0x408740, CEntity*>(entity);
	0AA5: call_function 0x408740 num_params 1 pop 1 [entity]

plugin_III\game_III\CStreamingInfo.cpp:

	// CStreamingInfo::AddToList
	// plugin::CallMethod<0x406380, CStreamingInfo *, CStreamingInfo*>(this, listStart);
	0AA6: call_method 0x406380 struct [CStreamingInfo] num_params 1 pop 0 [listStart]

	// CStreamingInfo::GetCdPosnAndSize
	// plugin::CallMethodAndReturn<bool, 0x4063E0, CStreamingInfo *, unsigned int&, unsigned int&>(this, posn, size);
	0AA8: call_method_return 0x4063E0 struct [CStreamingInfo] num_params 2 pop 0 [posn] [size] func_ret [bool]

	// CStreamingInfo::GetCdSize
	// plugin::CallMethodAndReturn<unsigned int, 0x4063D0, CStreamingInfo *>(this);
	0AA8: call_method_return 0x4063D0 struct [CStreamingInfo] num_params 0 pop 0 func_ret [unsigned int]

	// CStreamingInfo::RemoveFromList
	// plugin::CallMethod<0x4063A0, CStreamingInfo *>(this);
	0AA6: call_method 0x4063A0 struct [CStreamingInfo] num_params 0 pop 0

	// CStreamingInfo::SetCdPosnAndSize
	// plugin::CallMethod<0x406410, CStreamingInfo *, unsigned int, unsigned int>(this, posn, size);
	0AA6: call_method 0x406410 struct [CStreamingInfo] num_params 2 pop 0 [posn] [size]

plugin_III\game_III\CStuckCarCheck.cpp:

	// CStuckCarCheck::AddCarToCheck
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, int, float, unsigned int>(gaddrof(CStuckCarCheck::AddCarToCheck), this, id, radius, time);

	// CStuckCarCheck::HasCarBeenStuckForAWhile
	// plugin::CallMethodAndReturnDynGlobal<bool, CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::HasCarBeenStuckForAWhile), this, id);
	0AA8: call_method_return 0x4382A0 struct [CStuckCarCheck] num_params 1 pop 0 [id] func_ret [bool]

	// CStuckCarCheck::Init
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(gaddrof(CStuckCarCheck::Init), this);

	// CStuckCarCheck::Process
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(gaddrof(CStuckCarCheck::Process), this);

	// CStuckCarCheck::RemoveCarFromCheck
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::RemoveCarFromCheck), this, id);

plugin_III\game_III\CSurfaceTable.cpp:

	// CSurfaceTable::GetAdhesionGroup
	// plugin::CallAndReturnDynGlobal<int, unsigned char>(gaddrof(CSurfaceTable::GetAdhesionGroup), surfaceType);

	// CSurfaceTable::GetAdhesiveLimit
	// plugin::CallAndReturnDynGlobal<float, CColPoint &>(gaddrof(CSurfaceTable::GetAdhesiveLimit), colPoint);

	// CSurfaceTable::GetWetMultiplier
	// plugin::CallAndReturnDynGlobal<float, unsigned char>(gaddrof(CSurfaceTable::GetWetMultiplier), surfaceType);

	// CSurfaceTable::Initialise
	// plugin::CallDynGlobal<char const *>(gaddrof(CSurfaceTable::Initialise), fileName);

plugin_III\game_III\CText.cpp:

	// *CKeyArray::BinarySearch
	// plugin::CallMethodAndReturnDynGlobal<CKeyEntry *, CKeyArray *, char const *, CKeyEntry *, short, short>(gaddrof(CKeyArray::BinarySearch), this, key, entries, low, high);
	0AA8: call_method_return 0x52C060 struct [*CKeyArray] num_params 4 pop 0 [key] [entries] [low] [high] func_ret [CKeyEntry *]

	// CKeyArray::Load
	// plugin::CallMethodDynGlobal<CKeyArray *, unsigned int, unsigned char *, unsigned int *>(gaddrof(CKeyArray::Load), this, length, data, offset);

	// *CKeyArray::Search
	// plugin::CallMethodAndReturnDynGlobal<wchar_t *, CKeyArray *, char const *>(gaddrof(CKeyArray::Search), this, key);
	0AA8: call_method_return 0x52BFB0 struct [*CKeyArray] num_params 1 pop 0 [key] func_ret [wchar_t *]

	// CKeyArray::Unload
	// plugin::CallMethodDynGlobal<CKeyArray *>(gaddrof(CKeyArray::Unload), this);

	// CKeyArray::Update
	// plugin::CallMethodDynGlobal<CKeyArray *, wchar_t *>(gaddrof(CKeyArray::Update), this, chars);

	// CData::Load
	// plugin::CallMethodDynGlobal<CData *, unsigned int, char *, int *>(gaddrof(CData::Load), this, length, data, offset);

	// CData::Unload
	// plugin::CallMethodDynGlobal<CData *>(gaddrof(CData::Unload), this);

	// *CText::Get
	// plugin::CallMethodAndReturnDynGlobal<wchar_t *, CText *, char const *>(gaddrof(CText::Get), this, key);
	0AA8: call_method_return 0x52C5A0 struct [*CText] num_params 1 pop 0 [key] func_ret [wchar_t *]

	// CText::GetUpperCase
	// plugin::CallMethodAndReturnDynGlobal<wchar_t, CText *, wchar_t>(gaddrof(CText::GetUpperCase), this, c);
	0AA8: call_method_return 0x52C220 struct [CText] num_params 1 pop 0 [c] func_ret [wchar_t]

	// CText::Load
	// plugin::CallMethodDynGlobal<CText *>(gaddrof(CText::Load), this);

	// CText::Unload
	// plugin::CallMethodDynGlobal<CText *>(gaddrof(CText::Unload), this);

	// CText::UpperCase
	// plugin::CallMethodDynGlobal<CText *, wchar_t *>(gaddrof(CText::UpperCase), this, s);

	// *UnicodeToAscii
	// plugin::CallAndReturnDynGlobal<char *, wchar_t *>(gaddrof(UnicodeToAscii), src);

	// *UnicodeToAsciiForSaveLoad
	// plugin::CallAndReturnDynGlobal<char *, wchar_t *>(gaddrof(UnicodeToAsciiForSaveLoad), src);

	// TextCopy
	// plugin::CallDynGlobal<wchar_t *, wchar_t const *>(gaddrof(TextCopy), dst, src);

plugin_III\game_III\CTheCarGenerators.cpp:

	// CTheCarGenerators::CreateCarGenerator
	// plugin::CallAndReturnDynGlobal<int, float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short>(gaddrof(CTheCarGenerators::CreateCarGenerator), x, y, z, angle, modelId, colorPrim, colorSec, forceSpawn, alarm, doorLock, minDelay, maxDelay);

	// CTheCarGenerators::LoadAllCarGenerators
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CTheCarGenerators::LoadAllCarGenerators), buffer, size);

	// CTheCarGenerators::SaveAllCarGenerators
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CTheCarGenerators::SaveAllCarGenerators), buffer, size);

plugin_III\game_III\CTheScripts.cpp:

	// CTheScripts::Init
	// plugin::Call<0x438790>();
	0AA5: call_function 0x438790 num_params 0 pop 0

	// CTheScripts::IsPedStopped
	// plugin::CallAndReturn<bool, 0x454670, CPed*>(ped);
	0AA7: call_function_return 0x454670 num_params 1 pop 1 [ped] func_ret [bool]

	// CTheScripts::IsPlayerOnAMission
	// plugin::CallAndReturn<bool, 0x439410>();
	0AA7: call_function_return 0x439410 num_params 0 pop 0 func_ret [bool]

	// CTheScripts::IsPlayerStopped
	// plugin::CallAndReturn<bool, 0x4546C0, CPlayerInfo*>(info);
	0AA7: call_function_return 0x4546C0 num_params 1 pop 1 [info] func_ret [bool]

	// CTheScripts::IsVehicleStopped
	// plugin::CallAndReturn<bool, 0x454770, CVehicle*>(vehicle);
	0AA7: call_function_return 0x454770 num_params 1 pop 1 [vehicle] func_ret [bool]

	// CTheScripts::CleanUpThisPed
	// plugin::Call<0x4547A0, CPed*>(ped);
	0AA5: call_function 0x4547A0 num_params 1 pop 1 [ped]

	// CTheScripts::CleanUpThisObject
	// plugin::Call<0x454910, CObject*>(object);
	0AA5: call_function 0x454910 num_params 1 pop 1 [object]

	// CTheScripts::CleanUpThisVehicle
	// plugin::Call<0x4548D0, CVehicle*>(vehicle);
	0AA5: call_function 0x4548D0 num_params 1 pop 1 [vehicle]

	// CTheScripts::ClearSpaceForMissionEntity
	// plugin::Call<0x454060, CVector const&, CEntity*>(position, entity);
	0AA5: call_function 0x454060 num_params 2 pop 2 [position] [entity]

plugin_III\game_III\CTheZones.cpp:

	// CTheZones::FindSmallestZonePosition
	// plugin::CallAndReturn<CZone*, 0x4B69B0, CVector const&>(pos);
	0AA7: call_function_return 0x4B69B0 num_params 1 pop 1 [pos] func_ret [CZone*]

	// CTheZones::FindSmallestZonePositionType
	// plugin::CallAndReturn<CZone*, 0x4B6790, CVector const&, int>(pos, type);
	0AA7: call_function_return 0x4B6790 num_params 2 pop 2 [pos] [type] func_ret [CZone*]

	// CTheZones::GetZoneInfo
	// plugin::CallAndReturn<CZoneInfo*, 0x4B6A10, CVector const&, char>(pos, day);
	0AA7: call_function_return 0x4B6A10 num_params 2 pop 2 [pos] [day] func_ret [CZoneInfo*]

plugin_III\game_III\CTimeModelInfo.cpp:

	// *CTimeModelInfo::FindOtherTimeModel
	// plugin::CallMethodAndReturnDynGlobal<CTimeModelInfo *, CTimeModelInfo *>(gaddrof(CTimeModelInfo::FindOtherTimeModel), this);
	0AA8: call_method_return 0x517C80 struct [*CTimeModelInfo] num_params 0 pop 0 func_ret [CTimeModelInfo *]

plugin_III\game_III\CTimer.cpp:

	// CTimer::GetCurrentTimeInCycles
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CTimer::GetCurrentTimeInCycles));

	// CTimer::GetCyclesPerMillisecond
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CTimer::GetCyclesPerMillisecond));

	// CTimer::GetIsSlowMotionActive
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CTimer::GetIsSlowMotionActive));

plugin_III\game_III\CTowerClock.cpp:

	// CTowerClock::Init
	// plugin::CallMethodDynGlobal<CTowerClock *, CVector, float, float, unsigned char, unsigned char, unsigned char, float, float>(gaddrof(CTowerClock::Init), this, pos, sizeX, sizeY, red, green, blue, drawDistance, scale);

	// CTowerClock::Render
	// plugin::CallMethodDynGlobal<CTowerClock *>(gaddrof(CTowerClock::Render), this);

	// CTowerClock::Update
	// plugin::CallMethodDynGlobal<CTowerClock *>(gaddrof(CTowerClock::Update), this);

plugin_III\game_III\CTrafficLights.cpp:

	// CTrafficLights::DisplayActualLight
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CTrafficLights::DisplayActualLight), entity);

	// CTrafficLights::FindTrafficLightType
	// plugin::CallAndReturnDynGlobal<int, CEntity *>(gaddrof(CTrafficLights::FindTrafficLightType), entity);

	// CTrafficLights::LightForCars1
	// plugin::CallAndReturnDynGlobal<unsigned char>(gaddrof(CTrafficLights::LightForCars1));

	// CTrafficLights::LightForCars2
	// plugin::CallAndReturnDynGlobal<unsigned char>(gaddrof(CTrafficLights::LightForCars2));

	// CTrafficLights::LightForPeds
	// plugin::CallAndReturnDynGlobal<unsigned char>(gaddrof(CTrafficLights::LightForPeds));

	// CTrafficLights::ShouldCarStopForBridge
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CTrafficLights::ShouldCarStopForBridge), vehicle);

	// CTrafficLights::ShouldCarStopForLight
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *, bool>(gaddrof(CTrafficLights::ShouldCarStopForLight), vehicle, alwaysStop);

plugin_III\game_III\CTrain.cpp:

	// CTrain::SetModelIndex
	// plugin::CallVirtualMethod<3, CTrain *, unsigned int>(this, modelIndex);

	// CTrain::ProcessControl
	// plugin::CallVirtualMethod<8, CTrain *>(this);

	// CTrain::PreRender
	// plugin::CallVirtualMethod<12, CTrain *>(this);

	// CTrain::Render
	// plugin::CallVirtualMethod<13, CTrain *>(this);

	// CTrain::AddPassenger
	// plugin::CallMethodDynGlobal<CTrain *, CPed *>(gaddrof(CTrain::AddPassenger), this, passenger);

	// CTrain::OpenTrainDoor
	// plugin::CallMethodDynGlobal<CTrain *, float>(gaddrof(CTrain::OpenTrainDoor), this, angle);

	// CTrain::TrainHitStuff
	// plugin::CallMethodDynGlobal<CTrain *, CPtrList &>(gaddrof(CTrain::TrainHitStuff), this, list);

	// CTrain::ReadAndInterpretTrackFile
	// plugin::CallDynGlobal<char const *, CTrainNode **, short *, int, float *, float *, float *, CTrainInterpolationLine *, bool>(gaddrof(CTrain::ReadAndInterpretTrackFile), filename, nodes, numNodes, numStations, stationDists, totalLength, totalDuration, line, rightRail);

	// PlayAnnouncement
	// plugin::CallDynGlobal<unsigned char, unsigned char>(gaddrof(PlayAnnouncement), sound, station);

plugin_III\game_III\CTrainDoor.cpp:

	// CTrainDoor::IsClosed
	// plugin::CallMethodAndReturnDynGlobal<bool, CTrainDoor *>(gaddrof(CTrainDoor::IsClosed), this);
	0AA8: call_method_return 0x5460F0 struct [CTrainDoor] num_params 0 pop 0 func_ret [bool]

	// CTrainDoor::IsFullyOpen
	// plugin::CallMethodAndReturnDynGlobal<bool, CTrainDoor *>(gaddrof(CTrainDoor::IsFullyOpen), this);
	0AA8: call_method_return 0x546120 struct [CTrainDoor] num_params 0 pop 0 func_ret [bool]

	// CTrainDoor::Open
	// plugin::CallMethodDynGlobal<CTrainDoor *, float>(gaddrof(CTrainDoor::Open), this, angle);

	// CTrainDoor::RetTranslationWhenClosed
	// plugin::CallMethodAndReturnDynGlobal<float, CTrainDoor *>(gaddrof(CTrainDoor::RetTranslationWhenClosed), this);
	0AA8: call_method_return 0x546180 struct [CTrainDoor] num_params 0 pop 0 func_ret [float]

	// CTrainDoor::RetTranslationWhenOpen
	// plugin::CallMethodAndReturnDynGlobal<float, CTrainDoor *>(gaddrof(CTrainDoor::RetTranslationWhenOpen), this);
	0AA8: call_method_return 0x5461C0 struct [CTrainDoor] num_params 0 pop 0 func_ret [float]

plugin_III\game_III\cTransmission.cpp:

	// cTransmission::CalculateDriveAcceleration
	// plugin::CallMethodAndReturn<float, 0x5506B0, cTransmission *, float const&, unsigned char&, float&, float const&, bool>(this, gasPedal, currrentGear, pSpeed, pCurrentSpeed, bCheat);
	0AA8: call_method_return 0x5506B0 struct [cTransmission] num_params 5 pop 0 [gasPedal] [currrentGear] [pSpeed] [pCurrentSpeed] [bCheat] func_ret [float]

	// cTransmission::CalculateGearForSimpleCar
	// plugin::CallMethod<0x550A00, cTransmission *, float, unsigned char&>(this, velocity, currrentGear);
	0AA6: call_method 0x550A00 struct [cTransmission] num_params 2 pop 0 [velocity] [currrentGear]

	// cTransmission::InitGearRatios
	// plugin::CallMethod<0x550590, cTransmission *>(this);
	0AA6: call_method 0x550590 struct [cTransmission] num_params 0 pop 0

	// cTransmission::cTransmission
	// plugin::CallMethod<0x550580, cTransmission *>(this);
	0AA6: call_method 0x550580 struct [cTransmission] num_params 0 pop 0

plugin_III\game_III\CTreadable.cpp:

	// CTreadable::GetIsATreadable
	// plugin::CallVirtualMethodAndReturn<bool, 17, CTreadable *>(this);

plugin_III\game_III\CTxdStore.cpp:

	// CTxdStore::Initialise
	// plugin::Call<0x527440>();
	0AA5: call_function 0x527440 num_params 0 pop 0

	// CTxdStore::Shutdown
	// plugin::Call<0x527470>();
	0AA5: call_function 0x527470 num_params 0 pop 0

	// CTxdStore::GameShutdown
	// plugin::Call<0x527490>();
	0AA5: call_function 0x527490 num_params 0 pop 0

	// CTxdStore::AddTxdSlot
	// plugin::CallAndReturn<int, 0x5274E0, char const*>(name);
	0AA7: call_function_return 0x5274E0 num_params 1 pop 1 [name] func_ret [int]

	// CTxdStore::RemoveTxdSlot
	// plugin::Call<0x527520, int>(id);
	0AA5: call_function 0x527520 num_params 1 pop 1 [id]

	// CTxdStore::GetTxdName
	// plugin::CallAndReturn<char*, 0x527590, int>(id);
	0AA7: call_function_return 0x527590 num_params 1 pop 1 [id] func_ret [char*]

	// CTxdStore::FindTxdSlot
	// plugin::CallAndReturn<int, 0x5275D0, char const*>(name);
	0AA7: call_function_return 0x5275D0 num_params 1 pop 1 [name] func_ret [int]

	// CTxdStore::LoadTxd
	// plugin::CallAndReturn<bool, 0x5276B0, int, char const*>(id, name);
	0AA7: call_function_return 0x5276B0 num_params 2 pop 2 [id] [name] func_ret [bool]

	// CTxdStore::LoadTxd
	// plugin::CallAndReturn<bool, 0x527700, int, RwStream*>(id, stream);
	0AA7: call_function_return 0x527700 num_params 2 pop 2 [id] [stream] func_ret [bool]

	// CTxdStore::StartLoadTxd
	// plugin::CallAndReturn<bool, 0x527770, int, RwStream*>(id, stream);
	0AA7: call_function_return 0x527770 num_params 2 pop 2 [id] [stream] func_ret [bool]

	// CTxdStore::FinishLoadTxd
	// plugin::CallAndReturn<bool, 0x5277E0, int, RwStream*>(id, stream);
	0AA7: call_function_return 0x5277E0 num_params 2 pop 2 [id] [stream] func_ret [bool]

	// CTxdStore::Create
	// plugin::Call<0x527830, int>(id);
	0AA5: call_function 0x527830 num_params 1 pop 1 [id]

	// CTxdStore::RemoveTxd
	// plugin::Call<0x527870, int>(id);
	0AA5: call_function 0x527870 num_params 1 pop 1 [id]

	// CTxdStore::SetCurrentTxd
	// plugin::Call<0x5278C0, int>(id);
	0AA5: call_function 0x5278C0 num_params 1 pop 1 [id]

	// CTxdStore::PushCurrentTxd
	// plugin::Call<0x527900>();
	0AA5: call_function 0x527900 num_params 0 pop 0

	// CTxdStore::PopCurrentTxd
	// plugin::Call<0x527910>();
	0AA5: call_function 0x527910 num_params 0 pop 0

	// CTxdStore::AddRef
	// plugin::Call<0x527930, int>(id);
	0AA5: call_function 0x527930 num_params 1 pop 1 [id]

	// CTxdStore::RemoveRef
	// plugin::Call<0x527970, int>(id);
	0AA5: call_function 0x527970 num_params 1 pop 1 [id]

	// CTxdStore::RemoveRefWithoutDelete
	// plugin::Call<0x5279C0, int>(id);
	0AA5: call_function 0x5279C0 num_params 1 pop 1 [id]

	// CTxdStore::GetNumRefs
	// plugin::CallAndReturn<int, 0x527A00, int>(id);
	0AA7: call_function_return 0x527A00 num_params 1 pop 1 [id] func_ret [int]

plugin_III\game_III\CUpsideDownCarCheck.cpp:

	// CUpsideDownCarCheck::AddCarToCheck
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::AddCarToCheck), this, id);

	// CUpsideDownCarCheck::AreAnyCarsUpsideDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::AreAnyCarsUpsideDown), this);
	0AA8: call_method_return 0x437F80 struct [CUpsideDownCarCheck] num_params 0 pop 0 func_ret [bool]

	// CUpsideDownCarCheck::HasCarBeenUpsideDownForAWhile
	// plugin::CallMethodAndReturnDynGlobal<bool, CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::HasCarBeenUpsideDownForAWhile), this, id);
	0AA8: call_method_return 0x438010 struct [CUpsideDownCarCheck] num_params 1 pop 0 [id] func_ret [bool]

	// CUpsideDownCarCheck::Init
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::Init), this);

	// CUpsideDownCarCheck::IsCarUpsideDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::IsCarUpsideDown), this, id);
	0AA8: call_method_return 0x437E10 struct [CUpsideDownCarCheck] num_params 1 pop 0 [id] func_ret [bool]

	// CUpsideDownCarCheck::RemoveCarFromCheck
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::RemoveCarFromCheck), this, id);

	// CUpsideDownCarCheck::UpdateTimers
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::UpdateTimers), this);

plugin_III\game_III\CVehicle.cpp:

	// CVehicle::SetModelIndex
	// plugin::CallVirtualMethod<3, CVehicle *, unsigned int>(this, modelIndex);

	// CVehicle::SetupLighting
	// plugin::CallVirtualMethodAndReturn<bool, 14, CVehicle *>(this);

	// CVehicle::RemoveLighting
	// plugin::CallVirtualMethod<15, CVehicle *, bool>(this, reset);

	// CVehicle::FlagToDestroyWhenNextProcessed
	// plugin::CallVirtualMethod<16, CVehicle *>(this);

	// CVehicle::ProcessControlInputs
	// plugin::CallVirtualMethod<18, CVehicle *, unsigned char>(this, padNumber);

	// CVehicle::GetComponentWorldPosition
	// plugin::CallVirtualMethod<19, CVehicle *, int, CVector &>(this, component, pos);

	// CVehicle::IsComponentPresent
	// plugin::CallVirtualMethodAndReturn<bool, 20, CVehicle *, int>(this, component);

	// CVehicle::SetComponentRotation
	// plugin::CallVirtualMethod<21, CVehicle *, int, CVector>(this, component, rotation);

	// CVehicle::OpenDoor
	// plugin::CallVirtualMethod<22, CVehicle *, int, eDoors, float>(this, component, door, angle);

	// CVehicle::ProcessOpenDoor
	// plugin::CallVirtualMethod<23, CVehicle *, unsigned int, unsigned int, float>(this, component, anim, angle);

	// CVehicle::IsDoorReady
	// plugin::CallVirtualMethodAndReturn<bool, 24, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorFullyOpen
	// plugin::CallVirtualMethodAndReturn<bool, 25, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorClosed
	// plugin::CallVirtualMethodAndReturn<bool, 26, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorMissing
	// plugin::CallVirtualMethodAndReturn<bool, 27, CVehicle *, eDoors>(this, door);

	// CVehicle::RemoveRefsToVehicle
	// plugin::CallVirtualMethod<28, CVehicle *, CEntity *>(this, entity);

	// CVehicle::BlowUpCar
	// plugin::CallVirtualMethod<29, CVehicle *, CEntity *>(this, entity);

	// CVehicle::SetUpWheelColModel
	// plugin::CallVirtualMethodAndReturn<bool, 30, CVehicle *, CColModel *>(this, colModel);

	// CVehicle::BurstTyre
	// plugin::CallVirtualMethod<31, CVehicle *, unsigned char>(this, wheel);

	// CVehicle::IsRoomForPedToLeaveCar
	// plugin::CallVirtualMethodAndReturn<bool, 32, CVehicle *, unsigned int, CVector *>(this, component, doorOffset);

	// CVehicle::GetHeightAboveRoad
	// plugin::CallVirtualMethodAndReturn<float, 33, CVehicle *>(this);

	// CVehicle::PlayCarHorn
	// plugin::CallVirtualMethod<34, CVehicle *>(this);

	// CVehicle::AddPassenger
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *, CPed *>(gaddrof_o(CVehicle::AddPassenger, bool (CVehicle::*)(CPed *)), this, passenger);
	0AA8: call_method_return 0x551E10 struct [CVehicle] num_params 1 pop 0 [passenger] func_ret [bool]

	// CVehicle::AddPassenger
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *, CPed *, unsigned char>(gaddrof_o(CVehicle::AddPassenger, bool (CVehicle::*)(CPed *, unsigned char)), this, passenger, number);
	0AA8: call_method_return 0x551E10 struct [CVehicle] num_params 2 pop 0 [passenger] [number] func_ret [bool]

	// CVehicle::CanBeDeleted
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::CanBeDeleted), this);
	0AA8: call_method_return 0x5511B0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedEnterCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::CanPedEnterCar), this);
	0AA8: call_method_return 0x5522F0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedExitCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::CanPedExitCar), this);
	0AA8: call_method_return 0x5523C0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedOpenLocks
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *, CPed *>(gaddrof(CVehicle::CanPedOpenLocks), this, ped);
	0AA8: call_method_return 0x5522A0 struct [CVehicle] num_params 1 pop 0 [ped] func_ret [bool]

	// CVehicle::CarHasRoof
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::CarHasRoof), this);
	0AA8: call_method_return 0x552B70 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::ChangeLawEnforcerState
	// plugin::CallMethodDynGlobal<CVehicle *, unsigned char>(gaddrof(CVehicle::ChangeLawEnforcerState), this, enable);

	// CVehicle::DoFixedMachineGuns
	// plugin::CallMethodDynGlobal<CVehicle *>(gaddrof(CVehicle::DoFixedMachineGuns), this);

	// CVehicle::ExtinguishCarFire
	// plugin::CallMethodDynGlobal<CVehicle *>(gaddrof(CVehicle::ExtinguishCarFire), this);

	// CVehicle::FlyingControl
	// plugin::CallMethodDynGlobal<CVehicle *, eFlightModel>(gaddrof(CVehicle::FlyingControl), this, flightModel);

	// CVehicle::InflictDamage
	// plugin::CallMethodDynGlobal<CVehicle *, CEntity *, eWeaponType, float>(gaddrof(CVehicle::InflictDamage), this, entity, weaponType, damage);

	// CVehicle::IsLawEnforcementVehicle
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::IsLawEnforcementVehicle), this);
	0AA8: call_method_return 0x552880 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsOnItsSide
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::IsOnItsSide), this);
	0AA8: call_method_return 0x552260 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsSphereTouchingVehicle
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *, float, float, float, float>(gaddrof(CVehicle::IsSphereTouchingVehicle), this, x, y, z, radius);
	0AA8: call_method_return 0x552620 struct [CVehicle] num_params 4 pop 0 [x] [y] [z] [radius] func_ret [bool]

	// CVehicle::IsUpsideDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::IsUpsideDown), this);
	0AA8: call_method_return 0x552230 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsVehicleNormal
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::IsVehicleNormal), this);
	0AA8: call_method_return 0x5527E0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::ProcessCarAlarm
	// plugin::CallMethodDynGlobal<CVehicle *>(gaddrof(CVehicle::ProcessCarAlarm), this);

	// CVehicle::ProcessDelayedExplosion
	// plugin::CallMethodDynGlobal<CVehicle *>(gaddrof(CVehicle::ProcessDelayedExplosion), this);

	// CVehicle::ProcessWheel
	// plugin::CallMethodDynGlobal<CVehicle *, CVector &, CVector &, CVector &, CVector &, int, float, float, float, char, float *, tWheelState *, unsigned short>(gaddrof(CVehicle::ProcessWheel), this, wheelFwd, wheelRight, wheelContactSpeed, wheelContactPoint, wheelsOnGround, thrust, brake, adhesion, wheelId, wheelSpeed, wheelState, wheelStatus);

	// CVehicle::ProcessWheelRotation
	// plugin::CallMethodAndReturnDynGlobal<float, CVehicle *, tWheelState, CVector const &, CVector const &, float>(gaddrof(CVehicle::ProcessWheelRotation), this, state, fwd, speed, radius);
	0AA8: call_method_return 0x551280 struct [CVehicle] num_params 4 pop 0 [state] [fwd] [speed] [radius] func_ret [float]

	// CVehicle::RemoveDriver
	// plugin::CallMethodDynGlobal<CVehicle *>(gaddrof(CVehicle::RemoveDriver), this);

	// CVehicle::RemovePassenger
	// plugin::CallMethodDynGlobal<CVehicle *, CPed *>(gaddrof(CVehicle::RemovePassenger), this, passenger);

	// CVehicle::SetDriver
	// plugin::CallMethodDynGlobal<CVehicle *, CPed *>(gaddrof(CVehicle::SetDriver), this, driver);

	// *CVehicle::SetUpDriver
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CVehicle *>(gaddrof(CVehicle::SetUpDriver), this);
	0AA8: call_method_return 0x5520C0 struct [*CVehicle] num_params 0 pop 0 func_ret [CPed *]

	// *CVehicle::SetupPassenger
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CVehicle *, int>(gaddrof(CVehicle::SetupPassenger), this, number);
	0AA8: call_method_return 0x552160 struct [*CVehicle] num_params 1 pop 0 [number] func_ret [CPed *]

	// CVehicle::ShufflePassengersToMakeSpace
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CVehicle::ShufflePassengersToMakeSpace), this);
	0AA8: call_method_return 0x5528A0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::UsesSiren
	// plugin::CallMethodAndReturnDynGlobal<bool, CVehicle *, unsigned int>(gaddrof(CVehicle::UsesSiren), this, vehicleModel);
	0AA8: call_method_return 0x552200 struct [CVehicle] num_params 1 pop 0 [vehicleModel] func_ret [bool]

	// DestroyVehicleAndDriverAndPassengers
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(DestroyVehicleAndDriverAndPassengers), vehicle);

plugin_III\game_III\CVehicleModelInfo.cpp:

	// CVehicleModelInfo::DeleteRwObject
	// plugin::CallVirtualMethod<2, CVehicleModelInfo *>(this);

	// *CVehicleModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 3, CVehicleModelInfo *>(this);

	// CVehicleModelInfo::SetClump
	// plugin::CallVirtualMethod<6, CVehicleModelInfo *, RpClump *>(this, clump);

	// CVehicleModelInfo::AvoidSameVehicleColour
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *, unsigned char *, unsigned char *>(gaddrof(CVehicleModelInfo::AvoidSameVehicleColour), this, prim, sec);

	// CVehicleModelInfo::ChooseComponent
	// plugin::CallMethodAndReturnDynGlobal<int, CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::ChooseComponent), this);
	0AA8: call_method_return 0x520AB0 struct [CVehicleModelInfo] num_params 0 pop 0 func_ret [int]

	// CVehicleModelInfo::ChooseSecondComponent
	// plugin::CallMethodAndReturnDynGlobal<int, CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::ChooseSecondComponent), this);
	0AA8: call_method_return 0x520BE0 struct [CVehicleModelInfo] num_params 0 pop 0 func_ret [int]

	// CVehicleModelInfo::ChooseVehicleColour
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *, unsigned char *, unsigned char *>(gaddrof(CVehicleModelInfo::ChooseVehicleColour), this, prim, sec);

	// CVehicleModelInfo::FindEditableMaterialList
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::FindEditableMaterialList), this);

	// CVehicleModelInfo::GetWheelPosn
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *, int, CVector &>(gaddrof(CVehicleModelInfo::GetWheelPosn), this, wheel, outPos);

	// CVehicleModelInfo::PreprocessHierarchy
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::PreprocessHierarchy), this);

	// CVehicleModelInfo::SetAtomicRenderCallbacks
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::SetAtomicRenderCallbacks), this);

	// CVehicleModelInfo::SetEnvironmentMap
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *>(gaddrof(CVehicleModelInfo::SetEnvironmentMap), this);

	// CVehicleModelInfo::SetVehicleColour
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *, unsigned char, unsigned char>(gaddrof(CVehicleModelInfo::SetVehicleColour), this, prim, sec);

	// CVehicleModelInfo::SetVehicleComponentFlags
	// plugin::CallMethodDynGlobal<CVehicleModelInfo *, RwFrame *, unsigned int>(gaddrof(CVehicleModelInfo::SetVehicleComponentFlags), this, frame, flags);

	// *CVehicleModelInfo::ClearAtomicFlagCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(CVehicleModelInfo::ClearAtomicFlagCB), object, data);

	// *CVehicleModelInfo::CollapseFramesCB
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(CVehicleModelInfo::CollapseFramesCB), frame, data);

	// *CVehicleModelInfo::GetEditableMaterialListCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof_o(CVehicleModelInfo::GetEditableMaterialListCB, RpMaterial *(*)(RpMaterial *, void *)), material, data);

	// *CVehicleModelInfo::GetEditableMaterialListCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof_o(CVehicleModelInfo::GetEditableMaterialListCB, RpAtomic *(*)(RpAtomic *, void *)), atomic, data);

	// CVehicleModelInfo::GetMaximumNumberOfPassengersFromNumberOfDoors
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CVehicleModelInfo::GetMaximumNumberOfPassengersFromNumberOfDoors), modelIndex);

	// *CVehicleModelInfo::HasAlphaMaterialCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof(CVehicleModelInfo::HasAlphaMaterialCB), material, data);

	// *CVehicleModelInfo::HasSpecularMaterialCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof(CVehicleModelInfo::HasSpecularMaterialCB), material, data);

	// *CVehicleModelInfo::HideAllComponentsAtomicCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::HideAllComponentsAtomicCB), atomic, data);

	// *CVehicleModelInfo::HideDamagedAtomicCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::HideDamagedAtomicCB), atomic, data);

	// *CVehicleModelInfo::MoveObjectsCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(CVehicleModelInfo::MoveObjectsCB), object, data);

	// *CVehicleModelInfo::SetAtomicFlagCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(CVehicleModelInfo::SetAtomicFlagCB), object, data);

	// *CVehicleModelInfo::SetAtomicRendererCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::SetAtomicRendererCB), atomic, data);

	// *CVehicleModelInfo::SetAtomicRendererCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::SetAtomicRendererCB_BigVehicle), atomic, data);

	// *CVehicleModelInfo::SetAtomicRendererCB_Boat
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::SetAtomicRendererCB_Boat), atomic, data);

	// *CVehicleModelInfo::SetAtomicRendererCB_Heli
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::SetAtomicRendererCB_Heli), atomic, data);

	// *CVehicleModelInfo::SetAtomicRendererCB_Train
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CVehicleModelInfo::SetAtomicRendererCB_Train), atomic, data);

	// *CVehicleModelInfo::SetEnvironmentMapCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof_o(CVehicleModelInfo::SetEnvironmentMapCB, RpMaterial *(*)(RpMaterial *, void *)), material, data);

	// *CVehicleModelInfo::SetEnvironmentMapCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof_o(CVehicleModelInfo::SetEnvironmentMapCB, RpAtomic *(*)(RpAtomic *, void *)), atomic, data);

	// *GetOkAndDamagedAtomicCB
	// plugin::CallAndReturnDynGlobal<RwObject *, RwObject *, void *>(gaddrof(GetOkAndDamagedAtomicCB), object, data);

	// IsValidCompRule
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(IsValidCompRule), rule);

	// GetListOfComponentsNotUsedByRules
	// plugin::CallAndReturnDynGlobal<int, unsigned int, int, int *>(gaddrof(GetListOfComponentsNotUsedByRules), compRulesBits, numExtras, variationsList);

	// CountCompsInRule
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CountCompsInRule), compRulesBits);

	// ChooseComponent
	// plugin::CallAndReturnDynGlobal<int, int, int>(gaddrof(ChooseComponent), rule, compRulesBits);

	// *CreateCarColourTexture
	// plugin::CallAndReturnDynGlobal<RwTexture *, unsigned char, unsigned char, unsigned char>(gaddrof(CreateCarColourTexture), red, green, blue);

plugin_III\game_III\CVisibilityPlugins.cpp:

	// *CVisibilityPlugins::AtomicConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::AtomicConstructor), object, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::AtomicCopyConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::AtomicCopyConstructor), dstObject, srcObject, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::AtomicDestructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::AtomicDestructor), object, offsetInObject, sizeInObject);

	// CVisibilityPlugins::ClearAtomicFlag
	// plugin::CallDynGlobal<RpAtomic *, int>(gaddrof(CVisibilityPlugins::ClearAtomicFlag), atomic, flag);

	// *CVisibilityPlugins::ClumpConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::ClumpConstructor), object, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::ClumpCopyConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::ClumpCopyConstructor), dstObject, srcObject, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::ClumpDestructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::ClumpDestructor), object, offsetInObject, sizeInObject);

	// CVisibilityPlugins::DefaultVisibilityCB
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(CVisibilityPlugins::DefaultVisibilityCB), clump);

	// *CVisibilityPlugins::FrameConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::FrameConstructor), object, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::FrameCopyConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::FrameCopyConstructor), dstObject, srcObject, offsetInObject, sizeInObject);

	// *CVisibilityPlugins::FrameDestructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(CVisibilityPlugins::FrameDestructor), object, offsetInObject, sizeInObject);

	// CVisibilityPlugins::FrustumSphereCB
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(CVisibilityPlugins::FrustumSphereCB), clump);

	// CVisibilityPlugins::GetAtomicId
	// plugin::CallAndReturnDynGlobal<int, RpAtomic *>(gaddrof(CVisibilityPlugins::GetAtomicId), atomic);

	// *CVisibilityPlugins::GetAtomicModelInfo
	// plugin::CallAndReturnDynGlobal<CSimpleModelInfo *, RpAtomic *>(gaddrof(CVisibilityPlugins::GetAtomicModelInfo), atomic);

	// CVisibilityPlugins::GetClumpAlpha
	// plugin::CallAndReturnDynGlobal<int, RpClump *>(gaddrof(CVisibilityPlugins::GetClumpAlpha), clump);

	// CVisibilityPlugins::GetDistanceSquaredFromCamera
	// plugin::CallAndReturnDynGlobal<float, RwFrame *>(gaddrof(CVisibilityPlugins::GetDistanceSquaredFromCamera), frame);

	// CVisibilityPlugins::GetDotProductWithCameraVector
	// plugin::CallAndReturnDynGlobal<float, RwMatrix *, RwMatrix *, unsigned int>(gaddrof(CVisibilityPlugins::GetDotProductWithCameraVector), atomicMat, clumpMat, flag);

	// CVisibilityPlugins::GetFrameHierarchyId
	// plugin::CallAndReturnDynGlobal<int, RwFrame *>(gaddrof(CVisibilityPlugins::GetFrameHierarchyId), frame);

	// CVisibilityPlugins::InsertAtomicIntoSortedList
	// plugin::CallAndReturnDynGlobal<bool, RpAtomic *, float>(gaddrof(CVisibilityPlugins::InsertAtomicIntoSortedList), atomic, dist);

	// CVisibilityPlugins::InsertEntityIntoSortedList
	// plugin::CallAndReturnDynGlobal<bool, CEntity *, float>(gaddrof(CVisibilityPlugins::InsertEntityIntoSortedList), entity, dist);

	// CVisibilityPlugins::MloVisibilityCB
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(CVisibilityPlugins::MloVisibilityCB), clump);

	// CVisibilityPlugins::PluginAttach
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CVisibilityPlugins::PluginAttach));

	// *CVisibilityPlugins::RenderAlphaAtomic
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, int>(gaddrof(CVisibilityPlugins::RenderAlphaAtomic), atomic, alpha);

	// *CVisibilityPlugins::RenderFadingAtomic
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, float>(gaddrof(CVisibilityPlugins::RenderFadingAtomic), atomic, camdist);

	// *CVisibilityPlugins::RenderObjAlwaysAtomic
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderObjAlwaysAtomic), atomic);

	// *CVisibilityPlugins::RenderPedHiDetailCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderPedHiDetailCB), atomic);

	// *CVisibilityPlugins::RenderPedLowDetailCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderPedLowDetailCB), atomic);

	// *CVisibilityPlugins::RenderPlayerCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderPlayerCB), atomic);

	// *CVisibilityPlugins::RenderTrainHiDetailAlphaCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderTrainHiDetailAlphaCB), atomic);

	// *CVisibilityPlugins::RenderTrainHiDetailCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderTrainHiDetailCB), atomic);

	// *CVisibilityPlugins::RenderVehicleHiDetailAlphaCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleHiDetailAlphaCB), atomic);

	// *CVisibilityPlugins::RenderVehicleHiDetailAlphaCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleHiDetailAlphaCB_BigVehicle), atomic);

	// *CVisibilityPlugins::RenderVehicleHiDetailCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleHiDetailCB), atomic);

	// *CVisibilityPlugins::RenderVehicleHiDetailCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleHiDetailCB_BigVehicle), atomic);

	// *CVisibilityPlugins::RenderVehicleHiDetailCB_Boat
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleHiDetailCB_Boat), atomic);

	// *CVisibilityPlugins::RenderVehicleLowDetailAlphaCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleLowDetailAlphaCB_BigVehicle), atomic);

	// *CVisibilityPlugins::RenderVehicleLowDetailCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleLowDetailCB_BigVehicle), atomic);

	// *CVisibilityPlugins::RenderVehicleReallyLowDetailCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleReallyLowDetailCB), atomic);

	// *CVisibilityPlugins::RenderVehicleReallyLowDetailCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderVehicleReallyLowDetailCB_BigVehicle), atomic);

	// *CVisibilityPlugins::RenderWheelAtomicCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *>(gaddrof(CVisibilityPlugins::RenderWheelAtomicCB), atomic);

	// CVisibilityPlugins::SetAtomicFlag
	// plugin::CallDynGlobal<RpAtomic *, int>(gaddrof(CVisibilityPlugins::SetAtomicFlag), atomic, flag);

	// CVisibilityPlugins::SetAtomicModelInfo
	// plugin::CallDynGlobal<RpAtomic *, CSimpleModelInfo *>(gaddrof(CVisibilityPlugins::SetAtomicModelInfo), atomic, info);

	// CVisibilityPlugins::SetAtomicRenderCallback
	// plugin::CallDynGlobal<RpAtomic *, RpAtomic *(*)(RpAtomic *)>(gaddrof(CVisibilityPlugins::SetAtomicRenderCallback), atomic, f);

	// CVisibilityPlugins::SetClumpAlpha
	// plugin::CallDynGlobal<RpClump *, int>(gaddrof(CVisibilityPlugins::SetClumpAlpha), clump, alpha);

	// CVisibilityPlugins::SetClumpModelInfo
	// plugin::CallDynGlobal<RpClump *, CClumpModelInfo *>(gaddrof(CVisibilityPlugins::SetClumpModelInfo), clump, info);

	// CVisibilityPlugins::SetFrameHierarchyId
	// plugin::CallDynGlobal<RwFrame *, int>(gaddrof(CVisibilityPlugins::SetFrameHierarchyId), frame, id);

	// CVisibilityPlugins::SetRenderWareCamera
	// plugin::CallDynGlobal<RwCamera *>(gaddrof(CVisibilityPlugins::SetRenderWareCamera), camera);

	// CVisibilityPlugins::VehicleVisibilityCB
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(CVisibilityPlugins::VehicleVisibilityCB), clump);

	// CVisibilityPlugins::VehicleVisibilityCB_BigVehicle
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(CVisibilityPlugins::VehicleVisibilityCB_BigVehicle), clump);

	// *SetAlphaCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof(SetAlphaCB), material, data);

	// *SetTextureCB
	// plugin::CallAndReturnDynGlobal<RpMaterial *, RpMaterial *, void *>(gaddrof(SetTextureCB), material, data);

plugin_III\game_III\CWanted.cpp:

	// CCrimeBeingQd::operator=
	// plugin::CallMethodDynGlobal<CCrimeBeingQd *, CCrimeBeingQd const &>(gaddrof_o(CCrimeBeingQd::operator=, void (CCrimeBeingQd::*)(CCrimeBeingQd const &)), this, right);

	// CWanted::AddCrimeToQ
	// plugin::CallMethodAndReturnDynGlobal<bool, CWanted *, eCrimeType, int, CVector const &, bool, bool>(gaddrof(CWanted::AddCrimeToQ), this, crimeType, crimeId, pos, bAlreadyReported, bPoliceDontReallyCare);
	0AA8: call_method_return 0x4ADFD0 struct [CWanted] num_params 5 pop 0 [crimeType] [crimeId] [pos] [bAlreadyReported] [bPoliceDontReallyCare] func_ret [bool]

	// CWanted::AreArmyRequired
	// plugin::CallMethodAndReturnDynGlobal<bool, CWanted *>(gaddrof(CWanted::AreArmyRequired), this);
	0AA8: call_method_return 0x4ADBE0 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreFbiRequired
	// plugin::CallMethodAndReturnDynGlobal<bool, CWanted *>(gaddrof(CWanted::AreFbiRequired), this);
	0AA8: call_method_return 0x4ADBC0 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreSwatRequired
	// plugin::CallMethodAndReturnDynGlobal<bool, CWanted *>(gaddrof(CWanted::AreSwatRequired), this);
	0AA8: call_method_return 0x4ADBA0 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::ClearQdCrimes
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::ClearQdCrimes), this);

	// CWanted::Initialise
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::Initialise), this);

	// CWanted::NumOfHelisRequired
	// plugin::CallMethodAndReturnDynGlobal<int, CWanted *>(gaddrof(CWanted::NumOfHelisRequired), this);
	0AA8: call_method_return 0x4ADC00 struct [CWanted] num_params 0 pop 0 func_ret [int]

	// CWanted::RegisterCrime
	// plugin::CallMethodDynGlobal<CWanted *, eCrimeType, CVector const &, unsigned int, bool>(gaddrof(CWanted::RegisterCrime), this, crimeType, pos, crimeId, bPoliceDontReallyCare);

	// CWanted::RegisterCrime_Immediately
	// plugin::CallMethodDynGlobal<CWanted *, eCrimeType, CVector const &, unsigned int, bool>(gaddrof(CWanted::RegisterCrime_Immediately), this, crimeType, pos, crimeId, bPoliceDontReallyCare);

	// CWanted::ReportCrimeNow
	// plugin::CallMethodDynGlobal<CWanted *, eCrimeType, CVector const &, bool>(gaddrof(CWanted::ReportCrimeNow), this, crimeType, pos, bPoliceDontReallyCare);

	// CWanted::Reset
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::Reset), this);

	// CWanted::ResetPolicePursuit
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::ResetPolicePursuit), this);

	// CWanted::SetWantedLevel
	// plugin::CallMethodDynGlobal<CWanted *, int>(gaddrof(CWanted::SetWantedLevel), this, level);

	// CWanted::SetWantedLevelNoDrop
	// plugin::CallMethodDynGlobal<CWanted *, int>(gaddrof(CWanted::SetWantedLevelNoDrop), this, level);

	// CWanted::Update
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::Update), this);

	// CWanted::UpdateCrimesQ
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::UpdateCrimesQ), this);

	// CWanted::UpdateWantedLevel
	// plugin::CallMethodDynGlobal<CWanted *>(gaddrof(CWanted::UpdateWantedLevel), this);

	// CWanted::SetMaximumWantedLevel
	// plugin::CallDynGlobal<int>(gaddrof(CWanted::SetMaximumWantedLevel), level);

	// CWanted::WorkOutPolicePresence
	// plugin::CallAndReturnDynGlobal<int, CVector, float>(gaddrof(CWanted::WorkOutPolicePresence), pos, radius);

plugin_III\game_III\CWaterCannon.cpp:

	// CWaterCannon::Init
	// plugin::CallMethodDynGlobal<CWaterCannon *>(gaddrof(CWaterCannon::Init), this);

	// CWaterCannon::PushPeds
	// plugin::CallMethodDynGlobal<CWaterCannon *>(gaddrof(CWaterCannon::PushPeds), this);

	// CWaterCannon::Render
	// plugin::CallMethodDynGlobal<CWaterCannon *>(gaddrof(CWaterCannon::Render), this);

	// CWaterCannon::Update_NewInput
	// plugin::CallMethodDynGlobal<CWaterCannon *, CVector *, CVector *>(gaddrof(CWaterCannon::Update_NewInput), this, pos, dir);

	// CWaterCannon::Update_OncePerFrame
	// plugin::CallMethodDynGlobal<CWaterCannon *, short>(gaddrof(CWaterCannon::Update_OncePerFrame), this, index);

plugin_III\game_III\CWaterCannons.cpp:

	// CWaterCannons::UpdateOne
	// plugin::CallDynGlobal<unsigned int, CVector *, CVector *>(gaddrof(CWaterCannons::UpdateOne), id, pos, dir);

plugin_III\game_III\CWeapon.cpp:

	// CWeapon::AddGunshell
	// plugin::CallMethodDynGlobal<CWeapon *, CEntity *, CVector const &, CVector2D const &, float>(gaddrof(CWeapon::AddGunshell), this, shooter, source, direction, size);

	// CWeapon::DoBulletImpact
	// plugin::CallMethodDynGlobal<CWeapon *, CEntity *, CEntity *, CVector *, CVector *, CColPoint *, CVector2D>(gaddrof(CWeapon::DoBulletImpact), this, shooter, victim, source, target, colPoint, ahead);

	// CWeapon::Fire
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *>(gaddrof(CWeapon::Fire), this, shooter, fireSource);
	0AA8: call_method_return 0x55C380 struct [CWeapon] num_params 2 pop 0 [shooter] [fireSource] func_ret [bool]

	// CWeapon::FireAreaEffect
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *>(gaddrof(CWeapon::FireAreaEffect), this, shooter, fireSource);
	0AA8: call_method_return 0x561E00 struct [CWeapon] num_params 2 pop 0 [shooter] [fireSource] func_ret [bool]

	// CWeapon::FireFromCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CAutomobile *, bool>(gaddrof(CWeapon::FireFromCar), this, shooter, left);
	0AA8: call_method_return 0x55C940 struct [CWeapon] num_params 2 pop 0 [shooter] [left] func_ret [bool]

	// CWeapon::FireInstantHit
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *>(gaddrof(CWeapon::FireInstantHit), this, shooter, fireSource);
	0AA8: call_method_return 0x55D2E0 struct [CWeapon] num_params 2 pop 0 [shooter] [fireSource] func_ret [bool]

	// CWeapon::FireInstantHitFromCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CAutomobile *, bool>(gaddrof(CWeapon::FireInstantHitFromCar), this, shooter, left);
	0AA8: call_method_return 0x5624D0 struct [CWeapon] num_params 2 pop 0 [shooter] [left] func_ret [bool]

	// CWeapon::FireM16_1stPerson
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *>(gaddrof(CWeapon::FireM16_1stPerson), this, shooter);
	0AA8: call_method_return 0x562180 struct [CWeapon] num_params 1 pop 0 [shooter] func_ret [bool]

	// CWeapon::FireMelee
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector &>(gaddrof(CWeapon::FireMelee), this, shooter, fireSource);
	0AA8: call_method_return 0x55CA20 struct [CWeapon] num_params 2 pop 0 [shooter] [fireSource] func_ret [bool]

	// CWeapon::FireProjectile
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *, float>(gaddrof(CWeapon::FireProjectile), this, shooter, fireSource, power);
	0AA8: call_method_return 0x561900 struct [CWeapon] num_params 3 pop 0 [shooter] [fireSource] [power] func_ret [bool]

	// CWeapon::FireShotgun
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *>(gaddrof(CWeapon::FireShotgun), this, shooter, fireSource);
	0AA8: call_method_return 0x560620 struct [CWeapon] num_params 2 pop 0 [shooter] [fireSource] func_ret [bool]

	// CWeapon::FireSniper
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *>(gaddrof(CWeapon::FireSniper), this, shooter);
	0AA8: call_method_return 0x561FE0 struct [CWeapon] num_params 1 pop 0 [shooter] func_ret [bool]

	// CWeapon::HasWeaponAmmoToBeUsed
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *>(gaddrof(CWeapon::HasWeaponAmmoToBeUsed), this);
	0AA8: call_method_return 0x564B80 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::HitsGround
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *, CEntity *, CVector *, CEntity *>(gaddrof(CWeapon::HitsGround), this, holder, fireSource, aimingTo);
	0AA8: call_method_return 0x564890 struct [CWeapon] num_params 3 pop 0 [holder] [fireSource] [aimingTo] func_ret [bool]

	// CWeapon::Initialise
	// plugin::CallMethodDynGlobal<CWeapon *, eWeaponType, int>(gaddrof(CWeapon::Initialise), this, type, ammo);

	// CWeapon::IsType2Handed
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *>(gaddrof(CWeapon::IsType2Handed), this);
	0AA8: call_method_return 0x563FD0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::IsTypeMelee
	// plugin::CallMethodAndReturnDynGlobal<bool, CWeapon *>(gaddrof(CWeapon::IsTypeMelee), this);
	0AA8: call_method_return 0x563FB0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::Reload
	// plugin::CallMethodDynGlobal<CWeapon *>(gaddrof(CWeapon::Reload), this);

	// CWeapon::Update
	// plugin::CallMethodDynGlobal<CWeapon *, int>(gaddrof(CWeapon::Update), this, audioEntity);

	// CWeapon::BlowUpExplosiveThings
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CWeapon::BlowUpExplosiveThings), thing);

	// CWeapon::DoDoomAiming
	// plugin::CallDynGlobal<CEntity *, CVector *, CVector *>(gaddrof(CWeapon::DoDoomAiming), shooter, source, target);

	// CWeapon::DoDriveByAutoAiming
	// plugin::CallDynGlobal<CEntity *, CVector *, CVector *>(gaddrof(CWeapon::DoDriveByAutoAiming), shooter, source, target);

	// CWeapon::DoTankDoomAiming
	// plugin::CallDynGlobal<CEntity *, CEntity *, CVector *, CVector *>(gaddrof(CWeapon::DoTankDoomAiming), shooter, driver, source, target);

	// CWeapon::GenerateFlameThrowerParticles
	// plugin::CallDynGlobal<CVector, CVector>(gaddrof(CWeapon::GenerateFlameThrowerParticles), pos, dir);

	// CWeapon::MakePedsJumpAtShot
	// plugin::CallDynGlobal<CPhysical *, CVector *, CVector *>(gaddrof(CWeapon::MakePedsJumpAtShot), shooter, source, target);

	// CWeapon::ProcessLineOfSight
	// plugin::CallAndReturnDynGlobal<bool, CVector const &, CVector const &, CColPoint &, CEntity **, eWeaponType, CEntity *, bool, bool, bool, bool, bool, bool, bool>(gaddrof(CWeapon::ProcessLineOfSight), origin, target, point, outEntity, type, entity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);

	// FireOneInstantHitRound
	// plugin::CallDynGlobal<CVector *, CVector *, int>(gaddrof(FireOneInstantHitRound), source, target, damage);

plugin_III\game_III\CWeaponEffects.cpp:

	// CWeaponEffects::CWeaponEffects
	// plugin::CallMethod<0x564C40, CWeaponEffects *>(this);
	0AA6: call_method 0x564C40 struct [CWeaponEffects] num_params 0 pop 0

	// CWeaponEffects::ClearCrossHair
	// plugin::Call<0x564D60>();
	0AA5: call_function 0x564D60 num_params 0 pop 0

	// CWeaponEffects::Init
	// plugin::Call<0x564C60>();
	0AA5: call_function 0x564C60 num_params 0 pop 0

	// CWeaponEffects::MarkTarget
	// plugin::Call<0x564D00, CVector, unsigned char, unsigned char, unsigned char, unsigned char, float>(pos, red, green, blue, alpha, size);
	0AA5: call_function 0x564D00 num_params 6 pop 6 [pos] [red] [green] [blue] [alpha] [size]

	// CWeaponEffects::Render
	// plugin::Call<0x564D70>();
	0AA5: call_function 0x564D70 num_params 0 pop 0

	// CWeaponEffects::Shutdown
	// plugin::Call<0x564CF0>();
	0AA5: call_function 0x564CF0 num_params 0 pop 0

	// CWeaponEffects::~CWeaponEffects
	// plugin::CallMethod<0x564C50, CWeaponEffects *>(this);
	0AA6: call_method 0x564C50 struct [CWeaponEffects] num_params 0 pop 0

plugin_III\game_III\CWeaponInfo.cpp:

	// CWeaponInfo::CWeaponInfo
	// plugin::CallMethod<0x5654F0, CWeaponInfo *>(this);
	0AA6: call_method 0x5654F0 struct [CWeaponInfo] num_params 0 pop 0

	// CWeaponInfo::GetWeaponInfo
	// plugin::CallAndReturn<CWeaponInfo*, 0x564FD0, eWeaponType>(weaponType);
	0AA7: call_function_return 0x564FD0 num_params 1 pop 1 [weaponType] func_ret [CWeaponInfo*]

	// CWeaponInfo::Initialise
	// plugin::Call<0x564EA0>();
	0AA5: call_function 0x564EA0 num_params 0 pop 0

	// CWeaponInfo::LoadWeaponData
	// plugin::Call<0x564FE0>();
	0AA5: call_function 0x564FE0 num_params 0 pop 0

	// CWeaponInfo::Shutdown
	// plugin::Call<0x564FB0>();
	0AA5: call_function 0x564FB0 num_params 0 pop 0

	// CWeaponInfo::~CWeaponInfo
	// plugin::CallMethod<0x5654E0, CWeaponInfo *>(this);
	0AA6: call_method 0x5654E0 struct [CWeaponInfo] num_params 0 pop 0

plugin_III\game_III\CWeather.cpp:

	// CWeather::ForceWeather
	// plugin::CallDynGlobal<short>(gaddrof(CWeather::ForceWeather), weather);

	// CWeather::ForceWeatherNow
	// plugin::CallDynGlobal<short>(gaddrof(CWeather::ForceWeatherNow), weather);

	// RenderOneRainStreak
	// plugin::CallDynGlobal<CVector, CVector, int, bool, float>(gaddrof(RenderOneRainStreak), pos, unused, intensity, scale, distance);

plugin_III\game_III\CWorld.cpp:

	// CWorld::Add
	// plugin::Call<0x4AE930, CEntity*>(entity);
	0AA5: call_function 0x4AE930 num_params 1 pop 1 [entity]

	// CWorld::AddParticles
	// plugin::Call<0x4B4010>();
	0AA5: call_function 0x4B4010 num_params 0 pop 0

	// CWorld::CallOffChaseForArea
	// plugin::Call<0x4B5530, float, float, float, float>(x1, y1, x2, y2);
	0AA5: call_function 0x4B5530 num_params 4 pop 4 [x1] [y1] [x2] [y2]

	// CWorld::CallOffChaseForAreaSectorListPeds
	// plugin::Call<0x4B5A60, CPtrList&, float, float, float, float, float, float, float, float>(list, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4B5A60 num_params 9 pop 9 [list] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::CallOffChaseForAreaSectorListVehicles
	// plugin::Call<0x4B57B0, CPtrList&, float, float, float, float, float, float, float, float>(list, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4B57B0 num_params 9 pop 9 [list] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::CameraToIgnoreThisObject
	// plugin::CallAndReturn<bool, 0x4B5C30, CEntity*>(entity);
	0AA7: call_function_return 0x4B5C30 num_params 1 pop 1 [entity] func_ret [bool]

	// CWorld::ClearCarsFromArea
	// plugin::Call<0x4B50E0, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x4B50E0 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::ClearExcitingStuffFromArea
	// plugin::Call<0x4B4E70, CVector const&, float, unsigned char>(point, radius, bRemoveProjectilesAndShadows);
	0AA5: call_function 0x4B4E70 num_params 3 pop 3 [point] [radius] [bRemoveProjectilesAndShadows]

	// CWorld::ClearForRestart
	// plugin::Call<0x4AE850>();
	0AA5: call_function 0x4AE850 num_params 0 pop 0

	// CWorld::ClearPedsFromArea
	// plugin::Call<0x4B52B0, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x4B52B0 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::ClearScanCodes
	// plugin::Call<0x4B1F60>();
	0AA5: call_function 0x4B1F60 num_params 0 pop 0

	// CWorld::ExtinguishAllCarFiresInArea
	// plugin::Call<0x4B5460, CVector, float>(point, radius);
	0AA5: call_function 0x4B5460 num_params 2 pop 2 [point] [radius]

	// CWorld::FindGroundZFor3DCoord
	// plugin::CallAndReturn<float, 0x4B3AE0, float, float, float, bool*>(x, y, z, outResult);
	0AA7: call_function_return 0x4B3AE0 num_params 4 pop 4 [x] [y] [z] [outResult] func_ret [float]

	// CWorld::FindGroundZForCoord
	// plugin::CallAndReturn<float, 0x4B3A80, float, float>(x, y);
	0AA7: call_function_return 0x4B3A80 num_params 2 pop 2 [x] [y] func_ret [float]

	// CWorld::FindMissionEntitiesIntersectingCube
	// plugin::Call<0x4B3680, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, vehicles, peds, objects);
	0AA5: call_function 0x4B3680 num_params 8 pop 8 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehicles] [peds] [objects]

	// CWorld::FindMissionEntitiesIntersectingCubeSectorList
	// plugin::Call<0x4B3920, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(list, cornerA, cornerB, outCount, maxCount, outEntities, vehiclesList, pedsList, objectsList);
	0AA5: call_function 0x4B3920 num_params 9 pop 9 [list] [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehiclesList] [pedsList] [objectsList]

	// CWorld::FindObjectsInRange
	// plugin::Call<0x4B2200, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4B2200 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsInRangeSectorList
	// plugin::Call<0x4B2540, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4B2540 num_params 7 pop 7 [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingAngledCollisionBox
	// plugin::Call<0x4B3280, CColBox const&, CMatrix const&, CVector const&, float, float, float, float, short*, short, CEntity**, bool, bool, bool, bool, bool>(box, transform, point, x1, y1, x2, y2, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4B3280 num_params 15 pop 15 [box] [transform] [point] [x1] [y1] [x2] [y2] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingAngledCollisionBoxSectorList
	// plugin::Call<0x4B3590, CPtrList&, CColBox const&, CMatrix const&, CVector const&, short*, short, CEntity**>(list, box, transform, poin, outCount, maxCount, outEntities);
	0AA5: call_function 0x4B3590 num_params 7 pop 7 [list] [box] [transform] [poin] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingCube
	// plugin::Call<0x4B2E70, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4B2E70 num_params 10 pop 10 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingCubeSectorList
	// plugin::Call<0x4B3150, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**>(list, cornerA, cornerB, outCount, maxCount, outEntities);
	0AA5: call_function 0x4B3150 num_params 6 pop 6 [list] [cornerA] [cornerB] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsKindaColliding
	// plugin::Call<0x4B2A30, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4B2A30 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsKindaCollidingSectorList
	// plugin::Call<0x4B2D70, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4B2D70 num_params 7 pop 7 [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsOfTypeInRange
	// plugin::Call<0x4B2600, unsigned int, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(modelId, point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4B2600 num_params 12 pop 12 [modelId] [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsOfTypeInRangeSectorList
	// plugin::Call<0x4B2960, unsigned int, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(modelId, list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4B2960 num_params 8 pop 8 [modelId] [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindRoofZFor3DCoord
	// plugin::CallAndReturn<float, 0x4B3B50, float, float, float, bool*>(x, y, z, outResult);
	0AA7: call_function_return 0x4B3B50 num_params 4 pop 4 [x] [y] [z] [outResult] func_ret [float]

	// CWorld::GetIsLineOfSightClear
	// plugin::CallAndReturn<bool, 0x4AEAA0, CVector const&, CVector const&, bool, bool, bool, bool, bool, bool, bool>(origin, target, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4AEAA0 num_params 9 pop 9 [origin] [target] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::GetIsLineOfSightSectorClear
	// plugin::CallAndReturn<bool, 0x4B2000, CSector&, CColLine const&, bool, bool, bool, bool, bool, bool, bool>(sector, line, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4B2000 num_params 9 pop 9 [sector] [line] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::GetIsLineOfSightSectorListClear
	// plugin::CallAndReturn<bool, 0x4B2160, CPtrList&, CColLine const&, bool, bool>(list, line, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4B2160 num_params 4 pop 4 [list] [line] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::Initialise
	// plugin::Call<0x4AE410>();
	0AA5: call_function 0x4AE410 num_params 0 pop 0

	// CWorld::Process
	// plugin::Call<0x4B1A60>();
	0AA5: call_function 0x4B1A60 num_params 0 pop 0

	// CWorld::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x4AF970, CVector const&, CVector const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, bool>(origin, target, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4AF970 num_params 11 pop 11 [origin] [target] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::ProcessLineOfSightSector
	// plugin::CallAndReturn<bool, 0x4B0A80, CSector&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool, bool, bool, bool, bool>(sector, line, outColPoint, maxTouchDistance, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4B0A80 num_params 12 pop 12 [sector] [line] [outColPoint] [maxTouchDistance] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::ProcessLineOfSightSectorList
	// plugin::CallAndReturn<bool, 0x4B0C70, CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool>(list, line, outColPoint, maxTouchDistance, outEntity, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4B0C70 num_params 7 pop 7 [list] [line] [outColPoint] [maxTouchDistance] [outEntity] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::ProcessVerticalLine
	// plugin::CallAndReturn<bool, 0x4B0DE0, CVector const&, float, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(origin, distance, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x4B0DE0 num_params 11 pop 11 [origin] [distance] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::ProcessVerticalLineSector
	// plugin::CallAndReturn<bool, 0x4B0EF0, CSector&, CColLine const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(sector, line, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x4B0EF0 num_params 11 pop 11 [sector] [line] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::ProcessVerticalLineSectorList
	// plugin::CallAndReturn<bool, 0x4B1090, CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, CStoredCollPoly*>(list, line, outColPoint, maxTouchDistance, outEntity, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x4B1090 num_params 7 pop 7 [list] [line] [outColPoint] [maxTouchDistance] [outEntity] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::Remove
	// plugin::Call<0x4AE9D0, CEntity*>(entity);
	0AA5: call_function 0x4AE9D0 num_params 1 pop 1 [entity]

	// CWorld::RemoveEntityInsteadOfProcessingIt
	// plugin::Call<0x4B4E10, CEntity*>(entity);
	0AA5: call_function 0x4B4E10 num_params 1 pop 1 [entity]

	// CWorld::RemoveFallenCars
	// plugin::Call<0x4B4170>();
	0AA5: call_function 0x4B4170 num_params 0 pop 0

	// CWorld::RemoveFallenPeds
	// plugin::Call<0x4B4060>();
	0AA5: call_function 0x4B4060 num_params 0 pop 0

	// CWorld::RemoveReferencesToDeletedObject
	// plugin::Call<0x4B3BF0, CEntity*>(entity);
	0AA5: call_function 0x4B3BF0 num_params 1 pop 1 [entity]

	// CWorld::RemoveStaticObjects
	// plugin::Call<0x4B4D50>();
	0AA5: call_function 0x4B4D50 num_params 0 pop 0

	// CWorld::RepositionCertainDynamicObjects
	// plugin::Call<0x4B42B0>();
	0AA5: call_function 0x4B42B0 num_params 0 pop 0

	// CWorld::RepositionOneObject
	// plugin::Call<0x4B4300, CEntity*>(entity);
	0AA5: call_function 0x4B4300 num_params 1 pop 1 [entity]

	// CWorld::SetAllCarsCanBeDamaged
	// plugin::Call<0x4B53F0, bool>(enable);
	0AA5: call_function 0x4B53F0 num_params 1 pop 1 [enable]

	// CWorld::SetCarsOnFire
	// plugin::Call<0x4B3E90, float, float, float, float, CEntity*>(x, y, z, radius, fireCreator);
	0AA5: call_function 0x4B3E90 num_params 5 pop 5 [x] [y] [z] [radius] [fireCreator]

	// CWorld::SetPedsOnFire
	// plugin::Call<0x4B3D30, float, float, float, float, CEntity*>(x, y, z, radius, fireCreator);
	0AA5: call_function 0x4B3D30 num_params 5 pop 5 [x] [y] [z] [radius] [fireCreator]

	// CWorld::ShutDown
	// plugin::Call<0x4AE450>();
	0AA5: call_function 0x4AE450 num_params 0 pop 0

	// CWorld::StopAllLawEnforcersInTheirTracks
	// plugin::Call<0x4B5BC0>();
	0AA5: call_function 0x4B5BC0 num_params 0 pop 0

	// CWorld::TestSphereAgainstSectorList
	// plugin::CallAndReturn<CEntity*, 0x4B4AC0, CPtrList&, CVector, float, CEntity*, bool>(list, sphereCenter, sphereRadius, ignoreEntity, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4B4AC0 num_params 5 pop 5 [list] [sphereCenter] [sphereRadius] [ignoreEntity] [doCameraIgnoreCheck] func_ret [CEntity*]

	// CWorld::TestSphereAgainstWorld
	// plugin::CallAndReturn<CEntity*, 0x4B4710, CVector, float, CEntity*, bool, bool, bool, bool, bool, bool>(sphereCenter, sphereRadius, ignoreEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck);
	0AA7: call_function_return 0x4B4710 num_params 9 pop 9 [sphereCenter] [sphereRadius] [ignoreEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] func_ret [CEntity*]

	// CWorld::TriggerExplosion
	// plugin::Call<0x4B1140, CVector const&, float, float, CEntity*, bool>(point, radius, visibleDistance, entity, processVehicleBombTimer);
	0AA5: call_function 0x4B1140 num_params 5 pop 5 [point] [radius] [visibleDistance] [entity] [processVehicleBombTimer]

	// CWorld::TriggerExplosionSectorList
	// plugin::Call<0x4B1340, CPtrList&, CVector const&, float, float, CEntity*, bool>(list, point, radius, visibleDistance, entity, processVehicleBombTimer);
	0AA5: call_function 0x4B1340 num_params 6 pop 6 [list] [point] [radius] [visibleDistance] [entity] [processVehicleBombTimer]

	// CWorld::UseDetonator
	// plugin::Call<0x4B4650, CEntity*>(creator);
	0AA5: call_function 0x4B4650 num_params 1 pop 1 [creator]

plugin_III\game_III\CXtraCompsModelInfo.cpp:

	// CXtraCompsModelInfo::Shutdown
	// plugin::CallVirtualMethod<1, CXtraCompsModelInfo *>(this);

	// *CXtraCompsModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject *, 3, CXtraCompsModelInfo *>(this);

	// CXtraCompsModelInfo::SetClump
	// plugin::CallVirtualMethod<6, CXtraCompsModelInfo *, RpClump *>(this, clump);

plugin_III\game_III\CZone.cpp:

	// *CZone::GetTranslatedName
	// plugin::CallMethodAndReturnDynGlobal<wchar_t *, CZone *>(gaddrof(CZone::GetTranslatedName), this);
	0AA8: call_method_return 0x4B5DD0 struct [*CZone] num_params 0 pop 0 func_ret [wchar_t *]

plugin_III\game_III\GenericGameStorage.cpp:

	// GenericSave
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(GenericSave), file);

	// GenericLoad
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(GenericLoad));

	// ReadInSizeofSaveFileBuffer
	// plugin::CallAndReturnDynGlobal<bool, int &, unsigned int &>(gaddrof(ReadInSizeofSaveFileBuffer), file, size);

	// ReadDataFromFile
	// plugin::CallAndReturnDynGlobal<bool, int, unsigned char *, unsigned int>(gaddrof(ReadDataFromFile), file, buf, size);

	// CloseFile
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CloseFile), file);

	// CheckSlotDataValid
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CheckSlotDataValid), slot);

	// MakeSpaceForSizeInBufferPointer
	// plugin::CallDynGlobal<unsigned char *&, unsigned char *&, unsigned char *&>(gaddrof(MakeSpaceForSizeInBufferPointer), preSize, buf, postSize);

	// CopySizeAndPreparePointer
	// plugin::CallDynGlobal<unsigned char *&, unsigned char *&, unsigned char *&, unsigned int &, unsigned int &>(gaddrof(CopySizeAndPreparePointer), buf, postBuf, postBuf2, unused, size);

	// MakeValidSaveName
	// plugin::CallDynGlobal<int>(gaddrof(MakeValidSaveName), slot);

	// *GetSavedGameDateAndTime
	// plugin::CallAndReturnDynGlobal<wchar_t *, int>(gaddrof(GetSavedGameDateAndTime), slot);

	// *GetNameOfSavedGame
	// plugin::CallAndReturnDynGlobal<wchar_t *, int>(gaddrof(GetNameOfSavedGame), slot);

	// CheckDataNotCorrupt
	// plugin::CallAndReturnDynGlobal<bool, int, char *>(gaddrof(CheckDataNotCorrupt), slot, name);

	// RestoreForStartLoad
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(RestoreForStartLoad));

	// align4bytes
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(align4bytes), size);

plugin_III\game_III\NodeName.cpp:

	// *NodeNameConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(NodeNameConstructor), object, offsetInObject, sizeInObject);

	// *NodeNameDestructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(NodeNameDestructor), object, offsetInObject, sizeInObject);

	// *NodeNameCopy
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(NodeNameCopy), dstObject, srcObject, offsetInObject, sizeInObject);

	// *NodeNameStreamWrite
	// plugin::CallAndReturnDynGlobal<RwStream *, RwStream *, RwInt32, void const *, RwInt32, RwInt32>(gaddrof(NodeNameStreamWrite), stream, binaryLength, object, offsetInObject, sizeInObject);

	// *NodeNameStreamRead
	// plugin::CallAndReturnDynGlobal<RwStream *, RwStream *, RwInt32, void *, RwInt32, RwInt32>(gaddrof(NodeNameStreamRead), stream, binaryLength, object, offsetInObject, sizeInObject);

	// NodeNameStreamGetSize
	// plugin::CallAndReturnDynGlobal<RwInt32, void const *, RwInt32, RwInt32>(gaddrof(NodeNameStreamGetSize), object, offsetInObject, sizeInObject);

	// NodeNamePluginAttach
	// plugin::CallAndReturnDynGlobal<RwBool>(gaddrof(NodeNamePluginAttach));

	// *GetFrameNodeName
	// plugin::CallAndReturnDynGlobal<char *, RwFrame *>(gaddrof(GetFrameNodeName), frame);

plugin_III\game_III\RenderBuffer.cpp:

	// RenderBuffer::StartStoring
	// plugin::CallDynGlobal<int, int, RwImVertexIndex **, RwIm3DVertex **>(gaddrof(RenderBuffer::StartStoring), numIndices, numVertices, indexStart, vertexStart);

plugin_III\game_III\RpAnimBlend.cpp:

	// RpAnimBlendClumpUpdateAnimations
	// plugin::CallDynGlobal<RpClump *, float>(gaddrof(RpAnimBlendClumpUpdateAnimations), clump, timeDelta);

	// FrameUpdateCallBack
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FrameUpdateCallBack), frames, data);

	// FrameUpdateCallBackWithVelocityExtraction
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FrameUpdateCallBackWithVelocityExtraction), frames, data);

	// FrameUpdateCallBackWith3dVelocityExtraction
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FrameUpdateCallBackWith3dVelocityExtraction), frames, data);

	// *RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *>(gaddrof_o(RpAnimBlendClumpGetFirstAssociation, CAnimBlendAssociation *(*)(RpClump *)), clump);

	// *AnimBlendClumpDestroy
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(AnimBlendClumpDestroy), object, offsetInObject, sizeInObject);

	// *AnimBlendClumpCreate
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(AnimBlendClumpCreate), object, offsetInObject, sizeInObject);

	// RpAnimBlendAllocateData
	// plugin::CallDynGlobal<RpClump *>(gaddrof(RpAnimBlendAllocateData), clump);

	// *AnimBlendClumpCopy
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(AnimBlendClumpCopy), dstObject, srcObject, offsetInObject, sizeInObject);

	// RpAnimBlendPluginAttach
	// plugin::CallAndReturnDynGlobal<RwBool>(gaddrof(RpAnimBlendPluginAttach));

	// *FrameForAllChildrenCountCBnonskin
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(FrameForAllChildrenCountCBnonskin), frame, data);

	// *FrameForAllChildrenFillFrameArrayCBnonskin
	// plugin::CallAndReturnDynGlobal<RwFrame *, RwFrame *, void *>(gaddrof(FrameForAllChildrenFillFrameArrayCBnonskin), frame, data);

	// FrameInitCBnonskin
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FrameInitCBnonskin), frames, data);

	// FrameFindByNameCBnonskin
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FrameFindByNameCBnonskin), frames, data);

	// FillFrameArrayCBnonskin
	// plugin::CallDynGlobal<AnimBlendFrameData *, void *>(gaddrof(FillFrameArrayCBnonskin), frames, data);

	// *RpAnimBlendClumpFindFrame
	// plugin::CallAndReturnDynGlobal<AnimBlendFrameData *, RpClump *, char const *>(gaddrof(RpAnimBlendClumpFindFrame), clump, name);

	// RpAnimBlendClumpFillFrameArray
	// plugin::CallDynGlobal<RpClump *, AnimBlendFrameData **>(gaddrof(RpAnimBlendClumpFillFrameArray), clump, frames);

	// RpAnimBlendClumpInit
	// plugin::CallDynGlobal<RpClump *>(gaddrof(RpAnimBlendClumpInit), clump);

	// RpAnimBlendClumpIsInitialized
	// plugin::CallAndReturnDynGlobal<bool, RpClump *>(gaddrof(RpAnimBlendClumpIsInitialized), clump);

	// RpAnimBlendClumpSetBlendDeltas
	// plugin::CallDynGlobal<RpClump *, unsigned int, float>(gaddrof(RpAnimBlendClumpSetBlendDeltas), clump, mask, delta);

	// RpAnimBlendClumpRemoveAllAssociations
	// plugin::CallDynGlobal<RpClump *>(gaddrof(RpAnimBlendClumpRemoveAllAssociations), clump);

	// RpAnimBlendClumpRemoveAssociations
	// plugin::CallDynGlobal<RpClump *, unsigned int>(gaddrof(RpAnimBlendClumpRemoveAssociations), clump, mask);

	// *RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, unsigned int>(gaddrof(RpAnimBlendClumpGetAssociation), clump, id);

	// *RpAnimBlendClumpGetMainAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendAssociation **, float *>(gaddrof(RpAnimBlendClumpGetMainAssociation), clump, assocRet, blendRet);

	// *RpAnimBlendClumpGetMainPartialAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *>(gaddrof(RpAnimBlendClumpGetMainPartialAssociation), clump);

	// *RpAnimBlendClumpGetMainAssociation_N
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, int>(gaddrof(RpAnimBlendClumpGetMainAssociation_N), clump, n);

	// *RpAnimBlendClumpGetMainPartialAssociation_N
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, int>(gaddrof(RpAnimBlendClumpGetMainPartialAssociation_N), clump, n);

	// *RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, RpClump *, unsigned int>(gaddrof_o(RpAnimBlendClumpGetFirstAssociation, CAnimBlendAssociation *(*)(RpClump *, unsigned int)), clump, mask);

	// *RpAnimBlendGetNextAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation *>(gaddrof_o(RpAnimBlendGetNextAssociation, CAnimBlendAssociation *(*)(CAnimBlendAssociation *)), assoc);

	// *RpAnimBlendGetNextAssociation
	// plugin::CallAndReturnDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation *, unsigned int>(gaddrof_o(RpAnimBlendGetNextAssociation, CAnimBlendAssociation *(*)(CAnimBlendAssociation *, unsigned int)), assoc, mask);

plugin_III\game_III\meta\meta.C2deffectsModelInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(ctor_gaddr(C2deffectsModelInfo), reinterpret_cast<C2deffectsModelInfo *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(dtor_gaddr(C2deffectsModelInfo), reinterpret_cast<C2deffectsModelInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(ctor_gaddr(C2deffectsModelInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(ctor_gaddr(C2deffectsModelInfo), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(dtor_gaddr(C2deffectsModelInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<C2deffectsModelInfo *>(dtor_gaddr(C2deffectsModelInfo), &objArray[i]);

plugin_III\game_III\meta\meta.C3dMarker.h:

	// stack_object
	// plugin::CallMethodDynGlobal<C3dMarker *>(ctor_gaddr(C3dMarker), reinterpret_cast<C3dMarker *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<C3dMarker *>(dtor_gaddr(C3dMarker), reinterpret_cast<C3dMarker *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<C3dMarker *>(ctor_gaddr(C3dMarker), obj);

	// 
	// plugin::CallMethodDynGlobal<C3dMarker *>(ctor_gaddr(C3dMarker), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<C3dMarker *>(dtor_gaddr(C3dMarker), obj);

	// 
	// plugin::CallMethodDynGlobal<C3dMarker *>(dtor_gaddr(C3dMarker), &objArray[i]);

plugin_III\game_III\meta\meta.CAccident.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAccident *>(ctor_gaddr(CAccident), reinterpret_cast<CAccident *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAccident *>(dtor_gaddr(CAccident), reinterpret_cast<CAccident *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAccident *>(ctor_gaddr(CAccident), obj);

	// 
	// plugin::CallMethodDynGlobal<CAccident *>(ctor_gaddr(CAccident), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CAccident *>(dtor_gaddr(CAccident), obj);

	// 
	// plugin::CallMethodDynGlobal<CAccident *>(dtor_gaddr(CAccident), &objArray[i]);

plugin_III\game_III\meta\meta.CAccidentManager.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAccidentManager *>(ctor_gaddr(CAccidentManager), reinterpret_cast<CAccidentManager *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAccidentManager *>(ctor_gaddr(CAccidentManager), obj);

	// 
	// plugin::CallMethodDynGlobal<CAccidentManager *>(ctor_gaddr(CAccidentManager), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CAccidentManager *>(del_dtor_gaddr(CAccidentManager), obj);

	// 
	// plugin::CallMethodDynGlobal<CAccidentManager *>(del_dtor_gaddr(CAccidentManager), &objArray[i]);

plugin_III\game_III\meta\meta.CAnimBlendAssocGroup.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(ctor_gaddr(CAnimBlendAssocGroup), reinterpret_cast<CAnimBlendAssocGroup *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(dtor_gaddr(CAnimBlendAssocGroup), reinterpret_cast<CAnimBlendAssocGroup *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(ctor_gaddr(CAnimBlendAssocGroup), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(ctor_gaddr(CAnimBlendAssocGroup), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(dtor_gaddr(CAnimBlendAssocGroup), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendAssocGroup *>(dtor_gaddr(CAnimBlendAssocGroup), &objArray[i]);

plugin_III\game_III\meta\meta.CAnimBlendAssociation.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), reinterpret_cast<CAnimBlendAssociation *>(objBuff));

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendAssociation &)), reinterpret_cast<CAnimBlendAssociation *>(objBuff), other);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(dtor_gaddr(CAnimBlendAssociation), reinterpret_cast<CAnimBlendAssociation *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), &objArray[i]);

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendAssociation &)), obj, other);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendAssociation *, int>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendAssociation *, int>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CAnimBlendClumpData.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(ctor_gaddr(CAnimBlendClumpData), reinterpret_cast<CAnimBlendClumpData *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(dtor_gaddr(CAnimBlendClumpData), reinterpret_cast<CAnimBlendClumpData *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(ctor_gaddr(CAnimBlendClumpData), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(ctor_gaddr(CAnimBlendClumpData), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(dtor_gaddr(CAnimBlendClumpData), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(dtor_gaddr(CAnimBlendClumpData), &objArray[i]);

plugin_III\game_III\meta\meta.CAnimBlendHierarchy.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(ctor_gaddr(CAnimBlendHierarchy), reinterpret_cast<CAnimBlendHierarchy *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(dtor_gaddr(CAnimBlendHierarchy), reinterpret_cast<CAnimBlendHierarchy *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(ctor_gaddr(CAnimBlendHierarchy), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(ctor_gaddr(CAnimBlendHierarchy), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(dtor_gaddr(CAnimBlendHierarchy), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendHierarchy *>(dtor_gaddr(CAnimBlendHierarchy), &objArray[i]);

plugin_III\game_III\meta\meta.CAnimBlendSequence.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *>(ctor_gaddr(CAnimBlendSequence), reinterpret_cast<CAnimBlendSequence *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *>(dtor_gaddr(CAnimBlendSequence), reinterpret_cast<CAnimBlendSequence *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *>(ctor_gaddr(CAnimBlendSequence), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendSequence *>(ctor_gaddr(CAnimBlendSequence), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendSequence *, int>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendSequence *, int>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CAntenna.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAntenna *>(ctor_gaddr(CAntenna), reinterpret_cast<CAntenna *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAntenna *>(ctor_gaddr(CAntenna), obj);

	// 
	// plugin::CallMethodDynGlobal<CAntenna *>(ctor_gaddr(CAntenna), &objArray[i]);

plugin_III\game_III\meta\meta.cAudioCollision.h:

	// stack_object
	// plugin::CallMethodDynGlobal<cAudioCollision *>(ctor_gaddr(cAudioCollision), reinterpret_cast<cAudioCollision *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<cAudioCollision *>(ctor_gaddr(cAudioCollision), obj);

	// 
	// plugin::CallMethodDynGlobal<cAudioCollision *>(ctor_gaddr(cAudioCollision), &objArray[i]);

plugin_III\game_III\meta\meta.CAudioHydrant.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAudioHydrant *>(ctor_gaddr(CAudioHydrant), reinterpret_cast<CAudioHydrant *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAudioHydrant *>(ctor_gaddr(CAudioHydrant), obj);

	// 
	// plugin::CallMethodDynGlobal<CAudioHydrant *>(ctor_gaddr(CAudioHydrant), &objArray[i]);

plugin_III\game_III\meta\meta.cAudioScriptObject.h:

	// stack_object
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), reinterpret_cast<cAudioScriptObject *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), reinterpret_cast<cAudioScriptObject *>(objBuff));

	// *operator_new<cAudioScriptObject>
	// plugin::CallAndReturnDynGlobal<void *, unsigned int>(op_new_gaddr(cAudioScriptObject), sizeof(cAudioScriptObject));

	// *>
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), obj);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), obj);

	// plugin::CallMethodDynGlobal<cAudioScriptObject *>
	// plugin::CallDynGlobal<void *>(op_delete_gaddr(cAudioScriptObject), obj);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), &objArray[i]);

plugin_III\game_III\meta\meta.CBaseModelInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CBaseModelInfo *, ModelInfoType>(ctor_gaddr_o(CBaseModelInfo, void(ModelInfoType)), reinterpret_cast<CBaseModelInfo *>(objBuff), type);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CBaseModelInfo *>(dtor_gaddr(CBaseModelInfo), reinterpret_cast<CBaseModelInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CBaseModelInfo *, ModelInfoType>(ctor_gaddr_o(CBaseModelInfo, void(ModelInfoType)), obj, type);

	// 
	// plugin::CallVirtualMethod<0, CBaseModelInfo *>(obj);

	// 
	// plugin::CallVirtualMethod<0, CBaseModelInfo *>(&objArray[i]);

plugin_III\game_III\meta\meta.CBrightLight.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CBrightLight *>(ctor_gaddr(CBrightLight), reinterpret_cast<CBrightLight *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CBrightLight *>(ctor_gaddr(CBrightLight), obj);

	// 
	// plugin::CallMethodDynGlobal<CBrightLight *>(ctor_gaddr(CBrightLight), &objArray[i]);

plugin_III\game_III\meta\meta.CBulletInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CBulletInfo *>(ctor_gaddr(CBulletInfo), reinterpret_cast<CBulletInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CBulletInfo *>(ctor_gaddr(CBulletInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CBulletInfo *>(ctor_gaddr(CBulletInfo), &objArray[i]);

plugin_III\game_III\meta\meta.CBulletTrace.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), reinterpret_cast<CBulletTrace *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), obj);

	// 
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), &objArray[i]);

plugin_III\game_III\meta\meta.CCamera.h:

	// ~stack_object
	// plugin::CallMethodDynGlobal<CCamera *>(dtor_gaddr(CCamera), reinterpret_cast<CCamera *>(objBuff));

	// 
	// plugin::CallVirtualMethod<0, CCamera *, char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CCamera *, char>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CCarGenerator.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CCarGenerator *>(ctor_gaddr(CCarGenerator), reinterpret_cast<CCarGenerator *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CCarGenerator *>(ctor_gaddr(CCarGenerator), obj);

	// 
	// plugin::CallMethodDynGlobal<CCarGenerator *>(ctor_gaddr(CCarGenerator), &objArray[i]);

plugin_III\game_III\meta\meta.CColLine.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CColLine *>(ctor_gaddr(CColLine), reinterpret_cast<CColLine *>(objBuff));

	// stack_object
	// plugin::CallMethodDynGlobal<CColLine *, CVector const &, CVector const &>(ctor_gaddr_o(CColLine, void(CVector const &, CVector const &)), reinterpret_cast<CColLine *>(objBuff), start, end);

	// *>
	// plugin::CallMethodDynGlobal<CColLine *>(ctor_gaddr(CColLine), obj);

	// 
	// plugin::CallMethodDynGlobal<CColLine *>(ctor_gaddr(CColLine), &objArray[i]);

	// *>
	// plugin::CallMethodDynGlobal<CColLine *, CVector const &, CVector const &>(ctor_gaddr_o(CColLine, void(CVector const &, CVector const &)), obj, start, end);

plugin_III\game_III\meta\meta.CColPoint.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CColPoint *>(ctor_gaddr(CColPoint), reinterpret_cast<CColPoint *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CColPoint *>(ctor_gaddr(CColPoint), obj);

	// 
	// plugin::CallMethodDynGlobal<CColPoint *>(ctor_gaddr(CColPoint), &objArray[i]);

plugin_III\game_III\meta\meta.CCurrentVehicle.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(ctor_gaddr(CCurrentVehicle), reinterpret_cast<CCurrentVehicle *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(ctor_gaddr(CCurrentVehicle), obj);

	// 
	// plugin::CallMethodDynGlobal<CCurrentVehicle *>(ctor_gaddr(CCurrentVehicle), &objArray[i]);

plugin_III\game_III\meta\meta.CDate.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CDate *>(ctor_gaddr(CDate), reinterpret_cast<CDate *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CDate *>(ctor_gaddr(CDate), obj);

	// 
	// plugin::CallMethodDynGlobal<CDate *>(ctor_gaddr(CDate), &objArray[i]);

plugin_III\game_III\meta\meta.CDigitalClock.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CDigitalClock *>(ctor_gaddr(CDigitalClock), reinterpret_cast<CDigitalClock *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CDigitalClock *>(ctor_gaddr(CDigitalClock), obj);

	// 
	// plugin::CallMethodDynGlobal<CDigitalClock *>(ctor_gaddr(CDigitalClock), &objArray[i]);

plugin_III\game_III\meta\meta.CDirectory.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CDirectory *, int>(ctor_gaddr_o(CDirectory, void(int)), reinterpret_cast<CDirectory *>(objBuff), capacity);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), reinterpret_cast<CDirectory *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CDirectory *, int>(ctor_gaddr_o(CDirectory, void(int)), obj, capacity);

	// 
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), obj);

	// 
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), &objArray[i]);

plugin_III\game_III\meta\meta.cDMAudio.h:

	// ~stack_object
	// plugin::CallMethodDynGlobal<cDMAudio *>(dtor_gaddr(cDMAudio), reinterpret_cast<cDMAudio *>(objBuff));

	// 
	// plugin::CallMethodDynGlobal<cDMAudio *>(dtor_gaddr(cDMAudio), obj);

	// 
	// plugin::CallMethodDynGlobal<cDMAudio *>(dtor_gaddr(cDMAudio), &objArray[i]);

plugin_III\game_III\meta\meta.CEntity.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CEntity *>(ctor_gaddr(CEntity), reinterpret_cast<CEntity *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CEntity *>(dtor_gaddr(CEntity), reinterpret_cast<CEntity *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CEntity *>(ctor_gaddr(CEntity), obj);

	// 
	// plugin::CallMethodDynGlobal<CEntity *>(ctor_gaddr(CEntity), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CEntity *, char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CEntity *, char>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CEventList.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CEvent *>(ctor_gaddr(CEvent), reinterpret_cast<CEvent *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CEvent *>(ctor_gaddr(CEvent), obj);

	// 
	// plugin::CallMethodDynGlobal<CEvent *>(ctor_gaddr(CEvent), &objArray[i]);

plugin_III\game_III\meta\meta.CFallingGlassPane.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(ctor_gaddr(CFallingGlassPane), reinterpret_cast<CFallingGlassPane *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(dtor_gaddr(CFallingGlassPane), reinterpret_cast<CFallingGlassPane *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(ctor_gaddr(CFallingGlassPane), obj);

	// 
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(ctor_gaddr(CFallingGlassPane), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(dtor_gaddr(CFallingGlassPane), obj);

	// 
	// plugin::CallMethodDynGlobal<CFallingGlassPane *>(dtor_gaddr(CFallingGlassPane), &objArray[i]);

plugin_III\game_III\meta\meta.CFire.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CFire *>(ctor_gaddr(CFire), reinterpret_cast<CFire *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CFire *>(dtor_gaddr(CFire), reinterpret_cast<CFire *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CFire *>(ctor_gaddr(CFire), obj);

	// 
	// plugin::CallMethodDynGlobal<CFire *>(ctor_gaddr(CFire), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CFire *>(dtor_gaddr(CFire), obj);

	// 
	// plugin::CallMethodDynGlobal<CFire *>(dtor_gaddr(CFire), &objArray[i]);

plugin_III\game_III\meta\meta.CFireManager.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CFireManager *>(ctor_gaddr(CFireManager), reinterpret_cast<CFireManager *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CFireManager *>(dtor_gaddr(CFireManager), reinterpret_cast<CFireManager *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CFireManager *>(ctor_gaddr(CFireManager), obj);

	// 
	// plugin::CallMethodDynGlobal<CFireManager *>(ctor_gaddr(CFireManager), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CFireManager *>(dtor_gaddr(CFireManager), obj);

	// 
	// plugin::CallMethodDynGlobal<CFireManager *>(dtor_gaddr(CFireManager), &objArray[i]);

plugin_III\game_III\meta\meta.CGangInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), reinterpret_cast<CGangInfo *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), reinterpret_cast<CGangInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), &objArray[i]);

plugin_III\game_III\meta\meta.CInstance.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CInstance *>(ctor_gaddr(CInstance), reinterpret_cast<CInstance *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CInstance *>(dtor_gaddr(CInstance), reinterpret_cast<CInstance *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CInstance *>(ctor_gaddr(CInstance), obj);

	// 
	// plugin::CallMethodDynGlobal<CInstance *>(ctor_gaddr(CInstance), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CInstance *, char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CInstance *, char>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CMissionCleanup.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CMissionCleanup *>(ctor_gaddr(CMissionCleanup), reinterpret_cast<CMissionCleanup *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CMissionCleanup *>(ctor_gaddr(CMissionCleanup), obj);

	// 
	// plugin::CallMethodDynGlobal<CMissionCleanup *>(ctor_gaddr(CMissionCleanup), &objArray[i]);

plugin_III\game_III\meta\meta.CMoneyMessage.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CMoneyMessage *>(ctor_gaddr(CMoneyMessage), reinterpret_cast<CMoneyMessage *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CMoneyMessage *>(ctor_gaddr(CMoneyMessage), obj);

	// 
	// plugin::CallMethodDynGlobal<CMoneyMessage *>(ctor_gaddr(CMoneyMessage), &objArray[i]);

plugin_III\game_III\meta\meta.CMovie.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CMovie *>(ctor_gaddr(CMovie), reinterpret_cast<CMovie *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CMovie *>(ctor_gaddr(CMovie), obj);

	// 
	// plugin::CallMethodDynGlobal<CMovie *>(ctor_gaddr(CMovie), &objArray[i]);

plugin_III\game_III\meta\meta.CMovingThing.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CMovingThing *>(ctor_gaddr(CMovingThing), reinterpret_cast<CMovingThing *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CMovingThing *>(ctor_gaddr(CMovingThing), obj);

	// 
	// plugin::CallMethodDynGlobal<CMovingThing *>(ctor_gaddr(CMovingThing), &objArray[i]);

plugin_III\game_III\meta\meta.cMusicManager.h:

	// stack_object
	// plugin::CallMethodDynGlobal<cMusicManager *>(ctor_gaddr(cMusicManager), reinterpret_cast<cMusicManager *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<cMusicManager *>(ctor_gaddr(cMusicManager), obj);

	// 
	// plugin::CallMethodDynGlobal<cMusicManager *>(ctor_gaddr(cMusicManager), &objArray[i]);

plugin_III\game_III\meta\meta.CPacManPickup.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPacManPickup *>(ctor_gaddr(CPacManPickup), reinterpret_cast<CPacManPickup *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPacManPickup *>(ctor_gaddr(CPacManPickup), obj);

	// 
	// plugin::CallMethodDynGlobal<CPacManPickup *>(ctor_gaddr(CPacManPickup), &objArray[i]);

plugin_III\game_III\meta\meta.CParticle.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), obj);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), obj);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), &objArray[i]);

plugin_III\game_III\meta\meta.CParticleObject.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CParticleObject *>(ctor_gaddr(CParticleObject), reinterpret_cast<CParticleObject *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CParticleObject *>(dtor_gaddr(CParticleObject), reinterpret_cast<CParticleObject *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CParticleObject *>(ctor_gaddr(CParticleObject), obj);

	// 
	// plugin::CallMethodDynGlobal<CParticleObject *>(ctor_gaddr(CParticleObject), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CParticleObject *, char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CParticleObject *, char>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CPathNode.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPathNode *>(ctor_gaddr(CPathNode), reinterpret_cast<CPathNode *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPathNode *>(ctor_gaddr(CPathNode), obj);

	// 
	// plugin::CallMethodDynGlobal<CPathNode *>(ctor_gaddr(CPathNode), &objArray[i]);

plugin_III\game_III\meta\meta.CPhone.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), reinterpret_cast<CPhone *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), reinterpret_cast<CPhone *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), &objArray[i]);

plugin_III\game_III\meta\meta.CPhoneInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(ctor_gaddr(CPhoneInfo), reinterpret_cast<CPhoneInfo *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), reinterpret_cast<CPhoneInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(ctor_gaddr(CPhoneInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(ctor_gaddr(CPhoneInfo), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), &objArray[i]);

plugin_III\game_III\meta\meta.CPickup.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPickup *>(ctor_gaddr(CPickup), reinterpret_cast<CPickup *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPickup *>(ctor_gaddr(CPickup), obj);

	// 
	// plugin::CallMethodDynGlobal<CPickup *>(ctor_gaddr(CPickup), &objArray[i]);

plugin_III\game_III\meta\meta.CPlaceable.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPlaceable *>(ctor_gaddr(CPlaceable), reinterpret_cast<CPlaceable *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPlaceable *>(dtor_gaddr(CPlaceable), reinterpret_cast<CPlaceable *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPlaceable *>(ctor_gaddr(CPlaceable), obj);

	// 
	// plugin::CallMethodDynGlobal<CPlaceable *>(ctor_gaddr(CPlaceable), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CPlaceable *, unsigned char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CPlaceable *, unsigned char>(&objArray[i], 1);

plugin_III\game_III\meta\meta.CPlaceName.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPlaceName *>(ctor_gaddr(CPlaceName), reinterpret_cast<CPlaceName *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPlaceName *>(ctor_gaddr(CPlaceName), obj);

	// 
	// plugin::CallMethodDynGlobal<CPlaceName *>(ctor_gaddr(CPlaceName), &objArray[i]);

plugin_III\game_III\meta\meta.CRadar.h:

	// stack_object
	// plugin::CallMethodDynGlobal<tRadarTrace*>(ctor_gaddr(tRadarTrace), reinterpret_cast<tRadarTrace *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<tRadarTrace *>(ctor_gaddr(tRadarTrace), obj);

	// 
	// plugin::CallMethodDynGlobal<tRadarTrace *>(ctor_gaddr(tRadarTrace), &objArray[i]);

plugin_III\game_III\meta\meta.CRegisteredCorona.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CRegisteredCorona *>(ctor_gaddr(CRegisteredCorona), reinterpret_cast<CRegisteredCorona *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CRegisteredCorona *>(ctor_gaddr(CRegisteredCorona), obj);

	// 
	// plugin::CallMethodDynGlobal<CRegisteredCorona *>(ctor_gaddr(CRegisteredCorona), &objArray[i]);

plugin_III\game_III\meta\meta.CRegisteredMotionBlurStreak.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CRegisteredMotionBlurStreak *>(ctor_gaddr(CRegisteredMotionBlurStreak), reinterpret_cast<CRegisteredMotionBlurStreak *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CRegisteredMotionBlurStreak *>(ctor_gaddr(CRegisteredMotionBlurStreak), obj);

	// 
	// plugin::CallMethodDynGlobal<CRegisteredMotionBlurStreak *>(ctor_gaddr(CRegisteredMotionBlurStreak), &objArray[i]);

plugin_III\game_III\meta\meta.CRegisteredShinyText.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CRegisteredShinyText *>(ctor_gaddr(CRegisteredShinyText), reinterpret_cast<CRegisteredShinyText *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CRegisteredShinyText *>(ctor_gaddr(CRegisteredShinyText), obj);

	// 
	// plugin::CallMethodDynGlobal<CRegisteredShinyText *>(ctor_gaddr(CRegisteredShinyText), &objArray[i]);

plugin_III\game_III\meta\meta.CRouteNode.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), reinterpret_cast<CRouteNode *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), obj);

	// 
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), &objArray[i]);

plugin_III\game_III\meta\meta.CScrollBar.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CScrollBar *>(ctor_gaddr(CScrollBar), reinterpret_cast<CScrollBar *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CScrollBar *>(ctor_gaddr(CScrollBar), obj);

	// 
	// plugin::CallMethodDynGlobal<CScrollBar *>(ctor_gaddr(CScrollBar), &objArray[i]);

plugin_III\game_III\meta\meta.CShotInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CShotInfo *>(ctor_gaddr(CShotInfo), reinterpret_cast<CShotInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CShotInfo *>(ctor_gaddr(CShotInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CShotInfo *>(ctor_gaddr(CShotInfo), &objArray[i]);

plugin_III\game_III\meta\meta.CSkidmark.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CSkidmark *>(ctor_gaddr(CSkidmark), reinterpret_cast<CSkidmark *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CSkidmark *>(ctor_gaddr(CSkidmark), obj);

	// 
	// plugin::CallMethodDynGlobal<CSkidmark *>(ctor_gaddr(CSkidmark), &objArray[i]);

plugin_III\game_III\meta\meta.CSprite2d.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CSprite2d *>(ctor_gaddr(CSprite2d), reinterpret_cast<CSprite2d *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CSprite2d *>(dtor_gaddr(CSprite2d), reinterpret_cast<CSprite2d *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CSprite2d *>(ctor_gaddr(CSprite2d), obj);

	// 
	// plugin::CallMethodDynGlobal<CSprite2d *>(ctor_gaddr(CSprite2d), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CSprite2d *>(dtor_gaddr(CSprite2d), obj);

	// 
	// plugin::CallMethodDynGlobal<CSprite2d *>(dtor_gaddr(CSprite2d), &objArray[i]);

plugin_III\game_III\meta\meta.CStoredCollPoly.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CStoredCollPoly *>(ctor_gaddr(CStoredCollPoly), reinterpret_cast<CStoredCollPoly *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CStoredCollPoly *>(ctor_gaddr(CStoredCollPoly), obj);

	// 
	// plugin::CallMethodDynGlobal<CStoredCollPoly *>(ctor_gaddr(CStoredCollPoly), &objArray[i]);

plugin_III\game_III\meta\meta.CStuckCarCheck.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(ctor_gaddr(CStuckCarCheck), reinterpret_cast<CStuckCarCheck *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(ctor_gaddr(CStuckCarCheck), obj);

	// 
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(ctor_gaddr(CStuckCarCheck), &objArray[i]);

plugin_III\game_III\meta\meta.CTempNode.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CTempNode *>(ctor_gaddr(CTempNode), reinterpret_cast<CTempNode *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CTempNode *>(ctor_gaddr(CTempNode), obj);

	// 
	// plugin::CallMethodDynGlobal<CTempNode *>(ctor_gaddr(CTempNode), &objArray[i]);

plugin_III\game_III\meta\meta.CText.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CText *>(ctor_gaddr(CText), reinterpret_cast<CText *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CText *>(dtor_gaddr(CText), reinterpret_cast<CText *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CText *>(ctor_gaddr(CText), obj);

	// 
	// plugin::CallMethodDynGlobal<CText *>(ctor_gaddr(CText), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CText *>(dtor_gaddr(CText), obj);

	// 
	// plugin::CallMethodDynGlobal<CText *>(dtor_gaddr(CText), &objArray[i]);

plugin_III\game_III\meta\meta.CTowerClock.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CTowerClock *>(ctor_gaddr(CTowerClock), reinterpret_cast<CTowerClock *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CTowerClock *>(ctor_gaddr(CTowerClock), obj);

	// 
	// plugin::CallMethodDynGlobal<CTowerClock *>(ctor_gaddr(CTowerClock), &objArray[i]);

plugin_III\game_III\meta\meta.CTrainCamNode.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CTrainCamNode *>(ctor_gaddr(CTrainCamNode), reinterpret_cast<CTrainCamNode *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CTrainCamNode *>(ctor_gaddr(CTrainCamNode), obj);

	// 
	// plugin::CallMethodDynGlobal<CTrainCamNode *>(ctor_gaddr(CTrainCamNode), &objArray[i]);

plugin_III\game_III\meta\meta.CTrainDoor.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CTrainDoor *>(ctor_gaddr(CTrainDoor), reinterpret_cast<CTrainDoor *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CTrainDoor *>(ctor_gaddr(CTrainDoor), obj);

	// 
	// plugin::CallMethodDynGlobal<CTrainDoor *>(ctor_gaddr(CTrainDoor), &objArray[i]);

plugin_III\game_III\meta\meta.CWanted.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CCrimeBeingQd *>(ctor_gaddr(CCrimeBeingQd), reinterpret_cast<CCrimeBeingQd *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CCrimeBeingQd *>(ctor_gaddr(CCrimeBeingQd), obj);

	// 
	// plugin::CallMethodDynGlobal<CCrimeBeingQd *>(ctor_gaddr(CCrimeBeingQd), &objArray[i]);

plugin_III\game_III\meta\meta.CWaterCannon.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CWaterCannon *>(ctor_gaddr(CWaterCannon), reinterpret_cast<CWaterCannon *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CWaterCannon *>(ctor_gaddr(CWaterCannon), obj);

	// 
	// plugin::CallMethodDynGlobal<CWaterCannon *>(ctor_gaddr(CWaterCannon), &objArray[i]);

plugin_III\game_III\meta\meta.CWeapon.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CWeapon *>(ctor_gaddr(CWeapon), reinterpret_cast<CWeapon *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CWeapon *>(dtor_gaddr(CWeapon), reinterpret_cast<CWeapon *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CWeapon *>(ctor_gaddr(CWeapon), obj);

	// 
	// plugin::CallMethodDynGlobal<CWeapon *>(ctor_gaddr(CWeapon), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CWeapon *>(dtor_gaddr(CWeapon), obj);

	// 
	// plugin::CallMethodDynGlobal<CWeapon *>(dtor_gaddr(CWeapon), &objArray[i]);

plugin_sa\game_sa\C_PcSave.cpp:

	// C_PcSave::PopulateSlotInfo
	// plugin::CallMethod<0x619140, C_PcSave*>(this);
	0AA6: call_method 0x619140 struct [C_PcSave] num_params 0 pop 0

	// C_PcSave::DeleteSlot
	// plugin::CallMethodAndReturn<bool, 0x6190D0, C_PcSave*, int>(this, slot);
	0AA8: call_method_return 0x6190D0 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [bool]

	// C_PcSave::SaveSlot
	// plugin::CallMethodAndReturn<bool, 0x619060, C_PcSave*, int>(this, slot);
	0AA8: call_method_return 0x619060 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [bool]

	// C_PcSave::SetSaveDirectory
	// plugin::Call<0x619040, const char*>(path);
	0AA5: call_function 0x619040 num_params 1 pop 1 [path]

plugin_sa\game_sa\C3dMarker.cpp:

	// C3dMarker::AddMarker
	// plugin::CallMethodAndReturn<bool, 0x722230, C3dMarker *, unsigned int, unsigned short, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(this, id, type, size, red, green, blue, alpha, pulsePeriod, pulseFraction, rotateRate);
	0AA8: call_method_return 0x722230 struct [C3dMarker] num_params 10 pop 0 [id] [type] [size] [red] [green] [blue] [alpha] [pulsePeriod] [pulseFraction] [rotateRate] func_ret [bool]

	// C3dMarker::DeleteMarkerObject
	// plugin::CallMethod<0x722390, C3dMarker *>(this);
	0AA6: call_method 0x722390 struct [C3dMarker] num_params 0 pop 0

	// C3dMarker::IsZCoordinateUpToDate
	// plugin::CallMethodAndReturn<bool, 0x7226A0, C3dMarker *>(this);
	0AA8: call_method_return 0x7226A0 struct [C3dMarker] num_params 0 pop 0 func_ret [bool]

	// C3dMarker::Render
	// plugin::CallMethod<0x7223D0, C3dMarker *>(this);
	0AA6: call_method 0x7223D0 struct [C3dMarker] num_params 0 pop 0

	// C3dMarker::SetZCoordinateIfNotUpToDate
	// plugin::CallMethod<0x724E10, C3dMarker *, float>(this, coordinate);
	0AA6: call_method 0x724E10 struct [C3dMarker] num_params 1 pop 0 [coordinate]

	// C3dMarker::UpdateZCoordinate
	// plugin::CallMethod<0x724D40, C3dMarker *, CVector, float>(this, arg0, arg1);
	0AA6: call_method 0x724D40 struct [C3dMarker] num_params 2 pop 0 [arg0] [arg1]

plugin_sa\game_sa\C3dMarkers.cpp:

	// C3dMarkers::DirectionArrowFindFirstFreeSlot
	// plugin::CallAndReturn<int, 0x721120>();
	0AA7: call_function_return 0x721120 num_params 0 pop 0 func_ret [int]

	// C3dMarkers::DirectionArrowSet
	// plugin::Call<0x721140, CVector, float, int, int, int, int, float, float, float>(posn, size, red, green, blue, alpha, dir_x, dir_y, dir_z);
	0AA5: call_function 0x721140 num_params 9 pop 9 [posn] [size] [red] [green] [blue] [alpha] [dir_x] [dir_y] [dir_z]

	// C3dMarkers::DirectionArrowsDraw
	// plugin::Call<0x7211F0>();
	0AA5: call_function 0x7211F0 num_params 0 pop 0

	// C3dMarkers::DirectionArrowsInit
	// plugin::Call<0x721100>();
	0AA5: call_function 0x721100 num_params 0 pop 0

	// C3dMarkers::ForceRender
	// plugin::Call<0x722870, unsigned char>(bEnable);
	0AA5: call_function 0x722870 num_params 1 pop 1 [bEnable]

	// C3dMarkers::Init
	// plugin::Call<0x724E40>();
	0AA5: call_function 0x724E40 num_params 0 pop 0

	// C3dMarkers::LoadMarker
	// plugin::CallAndReturn<RpClump*, 0x722810, char const*>(modelName);
	0AA7: call_function_return 0x722810 num_params 1 pop 1 [modelName] func_ret [RpClump*]

	// C3dMarkers::LoadUser3dMarkers
	// plugin::CallAndReturn<bool, 0x5D42E0>();
	0AA7: call_function_return 0x5D42E0 num_params 0 pop 0 func_ret [bool]

	// C3dMarkers::PlaceMarker
	// plugin::CallAndReturn<C3dMarker*, 0x725120, unsigned int, unsigned short, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short, float, float, float, bool>(id, type, posn, size, red, green, blue, alpha, pulsePeriod, pulseFraction, rotateRate, nrm_x, nrm_y, nrm_z, zCheck);
	0AA7: call_function_return 0x725120 num_params 15 pop 15 [id] [type] [posn] [size] [red] [green] [blue] [alpha] [pulsePeriod] [pulseFraction] [rotateRate] [nrm_x] [nrm_y] [nrm_z] [zCheck] func_ret [C3dMarker*]

	// C3dMarkers::PlaceMarkerCone
	// plugin::Call<0x726D40, unsigned int, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short, unsigned char>(id, posn, size, red, green, blue, alpha, pulsePeriod, pulseFraction, rotateRate, bEnableCollision);
	0AA5: call_function 0x726D40 num_params 11 pop 11 [id] [posn] [size] [red] [green] [blue] [alpha] [pulsePeriod] [pulseFraction] [rotateRate] [bEnableCollision]

	// C3dMarkers::PlaceMarkerSet
	// plugin::Call<0x725BA0, unsigned int, unsigned short, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(id, type, posn, size, red, green, blue, alpha, pulsePeriod, pulseFraction, rotateRate);
	0AA5: call_function 0x725BA0 num_params 11 pop 11 [id] [type] [posn] [size] [red] [green] [blue] [alpha] [pulsePeriod] [pulseFraction] [rotateRate]

	// C3dMarkers::Render
	// plugin::Call<0x725040>();
	0AA5: call_function 0x725040 num_params 0 pop 0

	// C3dMarkers::SaveUser3dMarkers
	// plugin::Call<0x5D4300>();
	0AA5: call_function 0x5D4300 num_params 0 pop 0

	// C3dMarkers::Shutdown
	// plugin::Call<0x722710>();
	0AA5: call_function 0x722710 num_params 0 pop 0

	// C3dMarkers::Update
	// plugin::Call<0x7227B0>();
	0AA5: call_function 0x7227B0 num_params 0 pop 0

	// C3dMarkers::User3dMarkerAtomicCB
	// plugin::CallAndReturn<RpAtomic*, 0x7210D0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x7210D0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// C3dMarkers::User3dMarkerDelete
	// plugin::Call<0x721090, int>(slotIndex);
	0AA5: call_function 0x721090 num_params 1 pop 1 [slotIndex]

	// C3dMarkers::User3dMarkerDeleteAll
	// plugin::Call<0x7210B0>();
	0AA5: call_function 0x7210B0 num_params 0 pop 0

	// C3dMarkers::User3dMarkerFindFirstFreeSlot
	// plugin::CallAndReturn<int, 0x720FB0>();
	0AA7: call_function_return 0x720FB0 num_params 0 pop 0 func_ret [int]

	// C3dMarkers::User3dMarkerSet
	// plugin::CallAndReturn<int, 0x720FD0, float, float, float, int>(x, y, z, colour);
	0AA7: call_function_return 0x720FD0 num_params 4 pop 4 [x] [y] [z] [colour] func_ret [int]

	// C3dMarkers::User3dMarkersDraw
	// plugin::Call<0x723240>();
	0AA5: call_function 0x723240 num_params 0 pop 0

	// MarkerAtomicCB
	// plugin::CallAndReturn<RpAtomic*, 0x722220, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x722220 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

plugin_sa\game_sa\CAEAudioHardware.cpp:

	// CAEAudioHardware::GetActiveTrackID
	// plugin::CallMethodAndReturn<int, 0x4D8F80, CAEAudioHardware*>(this);
	0AA8: call_method_return 0x4D8F80 struct [CAEAudioHardware] num_params 0 pop 0 func_ret [int]

plugin_sa\game_sa\CAECutsceneTrackManager.cpp:

	// CAECutsceneTrackManager::StopCutsceneTrack
	// plugin::CallMethod<0x4DBE80, CAECutsceneTrackManager*>(this);
	0AA6: call_method 0x4DBE80 struct [CAECutsceneTrackManager] num_params 0 pop 0

	// CAECutsceneTrackManager::StartTrackPlayback
	// plugin::CallMethod<0x4DBF10, CAECutsceneTrackManager*>(this);
	0AA6: call_method 0x4DBF10 struct [CAECutsceneTrackManager] num_params 0 pop 0

	// CAECutsceneTrackManager::Service
	// plugin::CallMethod<0x4DBFB0, CAECutsceneTrackManager*, int>(this, time);
	0AA6: call_method 0x4DBFB0 struct [CAECutsceneTrackManager] num_params 1 pop 0 [time]

	// CAECutsceneTrackManager::PreloadBeatTrack
	// plugin::CallMethod<0x4DC130, CAECutsceneTrackManager*, char, bool>(this, arg1, arg2);
	0AA6: call_method 0x4DC130 struct [CAECutsceneTrackManager] num_params 2 pop 0 [arg1] [arg2]

	// CAECutsceneTrackManager::PlayPreloadedCutsceneTrack
	// plugin::CallMethod<0x4DBE70, CAECutsceneTrackManager*>(this);
	0AA6: call_method 0x4DBE70 struct [CAECutsceneTrackManager] num_params 0 pop 0

	// CAECutsceneTrackManager::IsCutsceneTrackActive
	// plugin::CallMethodAndReturn<bool, 0x4DBEB0, CAECutsceneTrackManager*>(this);
	0AA8: call_method_return 0x4DBEB0 struct [CAECutsceneTrackManager] num_params 0 pop 0 func_ret [bool]

	// CAECutsceneTrackManager::GetCutsceneTrackStatus
	// plugin::CallMethodAndReturn<char, 0x4DBEC0, CAECutsceneTrackManager*>(this);
	0AA8: call_method_return 0x4DBEC0 struct [CAECutsceneTrackManager] num_params 0 pop 0 func_ret [char]

plugin_sa\game_sa\CAERadioTrackManager.cpp:

	// CAERadioTrackManager::StartRadio
	// plugin::CallMethod<0x4EB3C0, CAERadioTrackManager*, int, float, int, char>(this, stationId, bass, arg, unused);
	0AA6: call_method 0x4EB3C0 struct [CAERadioTrackManager] num_params 4 pop 0 [stationId] [bass] [arg] [unused]

	// CAERadioTrackManager::StopRadio
	// plugin::CallMethod<0x4E9820, CAERadioTrackManager*, tVehicleAudioSettings*, char>(this, settings, arg);
	0AA6: call_method 0x4E9820 struct [CAERadioTrackManager] num_params 2 pop 0 [settings] [arg]

plugin_sa\game_sa\CAEStreamThread.cpp:

	// CAEStreamThread::Initialise
	// plugin::CallMethodAndReturn<bool, 0x4F1680, CAEStreamThread*>(this);
	0AA8: call_method_return 0x4F1680 struct [CAEStreamThread] num_params 0 pop 0 func_ret [bool]

	// CAEStreamThread::GetActiveTrackID
	// plugin::CallMethodAndReturn<int, 0x4F1560, CAEStreamThread*>(this);
	0AA8: call_method_return 0x4F1560 struct [CAEStreamThread] num_params 0 pop 0 func_ret [int]

plugin_sa\game_sa\CAEWeaponAudioEntity.cpp:

	// CAEWeaponAudioEntity::CAEWeaponAudioEntity
	// plugin::CallMethod<0x507560, CAEWeaponAudioEntity *>(this);
	0AA6: call_method 0x507560 struct [CAEWeaponAudioEntity] num_params 0 pop 0

	// CAEWeaponAudioEntity::WeaponReload
	// plugin::CallMethod<0x503690, CAEWeaponAudioEntity *, eWeaponType, CPhysical*, int>(this, weaptype, entity, AudioEventId);
	0AA6: call_method 0x503690 struct [CAEWeaponAudioEntity] num_params 3 pop 0 [weaptype] [entity] [AudioEventId]

	// CAEWeaponAudioEntity::WeaponFire
	// plugin::CallMethod<0x504F80, CAEWeaponAudioEntity *, eWeaponType, CPhysical*, int>(this, weaptype, entity, AudioEventId);
	0AA6: call_method 0x504F80 struct [CAEWeaponAudioEntity] num_params 3 pop 0 [weaptype] [entity] [AudioEventId]

	// CAEWeaponAudioEntity::Terminate
	// plugin::CallMethod<0x503480, CAEWeaponAudioEntity *>(this);
	0AA6: call_method 0x503480 struct [CAEWeaponAudioEntity] num_params 0 pop 0

	// CAEWeaponAudioEntity::StopFlameThrowerIdleGasLoop
	// plugin::CallMethod<0x5034E0, CAEWeaponAudioEntity *>(this);
	0AA6: call_method 0x5034E0 struct [CAEWeaponAudioEntity] num_params 0 pop 0

	// CAEWeaponAudioEntity::Reset
	// plugin::CallMethod<0x503490, CAEWeaponAudioEntity *>(this);
	0AA6: call_method 0x503490 struct [CAEWeaponAudioEntity] num_params 0 pop 0

	// CAEWeaponAudioEntity::ReportStealthKill
	// plugin::CallMethod<0x503B20, CAEWeaponAudioEntity *, eWeaponType, CPhysical*, int>(this, weaptype, entity, AudioEventId);
	0AA6: call_method 0x503B20 struct [CAEWeaponAudioEntity] num_params 3 pop 0 [weaptype] [entity] [AudioEventId]

	// CAEWeaponAudioEntity::ReportChainsawEvent
	// plugin::CallMethod<0x503910, CAEWeaponAudioEntity *, CPhysical*, int>(this, entity, AudioEventId);
	0AA6: call_method 0x503910 struct [CAEWeaponAudioEntity] num_params 2 pop 0 [entity] [AudioEventId]

	// CAEWeaponAudioEntity::PlayWeaponLoopSound
	// plugin::CallMethod<0x504610, CAEWeaponAudioEntity *, CPhysical*, short, int, float, float, int>(this, arg0, sfxId, AudioEventId, audability, speed, finalEvent);
	0AA6: call_method 0x504610 struct [CAEWeaponAudioEntity] num_params 6 pop 0 [arg0] [sfxId] [AudioEventId] [audability] [speed] [finalEvent]

	// CAEWeaponAudioEntity::PlayMiniGunStopSound
	// plugin::CallMethod<0x504960, CAEWeaponAudioEntity *, CPhysical*>(this, entity);
	0AA6: call_method 0x504960 struct [CAEWeaponAudioEntity] num_params 1 pop 0 [entity]

	// CAEWeaponAudioEntity::PlayMiniGunFireSounds
	// plugin::CallMethod<0x5047C0, CAEWeaponAudioEntity *, CPhysical*, int>(this, entity, AudioEventId);
	0AA6: call_method 0x5047C0 struct [CAEWeaponAudioEntity] num_params 2 pop 0 [entity] [AudioEventId]

	// CAEWeaponAudioEntity::PlayGunSounds
	// plugin::CallMethod<0x503CE0, CAEWeaponAudioEntity *, CPhysical*, short, short, short, short, short, int, float, float, float>(this, entity, emptySfxId, farSfxId2, highPitchSfxId3, lowPitchSfxId4, echoSfxId5, nAudioEventId, volumeChange, speed1, speed2);
	0AA6: call_method 0x503CE0 struct [CAEWeaponAudioEntity] num_params 10 pop 0 [entity] [emptySfxId] [farSfxId2] [highPitchSfxId3] [lowPitchSfxId4] [echoSfxId5] [nAudioEventId] [volumeChange] [speed1] [speed2]

	// CAEWeaponAudioEntity::PlayGoggleSound
	// plugin::CallMethod<0x503500, CAEWeaponAudioEntity *, short, int>(this, sfxId, AudioEventId);
	0AA6: call_method 0x503500 struct [CAEWeaponAudioEntity] num_params 2 pop 0 [sfxId] [AudioEventId]

	// CAEWeaponAudioEntity::PlayFlameThrowerSounds
	// plugin::CallMethod<0x504470, CAEWeaponAudioEntity *, CPhysical*, short, short, int, float, float>(this, entity, sfx1, sfx2, AudioEventId, audability, speed);
	0AA6: call_method 0x504470 struct [CAEWeaponAudioEntity] num_params 6 pop 0 [entity] [sfx1] [sfx2] [AudioEventId] [audability] [speed]

	// CAEWeaponAudioEntity::PlayFlameThrowerIdleGasLoop
	// plugin::CallMethod<0x503870, CAEWeaponAudioEntity *, CPhysical*>(this, entity);
	0AA6: call_method 0x503870 struct [CAEWeaponAudioEntity] num_params 1 pop 0 [entity]

	// CAEWeaponAudioEntity::PlayChainsawStopSound
	// plugin::CallMethod<0x504AA0, CAEWeaponAudioEntity *, CPhysical*>(this, entity);
	0AA6: call_method 0x504AA0 struct [CAEWeaponAudioEntity] num_params 1 pop 0 [entity]

	// CAEWeaponAudioEntity::PlayCameraSound
	// plugin::CallMethod<0x5046F0, CAEWeaponAudioEntity *, CPhysical*, int, float>(this, entity, AudioEventId, audability);
	0AA6: call_method 0x5046F0 struct [CAEWeaponAudioEntity] num_params 3 pop 0 [entity] [AudioEventId] [audability]

	// CAEWeaponAudioEntity::Initialise
	// plugin::CallMethod<0x503450, CAEWeaponAudioEntity *>(this);
	0AA6: call_method 0x503450 struct [CAEWeaponAudioEntity] num_params 0 pop 0

plugin_sa\game_sa\CAnimatedBuilding.cpp:

	// CAnimatedBuilding::CAnimatedBuilding
	// plugin::CallMethod<0x537A10, CAnimatedBuilding *>(this);
	0AA6: call_method 0x537A10 struct [CAnimatedBuilding] num_params 0 pop 0

plugin_sa\game_sa\CAnimBlendAssocGroup.cpp:

	// CAnimBlendAssocGroup::CAnimBlendAssocGroup
	// plugin::CallMethod<0x4CDE70, CAnimBlendAssocGroup *>(this);
	0AA6: call_method 0x4CDE70 struct [CAnimBlendAssocGroup] num_params 0 pop 0

	// CAnimBlendAssocGroup::CopyAnimation
	// plugin::CallMethodAndReturn<CAnimBlendAssociation*, 0x4CE0B0, CAnimBlendAssocGroup *, char const*>(this, AnimName);
	0AA8: call_method_return 0x4CE0B0 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [AnimName] func_ret [CAnimBlendAssociation*]

	// CAnimBlendAssocGroup::CopyAnimation
	// plugin::CallMethodAndReturn<CAnimBlendAssociation*, 0x4CE130, CAnimBlendAssocGroup *, unsigned int>(this, ID);
	0AA8: call_method_return 0x4CE130 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [ID] func_ret [CAnimBlendAssociation*]

	// CAnimBlendAssocGroup::CreateAssociations
	// plugin::CallMethod<0x4CE220, CAnimBlendAssocGroup *, char const*>(this, szBlockName);
	0AA6: call_method 0x4CE220 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [szBlockName]

	// CAnimBlendAssocGroup::CreateAssociations
	// plugin::CallMethod<0x4CE6E0, CAnimBlendAssocGroup *, char const*, RpClump*, char**, int>(this, AnimName, pClump, arg3, NumAnimations);
	0AA6: call_method 0x4CE6E0 struct [CAnimBlendAssocGroup] num_params 4 pop 0 [AnimName] [pClump] [arg3] [NumAnimations]

	// CAnimBlendAssocGroup::CreateAssociations
	// plugin::CallMethod<0x4CE3B0, CAnimBlendAssocGroup *, char const*, char const*, char const*, int>(this, AnimName, arg2, arg3, arg4);
	0AA6: call_method 0x4CE3B0 struct [CAnimBlendAssocGroup] num_params 4 pop 0 [AnimName] [arg2] [arg3] [arg4]

	// CAnimBlendAssocGroup::DestroyAssociations
	// plugin::CallMethod<0x4CDFF0, CAnimBlendAssocGroup *>(this);
	0AA6: call_method 0x4CDFF0 struct [CAnimBlendAssocGroup] num_params 0 pop 0

	// CAnimBlendAssocGroup::GetAnimation
	// plugin::CallMethodAndReturn<CAnimBlendAssociation*, 0x4CE040, CAnimBlendAssocGroup *, char const*>(this, AnimName);
	0AA8: call_method_return 0x4CE040 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [AnimName] func_ret [CAnimBlendAssociation*]

	// CAnimBlendAssocGroup::GetAnimation
	// plugin::CallMethodAndReturn<CAnimBlendAssociation*, 0x4CE090, CAnimBlendAssocGroup *, unsigned int>(this, ID);
	0AA8: call_method_return 0x4CE090 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [ID] func_ret [CAnimBlendAssociation*]

	// CAnimBlendAssocGroup::GetAnimationId
	// plugin::CallMethodAndReturn<unsigned int, 0x4CE1B0, CAnimBlendAssocGroup *, char const*>(this, AnimName);
	0AA8: call_method_return 0x4CE1B0 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [AnimName] func_ret [unsigned int]

	// CAnimBlendAssocGroup::InitEmptyAssociations
	// plugin::CallMethod<0x4CDFB0, CAnimBlendAssocGroup *, RpClump*>(this, pClump);
	0AA6: call_method 0x4CDFB0 struct [CAnimBlendAssocGroup] num_params 1 pop 0 [pClump]

	// CAnimBlendAssocGroup::~CAnimBlendAssocGroup
	// plugin::CallMethod<0x4CE1D0, CAnimBlendAssocGroup *>(this);
	0AA6: call_method 0x4CE1D0 struct [CAnimBlendAssocGroup] num_params 0 pop 0

plugin_sa\game_sa\CAnimBlendAssociation.cpp:

	// CAnimBlendAssociation::AllocateAnimBlendNodeArray
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, int>(gaddrof(CAnimBlendAssociation::AllocateAnimBlendNodeArray), this, count);

	// CAnimBlendAssociation::FreeAnimBlendNodeArray
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(gaddrof(CAnimBlendAssociation::FreeAnimBlendNodeArray), this);

	// *CAnimBlendAssociation::GetNode
	// plugin::CallMethodAndReturnDynGlobal<CAnimBlendNode *, CAnimBlendAssociation *, int>(gaddrof(CAnimBlendAssociation::GetNode), this, nodeIndex);
	0AA8: call_method_return 0x4CEB60 struct [*CAnimBlendAssociation] num_params 1 pop 0 [nodeIndex] func_ret [CAnimBlendNode *]

	// CAnimBlendAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendHierarchy *>(gaddrof_o(CAnimBlendAssociation::Init, void (CAnimBlendAssociation::*)(RpClump *, CAnimBlendHierarchy *)), this, clump, hierarchy);

	// CAnimBlendAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(gaddrof_o(CAnimBlendAssociation::Init, void (CAnimBlendAssociation::*)(CAnimBlendAssociation &)), this, source);

	// CAnimBlendAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendStaticAssociation &>(gaddrof_o(CAnimBlendAssociation::Init, void (CAnimBlendAssociation::*)(CAnimBlendStaticAssociation &)), this, source);

	// CAnimBlendAssociation::ReferenceAnimBlock
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(gaddrof(CAnimBlendAssociation::ReferenceAnimBlock), this);

	// CAnimBlendAssociation::SetBlend
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::SetBlend), this, blendAmount, blendDelta);

	// CAnimBlendAssociation::SetBlendTo
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::SetBlendTo), this, blendAmount, blendDelta);

	// CAnimBlendAssociation::SetCurrentTime
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::SetCurrentTime), this, currentTime);

	// CAnimBlendAssociation::SetDeleteCallback
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, void(*)(CAnimBlendAssociation *, void *), void *>(gaddrof(CAnimBlendAssociation::SetDeleteCallback), this, callback, data);

	// CAnimBlendAssociation::SetFinishCallback
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, void(*)(CAnimBlendAssociation *, void *), void *>(gaddrof(CAnimBlendAssociation::SetFinishCallback), this, callback, data);

	// CAnimBlendAssociation::Start
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::Start), this, currentTime);

	// CAnimBlendAssociation::SyncAnimation
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation *>(gaddrof(CAnimBlendAssociation::SyncAnimation), this, syncWith);

	// CAnimBlendAssociation::UpdateBlend
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendAssociation *, float>(gaddrof(CAnimBlendAssociation::UpdateBlend), this, blendDeltaMult);
	0AA8: call_method_return 0x4D1490 struct [CAnimBlendAssociation] num_params 1 pop 0 [blendDeltaMult] func_ret [bool]

	// CAnimBlendAssociation::UpdateTime
	// plugin::CallMethodAndReturnDynGlobal<bool, CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::UpdateTime), this, unused1, unused2);
	0AA8: call_method_return 0x4D13D0 struct [CAnimBlendAssociation] num_params 2 pop 0 [unused1] [unused2] func_ret [bool]

	// CAnimBlendAssociation::UpdateTimeStep
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, float, float>(gaddrof(CAnimBlendAssociation::UpdateTimeStep), this, speedMult, timeMult);

plugin_sa\game_sa\CAnimBlendClumpData.cpp:

	// CAnimBlendClumpData::CAnimBlendClumpData
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(ctor_gaddr(CAnimBlendClumpData), this);

	// CAnimBlendClumpData::~CAnimBlendClumpData
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(dtor_gaddr(CAnimBlendClumpData), this);

	// CAnimBlendClumpData::ForAllFrames
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *, void(*)(AnimBlendFrameData *, void *), void *>(gaddrof(CAnimBlendClumpData::ForAllFrames), this, callback, data);

	// CAnimBlendClumpData::ForAllFramesInSPR
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *, void(*)(AnimBlendFrameData *, void *), void *, unsigned int>(gaddrof(CAnimBlendClumpData::ForAllFramesInSPR), this, callback, data, a3);

	// CAnimBlendClumpData::LoadFramesIntoSPR
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *>(gaddrof(CAnimBlendClumpData::LoadFramesIntoSPR), this);

	// CAnimBlendClumpData::SetNumberOfBones
	// plugin::CallMethodDynGlobal<CAnimBlendClumpData *, int>(gaddrof(CAnimBlendClumpData::SetNumberOfBones), this, numBones);

plugin_sa\game_sa\CAnimBlendHierarchy.cpp:

	// CAnimBlendHierarchy::AllocSequenceBlock
	// plugin::CallMethodAndReturn<void*, 0x4CF510, CAnimBlendHierarchy *, bool>(this, arg1);
	0AA8: call_method_return 0x4CF510 struct [CAnimBlendHierarchy] num_params 1 pop 0 [arg1] func_ret [void*]

	// CAnimBlendHierarchy::CAnimBlendHierarchy
	// plugin::CallMethod<0x4CF270, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF270 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::CalcTotalTime
	// plugin::CallMethod<0x4CF2F0, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF2F0 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::CalcTotalTimeCompressed
	// plugin::CallMethod<0x4CF3E0, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF3E0 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::RemoveAnimSequences
	// plugin::CallMethod<0x4CF8E0, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF8E0 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::RemoveQuaternionFlips
	// plugin::CallMethod<0x4CF4E0, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF4E0 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::RemoveUncompressedData
	// plugin::CallMethod<0x4CF760, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF760 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::SetName
	// plugin::CallMethod<0x4CF2D0, CAnimBlendHierarchy *, char const*>(this, string);
	0AA6: call_method 0x4CF2D0 struct [CAnimBlendHierarchy] num_params 1 pop 0 [string]

	// CAnimBlendHierarchy::Shutdown
	// plugin::CallMethod<0x4CF980, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF980 struct [CAnimBlendHierarchy] num_params 0 pop 0

	// CAnimBlendHierarchy::Uncompress
	// plugin::CallMethod<0x4CF5F0, CAnimBlendHierarchy *>(this);
	0AA6: call_method 0x4CF5F0 struct [CAnimBlendHierarchy] num_params 0 pop 0

plugin_sa\game_sa\CAnimBlendNode.cpp:

	// CAnimBlendNode::CalcDeltas
	// plugin::CallMethod<0x4D0190, CAnimBlendNode *>(this);
	0AA6: call_method 0x4D0190 struct [CAnimBlendNode] num_params 0 pop 0

	// CAnimBlendNode::CalcDeltasCompressed
	// plugin::CallMethod<0x4D0350, CAnimBlendNode *>(this);
	0AA6: call_method 0x4D0350 struct [CAnimBlendNode] num_params 0 pop 0

	// CAnimBlendNode::FindKeyFrame
	// plugin::CallMethodAndReturn<bool, 0x4D0240, CAnimBlendNode *, float>(this, arg1);
	0AA8: call_method_return 0x4D0240 struct [CAnimBlendNode] num_params 1 pop 0 [arg1] func_ret [bool]

	// CAnimBlendNode::GetCurrentTranslation
	// plugin::CallMethod<0x4CFC50, CAnimBlendNode *, CVector&, float>(this, Vector, arg2);
	0AA6: call_method 0x4CFC50 struct [CAnimBlendNode] num_params 2 pop 0 [Vector] [arg2]

	// CAnimBlendNode::GetCurrentTranslationCompressed
	// plugin::CallMethod<0x4CFE60, CAnimBlendNode *, CVector&, float>(this, Vector, arg2);
	0AA6: call_method 0x4CFE60 struct [CAnimBlendNode] num_params 2 pop 0 [Vector] [arg2]

	// CAnimBlendNode::GetEndTranslation
	// plugin::CallMethod<0x4CFD90, CAnimBlendNode *, CVector&, float>(this, Vector, arg2);
	0AA6: call_method 0x4CFD90 struct [CAnimBlendNode] num_params 2 pop 0 [Vector] [arg2]

	// CAnimBlendNode::GetEndTranslationCompressed
	// plugin::CallMethod<0x4D0000, CAnimBlendNode *, CVector&, float>(this, Vector, arg2);
	0AA6: call_method 0x4D0000 struct [CAnimBlendNode] num_params 2 pop 0 [Vector] [arg2]

	// CAnimBlendNode::Init
	// plugin::CallMethod<0x4CFB70, CAnimBlendNode *>(this);
	0AA6: call_method 0x4CFB70 struct [CAnimBlendNode] num_params 0 pop 0

	// CAnimBlendNode::NextKeyFrame
	// plugin::CallMethodAndReturn<bool, 0x4D04A0, CAnimBlendNode *>(this);
	0AA8: call_method_return 0x4D04A0 struct [CAnimBlendNode] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendNode::NextKeyFrameCompressed
	// plugin::CallMethodAndReturn<bool, 0x4D0570, CAnimBlendNode *>(this);
	0AA8: call_method_return 0x4D0570 struct [CAnimBlendNode] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendNode::NextKeyFrameNoCalc
	// plugin::CallMethodAndReturn<bool, 0x4CFB90, CAnimBlendNode *>(this);
	0AA8: call_method_return 0x4CFB90 struct [CAnimBlendNode] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendNode::SetupKeyFrameCompressed
	// plugin::CallMethodAndReturn<bool, 0x4D0650, CAnimBlendNode *>(this);
	0AA8: call_method_return 0x4D0650 struct [CAnimBlendNode] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendNode::Update
	// plugin::CallMethodAndReturn<bool, 0x4D06C0, CAnimBlendNode *, CVector&, CQuaternion&, float>(this, Vector, Qauternion, arg3);
	0AA8: call_method_return 0x4D06C0 struct [CAnimBlendNode] num_params 3 pop 0 [Vector] [Qauternion] [arg3] func_ret [bool]

	// CAnimBlendNode::UpdateCompressed
	// plugin::CallMethodAndReturn<bool, 0x4D08D0, CAnimBlendNode *, CVector&, CQuaternion&, float>(this, Vector, Quaternion, arg3);
	0AA8: call_method_return 0x4D08D0 struct [CAnimBlendNode] num_params 3 pop 0 [Vector] [Quaternion] [arg3] func_ret [bool]

plugin_sa\game_sa\CAnimBlendSequence.cpp:

	// CAnimBlendSequence::CAnimBlendSequence
	// plugin::CallMethod<0x4D0C10, CAnimBlendSequence *>(this);
	0AA6: call_method 0x4D0C10 struct [CAnimBlendSequence] num_params 0 pop 0

	// CAnimBlendSequence::CompressKeyframes
	// plugin::CallMethod<0x4D0F40, CAnimBlendSequence *, unsigned char*>(this, arg1);
	0AA6: call_method 0x4D0F40 struct [CAnimBlendSequence] num_params 1 pop 0 [arg1]

	// CAnimBlendSequence::GetDataSize
	// plugin::CallMethodAndReturn<int, 0x4D0C90, CAnimBlendSequence *, bool>(this, arg1);
	0AA8: call_method_return 0x4D0C90 struct [CAnimBlendSequence] num_params 1 pop 0 [arg1] func_ret [int]

	// CAnimBlendSequence::MoveMemorY
	// plugin::CallMethodAndReturn<bool, 0x4D1150, CAnimBlendSequence *>(this);
	0AA8: call_method_return 0x4D1150 struct [CAnimBlendSequence] num_params 0 pop 0 func_ret [bool]

	// CAnimBlendSequence::RemoveQuaternionFlips
	// plugin::CallMethodAndReturn<int, 0x4D1190, CAnimBlendSequence *>(this);
	0AA8: call_method_return 0x4D1190 struct [CAnimBlendSequence] num_params 0 pop 0 func_ret [int]

	// CAnimBlendSequence::RemoveUncompressedData
	// plugin::CallMethod<0x4D12A0, CAnimBlendSequence *, unsigned char*>(this, arg1);
	0AA6: call_method 0x4D12A0 struct [CAnimBlendSequence] num_params 1 pop 0 [arg1]

	// CAnimBlendSequence::SetBoneTag
	// plugin::CallMethod<0x4D0C70, CAnimBlendSequence *, int>(this, hash);
	0AA6: call_method 0x4D0C70 struct [CAnimBlendSequence] num_params 1 pop 0 [hash]

	// CAnimBlendSequence::SetName
	// plugin::CallMethod<0x4D0C50, CAnimBlendSequence *, char const*>(this, string);
	0AA6: call_method 0x4D0C50 struct [CAnimBlendSequence] num_params 1 pop 0 [string]

	// CAnimBlendSequence::SetNumFrames
	// plugin::CallMethod<0x4D0CD0, CAnimBlendSequence *, int, bool, bool, unsigned char*>(this, count, arg2, arg3, arg4);
	0AA6: call_method 0x4D0CD0 struct [CAnimBlendSequence] num_params 4 pop 0 [count] [arg2] [arg3] [arg4]

	// CAnimBlendSequence::Uncompress
	// plugin::CallMethod<0x4D0D40, CAnimBlendSequence *, unsigned char*>(this, arg1);
	0AA6: call_method 0x4D0D40 struct [CAnimBlendSequence] num_params 1 pop 0 [arg1]

	// CAnimBlendSequence::~CAnimBlendSequence
	// plugin::CallMethod<0x4D0C30, CAnimBlendSequence *>(this);
	0AA6: call_method 0x4D0C30 struct [CAnimBlendSequence] num_params 0 pop 0

plugin_sa\game_sa\CAnimBlendStaticAssociation.cpp:

	// CAnimBlendStaticAssociation::AllocateSequenceArray
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *, int>(gaddrof(CAnimBlendStaticAssociation::AllocateSequenceArray), this, count);

	// CAnimBlendStaticAssociation::FreeSequenceArray
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *>(gaddrof(CAnimBlendStaticAssociation::FreeSequenceArray), this);

	// CAnimBlendStaticAssociation::Init
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *, RpClump *, CAnimBlendHierarchy *>(gaddrof(CAnimBlendStaticAssociation::Init), this, clump, hierarchy);

plugin_sa\game_sa\CAnimManager.cpp:

	// CAnimManager::GetAnimationBlock
	// plugin::CallAndReturn<CAnimBlock*, 0x4D3940, char const*>(name);
	0AA7: call_function_return 0x4D3940 num_params 1 pop 1 [name] func_ret [CAnimBlock*]

	// CAnimManager::GetAnimationBlockIndex
	// plugin::CallAndReturn<int, 0x4D3990, char const*>(name);
	0AA7: call_function_return 0x4D3990 num_params 1 pop 1 [name] func_ret [int]

	// CAnimManager::GetFirstAssocGroup
	// plugin::CallAndReturn<int, 0x4D39B0, char const*>(basename);
	0AA7: call_function_return 0x4D39B0 num_params 1 pop 1 [basename] func_ret [int]

	// CAnimManager::GetAnimation
	// plugin::CallAndReturn<CAnimBlendHierarchy*, 0x4D39F0, unsigned int, CAnimBlock const*>(hash, ifp);
	0AA7: call_function_return 0x4D39F0 num_params 2 pop 2 [hash] [ifp] func_ret [CAnimBlendHierarchy*]

	// CAnimManager::GetAnimation
	// plugin::CallAndReturn<CAnimBlendHierarchy*, 0x4D42F0, char const*, CAnimBlock const*>(animName, ifp);
	0AA7: call_function_return 0x4D42F0 num_params 2 pop 2 [animName] [ifp] func_ret [CAnimBlendHierarchy*]

	// CAnimManager::GetAnimGroupName
	// plugin::CallAndReturn<char*, 0x4D3A20, int>(AssocGroupId);
	0AA7: call_function_return 0x4D3A20 num_params 1 pop 1 [AssocGroupId] func_ret [char*]

	// CAnimManager::GetAnimBlockName
	// plugin::CallAndReturn<char*, 0x4D3A30, int>(AssocGroupId);
	0AA7: call_function_return 0x4D3A30 num_params 1 pop 1 [AssocGroupId] func_ret [char*]

	// CAnimManager::CreateAnimAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D3A40, int, int>(AssocGroupId, AnimationId);
	0AA7: call_function_return 0x4D3A40 num_params 2 pop 2 [AssocGroupId] [AnimationId] func_ret [CAnimBlendAssociation*]

	// CAnimManager::GetAnimAssociation
	// plugin::CallAndReturn<CAnimBlendStaticAssociation*, 0x4D3A60, int, int>(AssocGroupId, AnimationId);
	0AA7: call_function_return 0x4D3A60 num_params 2 pop 2 [AssocGroupId] [AnimationId] func_ret [CAnimBlendStaticAssociation*]

	// CAnimManager::GetAnimAssociation
	// plugin::CallAndReturn<CAnimBlendStaticAssociation*, 0x4D3A80, int, char const*>(AssocGroupId, arg2);
	0AA7: call_function_return 0x4D3A80 num_params 2 pop 2 [AssocGroupId] [arg2] func_ret [CAnimBlendStaticAssociation*]

	// CAnimManager::AddAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D3AA0, RpClump*, int, int>(clump, AssocGroupId, AnimationId);
	0AA7: call_function_return 0x4D3AA0 num_params 3 pop 3 [clump] [AssocGroupId] [AnimationId] func_ret [CAnimBlendAssociation*]

	// CAnimManager::AddAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D4330, RpClump*, CAnimBlendHierarchy*, int>(clump, pAnimBlendHier, clumpAssocFlag);
	0AA7: call_function_return 0x4D4330 num_params 3 pop 3 [clump] [pAnimBlendHier] [clumpAssocFlag] func_ret [CAnimBlendAssociation*]

	// CAnimManager::AddAnimationAndSync
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D3B30, RpClump*, CAnimBlendAssociation*, int, int>(clump, pAnimBlendAssoc, AssocGroupId, AnimationId);
	0AA7: call_function_return 0x4D3B30 num_params 4 pop 4 [clump] [pAnimBlendAssoc] [AssocGroupId] [AnimationId] func_ret [CAnimBlendAssociation*]

	// CAnimManager::AddAnimAssocDefinition
	// plugin::CallAndReturn<CAnimationStyleDescriptor*, 0x4D3BA0, char const*, char const*, unsigned int, unsigned int, void*>(groupName, blockName, arg3, animsCount, pAnimDescriptor);
	0AA7: call_function_return 0x4D3BA0 num_params 5 pop 5 [groupName] [blockName] [arg3] [animsCount] [pAnimDescriptor] func_ret [CAnimationStyleDescriptor*]

	// CAnimManager::AddAnimToAssocDefinition
	// plugin::CallAndReturn<void*, 0x4D3C80, void*, char const*>(pAnimAssocDefinition, arg2);
	0AA7: call_function_return 0x4D3C80 num_params 2 pop 2 [pAnimAssocDefinition] [arg2] func_ret [void*]

	// CAnimManager::CreateAnimAssocGroups
	// plugin::Call<0x4D3CC0>();
	0AA5: call_function 0x4D3CC0 num_params 0 pop 0

	// CAnimManager::RegisterAnimBlock
	// plugin::CallAndReturn<int, 0x4D3E50, char const*>(name);
	0AA7: call_function_return 0x4D3E50 num_params 1 pop 1 [name] func_ret [int]

	// CAnimManager::RemoveLastAnimFile
	// plugin::Call<0x4D3ED0>();
	0AA5: call_function 0x4D3ED0 num_params 0 pop 0

	// CAnimManager::RemoveAnimBlock
	// plugin::Call<0x4D3F40, int>(index);
	0AA5: call_function 0x4D3F40 num_params 1 pop 1 [index]

	// CAnimManager::AddAnimBlockRef
	// plugin::Call<0x4D3FB0, int>(index);
	0AA5: call_function 0x4D3FB0 num_params 1 pop 1 [index]

	// CAnimManager::RemoveAnimBlockRef
	// plugin::Call<0x4D3FD0, int>(index);
	0AA5: call_function 0x4D3FD0 num_params 1 pop 1 [index]

	// CAnimManager::RemoveAnimBlockRefWithoutDelete
	// plugin::Call<0x4D3FF0, int>(index);
	0AA5: call_function 0x4D3FF0 num_params 1 pop 1 [index]

	// CAnimManager::GetNumRefsToAnimBlock
	// plugin::CallAndReturn<int, 0x4D4010, int>(index);
	0AA7: call_function_return 0x4D4010 num_params 1 pop 1 [index] func_ret [int]

	// CAnimManager::Shutdown
	// plugin::Call<0x4D4130>();
	0AA5: call_function 0x4D4130 num_params 0 pop 0

	// CAnimManager::UncompressAnimation
	// plugin::Call<0x4D41C0, CAnimBlendHierarchy*>(pAnimBlendHier);
	0AA5: call_function 0x4D41C0 num_params 1 pop 1 [pAnimBlendHier]

	// CAnimManager::RemoveFromUncompressedCache
	// plugin::Call<0x4D42A0, CAnimBlendHierarchy*>(pAnimBlendHier);
	0AA5: call_function 0x4D42A0 num_params 1 pop 1 [pAnimBlendHier]

	// CAnimManager::BlendAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D4410, RpClump*, CAnimBlendHierarchy*, int, float>(clump, pAnimBlendHier, flags, clumpAssocBlendData);
	0AA7: call_function_return 0x4D4410 num_params 4 pop 4 [clump] [pAnimBlendHier] [flags] [clumpAssocBlendData] func_ret [CAnimBlendAssociation*]

	// CAnimManager::BlendAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D4610, RpClump*, int, int, float>(clump, AssocGroupId, AnimationId, clumpAssocBlendData);
	0AA7: call_function_return 0x4D4610 num_params 4 pop 4 [clump] [AssocGroupId] [AnimationId] [clumpAssocBlendData] func_ret [CAnimBlendAssociation*]

	// CAnimManager::LoadAnimFile
	// plugin::Call<0x4D47F0, RwStream*, bool, char const(*)[32]>(stream, arg1, string);
	0AA5: call_function 0x4D47F0 num_params 3 pop 3 [*)[32]>(stream] [arg1] [string]

	// CAnimManager::LoadAnimFiles
	// plugin::Call<0x4D5620>();
	0AA5: call_function 0x4D5620 num_params 0 pop 0

	// CAnimManager::ReadAnimAssociationDefinitions
	// plugin::Call<0x5BC910>();
	0AA5: call_function 0x5BC910 num_params 0 pop 0

	// CAnimManager::Initialise
	// plugin::Call<0x5BF6B0>();
	0AA5: call_function 0x5BF6B0 num_params 0 pop 0

plugin_sa\game_sa\CAudioEngine.cpp:

	// CAudioEngine::Initialise
	// plugin::CallMethod<0x5B9C60, CAudioEngine*>(this);
	0AA6: call_method 0x5B9C60 struct [CAudioEngine] num_params 0 pop 0

	// CAudioEngine::Restart
	// plugin::CallMethod<0x506DB0, CAudioEngine*>(this);
	0AA6: call_method 0x506DB0 struct [CAudioEngine] num_params 0 pop 0

	// CAudioEngine::Shutdown
	// plugin::CallMethod<0x507CB0, CAudioEngine*>(this);
	0AA6: call_method 0x507CB0 struct [CAudioEngine] num_params 0 pop 0

	// CAudioEngine::SetEffectsMasterVolume
	// plugin::CallMethod<0x506E10, CAudioEngine*, char>(this, volume);
	0AA6: call_method 0x506E10 struct [CAudioEngine] num_params 1 pop 0 [volume]

	// CAudioEngine::SetMusicMasterVolume
	// plugin::CallMethod<0x506DE0, CAudioEngine*, char>(this, volume);
	0AA6: call_method 0x506DE0 struct [CAudioEngine] num_params 1 pop 0 [volume]

	// CAudioEngine::SetBassEnhanceOnOff
	// plugin::CallMethod<0x506F90, CAudioEngine*, bool>(this, on);
	0AA6: call_method 0x506F90 struct [CAudioEngine] num_params 1 pop 0 [on]

	// CAudioEngine::SetRadioAutoRetuneOnOff
	// plugin::CallMethod<0x506F80, CAudioEngine*, bool>(this, on);
	0AA6: call_method 0x506F80 struct [CAudioEngine] num_params 1 pop 0 [on]

	// CAudioEngine::RetuneRadio
	// plugin::CallMethod<0x507E10, CAudioEngine*, char>(this, stationId);
	0AA6: call_method 0x507E10 struct [CAudioEngine] num_params 1 pop 0 [stationId]

	// CAudioEngine::ReportFrontendAudioEvent
	// plugin::CallMethodAndReturn<CReference*, 0x506EA0, CAudioEngine*, int, float, float>(this, id, volume, speed);
	0AA8: call_method_return 0x506EA0 struct [CAudioEngine] num_params 3 pop 0 [id] [volume] [speed] func_ret [CReference*]

	// CAudioEngine::ReportMissionAudioEvent
	// plugin::CallMethod<0x507340, CAudioEngine*, eAudioEvents,CVector const*>(this,audioEvent,coords);
	0AA6: call_method 0x507340 struct [CAudioEngine] num_params 2 pop 0 [audioEvent] [coords]

	// CAudioEngine::Service
	// plugin::CallMethod<0x507750, CAudioEngine*>(this);
	0AA6: call_method 0x507750 struct [CAudioEngine] num_params 0 pop 0

	// CAudioEngine::ServiceLoadingTune
	// plugin::CallMethod<0x5078A0, CAudioEngine*, float>(this, fade);
	0AA6: call_method 0x5078A0 struct [CAudioEngine] num_params 1 pop 0 [fade]

	// CAudioEngine::StartRadio
	// plugin::CallMethod<0x507DC0, CAudioEngine*, int, char>(this, radioStation, arg);
	0AA6: call_method 0x507DC0 struct [CAudioEngine] num_params 2 pop 0 [radioStation] [arg]

	// CAudioEngine::StopRadio
	// plugin::CallMethod<0x506F70, CAudioEngine*, tVehicleAudioSettings*, bool>(this, settings, arg);
	0AA6: call_method 0x506F70 struct [CAudioEngine] num_params 2 pop 0 [settings] [arg]

	// CAudioEngine::IsRadioRetuneInProgress
	// plugin::CallMethodAndReturn<bool, 0x506FF0, CAudioEngine*>(this);
	0AA8: call_method_return 0x506FF0 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::IsLoadingTuneActive
	// plugin::CallMethodAndReturn<bool, 0x506D90, CAudioEngine*>(this);
	0AA8: call_method_return 0x506D90 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::IsRadioOn
	// plugin::CallMethodAndReturn<bool, 0x506FD0, CAudioEngine*>(this);
	0AA8: call_method_return 0x506FD0 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::IsAmbienceTrackActive
	// plugin::CallMethodAndReturn<bool, 0x507210, CAudioEngine*>(this);
	0AA8: call_method_return 0x507210 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::StartLoadingTune
	// plugin::CallMethodAndReturn<bool, 0x507410, CAudioEngine*>(this);
	0AA8: call_method_return 0x507410 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::GetCurrentRadioStationID
	// plugin::CallMethodAndReturn<bool, 0x507040, CAudioEngine*>(this);
	0AA8: call_method_return 0x507040 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::IsVehicleRadioActive
	// plugin::CallMethodAndReturn<bool, 0x507050, CAudioEngine*>(this);
	0AA8: call_method_return 0x507050 struct [CAudioEngine] num_params 0 pop 0 func_ret [bool]

	// CAudioEngine::InitialisePostLoading
	// plugin::CallMethod<0x5078F0, CAudioEngine*>(this);
	0AA6: call_method 0x5078F0 struct [CAudioEngine] num_params 0 pop 0

plugin_sa\game_sa\CBaseModelInfo.cpp:

	// CBaseModelInfo::GetIsDrawLast
	// plugin::CallMethodAndReturn<bool, 0x5328C0, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x5328C0 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::HasBeenPreRendered
	// plugin::CallMethodAndReturn<bool, 0x5328B0, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x5328B0 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::HasComplexHierarchy
	// plugin::CallMethodAndReturn<bool, 0x4C4E00, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x4C4E00 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::IsBackfaceCulled
	// plugin::CallMethodAndReturn<bool, 0x5328F0, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x5328F0 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::IsBreakableStatuePart
	// plugin::CallMethodAndReturn<bool, 0x59F090, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x59F090 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::IsLod
	// plugin::CallMethodAndReturn<bool, 0x4C4A00, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x4C4A00 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::IsRoad
	// plugin::CallMethodAndReturn<bool, 0x4C4DF0, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x4C4DF0 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::IsTagModel
	// plugin::CallMethodAndReturn<bool, 0x49CC20, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x49CC20 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::SwaysInWind
	// plugin::CallMethodAndReturn<bool, 0x4212C0, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x4212C0 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [bool]

	// CBaseModelInfo::SetHasBeenPreRendered
	// plugin::CallMethod<0x4C42F0, CBaseModelInfo *, int>(this, bHasBeenPreRendered);
	0AA6: call_method 0x4C42F0 struct [CBaseModelInfo] num_params 1 pop 0 [bHasBeenPreRendered]

	// CBaseModelInfo::SetIsLod
	// plugin::CallMethod<0x4C4A10, CBaseModelInfo *, int>(this, bIsLod);
	0AA6: call_method 0x4C4A10 struct [CBaseModelInfo] num_params 1 pop 0 [bIsLod]

	// CBaseModelInfo::SetOwnsColModel
	// plugin::CallMethod<0x5328D0, CBaseModelInfo *, int>(this, bOwns);
	0AA6: call_method 0x5328D0 struct [CBaseModelInfo] num_params 1 pop 0 [bOwns]

	// CBaseModelInfo::IncreaseAlpha
	// plugin::CallMethod<0x532900, CBaseModelInfo *>(this);
	0AA6: call_method 0x532900 struct [CBaseModelInfo] num_params 0 pop 0

plugin_sa\game_sa\CBirds.cpp:

	// CBirds::Init
	// plugin::Call<0x711EC0>();
	0AA5: call_function 0x711EC0 num_params 0 pop 0

	// CBirds::CreateNumberOfBirds
	// plugin::CallAndReturn<int, 0x711EF0, CVector, CVector, int, int, bool>(pos, destination, count, birdType, checkObstacles);
	0AA7: call_function_return 0x711EF0 num_params 5 pop 5 [pos] [destination] [count] [birdType] [checkObstacles] func_ret [int]

	// CBirds::Shutdown
	// plugin::Call<0x712300>();
	0AA5: call_function 0x712300 num_params 0 pop 0

	// CBirds::Update
	// plugin::Call<0x712330>();
	0AA5: call_function 0x712330 num_params 0 pop 0

	// CBirds::Render
	// plugin::Call<0x712810>();
	0AA5: call_function 0x712810 num_params 0 pop 0

	// CBirds::HandleGunShot
	// plugin::Call<0x712E40, CVector const*, CVector const*>(pointA, pointB);
	0AA5: call_function 0x712E40 num_params 2 pop 2 [pointA] [pointB]

plugin_sa\game_sa\CBouncingPanel.cpp:

	// CBouncingPanel::ResetPanel
	// plugin::CallMethod<0x6F4910, CBouncingPanel *>(this);
	0AA6: call_method 0x6F4910 struct [CBouncingPanel] num_params 0 pop 0

	// CBouncingPanel::SetPanel
	// plugin::CallMethod<0x6F4920, CBouncingPanel *, short, short, float>(this, frameId, axis, angleLimit);
	0AA6: call_method 0x6F4920 struct [CBouncingPanel] num_params 3 pop 0 [frameId] [axis] [angleLimit]

	// CBouncingPanel::ProcessPanel
	// plugin::CallMethod<0x6F49A0, CBouncingPanel *, CVehicle*, RwFrame*, CVector, CVector, float, float>(this, vehicle, frame, arg2, arg3, arg4, arg5);
	0AA6: call_method 0x6F49A0 struct [CBouncingPanel] num_params 6 pop 0 [vehicle] [frame] [arg2] [arg3] [arg4] [arg5]

plugin_sa\game_sa\CBoundingBox.cpp:

	// CBoundingBox::CBoundingBox
	// plugin::CallMethod<0x40FAF0, CBoundingBox *>(this);
	0AA6: call_method 0x40FAF0 struct [CBoundingBox] num_params 0 pop 0

plugin_sa\game_sa\CBrightLights.cpp:

	// CBrightLights::RenderOutGeometryBuffer
	// plugin::Call<0x722150>();
	0AA5: call_function 0x722150 num_params 0 pop 0

	// CBrightLights::Render
	// plugin::Call<0x7241C0>();
	0AA5: call_function 0x7241C0 num_params 0 pop 0

	// CBrightLights::RegisterOne
	// plugin::Call<0x724770, CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char>(posn, top, right, at, color, arg5, arg6, arg7);
	0AA5: call_function 0x724770 num_params 8 pop 8 [posn] [top] [right] [at] [color] [arg5] [arg6] [arg7]

	// CBrightLights::Init
	// plugin::Call<0x722140>();
	0AA5: call_function 0x722140 num_params 0 pop 0

plugin_sa\game_sa\CBuilding.cpp:

	// CBuilding::operator new
	// plugin::CallAndReturn<void*, 0x404090, unsigned int>(size);
	0AA7: call_function_return 0x404090 num_params 1 pop 1 [size] func_ret [void*]

	// CBuilding::operator delete
	// plugin::Call<0x4040A0, void*>(data);
	0AA5: call_function 0x4040A0 num_params 1 pop 1 [data]

	// CBuilding::CBuilding
	// plugin::CallMethod<0x403E00, CBuilding *>(this);
	0AA6: call_method 0x403E00 struct [CBuilding] num_params 0 pop 0

plugin_sa\game_sa\CBulletInfo.cpp:

	// CBulletInfo::Initialise
	// plugin::Call<0x735FD0>();
	0AA5: call_function 0x735FD0 num_params 0 pop 0

	// CBulletInfo::Shutdown
	// plugin::Call<0x736000>();
	0AA5: call_function 0x736000 num_params 0 pop 0

	// CBulletInfo::AddBullet
	// plugin::CallAndReturn<bool, 0x736010, CEntity*, eWeaponType, CVector, CVector>(creator, weaponType, position, velocity);
	0AA7: call_function_return 0x736010 num_params 4 pop 4 [creator] [weaponType] [position] [velocity] func_ret [bool]

	// CBulletInfo::Update
	// plugin::Call<0x7360D0>();
	0AA5: call_function 0x7360D0 num_params 0 pop 0

plugin_sa\game_sa\CBulletTrace.cpp:

	// CBulletTrace::Update
	// plugin::CallMethod<0x721D70, CBulletTrace *>(this);
	0AA6: call_method 0x721D70 struct [CBulletTrace] num_params 0 pop 0

plugin_sa\game_sa\CBulletTraces.cpp:

	// CBulletTraces::AddTrace
	// plugin::Call<0x726AF0, CVector*, CVector*, int, CEntity*>(start, end, weaponType, entity);
	0AA5: call_function 0x726AF0 num_params 4 pop 4 [start] [end] [weaponType] [entity]

	// CBulletTraces::Init
	// plugin::Call<0x721D50>();
	0AA5: call_function 0x721D50 num_params 0 pop 0

plugin_sa\game_sa\CCamera.cpp:

	// CCamera::AddShakeSimple
	// plugin::CallMethodDynGlobal<CCamera *, float, int, float>(gaddrof(CCamera::AddShakeSimple), this, duration, type, intensity);

	// CCamera::AllowShootingWith2PlayersInCar
	// plugin::CallMethodDynGlobal<CCamera *, bool>(gaddrof(CCamera::AllowShootingWith2PlayersInCar), this, bAllowShootingWith2PlayersInCar);

	// CCamera::ApplyVehicleCameraTweaks
	// plugin::CallMethodDynGlobal<CCamera *, CVehicle *>(gaddrof(CCamera::ApplyVehicleCameraTweaks), this, vehicle);

	// CCamera::AvoidTheGeometry
	// plugin::CallMethodDynGlobal<CCamera *, CVector const *, CVector const *, CVector *, float>(gaddrof(CCamera::AvoidTheGeometry), this, arg2, arg3, arg4, FOV);

	// CCamera::CalculateDerivedValues
	// plugin::CallMethodDynGlobal<CCamera *, bool, bool>(gaddrof(CCamera::CalculateDerivedValues), this, bForMirror, bOriented);

	// CCamera::CalculateFrustumPlanes
	// plugin::CallMethodDynGlobal<CCamera *, bool>(gaddrof(CCamera::CalculateFrustumPlanes), this, bForMirror);

	// CCamera::CalculateGroundHeight
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *, unsigned int>(gaddrof(CCamera::CalculateGroundHeight), this, type);
	0AA8: call_method_return 0x514B80 struct [CCamera] num_params 1 pop 0 [type] func_ret [float]

	// CCamera::CalculateMirroredMatrix
	// plugin::CallMethodDynGlobal<CCamera *, CVector, float, CMatrix *, CMatrix *>(gaddrof(CCamera::CalculateMirroredMatrix), this, posn, MirrorV, CamMat, MirrorMat);

	// CCamera::CamControl
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::CamControl), this);

	// CCamera::CamShake
	// plugin::CallMethodDynGlobal<CCamera *, float, float, float, float>(gaddrof(CCamera::CamShake), this, arg2, x, y, z);

	// CCamera::CameraColDetAndReact
	// plugin::CallMethodAndReturnDynGlobal<char, CCamera *, CVector *, CVector *>(gaddrof(CCamera::CameraColDetAndReact), this, source, target);
	0AA8: call_method_return 0x520190 struct [CCamera] num_params 2 pop 0 [source] [target] func_ret [char]

	// CCamera::CameraGenericModeSpecialCases
	// plugin::CallMethodDynGlobal<CCamera *, CPed *>(gaddrof(CCamera::CameraGenericModeSpecialCases), this, targetPed);

	// CCamera::CameraPedAimModeSpecialCases
	// plugin::CallMethodDynGlobal<CCamera *, CPed *>(gaddrof(CCamera::CameraPedAimModeSpecialCases), this, targPed);

	// CCamera::CameraPedModeSpecialCases
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::CameraPedModeSpecialCases), this);

	// CCamera::CameraVehicleModeSpecialCases
	// plugin::CallMethodDynGlobal<CCamera *, CVehicle *>(gaddrof(CCamera::CameraVehicleModeSpecialCases), this, targVehicle);

	// CCamera::ClearPlayerWeaponMode
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ClearPlayerWeaponMode), this);

	// CCamera::ConeCastCollisionResolve
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CVector *, CVector *, CVector *, float, float, float *>(gaddrof(CCamera::ConeCastCollisionResolve), this, source, center, pVecOut, radius, arg5, pFloatOut);
	0AA8: call_method_return 0x51A5D0 struct [CCamera] num_params 6 pop 0 [source] [center] [pVecOut] [radius] [arg5] [pFloatOut] func_ret [bool]

	// CCamera::ConsiderPedAsDucking
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CPed *>(gaddrof(CCamera::ConsiderPedAsDucking), this, ped);
	0AA8: call_method_return 0x50CEB0 struct [CCamera] num_params 1 pop 0 [ped] func_ret [bool]

	// CCamera::CopyCameraMatrixToRWCam
	// plugin::CallMethodDynGlobal<CCamera *, bool>(gaddrof(CCamera::CopyCameraMatrixToRWCam), this, bUpdateMatrix);

	// CCamera::DealWithMirrorBeforeConstructRenderList
	// plugin::CallMethodDynGlobal<CCamera *, bool, CVector, float, CMatrix *>(gaddrof(CCamera::DealWithMirrorBeforeConstructRenderList), this, bActiveMirror, MirrorNormal, MirrorV, matMirror);

	// CCamera::DeleteCutSceneCamDataMemory
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::DeleteCutSceneCamDataMemory), this);

	// CCamera::DrawBordersForWideScreen
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::DrawBordersForWideScreen), this);

	// CCamera::Enable1rstPersonCamCntrlsScript
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Enable1rstPersonCamCntrlsScript), this);

	// CCamera::Enable1rstPersonWeaponsCamera
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Enable1rstPersonWeaponsCamera), this);

	// CCamera::Fade
	// plugin::CallMethodDynGlobal<CCamera *, float, short>(gaddrof(CCamera::Fade), this, fadeDuration, FadeInOutFlag);

	// CCamera::Find3rdPersonCamTargetVector
	// plugin::CallMethodDynGlobal<CCamera *, float, CVector, CVector *, CVector *>(gaddrof(CCamera::Find3rdPersonCamTargetVector), this, range, source, pCamera, pPoint);

	// CCamera::Find3rdPersonQuickAimPitch
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::Find3rdPersonQuickAimPitch), this);
	0AA8: call_method_return 0x50AD40 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::FindCamFOV
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::FindCamFOV), this);
	0AA8: call_method_return 0x50AD20 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::FinishCutscene
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::FinishCutscene), this);

	// CCamera::GetArrPosForVehicleType
	// plugin::CallMethodDynGlobal<CCamera *, int, int *>(gaddrof(CCamera::GetArrPosForVehicleType), this, type, arrPos);

	// CCamera::GetCutSceneFinishTime
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CCamera *>(gaddrof(CCamera::GetCutSceneFinishTime), this);
	0AA8: call_method_return 0x50AD90 struct [CCamera] num_params 0 pop 0 func_ret [unsigned int]

	// CCamera::GetFading
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetFading), this);
	0AA8: call_method_return 0x50ADE0 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetFadingDirection
	// plugin::CallMethodAndReturnDynGlobal<int, CCamera *>(gaddrof(CCamera::GetFadingDirection), this);
	0AA8: call_method_return 0x50ADF0 struct [CCamera] num_params 0 pop 0 func_ret [int]

	// *CCamera::GetGameCamPosition
	// plugin::CallMethodAndReturnDynGlobal<CVector *, CCamera *>(gaddrof(CCamera::GetGameCamPosition), this);
	0AA8: call_method_return 0x50AE50 struct [*CCamera] num_params 0 pop 0 func_ret [CVector *]

	// CCamera::GetLookDirection
	// plugin::CallMethodAndReturnDynGlobal<signed int, CCamera *>(gaddrof(CCamera::GetLookDirection), this);
	0AA8: call_method_return 0x50AE90 struct [CCamera] num_params 0 pop 0 func_ret [signed int]

	// CCamera::GetLookingForwardFirstPerson
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetLookingForwardFirstPerson), this);
	0AA8: call_method_return 0x50AED0 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetLookingLRBFirstPerson
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::GetLookingLRBFirstPerson), this);
	0AA8: call_method_return 0x50AE60 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetPositionAlongSpline
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::GetPositionAlongSpline), this);
	0AA8: call_method_return 0x50AF80 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::GetRoughDistanceToGround
	// plugin::CallMethodAndReturnDynGlobal<float, CCamera *>(gaddrof(CCamera::GetRoughDistanceToGround), this);
	0AA8: call_method_return 0x516B00 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::GetScreenFadeStatus
	// plugin::CallMethodAndReturnDynGlobal<signed int, CCamera *>(gaddrof(CCamera::GetScreenFadeStatus), this);
	0AA8: call_method_return 0x50AE20 struct [CCamera] num_params 0 pop 0 func_ret [signed int]

	// CCamera::GetScreenRect
	// plugin::CallMethodDynGlobal<CCamera *, CRect *>(gaddrof(CCamera::GetScreenRect), this, pRect);

	// CCamera::Get_Just_Switched_Status
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::Get_Just_Switched_Status), this);
	0AA8: call_method_return 0x50AE10 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::HandleCameraMotionForDucking
	// plugin::CallMethodDynGlobal<CCamera *, CPed *, CVector *, CVector *, bool>(gaddrof(CCamera::HandleCameraMotionForDucking), this, ped, source, targPosn, arg5);

	// CCamera::HandleCameraMotionForDuckingDuringAim
	// plugin::CallMethodDynGlobal<CCamera *, CPed *, CVector *, CVector *, bool>(gaddrof(CCamera::HandleCameraMotionForDuckingDuringAim), this, ped, source, targPosn, arg5);

	// CCamera::ImproveNearClip
	// plugin::CallMethodDynGlobal<CCamera *, CVehicle *, CPed *, CVector *, CVector *>(gaddrof(CCamera::ImproveNearClip), this, pVehicle, pPed, source, targPosn);

	// CCamera::Init
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Init), this);

	// CCamera::InitCameraVehicleTweaks
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::InitCameraVehicleTweaks), this);

	// CCamera::InitialiseScriptableComponents
	// plugin::CallMethodAndReturnDynGlobal<int, CCamera *>(gaddrof(CCamera::InitialiseScriptableComponents), this);
	0AA8: call_method_return 0x50D2D0 struct [CCamera] num_params 0 pop 0 func_ret [int]

	// CCamera::IsExtraEntityToIgnore
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CEntity *>(gaddrof(CCamera::IsExtraEntityToIgnore), this, entity);
	0AA8: call_method_return 0x50CE80 struct [CCamera] num_params 1 pop 0 [entity] func_ret [bool]

	// CCamera::IsItTimeForNewcam
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, int, int>(gaddrof(CCamera::IsItTimeForNewcam), this, CamSequence, StartTime);
	0AA8: call_method_return 0x51D770 struct [CCamera] num_params 2 pop 0 [CamSequence] [StartTime] func_ret [bool]

	// CCamera::IsSphereVisible
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CVector const &, float, RwMatrixTag *>(gaddrof_o(CCamera::IsSphereVisible, bool (CCamera::*)(CVector const &, float, RwMatrixTag *)), this, origin, radius, transformMatrix);
	0AA8: call_method_return 0x420D40 struct [CCamera] num_params 3 pop 0 [origin] [radius] [transformMatrix] func_ret [bool]

	// CCamera::IsSphereVisible
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, CVector const &, float>(gaddrof_o(CCamera::IsSphereVisible, bool (CCamera::*)(CVector const &, float)), this, origin, radius);
	0AA8: call_method_return 0x420D40 struct [CCamera] num_params 2 pop 0 [origin] [radius] func_ret [bool]

	// CCamera::LerpFOV
	// plugin::CallMethodDynGlobal<CCamera *, float, float, float, bool>(gaddrof(CCamera::LerpFOV), this, zoomInFactor, zoomOutFactor, timelimit, bEase);

	// CCamera::LoadPathSplines
	// plugin::CallMethodDynGlobal<CCamera *, int>(gaddrof(CCamera::LoadPathSplines), this, pFile);

	// CCamera::Process
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Process), this);

	// CCamera::ProcessFOVLerp
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof_o(CCamera::ProcessFOVLerp, void (CCamera::*)(float)), this, ratio);

	// CCamera::ProcessFOVLerp
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof_o(CCamera::ProcessFOVLerp, void (CCamera::*)()), this);

	// CCamera::ProcessFade
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessFade), this);

	// CCamera::ProcessMusicFade
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessMusicFade), this);

	// CCamera::ProcessObbeCinemaCameraBoat
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraBoat), this);

	// CCamera::ProcessObbeCinemaCameraCar
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraCar), this);

	// CCamera::ProcessObbeCinemaCameraHeli
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraHeli), this);

	// CCamera::ProcessObbeCinemaCameraPed
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraPed), this);
	0AA8: call_method_return 0x50B880 struct [CCamera] num_params 0 pop 0 func_ret [unsigned int]

	// CCamera::ProcessObbeCinemaCameraPlane
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraPlane), this);

	// CCamera::ProcessObbeCinemaCameraTrain
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessObbeCinemaCameraTrain), this);

	// CCamera::ProcessScriptedCommands
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessScriptedCommands), this);

	// CCamera::ProcessShake
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof_o(CCamera::ProcessShake, void (CCamera::*)(float)), this, JiggleIntensity);

	// CCamera::ProcessShake
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof_o(CCamera::ProcessShake, void (CCamera::*)()), this);

	// CCamera::ProcessVectorMoveLinear
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof_o(CCamera::ProcessVectorMoveLinear, void (CCamera::*)(float)), this, ratio);

	// CCamera::ProcessVectorMoveLinear
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof_o(CCamera::ProcessVectorMoveLinear, void (CCamera::*)()), this);

	// CCamera::ProcessVectorTrackLinear
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof_o(CCamera::ProcessVectorTrackLinear, void (CCamera::*)(float)), this, ratio);

	// CCamera::ProcessVectorTrackLinear
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof_o(CCamera::ProcessVectorTrackLinear, void (CCamera::*)()), this);

	// CCamera::ProcessWideScreenOn
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::ProcessWideScreenOn), this);

	// CCamera::RenderMotionBlur
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::RenderMotionBlur), this);

	// CCamera::ResetDuckingSystem
	// plugin::CallMethodDynGlobal<CCamera *, CPed *>(gaddrof(CCamera::ResetDuckingSystem), this, ped);

	// CCamera::Restore
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::Restore), this);

	// CCamera::RestoreCameraAfterMirror
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::RestoreCameraAfterMirror), this);

	// CCamera::RestoreWithJumpCut
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::RestoreWithJumpCut), this);

	// CCamera::SetCamCutSceneOffSet
	// plugin::CallMethodDynGlobal<CCamera *, CVector const *>(gaddrof(CCamera::SetCamCutSceneOffSet), this, cutsceneOffset);

	// CCamera::SetCamPositionForFixedMode
	// plugin::CallMethodDynGlobal<CCamera *, CVector const *, CVector const *>(gaddrof(CCamera::SetCamPositionForFixedMode), this, fixedModeSource, fixedModeUpOffset);

	// CCamera::SetCameraDirectlyBehindForFollowPed_CamOnAString
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetCameraDirectlyBehindForFollowPed_CamOnAString), this);

	// CCamera::SetCameraDirectlyBehindForFollowPed_ForAPed_CamOnAString
	// plugin::CallMethodDynGlobal<CCamera *, CPed *>(gaddrof(CCamera::SetCameraDirectlyBehindForFollowPed_ForAPed_CamOnAString), this, targetPed);

	// CCamera::SetCameraUpForMirror
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetCameraUpForMirror), this);

	// CCamera::SetFadeColour
	// plugin::CallMethodDynGlobal<CCamera *, unsigned char, unsigned char, unsigned char>(gaddrof(CCamera::SetFadeColour), this, Red, Green, Blue);

	// CCamera::SetMotionBlur
	// plugin::CallMethodDynGlobal<CCamera *, int, int, int, int, int>(gaddrof(CCamera::SetMotionBlur), this, Red, Green, Blue, value, Blurtype);

	// CCamera::SetMotionBlurAlpha
	// plugin::CallMethodDynGlobal<CCamera *, int>(gaddrof(CCamera::SetMotionBlurAlpha), this, Alpha);

	// CCamera::SetNearClipBasedOnPedCollision
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof(CCamera::SetNearClipBasedOnPedCollision), this, arg2);

	// CCamera::SetNearClipScript
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof(CCamera::SetNearClipScript), this, NearClip);

	// CCamera::SetNewPlayerWeaponMode
	// plugin::CallMethodDynGlobal<CCamera *, short, short, short>(gaddrof(CCamera::SetNewPlayerWeaponMode), this, mode, maxZoom, minZoom);

	// CCamera::SetParametersForScriptInterpolation
	// plugin::CallMethodDynGlobal<CCamera *, float, float, unsigned int>(gaddrof(CCamera::SetParametersForScriptInterpolation), this, InterpolationToStopMoving, InterpolationToCatchUp, TimeForInterPolation);

	// CCamera::SetPercentAlongCutScene
	// plugin::CallMethodDynGlobal<CCamera *, float>(gaddrof(CCamera::SetPercentAlongCutScene), this, percent);

	// CCamera::SetRwCamera
	// plugin::CallMethodDynGlobal<CCamera *, RwCamera *>(gaddrof(CCamera::SetRwCamera), this, rwcamera);

	// CCamera::SetWideScreenOff
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetWideScreenOff), this);

	// CCamera::SetWideScreenOn
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::SetWideScreenOn), this);

	// CCamera::SetZoomValueCamStringScript
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::SetZoomValueCamStringScript), this, zoomMode);

	// CCamera::SetZoomValueFollowPedScript
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::SetZoomValueFollowPedScript), this, zoomMode);

	// CCamera::StartCooperativeCamMode
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::StartCooperativeCamMode), this);

	// CCamera::StartTransition
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::StartTransition), this, currentCamMode);

	// CCamera::StartTransitionWhenNotFinishedInter
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::StartTransitionWhenNotFinishedInter), this, currentCamMode);

	// CCamera::StopCooperativeCamMode
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::StopCooperativeCamMode), this);

	// CCamera::StoreValuesDuringInterPol
	// plugin::CallMethodDynGlobal<CCamera *, CVector *, CVector *, CVector *, float *>(gaddrof(CCamera::StoreValuesDuringInterPol), this, SourceDuringInter, TargetDuringInter, UpDuringInter, FOVDuringInter);

	// CCamera::TakeControl
	// plugin::CallMethodDynGlobal<CCamera *, CEntity *, short, short, int>(gaddrof(CCamera::TakeControl), this, target, ModeToGoTo, TypeOfSwitch, WhoIsInControlOfTheCamera);

	// CCamera::TakeControlAttachToEntity
	// plugin::CallMethodDynGlobal<CCamera *, CEntity *, CEntity *, CVector *, CVector *, float, short, int>(gaddrof(CCamera::TakeControlAttachToEntity), this, target, attached, AttachedCamOffset, AttachedCamLookAt, AttachedCamAngle, TypeOfSwitch, WhoIsInControlOfTheCamera);

	// CCamera::TakeControlNoEntity
	// plugin::CallMethodDynGlobal<CCamera *, CVector const *, short, int>(gaddrof(CCamera::TakeControlNoEntity), this, FixedModeVector, TypeOfSwitch, WhoIsInControlOfTheCamera);

	// CCamera::TakeControlWithSpline
	// plugin::CallMethodDynGlobal<CCamera *, short>(gaddrof(CCamera::TakeControlWithSpline), this, TypeOfSwitch);

	// CCamera::TryToStartNewCamMode
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *, int>(gaddrof(CCamera::TryToStartNewCamMode), this, CamSequence);
	0AA8: call_method_return 0x51E560 struct [CCamera] num_params 1 pop 0 [CamSequence] func_ret [bool]

	// CCamera::UpdateAimingCoors
	// plugin::CallMethodDynGlobal<CCamera *, CVector const *>(gaddrof(CCamera::UpdateAimingCoors), this, AimingTargetCoors);

	// CCamera::UpdateSoundDistances
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::UpdateSoundDistances), this);

	// CCamera::UpdateTargetEntity
	// plugin::CallMethodDynGlobal<CCamera *>(gaddrof(CCamera::UpdateTargetEntity), this);

	// CCamera::Using1stPersonWeaponMode
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::Using1stPersonWeaponMode), this);
	0AA8: call_method_return 0x50BFF0 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::VectorMoveLinear
	// plugin::CallMethodDynGlobal<CCamera *, CVector *, CVector *, float, bool>(gaddrof(CCamera::VectorMoveLinear), this, MoveLinearPosnEnd, MoveLinearPosnStart, duration, bMoveLinearWithEase);

	// CCamera::VectorMoveRunning
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::VectorMoveRunning), this);
	0AA8: call_method_return 0x4748A0 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::VectorTrackLinear
	// plugin::CallMethodDynGlobal<CCamera *, CVector *, CVector *, float, bool>(gaddrof(CCamera::VectorTrackLinear), this, TrackLinearStartPoint, TrackLinearEndPoint, duration, bEase);

	// CCamera::VectorTrackRunning
	// plugin::CallMethodAndReturnDynGlobal<bool, CCamera *>(gaddrof(CCamera::VectorTrackRunning), this);
	0AA8: call_method_return 0x474870 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::SetCamCollisionVarDataSet
	// plugin::CallDynGlobal<int>(gaddrof(CCamera::SetCamCollisionVarDataSet), index);

	// CCamera::SetColVarsAimWeapon
	// plugin::CallDynGlobal<int>(gaddrof(CCamera::SetColVarsAimWeapon), aimingType);

	// CCamera::SetColVarsPed
	// plugin::CallDynGlobal<int, int>(gaddrof(CCamera::SetColVarsPed), pedtype, nCamPedZoom);

	// CCamera::SetColVarsVehicle
	// plugin::CallDynGlobal<int, int>(gaddrof(CCamera::SetColVarsVehicle), vehicletype, CamVehicleZoom);

plugin_sa\game_sa\CCarAI.cpp:

	// CCarAI::BackToCruisingIfNoWantedLevel
	// plugin::Call<0x41BFA0, CVehicle*>(pVehicle);
	0AA5: call_function 0x41BFA0 num_params 1 pop 1 [pVehicle]

	// CCarAI::CarHasReasonToStop
	// plugin::Call<0x41C050, CVehicle*>(pVehicle);
	0AA5: call_function 0x41C050 num_params 1 pop 1 [pVehicle]

	// CCarAI::AddPoliceCarOccupants
	// plugin::Call<0x41C070, CVehicle*, bool>(pVehicle, arg2);
	0AA5: call_function 0x41C070 num_params 2 pop 2 [pVehicle] [arg2]

	// CCarAI::AddAmbulanceOccupants
	// plugin::Call<0x41C4A0, CVehicle*>(pVehicle);
	0AA5: call_function 0x41C4A0 num_params 1 pop 1 [pVehicle]

	// CCarAI::AddFiretruckOccupants
	// plugin::Call<0x41C600, CVehicle*>(pVehicle);
	0AA5: call_function 0x41C600 num_params 1 pop 1 [pVehicle]

	// CCarAI::TellOccupantsToLeaveCar
	// plugin::Call<0x41C760, CVehicle*>(pVehicle);
	0AA5: call_function 0x41C760 num_params 1 pop 1 [pVehicle]

	// CCarAI::TellCarToFollowOtherCar
	// plugin::Call<0x41C960, CVehicle*, CVehicle*, float>(pVehicle1, pVehicle2, radius);
	0AA5: call_function 0x41C960 num_params 3 pop 3 [pVehicle1] [pVehicle2] [radius]

	// CCarAI::FindPoliceBikeMissionForWantedLevel
	// plugin::CallAndReturn<char, 0x41CA40>();
	0AA7: call_function_return 0x41CA40 num_params 0 pop 0 func_ret [char]

	// CCarAI::FindPoliceBoatMissionForWantedLevel
	// plugin::CallAndReturn<char, 0x41CA50>();
	0AA7: call_function_return 0x41CA50 num_params 0 pop 0 func_ret [char]

	// CCarAI::FindPoliceCarSpeedForWantedLevel
	// plugin::CallAndReturn<int, 0x41CAA0, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x41CAA0 num_params 1 pop 1 [pVehicle] func_ret [int]

	// CCarAI::GetCarToGoToCoors
	// plugin::CallAndReturn<float, 0x41CE30, CVehicle*, CVector*, int, bool>(pVehicle1, pVector, drivingStyle, bSpeedLimit20);
	0AA7: call_function_return 0x41CE30 num_params 4 pop 4 [pVehicle1] [pVector] [drivingStyle] [bSpeedLimit20] func_ret [float]

	// CCarAI::GetCarToParkAtCoors
	// plugin::CallAndReturn<float, 0x41D350, CVehicle*, CVector*>(pVehicle, pVector);
	0AA7: call_function_return 0x41D350 num_params 2 pop 2 [pVehicle] [pVector] func_ret [float]

	// CCarAI::MellowOutChaseSpeed
	// plugin::Call<0x41D3D0, CVehicle*>(pVehicle);
	0AA5: call_function 0x41D3D0 num_params 1 pop 1 [pVehicle]

	// CCarAI::MakeWayForCarWithSiren
	// plugin::Call<0x41D660, CVehicle*>(pVehicle);
	0AA5: call_function 0x41D660 num_params 1 pop 1 [pVehicle]

	// CCarAI::UpdateCarAI
	// plugin::Call<0x41DA30, CVehicle*>(pVehicle);
	0AA5: call_function 0x41DA30 num_params 1 pop 1 [pVehicle]

	// CCarAI::FindPoliceCarMissionForWantedLevel
	// plugin::CallAndReturn<char, 0x41C9D0>();
	0AA7: call_function_return 0x41C9D0 num_params 0 pop 0 func_ret [char]

plugin_sa\game_sa\CCarCtrl.cpp:

	// CCarCtrl::ChooseBoatModel
	// plugin::CallAndReturn<int, 0x421970>();
	0AA7: call_function_return 0x421970 num_params 0 pop 0 func_ret [int]

	// CCarCtrl::ChooseCarModelToLoad
	// plugin::CallAndReturn<int, 0x421900, int>(arg1);
	0AA7: call_function_return 0x421900 num_params 1 pop 1 [arg1] func_ret [int]

	// CCarCtrl::ChooseGangCarModel
	// plugin::CallAndReturn<int, 0x421A40, int>(arg1);
	0AA7: call_function_return 0x421A40 num_params 1 pop 1 [arg1] func_ret [int]

	// CCarCtrl::ChooseModel
	// plugin::CallAndReturn<int, 0x424CE0, int*>(arg1);
	0AA7: call_function_return 0x424CE0 num_params 1 pop 1 [arg1] func_ret [int]

	// CCarCtrl::ChoosePoliceCarModel
	// plugin::CallAndReturn<int, 0x421980, unsigned int>(arg0);
	0AA7: call_function_return 0x421980 num_params 1 pop 1 [arg0] func_ret [int]

	// CCarCtrl::ClearInterestingVehicleList
	// plugin::Call<0x423F00>();
	0AA5: call_function 0x423F00 num_params 0 pop 0

	// CCarCtrl::ClipTargetOrientationToLink
	// plugin::Call<0x422760, CVehicle*, CCarPathLinkAddress, char, float*, float, float>(pVehicle, arg2, arg3, arg4, arg5, arg6);
	0AA5: call_function 0x422760 num_params 6 pop 6 [pVehicle] [arg2] [arg3] [arg4] [arg5] [arg6]

	// CCarCtrl::CreateCarForScript
	// plugin::CallAndReturn<CVehicle*, 0x431F80, int, CVector, unsigned char>(modelid, posn, MissionCleanUpFlag);
	0AA7: call_function_return 0x431F80 num_params 3 pop 3 [modelid] [posn] [MissionCleanUpFlag] func_ret [CVehicle*]

	// CCarCtrl::CreateConvoy
	// plugin::CallAndReturn<bool, 0x42C740, CVehicle*, int>(pVehicle, arg2);
	0AA7: call_function_return 0x42C740 num_params 2 pop 2 [pVehicle] [arg2] func_ret [bool]

	// CCarCtrl::CreatePoliceChase
	// plugin::CallAndReturn<bool, 0x42C2B0, CVehicle*, int, CNodeAddress>(pVehicle, arg2, NodeAddress);
	0AA7: call_function_return 0x42C2B0 num_params 3 pop 3 [pVehicle] [arg2] [NodeAddress] func_ret [bool]

	// CCarCtrl::DealWithBend_Racing
	// plugin::CallAndReturn<bool, 0x428040, CVehicle*, CCarPathLinkAddress, CCarPathLinkAddress, CCarPathLinkAddress, CCarPathLinkAddress, char, char, char, char, float, float*, float*, float*, float*, CVector*>(pVehicle, LinkAddress1, LinkAddress2, LinkAddress3, LinkAddress4, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, pVector);
	0AA7: call_function_return 0x428040 num_params 15 pop 15 [pVehicle] [LinkAddress1] [LinkAddress2] [LinkAddress3] [LinkAddress4] [arg6] [arg7] [arg8] [arg9] [arg10] [arg11] [arg12] [arg13] [arg14] [pVector] func_ret [bool]

	// CCarCtrl::DragCarToPoint
	// plugin::Call<0x42EC90, CVehicle*, CVector*>(pVehicle, pVector);
	0AA5: call_function 0x42EC90 num_params 2 pop 2 [pVehicle] [pVector]

	// CCarCtrl::FindAngleToWeaveThroughTraffic
	// plugin::CallAndReturn<float, 0x4325C0, CVehicle*, CPhysical*, float, float, float>(pVehicle, pPhysical, arg3, arg4, arg5);
	0AA7: call_function_return 0x4325C0 num_params 5 pop 5 [pVehicle] [pPhysical] [arg3] [arg4] [arg5] func_ret [float]

	// CCarCtrl::FindIntersection2Lines
	// plugin::Call<0x4226F0, float, float, float, float, float, float, float, float, float*, float*>(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	0AA5: call_function 0x4226F0 num_params 10 pop 10 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10]

	// CCarCtrl::FindLinksToGoWithTheseNodes
	// plugin::Call<0x42B470, CVehicle*>(pVehicle);
	0AA5: call_function 0x42B470 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::FindMaximumSpeedForThisCarInTraffic
	// plugin::CallAndReturn<float, 0x434400, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x434400 num_params 1 pop 1 [pVehicle] func_ret [float]

	// CCarCtrl::FindNodesThisCarIsNearestTo
	// plugin::Call<0x42BD20, CVehicle*, CNodeAddress&, CNodeAddress&>(pVehicle, NodeAddress1, NodeAddress2);
	0AA5: call_function 0x42BD20 num_params 3 pop 3 [pVehicle] [NodeAddress1] [NodeAddress2]

	// CCarCtrl::FindPathDirection
	// plugin::CallAndReturn<char, 0x422090, CNodeAddress, CNodeAddress, CNodeAddress, bool*>(NodeAddress1, NodeAddress2, NodeAddress3, arg4);
	0AA7: call_function_return 0x422090 num_params 4 pop 4 [NodeAddress1] [NodeAddress2] [NodeAddress3] [arg4] func_ret [char]

	// CCarCtrl::FindPercDependingOnDistToLink
	// plugin::CallAndReturn<float, 0x422620, CVehicle*, CCarPathLinkAddress>(pVehicle, LinkAddress);
	0AA7: call_function_return 0x422620 num_params 2 pop 2 [pVehicle] [LinkAddress] func_ret [float]

	// CCarCtrl::FindSequenceElement
	// plugin::CallAndReturn<int, 0x421770, int>(arg1);
	0AA7: call_function_return 0x421770 num_params 1 pop 1 [arg1] func_ret [int]

	// CCarCtrl::FindSpeedMultiplier
	// plugin::CallAndReturn<float, 0x4224E0, float, float, float, float>(arg1, arg2, arg3, arg4);
	0AA7: call_function_return 0x4224E0 num_params 4 pop 4 [arg1] [arg2] [arg3] [arg4] func_ret [float]

	// CCarCtrl::FindSpeedMultiplierWithSpeedFromNodes
	// plugin::CallAndReturn<float, 0x424130, char>(arg1);
	0AA7: call_function_return 0x424130 num_params 1 pop 1 [arg1] func_ret [float]

	// CCarCtrl::FireHeliRocketsAtTarget
	// plugin::Call<0x42B270, CAutomobile*, CEntity*>(pEntityLauncher, pEntity);
	0AA5: call_function 0x42B270 num_params 2 pop 2 [pEntityLauncher] [pEntity]

	// CCarCtrl::FlyAIHeliInCertainDirection
	// plugin::Call<0x429A70, CHeli*, float, float, bool>(pHeli, arg2, arg3, arg4);
	0AA5: call_function 0x429A70 num_params 4 pop 4 [pHeli] [arg2] [arg3] [arg4]

	// CCarCtrl::FlyAIHeliToTarget_FixedOrientation
	// plugin::Call<0x423940, CHeli*, float, CVector>(pHeli, Orientation, posn);
	0AA5: call_function 0x423940 num_params 3 pop 3 [pHeli] [Orientation] [posn]

	// CCarCtrl::FlyAIPlaneInCertainDirection
	// plugin::Call<0x423000, CPlane*>(pPlane);
	0AA5: call_function 0x423000 num_params 1 pop 1 [pPlane]

	// CCarCtrl::GenerateCarCreationCoors2
	// plugin::CallAndReturn<bool, 0x424210, CVector, float, float, float, bool, float, float, CVector*, CNodeAddress*, CNodeAddress*, float*, bool, bool>(posn, radius, arg3, arg4, arg5, arg6, arg7, pOrigin, pNodeAddress1, pNodeAddress12, arg11, arg12, arg13);
	0AA7: call_function_return 0x424210 num_params 13 pop 13 [posn] [radius] [arg3] [arg4] [arg5] [arg6] [arg7] [pOrigin] [pNodeAddress1] [pNodeAddress12] [arg11] [arg12] [arg13] func_ret [bool]

	// CCarCtrl::GenerateEmergencyServicesCar
	// plugin::Call<0x42F9C0>();
	0AA5: call_function 0x42F9C0 num_params 0 pop 0

	// CCarCtrl::GenerateOneEmergencyServicesCar
	// plugin::CallAndReturn<bool, 0x42B7D0, unsigned int, CVector>(modelID, posn);
	0AA7: call_function_return 0x42B7D0 num_params 2 pop 2 [modelID] [posn] func_ret [bool]

	// CCarCtrl::GenerateOneRandomCar
	// plugin::Call<0x430050>();
	0AA5: call_function 0x430050 num_params 0 pop 0

	// CCarCtrl::GenerateRandomCars
	// plugin::Call<0x4341C0>();
	0AA5: call_function 0x4341C0 num_params 0 pop 0

	// CCarCtrl::GetAIHeliToAttackPlayer
	// plugin::Call<0x42F3C0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42F3C0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::GetAIHeliToFlyInDirection
	// plugin::Call<0x42A730, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42A730 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::GetAIPlaneToAttackPlayer
	// plugin::Call<0x429780, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x429780 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::GetAIPlaneToDoDogFight
	// plugin::Call<0x429890, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x429890 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::GetAIPlaneToDoDogFightAgainstPlayer
	// plugin::Call<0x42F370, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42F370 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::GetNewVehicleDependingOnCarModel
	// plugin::CallAndReturn<CVehicle*, 0x421440, int, unsigned char>(modelID, createdBy);
	0AA7: call_function_return 0x421440 num_params 2 pop 2 [modelID] [createdBy] func_ret [CVehicle*]

	// CCarCtrl::Init
	// plugin::Call<0x4212E0>();
	0AA5: call_function 0x4212E0 num_params 0 pop 0

	// CCarCtrl::InitSequence
	// plugin::Call<0x421740, int>(SequenceElements);
	0AA5: call_function 0x421740 num_params 1 pop 1 [SequenceElements]

	// CCarCtrl::IsAnyoneParking
	// plugin::CallAndReturn<bool, 0x42C250>();
	0AA7: call_function_return 0x42C250 num_params 0 pop 0 func_ret [bool]

	// CCarCtrl::IsThisAnAppropriateNode
	// plugin::CallAndReturn<bool, 0x42DAB0, CVehicle*, CNodeAddress, CNodeAddress, CNodeAddress, bool>(pVehicle, NodeAddress1, NodeAddress2, NodeAddress3, arg5);
	0AA7: call_function_return 0x42DAB0 num_params 5 pop 5 [pVehicle] [NodeAddress1] [NodeAddress2] [NodeAddress3] [arg5] func_ret [bool]

	// CCarCtrl::IsThisVehicleInteresting
	// plugin::CallAndReturn<bool, 0x423EA0, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x423EA0 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CCarCtrl::JoinCarWithRoadAccordingToMission
	// plugin::Call<0x432CB0, CVehicle*>(pVehicle);
	0AA5: call_function 0x432CB0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::JoinCarWithRoadSystem
	// plugin::Call<0x42F5A0, CVehicle*>(pVehicle);
	0AA5: call_function 0x42F5A0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::JoinCarWithRoadSystemGotoCoors
	// plugin::CallAndReturn<bool, 0x42F870, CVehicle*, CVector const&, bool, bool>(pVehicle, posn, unused, bIsBoat);
	0AA7: call_function_return 0x42F870 num_params 4 pop 4 [pVehicle] [posn] [unused] [bIsBoat] func_ret [bool]

	// CCarCtrl::PickNextNodeAccordingStrategy
	// plugin::CallAndReturn<bool, 0x432B10, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x432B10 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CCarCtrl::PickNextNodeRandomly
	// plugin::Call<0x42DE80, CVehicle*>(pVehicle);
	0AA5: call_function 0x42DE80 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::PickNextNodeToChaseCar
	// plugin::CallAndReturn<bool, 0x426EF0, CVehicle*, float, float, float>(pVehicle, x_dest, y_dest, z_dest);
	0AA7: call_function_return 0x426EF0 num_params 4 pop 4 [pVehicle] [x_dest] [y_dest] [z_dest] func_ret [bool]

	// CCarCtrl::PickNextNodeToFollowPath
	// plugin::CallAndReturn<bool, 0x427740, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x427740 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CCarCtrl::PossiblyFireHSMissile
	// plugin::Call<0x429600, CVehicle*, CEntity*>(pEntityLauncher, pTargetEntity);
	0AA5: call_function 0x429600 num_params 2 pop 2 [pEntityLauncher] [pTargetEntity]

	// CCarCtrl::PossiblyRemoveVehicle
	// plugin::Call<0x424F80, CVehicle*>(pVehicle);
	0AA5: call_function 0x424F80 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::PruneVehiclesOfInterest
	// plugin::Call<0x423F10>();
	0AA5: call_function 0x423F10 num_params 0 pop 0

	// CCarCtrl::ReInit
	// plugin::Call<0x4213B0>();
	0AA5: call_function 0x4213B0 num_params 0 pop 0

	// CCarCtrl::ReconsiderRoute
	// plugin::Call<0x42FC40, CVehicle*>(pVehicle);
	0AA5: call_function 0x42FC40 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::RegisterVehicleOfInterest
	// plugin::Call<0x423DE0, CVehicle*>(pVehicle);
	0AA5: call_function 0x423DE0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::RemoveCarsIfThePoolGetsFull
	// plugin::Call<0x4322B0>();
	0AA5: call_function 0x4322B0 num_params 0 pop 0

	// CCarCtrl::RemoveDistantCars
	// plugin::Call<0x42CD10>();
	0AA5: call_function 0x42CD10 num_params 0 pop 0

	// CCarCtrl::RemoveFromInterestingVehicleList
	// plugin::Call<0x423ED0, CVehicle*>(pVehicle);
	0AA5: call_function 0x423ED0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::ScanForPedDanger
	// plugin::Call<0x42CE40, CVehicle*>(pVehicle);
	0AA5: call_function 0x42CE40 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::ScriptGenerateOneEmergencyServicesCar
	// plugin::CallAndReturn<bool, 0x42FBC0, unsigned int, CVector>(modelID, posn);
	0AA7: call_function_return 0x42FBC0 num_params 2 pop 2 [modelID] [posn] func_ret [bool]

	// CCarCtrl::SetCoordsOfScriptCar
	// plugin::Call<0x4342A0, CVehicle*, float, float, float, unsigned char, unsigned char>(pVehicle, x, y, z, arg5, arg6);
	0AA5: call_function 0x4342A0 num_params 6 pop 6 [pVehicle] [x] [y] [z] [arg5] [arg6]

	// CCarCtrl::SetUpDriverAndPassengersForVehicle
	// plugin::Call<0x4217C0, CVehicle*, int, int, bool, bool, int>(pVehicle, arg2, arg3, arg4, arg5, passengersNum);
	0AA5: call_function 0x4217C0 num_params 6 pop 6 [pVehicle] [arg2] [arg3] [arg4] [arg5] [passengersNum]

	// CCarCtrl::SlowCarDownForCarsSectorList
	// plugin::Call<0x432420, CPtrList&, CVehicle*, float, float, float, float, float*, float>(PtrList, pVehicle, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x432420 num_params 8 pop 8 [PtrList] [pVehicle] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SlowCarDownForObject
	// plugin::Call<0x426220, CEntity*, CVehicle*, float*, float>(pEntity, pVehicle, arg3, arg4);
	0AA5: call_function 0x426220 num_params 4 pop 4 [pEntity] [pVehicle] [arg3] [arg4]

	// CCarCtrl::SlowCarDownForObjectsSectorList
	// plugin::Call<0x42D4F0, CPtrList&, CVehicle*, float, float, float, float, float*, float>(PtrList, pVehicle, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x42D4F0 num_params 8 pop 8 [PtrList] [pVehicle] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SlowCarDownForOtherCar
	// plugin::Call<0x42D0E0, CEntity*, CVehicle*, float*, float>(pCar1, pCar2, arg3, arg4);
	0AA5: call_function 0x42D0E0 num_params 4 pop 4 [pCar1] [pCar2] [arg3] [arg4]

	// CCarCtrl::SlowCarDownForPedsSectorList
	// plugin::Call<0x425440, CPtrList&, CVehicle*, float, float, float, float, float*, float>(PtrList, pVehicle, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x425440 num_params 8 pop 8 [PtrList] [pVehicle] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SlowCarOnRailsDownForTrafficAndLights
	// plugin::Call<0x434790, CVehicle*>(pVehicle);
	0AA5: call_function 0x434790 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::SteerAIBoatWithPhysicsAttackingPlayer
	// plugin::Call<0x428DE0, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x428DE0 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAIBoatWithPhysicsCirclingPlayer
	// plugin::Call<0x429090, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x429090 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAIBoatWithPhysicsHeadingForTarget
	// plugin::Call<0x428BE0, CVehicle*, float, float, float*, float*, float*>(pVehicle, arg2, arg3, arg4, arg5, arg6);
	0AA5: call_function 0x428BE0 num_params 6 pop 6 [pVehicle] [arg2] [arg3] [arg4] [arg5] [arg6]

	// CCarCtrl::SteerAICarBlockingPlayerForwardAndBack
	// plugin::Call<0x422B20, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x422B20 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarParkParallel
	// plugin::Call<0x433BA0, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x433BA0 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarParkPerpendicular
	// plugin::Call<0x433EA0, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x433EA0 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarTowardsPointInEscort
	// plugin::Call<0x4336D0, CVehicle*, CVehicle*, float, float, float*, float*, float*, bool*>(pVehicle1, pVehicle2, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4336D0 num_params 8 pop 8 [pVehicle1] [pVehicle2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SteerAICarWithPhysics
	// plugin::Call<0x437C20, CVehicle*>(pVehicle);
	0AA5: call_function 0x437C20 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::SteerAICarWithPhysicsFollowPath
	// plugin::Call<0x434900, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x434900 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarWithPhysicsFollowPath_Racing
	// plugin::Call<0x435830, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x435830 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarWithPhysicsFollowPreRecordedPath
	// plugin::Call<0x432DD0, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x432DD0 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarWithPhysicsHeadingForTarget
	// plugin::Call<0x433280, CVehicle*, CPhysical*, float, float, float*, float*, float*, bool*>(pVehicle, pTarget, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x433280 num_params 8 pop 8 [pVehicle] [pTarget] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget
	// plugin::Call<0x4335E0, CVehicle*, CEntity*, float, float, float, float, float*, float*, float*, bool*>(pVehicle, Unusued, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	0AA5: call_function 0x4335E0 num_params 10 pop 10 [pVehicle] [Unusued] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10]

	// CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget_Stop
	// plugin::Call<0x428990, CVehicle*, float, float, float, float, float*, float*, float*, bool*>(pVehicle, x, y, arg4, arg5, arg6, arg7, arg8, arg9);
	0AA5: call_function 0x428990 num_params 9 pop 9 [pVehicle] [x] [y] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9]

	// CCarCtrl::SteerAICarWithPhysics_OnlyMission
	// plugin::Call<0x436A90, CVehicle*, float*, float*, float*, bool*>(pVehicle, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x436A90 num_params 5 pop 5 [pVehicle] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAIHeliAsPoliceHeli
	// plugin::Call<0x42AAD0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42AAD0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliFlyingAwayFromPlayer
	// plugin::Call<0x42ACB0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42ACB0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliToCrashAndBurn
	// plugin::Call<0x4238E0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x4238E0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliToFollowEntity
	// plugin::Call<0x42A750, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42A750 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliToKeepEntityInView
	// plugin::Call<0x42AEB0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42AEB0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliToLand
	// plugin::Call<0x42AD30, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42AD30 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIHeliTowardsTargetCoors
	// plugin::Call<0x42A630, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x42A630 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIPlaneToCrashAndBurn
	// plugin::Call<0x423880, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x423880 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIPlaneToFollowEntity
	// plugin::Call<0x4237F0, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x4237F0 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::SteerAIPlaneTowardsTargetCoors
	// plugin::Call<0x423790, CAutomobile*>(pAutomobile);
	0AA5: call_function 0x423790 num_params 1 pop 1 [pAutomobile]

	// CCarCtrl::StopCarIfNodesAreInvalid
	// plugin::CallAndReturn<bool, 0x422590, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x422590 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CCarCtrl::SwitchBetweenPhysicsAndGhost
	// plugin::Call<0x4222A0, CVehicle*>(pVehicle);
	0AA5: call_function 0x4222A0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::SwitchVehicleToRealPhysics
	// plugin::Call<0x423FC0, CVehicle*>(pVehicle);
	0AA5: call_function 0x423FC0 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::TestCollisionBetween2MovingRects
	// plugin::CallAndReturn<float, 0x425B30, CVehicle*, CVehicle*, float, float, CVector*, CVector*>(pVehicle1, pVehicle2, arg3, arg4, pVector1, pVector2);
	0AA7: call_function_return 0x425B30 num_params 6 pop 6 [pVehicle1] [pVehicle2] [arg3] [arg4] [pVector1] [pVector2] func_ret [float]

	// CCarCtrl::TestCollisionBetween2MovingRects_OnlyFrontBumper
	// plugin::CallAndReturn<float, 0x425F70, CVehicle*, CVehicle*, float, float, CVector*, CVector*>(pVehicle1, pVehicle2, arg3, arg4, pVector1, pVector2);
	0AA7: call_function_return 0x425F70 num_params 6 pop 6 [pVehicle1] [pVehicle2] [arg3] [arg4] [pVector1] [pVector2] func_ret [float]

	// CCarCtrl::TestWhetherToFirePlaneGuns
	// plugin::Call<0x429520, CVehicle*, CEntity*>(pVehicle, pTarget);
	0AA5: call_function 0x429520 num_params 2 pop 2 [pVehicle] [pTarget]

	// CCarCtrl::ThisVehicleShouldTryNotToTurn
	// plugin::CallAndReturn<bool, 0x421FE0, CVehicle*>(pVehicle);
	0AA7: call_function_return 0x421FE0 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CCarCtrl::TriggerDogFightMoves
	// plugin::Call<0x429300, CVehicle*, CVehicle*>(pVehicle1, pVehicle2);
	0AA5: call_function 0x429300 num_params 2 pop 2 [pVehicle1] [pVehicle2]

	// CCarCtrl::UpdateCarCount
	// plugin::Call<0x424000, CVehicle*, unsigned char>(pVehicle, bDecrease);
	0AA5: call_function 0x424000 num_params 2 pop 2 [pVehicle] [bDecrease]

	// CCarCtrl::UpdateCarOnRails
	// plugin::Call<0x436540, CVehicle*>(pVehicle);
	0AA5: call_function 0x436540 num_params 1 pop 1 [pVehicle]

	// CCarCtrl::WeaveForObject
	// plugin::Call<0x426BC0, CEntity*, CVehicle*, float*, float*>(pEntity, pVehicle, arg3, arg4);
	0AA5: call_function 0x426BC0 num_params 4 pop 4 [pEntity] [pVehicle] [arg3] [arg4]

	// CCarCtrl::WeaveForOtherCar
	// plugin::Call<0x426350, CEntity*, CVehicle*, float*, float*>(pEntity, pVehicle, arg3, arg4);
	0AA5: call_function 0x426350 num_params 4 pop 4 [pEntity] [pVehicle] [arg3] [arg4]

	// CCarCtrl::WeaveThroughCarsSectorList
	// plugin::Call<0x42D680, CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*>(PtrList, pVehicle, pPhysical, arg4, arg5, arg6, arg7, arg8, arg9);
	0AA5: call_function 0x42D680 num_params 9 pop 9 [PtrList] [pVehicle] [pPhysical] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9]

	// CCarCtrl::WeaveThroughObjectsSectorList
	// plugin::Call<0x42D950, CPtrList&, CVehicle*, float, float, float, float, float*, float*>(PtrList, pVehicle, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x42D950 num_params 8 pop 8 [PtrList] [pVehicle] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::WeaveThroughPedsSectorList
	// plugin::Call<0x42D7E0, CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*>(PtrList, pVehicle, pPhysical, arg4, arg5, arg6, arg7, arg8, arg9);
	0AA5: call_function 0x42D7E0 num_params 9 pop 9 [PtrList] [pVehicle] [pPhysical] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9]

plugin_sa\game_sa\CCarEnterExit.cpp:

	// CCarEnterExit::AddInCarAnim
	// plugin::CallDynGlobal<CVehicle const *, CPed *, bool>(gaddrof(CCarEnterExit::AddInCarAnim), vehicle, ped, bAsDriver);

	// CCarEnterExit::CarHasDoorToClose
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int>(gaddrof(CCarEnterExit::CarHasDoorToClose), vehicle, doorId);

	// CCarEnterExit::CarHasDoorToOpen
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int>(gaddrof(CCarEnterExit::CarHasDoorToOpen), vehicle, doorID);

	// CCarEnterExit::CarHasOpenableDoor
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int, CPed const *>(gaddrof(CCarEnterExit::CarHasOpenableDoor), vehicle, DoorID_UnusedArg, ped);

	// CCarEnterExit::CarHasPartiallyOpenDoor
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int>(gaddrof(CCarEnterExit::CarHasPartiallyOpenDoor), vehicle, doorID);

	// CCarEnterExit::ComputeDoorFlag
	// plugin::CallAndReturnDynGlobal<int, CVehicle const *, int, bool>(gaddrof(CCarEnterExit::ComputeDoorFlag), vehicle, doorId, bCheckVehicleType);

	// CCarEnterExit::ComputeOppositeDoorFlag
	// plugin::CallAndReturnDynGlobal<int, CVehicle const *, int, bool>(gaddrof(CCarEnterExit::ComputeOppositeDoorFlag), vehicle, doorId, bCheckVehicleType);

	// CCarEnterExit::ComputePassengerIndexFromCarDoor
	// plugin::CallAndReturnDynGlobal<signed int, CVehicle const *, int>(gaddrof(CCarEnterExit::ComputePassengerIndexFromCarDoor), vehicle, doorID);

	// CCarEnterExit::ComputeSlowJackedPed
	// plugin::CallAndReturnDynGlobal<int, CVehicle const *, int>(gaddrof(CCarEnterExit::ComputeSlowJackedPed), vehicle, doorID);

	// CCarEnterExit::ComputeTargetDoorToEnterAsPassenger
	// plugin::CallAndReturnDynGlobal<signed int, CVehicle const *, int>(gaddrof(CCarEnterExit::ComputeTargetDoorToEnterAsPassenger), pVehicle, nPassengerNum);

	// CCarEnterExit::ComputeTargetDoorToExit
	// plugin::CallAndReturnDynGlobal<int, CVehicle const *, CPed const *>(gaddrof(CCarEnterExit::ComputeTargetDoorToExit), pVehicle, pPed);

	// CCarEnterExit::GetNearestCarDoor
	// plugin::CallAndReturnDynGlobal<bool, CPed const *, CVehicle const *, CVector *, int>(gaddrof(CCarEnterExit::GetNearestCarDoor), pPed, pVehicle, outPos, doorID);

	// CCarEnterExit::GetNearestCarPassengerDoor
	// plugin::CallAndReturnDynGlobal<bool, CPed const *, CVehicle const *, CVector *, int *, bool, bool, bool>(gaddrof(CCarEnterExit::GetNearestCarPassengerDoor), ped, vehicle, outVec, doorId, flag1, flag2, flag3);

	// *CCarEnterExit::GetPositionToOpenCarDoor
	// plugin::CallAndReturnDynGlobal<CVector *, CVector *, CVehicle const *, int>(gaddrof(CCarEnterExit::GetPositionToOpenCarDoor), out, vehicle, doorId);

	// CCarEnterExit::IsCarDoorInUse
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int, int>(gaddrof(CCarEnterExit::IsCarDoorInUse), vehicle, door1Id, door2Id);

	// CCarEnterExit::IsCarDoorReady
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int>(gaddrof(CCarEnterExit::IsCarDoorReady), vehicle, doorID);

	// CCarEnterExit::IsCarQuickJackPossible
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int, CPed const *>(gaddrof(CCarEnterExit::IsCarQuickJackPossible), vehicle, doorID, ped);

	// CCarEnterExit::IsCarSlowJackRequired
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int>(gaddrof(CCarEnterExit::IsCarSlowJackRequired), vehicle, doorID);

	// CCarEnterExit::IsClearToDriveAway
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *>(gaddrof(CCarEnterExit::IsClearToDriveAway), outVehicle);

	// CCarEnterExit::IsPathToDoorBlockedByVehicleCollisionModel
	// plugin::CallAndReturnDynGlobal<bool, CPed const *, CVehicle *, CVector const *>(gaddrof(CCarEnterExit::IsPathToDoorBlockedByVehicleCollisionModel), ped, vehicle, pos);

	// CCarEnterExit::IsPedHealthy
	// plugin::CallAndReturnDynGlobal<bool, CPed *>(gaddrof(CCarEnterExit::IsPedHealthy), vehicle);

	// CCarEnterExit::IsPlayerToQuitCarEnter
	// plugin::CallAndReturnDynGlobal<bool, CPed const *, CVehicle const *, int, CTask *>(gaddrof(CCarEnterExit::IsPlayerToQuitCarEnter), ped, vehicle, StartTime, task);

	// CCarEnterExit::IsRoomForPedToLeaveCar
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, int, CVector *>(gaddrof(CCarEnterExit::IsRoomForPedToLeaveCar), veh, doorID, pos);

	// CCarEnterExit::IsVehicleHealthy
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *>(gaddrof(CCarEnterExit::IsVehicleHealthy), vehicle);

	// CCarEnterExit::IsVehicleStealable
	// plugin::CallAndReturnDynGlobal<bool, CVehicle const *, CPed const *>(gaddrof(CCarEnterExit::IsVehicleStealable), vehicle, ped);

	// CCarEnterExit::MakeUndraggedDriverPedLeaveCar
	// plugin::CallDynGlobal<CVehicle const *, CPed const *>(gaddrof(CCarEnterExit::MakeUndraggedDriverPedLeaveCar), vehicle, ped);

	// CCarEnterExit::MakeUndraggedPassengerPedsLeaveCar
	// plugin::CallDynGlobal<CVehicle const *, CPed const *, CPed const *>(gaddrof(CCarEnterExit::MakeUndraggedPassengerPedsLeaveCar), targetVehicle, draggedPed, ped);

	// CCarEnterExit::QuitEnteringCar
	// plugin::CallDynGlobal<CPed *, CVehicle *, int, bool>(gaddrof(CCarEnterExit::QuitEnteringCar), ped, vehicle, doorID, bCarWasBeingJacked);

	// CCarEnterExit::RemoveCarSitAnim
	// plugin::CallDynGlobal<CPed const *>(gaddrof(CCarEnterExit::RemoveCarSitAnim), ped);

	// CCarEnterExit::RemoveGetInAnims
	// plugin::CallDynGlobal<CPed const *>(gaddrof(CCarEnterExit::RemoveGetInAnims), ped);

	// CCarEnterExit::SetPedInCarDirect
	// plugin::CallDynGlobal<CPed *, CVehicle *, int, bool>(gaddrof(CCarEnterExit::SetPedInCarDirect), ped, vehicle, seatNumber, bAsDriver);

plugin_sa\game_sa\CCarGenerator.cpp:

	// CCarGenerator::CheckForBlockage
	// plugin::CallMethodAndReturnDynGlobal<bool, CCarGenerator *, int>(gaddrof(CCarGenerator::CheckForBlockage), this, modelId);
	0AA8: call_method_return 0x6F32E0 struct [CCarGenerator] num_params 1 pop 0 [modelId] func_ret [bool]

	// CCarGenerator::CheckIfWithinRangeOfAnyPlayers
	// plugin::CallMethodAndReturnDynGlobal<bool, CCarGenerator *>(gaddrof(CCarGenerator::CheckIfWithinRangeOfAnyPlayers), this);
	0AA8: call_method_return 0x6F2F40 struct [CCarGenerator] num_params 0 pop 0 func_ret [bool]

	// CCarGenerator::DoInternalProcessing
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::DoInternalProcessing), this);

	// CCarGenerator::Process
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::Process), this);

	// CCarGenerator::Setup
	// plugin::CallMethodDynGlobal<CCarGenerator *, float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char>(gaddrof(CCarGenerator::Setup), this, x, y, z, angle, modelId, color1, color2, bforceSpawn, alarm_chances, doorLock_chances, minDelay, maxDelay, iplId, bOwnedbyplayer);

	// CCarGenerator::SwitchOff
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::SwitchOff), this);

	// CCarGenerator::SwitchOn
	// plugin::CallMethodDynGlobal<CCarGenerator *>(gaddrof(CCarGenerator::SwitchOn), this);

	// CCarGenerator::CalcNextGen
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CCarGenerator::CalcNextGen));

	// *CCarGenerator::Get
	// plugin::CallAndReturnDynGlobal<CCarGenerator *, unsigned short>(gaddrof(CCarGenerator::Get), index);

plugin_sa\game_sa\CCarPathLink.cpp:

	// CCarPathLink::OneWayLaneOffset
	// plugin::CallMethodAndReturnDynGlobal<float, CCarPathLink *>(gaddrof(CCarPathLink::OneWayLaneOffset), this);
	0AA8: call_method_return 0x44DB00 struct [CCarPathLink] num_params 0 pop 0 func_ret [float]

plugin_sa\game_sa\CCheat.cpp:

	// CCheat::AddToCheatString
	// plugin::CallDynGlobal<char>(gaddrof(CCheat::AddToCheatString), LastPressedKey);

	// CCheat::HandleSpecialCheats
	// plugin::CallDynGlobal<int>(gaddrof(CCheat::HandleSpecialCheats), CheatID);

	// CCheat::VehicleCheat
	// plugin::CallAndReturnDynGlobal<CVehicle*,int>(gaddrof(CCheat::VehicleCheat), vehicleModelId);

	// CCheat::ResetCheats
	// plugin::Call<0x438450>();
	0AA5: call_function 0x438450 num_params 0 pop 0

plugin_sa\game_sa\CCheckpoint.cpp:

	// CCheckpoint::Render
	// plugin::CallMethod<0x725C00, CCheckpoint *>(this);
	0AA6: call_method 0x725C00 struct [CCheckpoint] num_params 0 pop 0

plugin_sa\game_sa\CCheckpoints.cpp:

	// CCheckpoints::DeleteCP
	// plugin::Call<0x722FC0, unsigned int, unsigned short>(id, type);
	0AA5: call_function 0x722FC0 num_params 2 pop 2 [id] [type]

	// CCheckpoints::Init
	// plugin::Call<0x722880>();
	0AA5: call_function 0x722880 num_params 0 pop 0

	// CCheckpoints::PlaceMarker
	// plugin::CallAndReturn<CCheckpoint*, 0x722C40, unsigned int, unsigned short, CVector&, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(id, type, posn, direction, size, red, green, blue, alpha, pulsePeriod, pulseFraction, rotateRate);
	0AA7: call_function_return 0x722C40 num_params 12 pop 12 [id] [type] [posn] [direction] [size] [red] [green] [blue] [alpha] [pulsePeriod] [pulseFraction] [rotateRate] func_ret [CCheckpoint*]

	// CCheckpoints::Render
	// plugin::Call<0x726060>();
	0AA5: call_function 0x726060 num_params 0 pop 0

	// CCheckpoints::SetHeading
	// plugin::Call<0x722970, unsigned int, float>(id, angle);
	0AA5: call_function 0x722970 num_params 2 pop 2 [id] [angle]

	// CCheckpoints::Shutdown
	// plugin::Call<0x7228F0>();
	0AA5: call_function 0x7228F0 num_params 0 pop 0

	// CCheckpoints::Update
	// plugin::Call<0x7229C0>();
	0AA5: call_function 0x7229C0 num_params 0 pop 0

	// CCheckpoints::UpdatePos
	// plugin::Call<0x722900, unsigned int, CVector&>(id, posn);
	0AA5: call_function 0x722900 num_params 2 pop 2 [id] [posn]

plugin_sa\game_sa\CClock.cpp:

	// CClock::GetGameClockMinutesUntil
	// plugin::CallAndReturnDynGlobal<unsigned short, unsigned char, unsigned char>(gaddrof(CClock::GetGameClockMinutesUntil), hours, minutes);

	// CClock::GetIsTimeInRange
	// plugin::CallAndReturnDynGlobal<bool, unsigned char, unsigned char>(gaddrof(CClock::GetIsTimeInRange), hourA, hourB);

	// CClock::Initialise
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CClock::Initialise), milisecondsPerGameMinute);

	// CClock::OffsetClockByADay
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CClock::OffsetClockByADay), timeDirection);

	// CClock::SetGameClock
	// plugin::CallDynGlobal<unsigned char, unsigned char, unsigned char>(gaddrof(CClock::SetGameClock), hours, minutes, day);

plugin_sa\game_sa\CClothes.cpp:

	// CClothes::ConstructPedModel
	// plugin::Call<0x5A81E0, unsigned int, CPedClothesDesc&, CPedClothesDesc const*, bool>(modelid, newclothes, oldclothes, bCutscenePlayer);
	0AA5: call_function 0x5A81E0 num_params 4 pop 4 [modelid] [newclothes] [oldclothes] [bCutscenePlayer]

	// CClothes::RequestMotionGroupAnims
	// plugin::Call<0x5A8120>();
	0AA5: call_function 0x5A8120 num_params 0 pop 0

	// CClothes::RebuildPlayerIfNeeded
	// plugin::Call<0x5A8390, CPlayerPed*>(player);
	0AA5: call_function 0x5A8390 num_params 1 pop 1 [player]

	// CClothes::RebuildPlayer
	// plugin::Call<0x5A82C0, CPlayerPed*, bool>(player, bIgnoreFatAndMuscle);
	0AA5: call_function 0x5A82C0 num_params 2 pop 2 [player] [bIgnoreFatAndMuscle]

	// CClothes::RebuildCutscenePlayer
	// plugin::Call<0x5A8270, CPlayerPed*, int>(player, modelid);
	0AA5: call_function 0x5A8270 num_params 2 pop 2 [player] [modelid]

	// CClothes::LoadClothesFile
	// plugin::Call<0x5A7B30>();
	0AA5: call_function 0x5A7B30 num_params 0 pop 0

	// CClothes::Init
	// plugin::Call<0x5A80D0>();
	0AA5: call_function 0x5A80D0 num_params 0 pop 0

	// CClothes::GetPlayerMotionGroupToLoad
	// plugin::CallAndReturn<int, 0x5A7FB0>();
	0AA7: call_function_return 0x5A7FB0 num_params 0 pop 0 func_ret [int]

	// CClothes::GetDefaultPlayerMotionGroup
	// plugin::CallAndReturn<int, 0x5A81B0>();
	0AA7: call_function_return 0x5A81B0 num_params 0 pop 0 func_ret [int]

plugin_sa\game_sa\CClothesBuilder.cpp:

	// CClothesBuilder::BlendTextures
	// plugin::Call<0x5A5BC0, RwTexture*, RwTexture*, RwTexture*, float, float, float, int, RwTexture*>(texture1, texture2, texture3, factorA, factorB, factorC, arg7, texture4);
	0AA5: call_function 0x5A5BC0 num_params 8 pop 8 [texture1] [texture2] [texture3] [factorA] [factorB] [factorC] [arg7] [texture4]

	// CClothesBuilder::BlendTextures
	// plugin::Call<0x5A59C0, RwTexture*, RwTexture*, RwTexture*, float, float, float>(texture1, texture2, texture3, factorA, factorB, factorC);
	0AA5: call_function 0x5A59C0 num_params 6 pop 6 [texture1] [texture2] [texture3] [factorA] [factorB] [factorC]

	// CClothesBuilder::BlendTextures
	// plugin::Call<0x5A5820, RwTexture*, RwTexture*, float, float>(texture1, texture2, arg3, arg4);
	0AA5: call_function 0x5A5820 num_params 4 pop 4 [texture1] [texture2] [arg3] [arg4]

	// CClothesBuilder::BuildBoneIndexConversionTable
	// plugin::Call<0x5A56E0, unsigned char*, RpHAnimHierarchy*, int>(arg1, arg2, arg3);
	0AA5: call_function 0x5A56E0 num_params 3 pop 3 [arg1] [arg2] [arg3]

	// CClothesBuilder::ConstructGeometryAndSkinArrays
	// plugin::Call<0x5A6530, RpHAnimHierarchy*, RpGeometry**, RwMatrixWeights**, unsigned int**, unsigned int, RpGeometry**, RpMaterial**>(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA5: call_function 0x5A6530 num_params 7 pop 7 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7]

	// CClothesBuilder::ConstructGeometryArray
	// plugin::Call<0x5A55A0, RpGeometry**, unsigned int*, float, float, float>(arg1, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x5A55A0 num_params 5 pop 5 [arg1] [arg2] [arg3] [arg4] [arg5]

	// CClothesBuilder::ConstructTextures
	// plugin::Call<0x5A6040, RwTexDictionary*, unsigned int*, float, float, float>(dict, hashes, factorA, factorB, factorC);
	0AA5: call_function 0x5A6040 num_params 5 pop 5 [dict] [hashes] [factorA] [factorB] [factorC]

	// CClothesBuilder::CopyTexture
	// plugin::CallAndReturn<RwTexture*, 0x5A5730, RwTexture*>(texture);
	0AA7: call_function_return 0x5A5730 num_params 1 pop 1 [texture] func_ret [RwTexture*]

	// CClothesBuilder::CreateSkinnedClump
	// plugin::CallAndReturn<RpClump*, 0x5A69D0, RpClump*, RwTexDictionary*, CPedClothesDesc&, CPedClothesDesc const*, bool>(clump, dict, newclothes, oldclothes, bCutscenePlayer);
	0AA7: call_function_return 0x5A69D0 num_params 5 pop 5 [clump] [dict] [newclothes] [oldclothes] [bCutscenePlayer] func_ret [RpClump*]

	// CClothesBuilder::DestroySkinArrays
	// plugin::Call<0x5A56C0, RwMatrixWeights*, unsigned int*>(arg1, arg2);
	0AA5: call_function 0x5A56C0 num_params 2 pop 2 [arg1] [arg2]

	// CClothesBuilder::FindNearestColour
	// plugin::CallAndReturn<int, 0x5A5F40, RwRGBA*>(color);
	0AA7: call_function_return 0x5A5F40 num_params 1 pop 1 [color] func_ret [int]

	// CClothesBuilder::InitPaletteOctTree
	// plugin::Call<0x5A5EB0, int>(numColors);
	0AA5: call_function 0x5A5EB0 num_params 1 pop 1 [numColors]

	// CClothesBuilder::LoadCdDirectory
	// plugin::Call<0x5A4190>();
	0AA5: call_function 0x5A4190 num_params 0 pop 0

	// CClothesBuilder::PlaceTextureOnTopOfTexture
	// plugin::Call<0x5A57B0, RwTexture*, RwTexture*>(texture1, texture2);
	0AA5: call_function 0x5A57B0 num_params 2 pop 2 [texture1] [texture2]

	// CClothesBuilder::PreprocessClothesDesc
	// plugin::Call<0x5A44C0, CPedClothesDesc&, bool>(arg1, arg2);
	0AA5: call_function 0x5A44C0 num_params 2 pop 2 [arg1] [arg2]

	// CClothesBuilder::ReducePaletteSize
	// plugin::Call<0x5A6870, RwTexture*, int>(texture, numColorsToReduce);
	0AA5: call_function 0x5A6870 num_params 2 pop 2 [texture] [numColorsToReduce]

	// CClothesBuilder::ReleaseGeometry
	// plugin::Call<0x5A47B0, int>(numToRelease);
	0AA5: call_function 0x5A47B0 num_params 1 pop 1 [numToRelease]

	// CClothesBuilder::RequestGeometry
	// plugin::CallMethod<0x5A41C0, CClothesBuilder *, int, unsigned int>(this, modelid, crc);
	0AA6: call_method 0x5A41C0 struct [CClothesBuilder] num_params 2 pop 0 [modelid] [crc]

	// CClothesBuilder::StoreBoneArray
	// plugin::Call<0x5A48B0, RpClump*, int>(clump, arg2);
	0AA5: call_function 0x5A48B0 num_params 2 pop 2 [clump] [arg2]

	// CClothesBuilder::BlendGeometry
	// plugin::CallAndReturn<RpGeometry*, 0x5A4940, RpClump*, char const*, char const*, char const*, float, float, float>(clump, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA7: call_function_return 0x5A4940 num_params 7 pop 7 [clump] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] func_ret [RpGeometry*]

	// CClothesBuilder::BlendGeometry
	// plugin::CallAndReturn<RpGeometry*, 0x5A4F10, RpClump*, char const*, char const*, float, float>(clump, arg2, arg3, arg4, arg5);
	0AA7: call_function_return 0x5A4F10 num_params 5 pop 5 [clump] [arg2] [arg3] [arg4] [arg5] func_ret [RpGeometry*]

	// CClothesBuilder::CopyGeometry
	// plugin::CallAndReturn<RpGeometry*, 0x5A5340, RpClump*, char const*, char const*>(clump, arg2, arg3);
	0AA7: call_function_return 0x5A5340 num_params 3 pop 3 [clump] [arg2] [arg3] func_ret [RpGeometry*]

	// CClothesBuilder::ShutdownPaletteOctTree
	// plugin::Call<0x5A5EE0>();
	0AA5: call_function 0x5A5EE0 num_params 0 pop 0

	// CClothesBuilder::ReducePaletteOctTree
	// plugin::Call<0x5A5EF0, int>(numColorsToReduce);
	0AA5: call_function 0x5A5EF0 num_params 1 pop 1 [numColorsToReduce]

	// CClothesBuilder::AddColour
	// plugin::CallAndReturn<bool, 0x5A5F00, RwRGBA*>(color);
	0AA7: call_function_return 0x5A5F00 num_params 1 pop 1 [color] func_ret [bool]

	// CClothesBuilder::FillPalette
	// plugin::Call<0x5A5F30, RwRGBA*>(color);
	0AA5: call_function 0x5A5F30 num_params 1 pop 1 [color]

plugin_sa\game_sa\CClouds.cpp:

	// CClouds::Shutdown
	// plugin::Call<0x712FA0>();
	0AA5: call_function 0x712FA0 num_params 0 pop 0

	// CClouds::Update
	// plugin::Call<0x712FF0>();
	0AA5: call_function 0x712FF0 num_params 0 pop 0

	// CClouds::SetUpOneSkyPoly
	// plugin::Call<0x713060, CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char>(vert1pos, vert2pos, vert3pos, vert4pos, topRed, topGreen, topBlue, bottomRed, bottomGreen, bottomBlue);
	0AA5: call_function 0x713060 num_params 10 pop 10 [vert1pos] [vert2pos] [vert3pos] [vert4pos] [topRed] [topGreen] [topBlue] [bottomRed] [bottomGreen] [bottomBlue]

	// CClouds::VolumetricCloudsInit
	// plugin::Call<0x7131C0>();
	0AA5: call_function 0x7131C0 num_params 0 pop 0

	// CClouds::VolumetricClouds_GetFirstFreeSlot
	// plugin::CallAndReturn<int, 0x7135C0>();
	0AA7: call_function_return 0x7135C0 num_params 0 pop 0 func_ret [int]

	// CClouds::VolumetricClouds_Delete
	// plugin::Call<0x7135F0, int>(vcSlotIndex);
	0AA5: call_function 0x7135F0 num_params 1 pop 1 [vcSlotIndex]

	// CClouds::VolumetricCloudsGetMaxDistance
	// plugin::CallAndReturn<float, 0x713630>();
	0AA7: call_function_return 0x713630 num_params 0 pop 0 func_ret [float]

	// CClouds::MovingFogInit
	// plugin::Call<0x713660>();
	0AA5: call_function 0x713660 num_params 0 pop 0

	// CClouds::MovingFog_GetFXIntensity
	// plugin::CallAndReturn<float, 0x7136D0>();
	0AA7: call_function_return 0x7136D0 num_params 0 pop 0 func_ret [float]

	// CClouds::MovingFog_GetFirstFreeSlot
	// plugin::CallAndReturn<int, 0x713710>();
	0AA7: call_function_return 0x713710 num_params 0 pop 0 func_ret [int]

	// CClouds::MovingFog_Delete
	// plugin::Call<0x713730, int>(fogSlotIndex);
	0AA5: call_function 0x713730 num_params 1 pop 1 [fogSlotIndex]

	// CClouds::MovingFog_Create
	// plugin::Call<0x713760, CVector*>(posn);
	0AA5: call_function 0x713760 num_params 1 pop 1 [posn]

	// CClouds::Init
	// plugin::Call<0x7138D0>();
	0AA5: call_function 0x7138D0 num_params 0 pop 0

	// CClouds::Render
	// plugin::Call<0x713950>();
	0AA5: call_function 0x713950 num_params 0 pop 0

	// CClouds::RenderSkyPolys
	// plugin::Call<0x714650>();
	0AA5: call_function 0x714650 num_params 0 pop 0

	// CClouds::RenderBottomFromHeight
	// plugin::Call<0x7154B0>();
	0AA5: call_function 0x7154B0 num_params 0 pop 0

	// CClouds::VolumetricClouds_Create
	// plugin::Call<0x715F40, CVector*>(posn);
	0AA5: call_function 0x715F40 num_params 1 pop 1 [posn]

	// CClouds::VolumetricCloudsRender
	// plugin::Call<0x716380>();
	0AA5: call_function 0x716380 num_params 0 pop 0

	// CClouds::MovingFog_Update
	// plugin::Call<0x716B10>();
	0AA5: call_function 0x716B10 num_params 0 pop 0

	// CClouds::MovingFogRender
	// plugin::Call<0x716C90>();
	0AA5: call_function 0x716C90 num_params 0 pop 0

plugin_sa\game_sa\CClumpModelInfo.cpp:

	// CClumpModelInfo::SetFrameIds
	// plugin::CallMethod<0x4C5460, CClumpModelInfo *, RwObjectNameIdAssocation*>(this, data);
	0AA6: call_method 0x4C5460 struct [CClumpModelInfo] num_params 1 pop 0 [data]

plugin_sa\game_sa\CColAccel.cpp:

	// CColAccel::IsCacheLoading
	// plugin::CallAndReturn<bool, 0x5B2AC0>();
	0AA7: call_function_return 0x5B2AC0 num_params 0 pop 0 func_ret [bool]

plugin_sa\game_sa\CColDisk.cpp:

	// CColDisk::Set
	// plugin::CallMethod<0x40FD50, CColDisk *, float, CVector const&, CVector const&, float, unsigned char, unsigned char, unsigned char>(this, startRadius, start, end, endRadius, material, pieceType, lighting);
	0AA6: call_method 0x40FD50 struct [CColDisk] num_params 7 pop 0 [startRadius] [start] [end] [endRadius] [material] [pieceType] [lighting]

plugin_sa\game_sa\CCollision.cpp:

	// CCollision::Update
	// plugin::Call<0x411E20>();
	0AA5: call_function 0x411E20 num_params 0 pop 0

	// CCollision::SortOutCollisionAfterLoad
	// plugin::Call<0x411E30>();
	0AA5: call_function 0x411E30 num_params 0 pop 0

	// CCollision::TestSphereSphere
	// plugin::CallAndReturn<bool, 0x411E70, CColSphere const&, CColSphere const&>(sphere1, sphere2);
	0AA7: call_function_return 0x411E70 num_params 2 pop 2 [sphere1] [sphere2] func_ret [bool]

	// CalculateColPointInsideBox
	// plugin::Call<0x411EC0, CBox const&, CVector const&, CColPoint&>(box, point, colPoint);
	0AA5: call_function 0x411EC0 num_params 3 pop 3 [box] [point] [colPoint]

	// CCollision::TestSphereBox
	// plugin::CallAndReturn<bool, 0x4120C0, CSphere const&, CBox const&>(sphere, box);
	0AA7: call_function_return 0x4120C0 num_params 2 pop 2 [sphere] [box] func_ret [bool]

	// CCollision::ProcessSphereBox
	// plugin::CallAndReturn<bool, 0x412130, CColSphere const&, CColBox const&, CColPoint&, float&>(sphere, box, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x412130 num_params 4 pop 4 [sphere] [box] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::PointInTriangle
	// plugin::CallAndReturn<bool, 0x412700, CVector const&, CVector const*>(point, triPoints);
	0AA7: call_function_return 0x412700 num_params 2 pop 2 [point] [triPoints] func_ret [bool]

	// CCollision::DistToLineSqr
	// plugin::CallAndReturn<float, 0x412850, CVector const*, CVector const*, CVector const*>(lineStart, lineEnd, point);
	0AA7: call_function_return 0x412850 num_params 3 pop 3 [lineStart] [lineEnd] [point] func_ret [float]

	// CCollision::DistToMathematicalLine
	// plugin::CallAndReturn<float, 0x412970, CVector const*, CVector const*, CVector const*>(lineStart, lineEnd, point);
	0AA7: call_function_return 0x412970 num_params 3 pop 3 [lineStart] [lineEnd] [point] func_ret [float]

	// CCollision::DistToMathematicalLine2D
	// plugin::CallAndReturn<float, 0x412A30, float, float, float, float, float, float>(lineStartX, lineStartY, lineEndX, lineEndY, pointX, pointY);
	0AA7: call_function_return 0x412A30 num_params 6 pop 6 [lineStartX] [lineStartY] [lineEndX] [lineEndY] [pointX] [pointY] func_ret [float]

	// CCollision::DistAlongLine2D
	// plugin::CallAndReturn<float, 0x412A80, float, float, float, float, float, float>(lineX, lineY, lineDirX, lineDirY, pointX, pointY);
	0AA7: call_function_return 0x412A80 num_params 6 pop 6 [lineX] [lineY] [lineDirX] [lineDirY] [pointX] [pointY] func_ret [float]

	// CCollision::ProcessLineSphere
	// plugin::CallAndReturn<bool, 0x412AA0, CColLine const&, CColSphere const&, CColPoint&, float&>(line, sphere, colPoint, depth);
	0AA7: call_function_return 0x412AA0 num_params 4 pop 4 [line] [sphere] [colPoint] [depth] func_ret [bool]

	// CCollision::TestLineBox_DW
	// plugin::CallAndReturn<bool, 0x412C70, CColLine const&, CBox const&>(line, box);
	0AA7: call_function_return 0x412C70 num_params 2 pop 2 [line] [box] func_ret [bool]

	// CCollision::TestLineBox
	// plugin::CallAndReturn<bool, 0x413070, CColLine const&, CBox const&>(line, box);
	0AA7: call_function_return 0x413070 num_params 2 pop 2 [line] [box] func_ret [bool]

	// CCollision::TestVerticalLineBox
	// plugin::CallAndReturn<bool, 0x413080, CColLine const&, CBox const&>(line, box);
	0AA7: call_function_return 0x413080 num_params 2 pop 2 [line] [box] func_ret [bool]

	// CCollision::ProcessLineBox
	// plugin::CallAndReturn<bool, 0x413100, CColLine const&, CColBox const&, CColPoint&, float&>(line, box, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x413100 num_params 4 pop 4 [line] [box] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::Test2DLineAgainst2DLine
	// plugin::CallAndReturn<bool, 0x4138D0, float, float, float, float, float, float, float, float>(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY);
	0AA7: call_function_return 0x4138D0 num_params 8 pop 8 [line1StartX] [line1StartY] [line1EndX] [line1EndY] [line2StartX] [line2StartY] [line2EndX] [line2EndY] func_ret [bool]

	// ProcessDiscCollision
	// plugin::CallAndReturn<bool, 0x413960, CColPoint&, CMatrix const&, CColDisk const&, CColPoint&, bool&, float&, CColPoint&>(colPoint1, mat, disk, colPoint2, arg4, arg5, colPoint3);
	0AA7: call_function_return 0x413960 num_params 7 pop 7 [colPoint1] [mat] [disk] [colPoint2] [arg4] [arg5] [colPoint3] func_ret [bool]

	// CCollision::TestLineTriangle
	// plugin::CallAndReturn<bool, 0x413AC0, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&>(line, verts, tri, triPlane);
	0AA7: call_function_return 0x413AC0 num_params 4 pop 4 [line] [verts] [tri] [triPlane] func_ret [bool]

	// CCollision::ProcessLineTriangle
	// plugin::CallAndReturn<bool, 0x4140F0, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&, CStoredCollPoly*>(line, verts, tri, triPlane, colPoint, maxTouchDistance, collPoly);
	0AA7: call_function_return 0x4140F0 num_params 7 pop 7 [line] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] [collPoly] func_ret [bool]

	// CCollision::ProcessVerticalLineTriangle
	// plugin::CallAndReturn<bool, 0x4147E0, CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&, CStoredCollPoly*>(line, verts, tri, triPlane, colPoint, maxTouchDistance, collPoly);
	0AA7: call_function_return 0x4147E0 num_params 7 pop 7 [line] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] [collPoly] func_ret [bool]

	// CCollision::IsStoredPolyStillValidVerticalLine
	// plugin::CallAndReturn<bool, 0x414D70, CVector const&, float, CColPoint&, CStoredCollPoly*>(lineOrigin, lineDist, colPoint, collPoly);
	0AA7: call_function_return 0x414D70 num_params 4 pop 4 [lineOrigin] [lineDist] [colPoint] [collPoly] func_ret [bool]

	// CCollision::GetBoundingBoxFromTwoSpheres
	// plugin::Call<0x415230, CColBox*, CColSphere*, CColSphere*>(bbox, sphere1, sphere2);
	0AA5: call_function 0x415230 num_params 3 pop 3 [bbox] [sphere1] [sphere2]

	// CCollision::IsThisVehicleSittingOnMe
	// plugin::CallAndReturn<bool, 0x4152C0, CVehicle*, CVehicle*>(vehicle, vehicleOnMe);
	0AA7: call_function_return 0x4152C0 num_params 2 pop 2 [vehicle] [vehicleOnMe] func_ret [bool]

	// CCollision::CheckCameraCollisionPeds
	// plugin::CallAndReturn<bool, 0x415320, int, int, CVector*, CVector*, float*>(sectorX, sectorY, pos, dir, arg4);
	0AA7: call_function_return 0x415320 num_params 5 pop 5 [sectorX] [sectorY] [pos] [dir] [arg4] func_ret [bool]

	// CCollision::CheckPeds
	// plugin::CallAndReturn<bool, 0x4154A0, CVector*, CVector*, float*>(pos, dir, arg2);
	0AA7: call_function_return 0x4154A0 num_params 3 pop 3 [pos] [dir] [arg2] func_ret [bool]

	// ResetMadeInvisibleObjects
	// plugin::Call<0x415540>();
	0AA5: call_function 0x415540 num_params 0 pop 0

	// CCollision::SphereCastVsBBox
	// plugin::CallAndReturn<bool, 0x415590, CColSphere*, CColSphere*, CColBox*>(sphere1, sphere2, box);
	0AA7: call_function_return 0x415590 num_params 3 pop 3 [sphere1] [sphere2] [box] func_ret [bool]

	// CCollision::RayPolyPOP
	// plugin::CallAndReturn<bool, 0x415620, CVector*, CVector*, CColTriangle*, CVector*, CVector*>(arg0, arg1, arg2, arg3, arg4);
	0AA7: call_function_return 0x415620 num_params 5 pop 5 [arg0] [arg1] [arg2] [arg3] [arg4] func_ret [bool]

	// CCollision::GetPrincipleAxis
	// plugin::CallAndReturn<int, 0x4156D0, CVector*>(vec);
	0AA7: call_function_return 0x4156D0 num_params 1 pop 1 [vec] func_ret [int]

	// CCollision::PointInPoly
	// plugin::CallAndReturn<bool, 0x415730, CVector*, CColTriangle*, CVector*, CVector*>(point, tri, arg2, triVerts);
	0AA7: call_function_return 0x415730 num_params 4 pop 4 [point] [tri] [arg2] [triVerts] func_ret [bool]

	// CCollision::Closest3
	// plugin::Call<0x415950, CVector*, CVector*>(arg0, arg1);
	0AA5: call_function 0x415950 num_params 2 pop 2 [arg0] [arg1]

	// ClosestSquaredDistanceBetweenFiniteLines
	// plugin::CallAndReturn<float, 0x415A40, CVector*, CVector*, CVector*, CVector*, float>(line1Start, line1End, line2Start, line2End, arg4);
	0AA7: call_function_return 0x415A40 num_params 5 pop 5 [line1Start] [line1End] [line2Start] [line2End] [arg4] func_ret [float]

	// CCollision::SphereCastVersusVsPoly
	// plugin::CallAndReturn<bool, 0x415CF0, CColSphere*, CColSphere*, CColTriangle*, CColTrianglePlane*, CompressedVector*>(sphere1, sphere2, tri, triPlane, verts);
	0AA7: call_function_return 0x415CF0 num_params 5 pop 5 [sphere1] [sphere2] [tri] [triPlane] [verts] func_ret [bool]

	// CCollision::Init
	// plugin::Call<0x416260>();
	0AA5: call_function 0x416260 num_params 0 pop 0

	// CCollision::Shutdown
	// plugin::Call<0x4162E0>();
	0AA5: call_function 0x4162E0 num_params 0 pop 0

	// CCollision::CalculateTrianglePlanes
	// plugin::Call<0x416330, CCollisionData*>(colData);
	0AA5: call_function 0x416330 num_params 1 pop 1 [colData]

	// CCollision::RemoveTrianglePlanes
	// plugin::Call<0x416400, CCollisionData*>(colData);
	0AA5: call_function 0x416400 num_params 1 pop 1 [colData]

	// CCollision::ProcessSphereSphere
	// plugin::CallAndReturn<bool, 0x416450, CColSphere const&, CColSphere const&, CColPoint&, float&>(sphere1, sphere2, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x416450 num_params 4 pop 4 [sphere1] [sphere2] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestSphereTriangle
	// plugin::CallAndReturn<bool, 0x4165B0, CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&>(sphere, verts, tri, triPlane);
	0AA7: call_function_return 0x4165B0 num_params 4 pop 4 [sphere] [verts] [tri] [triPlane] func_ret [bool]

	// CCollision::ProcessSphereTriangle
	// plugin::CallAndReturn<bool, 0x416BA0, CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&>(sphere, verts, tri, triPlane, colPoint, maxTouchDistance);
	0AA7: call_function_return 0x416BA0 num_params 6 pop 6 [sphere] [verts] [tri] [triPlane] [colPoint] [maxTouchDistance] func_ret [bool]

	// CCollision::TestLineSphere
	// plugin::CallAndReturn<bool, 0x417470, CColLine const&, CColSphere const&>(line, sphere);
	0AA7: call_function_return 0x417470 num_params 2 pop 2 [line] [sphere] func_ret [bool]

	// CCollision::DistToLine
	// plugin::CallAndReturn<float, 0x417610, CVector const*, CVector const*, CVector const*>(lineStart, lineEnd, point);
	0AA7: call_function_return 0x417610 num_params 3 pop 3 [lineStart] [lineEnd] [point] func_ret [float]

	// CCollision::TestLineOfSight
	// plugin::CallAndReturn<bool, 0x417730, CColLine const&, CMatrix const&, CColModel&, bool, bool>(line, transform, colModel, doSeeThroughCheck, doShootThroughCheck);
	0AA7: call_function_return 0x417730 num_params 5 pop 5 [line] [transform] [colModel] [doSeeThroughCheck] [doShootThroughCheck] func_ret [bool]

	// CCollision::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x417950, CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool, bool>(line, transform, colModel, colPoint, maxTouchDistance, doSeeThroughCheck, doShootThroughCheck);
	0AA7: call_function_return 0x417950 num_params 7 pop 7 [line] [transform] [colModel] [colPoint] [maxTouchDistance] [doSeeThroughCheck] [doShootThroughCheck] func_ret [bool]

	// CCollision::ProcessVerticalLine
	// plugin::CallAndReturn<bool, 0x417BF0, CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool, bool, CStoredCollPoly*>(line, transform, colModel, colPoint, maxTouchDistance, doSeeThroughCheck, doShootThroughCheck, collPoly);
	0AA7: call_function_return 0x417BF0 num_params 8 pop 8 [line] [transform] [colModel] [colPoint] [maxTouchDistance] [doSeeThroughCheck] [doShootThroughCheck] [collPoly] func_ret [bool]

	// CCollision::SphereCastVsSphere
	// plugin::CallAndReturn<bool, 0x417F20, CColSphere*, CColSphere*, CColSphere*>(arg0, arg1, arg2);
	0AA7: call_function_return 0x417F20 num_params 3 pop 3 [arg0] [arg1] [arg2] func_ret [bool]

	// CCollision::ClosestPointOnLine
	// plugin::Call<0x417FD0, CVector*, CVector*, CVector*, CVector*>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x417FD0 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CCollision::ClosestPointsOnPoly
	// plugin::Call<0x418100, CColTriangle*, CVector*, CVector*, CVector*>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x418100 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CCollision::ClosestPointOnPoly
	// plugin::Call<0x418150, CColTriangle*, CVector*, CVector*>(arg0, arg1, arg2);
	0AA5: call_function 0x418150 num_params 3 pop 3 [arg0] [arg1] [arg2]

	// CCollision::SphereCastVsCaches
	// plugin::CallAndReturn<bool, 0x4181B0, CColSphere*, CVector*, int, CColCacheEntry*, int*, CColCacheEntry*>(sphere, arg1, arg2, arg3, arg4, arg5);
	0AA7: call_function_return 0x4181B0 num_params 6 pop 6 [sphere] [arg1] [arg2] [arg3] [arg4] [arg5] func_ret [bool]

	// CCollision::CalculateTrianglePlanes
	// plugin::Call<0x418580, CColModel*>(colModel);
	0AA5: call_function 0x418580 num_params 1 pop 1 [colModel]

	// CCollision::RemoveTrianglePlanes
	// plugin::Call<0x4185A0, CColModel*>(colModel);
	0AA5: call_function 0x4185A0 num_params 1 pop 1 [colModel]

	// CCollision::ProcessColModels
	// plugin::CallAndReturn<int, 0x4185C0, CMatrix const&, CColModel&, CMatrix const&, CColModel&, CColPoint*, CColPoint*, float*, bool>(transform1, colModel1, transform2, colModel2, colPoint1, colPoint2, maxTouchDistance, arg7);
	0AA7: call_function_return 0x4185C0 num_params 8 pop 8 [transform1] [colModel1] [transform2] [colModel2] [colPoint1] [colPoint2] [maxTouchDistance] [arg7] func_ret [int]

	// CCollision::SphereCastVsEntity
	// plugin::CallAndReturn<bool, 0x419F00, CColSphere*, CColSphere*, CEntity*>(sphere1, sphere2, entity);
	0AA7: call_function_return 0x419F00 num_params 3 pop 3 [sphere1] [sphere2] [entity] func_ret [bool]

	// CCollision::SphereVsEntity
	// plugin::CallAndReturn<bool, 0x41A5A0, CColSphere*, CEntity*>(sphere, entity);
	0AA7: call_function_return 0x41A5A0 num_params 2 pop 2 [sphere] [entity] func_ret [bool]

	// CCollision::CheckCameraCollisionBuildings
	// plugin::CallAndReturn<bool, 0x41A820, int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*>(sectorX, sectorY, arg2, arg3, arg4, arg5);
	0AA7: call_function_return 0x41A820 num_params 6 pop 6 [sectorX] [sectorY] [arg2] [arg3] [arg4] [arg5] func_ret [bool]

	// CCollision::CheckCameraCollisionVehicles
	// plugin::CallAndReturn<bool, 0x41A990, int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*, CVector*>(sectorX, sectorY, arg2, arg3, arg4, arg5, arg6);
	0AA7: call_function_return 0x41A990 num_params 7 pop 7 [sectorX] [sectorY] [arg2] [arg3] [arg4] [arg5] [arg6] func_ret [bool]

	// CCollision::CheckCameraCollisionObjects
	// plugin::CallAndReturn<bool, 0x41AB20, int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*>(sectorX, sectorY, arg2, arg3, arg4, arg5);
	0AA7: call_function_return 0x41AB20 num_params 6 pop 6 [sectorX] [sectorY] [arg2] [arg3] [arg4] [arg5] func_ret [bool]

	// CCollision::BuildCacheOfCameraCollision
	// plugin::CallAndReturn<bool, 0x41AC40, CColSphere*, CColSphere*>(sphere1, sphere2);
	0AA7: call_function_return 0x41AC40 num_params 2 pop 2 [sphere1] [sphere2] func_ret [bool]

	// CCollision::CameraConeCastVsWorldCollision
	// plugin::CallAndReturn<bool, 0x41B000, CColSphere*, CColSphere*, float*, float>(sphere1, sphere2, arg2, arg3);
	0AA7: call_function_return 0x41B000 num_params 4 pop 4 [sphere1] [sphere2] [arg2] [arg3] func_ret [bool]

plugin_sa\game_sa\CCollisionData.cpp:

	// CCollisionData::CCollisionData
	// plugin::CallMethod<0x40F030, CCollisionData *>(this);
	0AA6: call_method 0x40F030 struct [CCollisionData] num_params 0 pop 0

	// CCollisionData::RemoveCollisionVolumes
	// plugin::CallMethod<0x40F070, CCollisionData *>(this);
	0AA6: call_method 0x40F070 struct [CCollisionData] num_params 0 pop 0

	// CCollisionData::Copy
	// plugin::CallMethod<0x40F120, CCollisionData *, CCollisionData const&>(this, arg0);
	0AA6: call_method 0x40F120 struct [CCollisionData] num_params 1 pop 0 [arg0]

	// CCollisionData::CalculateTrianglePlanes
	// plugin::CallMethod<0x40F590, CCollisionData *>(this);
	0AA6: call_method 0x40F590 struct [CCollisionData] num_params 0 pop 0

	// CCollisionData::GetTrianglePoint
	// plugin::CallMethod<0x40F5E0, CCollisionData *, CVector&, int>(this, outVec, vertId);
	0AA6: call_method 0x40F5E0 struct [CCollisionData] num_params 2 pop 0 [outVec] [vertId]

	// CCollisionData::GetShadTrianglePoint
	// plugin::CallMethod<0x40F640, CCollisionData *, CVector&, int>(this, outVec, vertId);
	0AA6: call_method 0x40F640 struct [CCollisionData] num_params 2 pop 0 [outVec] [vertId]

	// CCollisionData::RemoveTrianglePlanes
	// plugin::CallMethod<0x40F6A0, CCollisionData *>(this);
	0AA6: call_method 0x40F6A0 struct [CCollisionData] num_params 0 pop 0

	// CCollisionData::SetLinkPtr
	// plugin::CallMethod<0x40F6C0, CCollisionData *, CLink<CCollisionData*> *>(this, link);
	0AA6: call_method 0x40F6C0 struct [CCollisionData] num_params 1 pop 0 [link]

	// *CCollisionData::GetLinkPtr
	// plugin::CallMethodAndReturn<CLink<CCollisionData*> *, 0x40F6E0, CCollisionData *>(this);
	0AA8: call_method_return 0x40F6E0 struct [*CCollisionData] num_params 0 pop 0 func_ret [CLink<CCollisionData*> *]

plugin_sa\game_sa\CColModel.cpp:

	// CColModel::CColModel
	// plugin::CallMethod<0x40FB60, CColModel *>(this);
	0AA6: call_method 0x40FB60 struct [CColModel] num_params 0 pop 0

	// CColModel::~CColModel
	// plugin::CallMethod<0x40F700, CColModel *>(this);
	0AA6: call_method 0x40F700 struct [CColModel] num_params 0 pop 0

	// CColModel::MakeMultipleAlloc
	// plugin::CallMethod<0x40F740, CColModel *>(this);
	0AA6: call_method 0x40F740 struct [CColModel] num_params 0 pop 0

	// CColModel::operator=
	// plugin::CallMethodAndReturn<CColModel&, 0x40F7C0, CColModel *, CColModel const&>(this, colModel);
	0AA8: call_method_return 0x40F7C0 struct [CColModel] num_params 1 pop 0 [colModel] func_ret [CColModel&]

	// CColModel::AllocateData
	// plugin::CallMethod<0x40F810, CColModel *>(this);
	0AA6: call_method 0x40F810 struct [CColModel] num_params 0 pop 0

	// CColModel::AllocateData
	// plugin::CallMethod<0x40F870, CColModel *, int, int, int, int, int, bool>(this, numSpheres, numBoxes, numLines, numVertices, numTriangles, disks);
	0AA6: call_method 0x40F870 struct [CColModel] num_params 6 pop 0 [numSpheres] [numBoxes] [numLines] [numVertices] [numTriangles] [disks]

	// CColModel::AllocateData
	// plugin::CallMethod<0x40F9B0, CColModel *, int>(this, size);
	0AA6: call_method 0x40F9B0 struct [CColModel] num_params 1 pop 0 [size]

	// CColModel::RemoveCollisionVolumes
	// plugin::CallMethod<0x40F9E0, CColModel *>(this);
	0AA6: call_method 0x40F9E0 struct [CColModel] num_params 0 pop 0

	// CColModel::CalculateTrianglePlanes
	// plugin::CallMethod<0x40FA30, CColModel *>(this);
	0AA6: call_method 0x40FA30 struct [CColModel] num_params 0 pop 0

	// CColModel::RemoveTrianglePlanes
	// plugin::CallMethod<0x40FA40, CColModel *>(this);
	0AA6: call_method 0x40FA40 struct [CColModel] num_params 0 pop 0

	// CColModel::operator new
	// plugin::CallAndReturn<void*, 0x40FC30, unsigned int>(size);
	0AA7: call_function_return 0x40FC30 num_params 1 pop 1 [size] func_ret [void*]

	// CColModel::operator delete
	// plugin::Call<0x40FC40, void*>(data);
	0AA5: call_function 0x40FC40 num_params 1 pop 1 [data]

plugin_sa\game_sa\CColourSet.cpp:

	// CColourSet::CColourSet
	// plugin::CallMethod<0x55F4B0, CColourSet *, int, int>(this, weatherId, timeId);
	0AA6: call_method 0x55F4B0 struct [CColourSet] num_params 2 pop 0 [weatherId] [timeId]

	// CColourSet::Interpolate
	// plugin::CallMethod<0x55F870, CColourSet *, CColourSet*, CColourSet*, float, float, bool>(this, a, b, factor_a, factor_b, bIgnoreSky);
	0AA6: call_method 0x55F870 struct [CColourSet] num_params 5 pop 0 [a] [b] [factor_a] [factor_b] [bIgnoreSky]

plugin_sa\game_sa\CControllerConfigManager.cpp:

	// CControllerConfigManager::GetIsKeyboardKeyDown
	// plugin::CallMethodAndReturn<bool, 0x52DDB0, CControllerConfigManager *, RsKeyCodes>(this, key);
	0AA8: call_method_return 0x52DDB0 struct [CControllerConfigManager] num_params 1 pop 0 [key] func_ret [bool]

	// CControllerConfigManager::GetIsKeyboardKeyJustDown
	// plugin::CallMethodAndReturn<bool, 0x52E450, CControllerConfigManager *, RsKeyCodes>(this, key);
	0AA8: call_method_return 0x52E450 struct [CControllerConfigManager] num_params 1 pop 0 [key] func_ret [bool]

	// CControllerConfigManager::ResetSettingOrder
	// plugin::CallMethod<0x52F5F0, CControllerConfigManager*, e_ControllerAction>(this, action);
	0AA6: call_method 0x52F5F0 struct [CControllerConfigManager] num_params 1 pop 0 [action]

plugin_sa\game_sa\CCover.cpp:

	// CCover::AddCoverPoint
	// plugin::CallDynGlobal<int, CEntity *, CVector *, char, unsigned char>(gaddrof(CCover::AddCoverPoint), maxPeds, coverEntity, position, coverType, direction);

	// CCover::CalculateHorizontalSize
	// plugin::CallAndReturnDynGlobal<float, CColTriangle *, CVector *>(gaddrof(CCover::CalculateHorizontalSize), triangle, vertPositions);

	// CCover::DoLineCheckWithinObject
	// plugin::CallAndReturnDynGlobal<char, CColTriangle *, int, CVector *, CVector *, CVector, CVector>(gaddrof(CCover::DoLineCheckWithinObject), triangle, a2, a3, a4, a5, a6);

	// CCover::DoesCoverPointStillProvideCover
	// plugin::CallAndReturnDynGlobal<bool, CCoverPoint *, CVector>(gaddrof(CCover::DoesCoverPointStillProvideCover), point, position);

	// CCover::Find2HighestPoints
	// plugin::CallDynGlobal<CColTriangle *, CVector *, int &, int &>(gaddrof(CCover::Find2HighestPoints), triangle, vertPositions, outPoint1, outPoint2);

	// *CCover::FindAndReserveCoverPoint
	// plugin::CallAndReturnDynGlobal<CCoverPoint *, CPed *, CVector &, bool>(gaddrof(CCover::FindAndReserveCoverPoint), ped, position, a3);

	// CCover::FindCoordinatesCoverPoint
	// plugin::CallAndReturnDynGlobal<bool, CCoverPoint *, CPed *, CVector &, CVector &>(gaddrof(CCover::FindCoordinatesCoverPoint), point, ped, position, outCoordinates);

	// CCover::FindCoverPointsForThisBuilding
	// plugin::CallDynGlobal<CBuilding *>(gaddrof(CCover::FindCoverPointsForThisBuilding), building);

	// CCover::FindDirFromVector
	// plugin::CallAndReturnDynGlobal<unsigned char, float, float>(gaddrof(CCover::FindDirFromVector), x, y);

	// CCover::RemoveCoverPointIfEntityLost
	// plugin::CallDynGlobal<CCoverPoint *>(gaddrof(CCover::RemoveCoverPointIfEntityLost), point);

	// CCover::RemoveCoverPointsForThisEntity
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CCover::RemoveCoverPointsForThisEntity), entity);

	// CCover::ShouldThisBuildingHaveItsCoverPointsCreated
	// plugin::CallAndReturnDynGlobal<bool, CBuilding *>(gaddrof(CCover::ShouldThisBuildingHaveItsCoverPointsCreated), building);

plugin_sa\game_sa\CCoverPoint.cpp:

	// CCoverPoint::CanAccomodateAnotherPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CCoverPoint *>(gaddrof(CCoverPoint::CanAccomodateAnotherPed), this);
	0AA8: call_method_return 0x698E70 struct [CCoverPoint] num_params 0 pop 0 func_ret [bool]

	// CCoverPoint::ReleaseCoverPointForPed
	// plugin::CallMethodDynGlobal<CCoverPoint *, CPed *>(gaddrof(CCoverPoint::ReleaseCoverPointForPed), this, ped);

	// CCoverPoint::ReserveCoverPointForPed
	// plugin::CallMethodDynGlobal<CCoverPoint *, CPed *>(gaddrof(CCoverPoint::ReserveCoverPointForPed), this, ped);

plugin_sa\game_sa\CCredits.cpp:

	// CCredits::Render
	// plugin::Call<0x53D5B0>();
	0AA5: call_function 0x53D5B0 num_params 0 pop 0

	// CCredits::PrintCreditText
	// plugin::Call<0x5A8660, float, float, unsigned short*, unsigned int&, float, bool>(scaleX, scaleY, text, position, currentOffset, highlighted);
	0AA5: call_function 0x5A8660 num_params 6 pop 6 [scaleX] [scaleY] [text] [position] [currentOffset] [highlighted]

	// CCredits::PrintCreditSpace
	// plugin::Call<0x5A87C0, float, unsigned int&>(spaceSize, position);
	0AA5: call_function 0x5A87C0 num_params 2 pop 2 [spaceSize] [position]

	// CCredits::RenderCredits
	// plugin::Call<0x5A87F0>();
	0AA5: call_function 0x5A87F0 num_params 0 pop 0

	// CCredits::Start
	// plugin::Call<0x7170E0>();
	0AA5: call_function 0x7170E0 num_params 0 pop 0

	// CCredits::Stop
	// plugin::Call<0x717100>();
	0AA5: call_function 0x717100 num_params 0 pop 0

plugin_sa\game_sa\CCullZones.cpp:

	// CZoneDef::IsPointWithin
	// plugin::CallMethodAndReturn<bool, 0x72D850>(this, point);
	0AA8: call_method_return 0x72D850 struct [CZoneDef] num_params 1 pop 0 [point] func_ret [bool]

	// CCullZones::Init
	// plugin::Call<0x72D6B0>();
	0AA5: call_function 0x72D6B0 num_params 0 pop 0

	// CCullZones::Update
	// plugin::Call<0x72DEC0>();
	0AA5: call_function 0x72DEC0 num_params 0 pop 0

	// CCullZones::AddCullZone
	// plugin::Call<0x72DF70>();
	0AA5: call_function 0x72DF70 num_params 0 pop 0

	// CCullZones::AddTunnelAttributeZone
	// plugin::Call<0x72DB50>();
	0AA5: call_function 0x72DB50 num_params 0 pop 0

	// CCullZones::AddMirrorAttributeZone
	// plugin::Call<0x72DC10>();
	0AA5: call_function 0x72DC10 num_params 0 pop 0

	// CCullZones::InRoomForAudio
	// plugin::CallAndReturn<bool, 0x72DD70>();
	0AA7: call_function_return 0x72DD70 num_params 0 pop 0 func_ret [bool]

	// CCullZones::FewerCars
	// plugin::CallAndReturn<bool, 0x72DD80>();
	0AA7: call_function_return 0x72DD80 num_params 0 pop 0 func_ret [bool]

	// CCullZones::CamNoRain
	// plugin::CallAndReturn<bool, 0x72DDB0>();
	0AA7: call_function_return 0x72DDB0 num_params 0 pop 0 func_ret [bool]

	// CCullZones::PlayerNoRain
	// plugin::CallAndReturn<bool, 0x72DDC0>();
	0AA7: call_function_return 0x72DDC0 num_params 0 pop 0 func_ret [bool]

	// CCullZones::FewerPeds
	// plugin::CallAndReturn<bool, 0x72DD90>();
	0AA7: call_function_return 0x72DD90 num_params 0 pop 0 func_ret [bool]

	// CCullZones::NoPolice
	// plugin::CallAndReturn<bool, 0x72DD50>();
	0AA7: call_function_return 0x72DD50 num_params 0 pop 0 func_ret [bool]

	// CCullZones::DoExtraAirResistanceForPlayer
	// plugin::CallAndReturn<bool, 0x72DDD0>();
	0AA7: call_function_return 0x72DDD0 num_params 0 pop 0 func_ret [bool]

	// CCullZones::FindTunnelAttributesForCoors
	// plugin::CallAndReturn<eZoneAttributes, 0x72D9F0>(point);
	0AA7: call_function_return 0x72D9F0 num_params 1 pop 1 [point] func_ret [eZoneAttributes]

	// CCullZones::FindMirrorAttributesForCoors
	// plugin::CallAndReturn<CCullZoneReflection*, 0x72DA70>(cameraPosition);
	0AA7: call_function_return 0x72DA70 num_params 1 pop 1 [cameraPosition] func_ret [CCullZoneReflection*]

	// CCullZones::FindZoneWithStairsAttributeForPlayer
	// plugin::CallAndReturn<CCullZone*, 0x72DAD0>();
	0AA7: call_function_return 0x72DAD0 num_params 0 pop 0 func_ret [CCullZone*]

	// CCullZones::FindAttributesForCoors
	// plugin::CallAndReturn<eZoneAttributes, 0x72D970>(pos);
	0AA7: call_function_return 0x72D970 num_params 1 pop 1 [pos] func_ret [eZoneAttributes]

plugin_sa\game_sa\CCustomCarEnvMapPipeline.cpp:

	// CCustomCarEnvMapPipeline::CustomPipeInstanceCB
	// plugin::CallAndReturn<int,0x5D8490, int, int, int(__cdecl *)(int, int, int)>(arg1, arg2, callback);
	0AA7: call_function_return 0x5D8490 num_params 5 pop 5 [__cdecl *)(int] [int] [int)>(arg1] [arg2] [callback] func_ret [int]

	// CCustomCarEnvMapPipeline::PreRenderUpdate
	// plugin::Call<0x5D8870>();
	0AA5: call_function 0x5D8870 num_params 0 pop 0

	// CCustomCarEnvMapPipeline::pluginEnvMatConstructorCB
	// plugin::CallAndReturn<void*, 0x5D8BD0, void*, int>(object, offset);
	0AA7: call_function_return 0x5D8BD0 num_params 2 pop 2 [object] [offset] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginEnvMatStreamWriteCB
	// plugin::CallAndReturn<RwStream*, 0x5D8CD0, RwStream*, int, void const*, int>(stream, length, arg3, arg4);
	0AA7: call_function_return 0x5D8CD0 num_params 4 pop 4 [stream] [length] [arg3] [arg4] func_ret [RwStream*]

	// CCustomCarEnvMapPipeline::pluginEnvMatStreamGetSizeCB
	// plugin::CallAndReturn<int, 0x5D8D10, void const*>(arg0);
	0AA7: call_function_return 0x5D8D10 num_params 1 pop 1 [arg0] func_ret [int]

	// CCustomCarEnvMapPipeline::pluginEnvAtmConstructorCB
	// plugin::CallAndReturn<void*, 0x5D8D30, void*, int>(object, offset);
	0AA7: call_function_return 0x5D8D30 num_params 2 pop 2 [object] [offset] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginSpecMatConstructorCB
	// plugin::CallAndReturn<void*, 0x5D8D40, void*>(object);
	0AA7: call_function_return 0x5D8D40 num_params 1 pop 1 [object] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginSpecMatStreamWriteCB
	// plugin::CallAndReturn<RwStream*, 0x5D8D60, RwStream*, int, void const*>(stream, length, object);
	0AA7: call_function_return 0x5D8D60 num_params 3 pop 3 [stream] [length] [object] func_ret [RwStream*]

	// CCustomCarEnvMapPipeline::pluginSpecMatStreamGetSizeCB
	// plugin::CallAndReturn<signed int, 0x5D8DD0>();
	0AA7: call_function_return 0x5D8DD0 num_params 0 pop 0 func_ret [signed int]

	// CCustomCarEnvMapPipeline::DuplicateCustomEnvMapPipeMaterialData
	// plugin::CallAndReturn<CustomEnvMapPipeMaterialData*, 0x5D9570, CustomEnvMapPipeMaterialData**>(arg0);
	0AA7: call_function_return 0x5D9570 num_params 1 pop 1 [arg0] func_ret [CustomEnvMapPipeMaterialData*]

	// CCustomCarEnvMapPipeline::pluginEnvMatDestructorCB
	// plugin::CallAndReturn<void*, 0x5D95B0, void*, int>(object, offset);
	0AA7: call_function_return 0x5D95B0 num_params 2 pop 2 [object] [offset] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginEnvMatCopyConstructorCB
	// plugin::CallAndReturn<void*, 0x5D9600, void*, void const*, int, int>(object_dst, object_src, offset, size);
	0AA7: call_function_return 0x5D9600 num_params 4 pop 4 [object_dst] [object_src] [offset] [size] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginEnvMatStreamReadCB
	// plugin::CallAndReturn<RwStream*, 0x5D9660, RwStream*, int, void*, int>(stream, length, object, offset);
	0AA7: call_function_return 0x5D9660 num_params 4 pop 4 [stream] [length] [object] [offset] func_ret [RwStream*]

	// CCustomCarEnvMapPipeline::pluginEnvAtmDestructorCB
	// plugin::CallAndReturn<void*, 0x5D9730, void*, int>(object, offset);
	0AA7: call_function_return 0x5D9730 num_params 2 pop 2 [object] [offset] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginEnvAtmCopyConstructorCB
	// plugin::CallAndReturn<void*, 0x5D9780, void*, void const*, int, int>(object_dst, object_src, offset, size);
	0AA7: call_function_return 0x5D9780 num_params 4 pop 4 [object_dst] [object_src] [offset] [size] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginSpecMatDestructorCB
	// plugin::CallAndReturn<void*, 0x5D97D0, void*>(object);
	0AA7: call_function_return 0x5D97D0 num_params 1 pop 1 [object] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginSpecMatCopyConstructorCB
	// plugin::CallAndReturn<void*, 0x5D9830, void*, void const*>(object_dst, object_src);
	0AA7: call_function_return 0x5D9830 num_params 2 pop 2 [object_dst] [object_src] func_ret [void*]

	// CCustomCarEnvMapPipeline::pluginSpecMatStreamReadCB
	// plugin::CallAndReturn<RwStream*, 0x5D9880, RwStream*, int, void*>(stream, length, object);
	0AA7: call_function_return 0x5D9880 num_params 3 pop 3 [stream] [length] [object] func_ret [RwStream*]

	// CCustomCarEnvMapPipeline::CustomPipeRenderCB
	// plugin::CallAndReturn<int, 0x5D9900, RwResEntry*, void*, unsigned char, unsigned int>(atomic, object, flags1, flags2);
	0AA7: call_function_return 0x5D9900 num_params 4 pop 4 [atomic] [object] [flags1] [flags2] func_ret [int]

	// CCustomCarEnvMapPipeline::CreateCustomOpenGLObjPipe
	// plugin::CallAndReturn<RxPipeline*, 0x5D9F80>();
	0AA7: call_function_return 0x5D9F80 num_params 0 pop 0 func_ret [RxPipeline*]

	// CCustomCarEnvMapPipeline::CreatePipe
	// plugin::CallAndReturn<char, 0x5DA020>();
	0AA7: call_function_return 0x5DA020 num_params 0 pop 0 func_ret [char]

	// CCustomCarEnvMapPipeline::DestroyPipe
	// plugin::Call<0x5DA130>();
	0AA5: call_function 0x5DA130 num_params 0 pop 0

	// CCustomCarEnvMapPipeline::SetFxEnvTexture
	// plugin::Call<0x5DA230, RpMaterial*, RwTexture*>(material, texture);
	0AA5: call_function 0x5DA230 num_params 2 pop 2 [material] [texture]

	// CCustomCarEnvMapPipeline::RegisterPlugin
	// plugin::CallAndReturn<char, 0x5DA450>();
	0AA7: call_function_return 0x5DA450 num_params 0 pop 0 func_ret [char]

	// CCustomCarEnvMapPipeline::CustomPipeMaterialSetup
	// plugin::CallAndReturn<RpMaterial*, 0x5DA560, RpMaterial*, void*>(arg0, arg1);
	0AA7: call_function_return 0x5DA560 num_params 2 pop 2 [arg0] [arg1] func_ret [RpMaterial*]

	// CCustomCarEnvMapPipeline::CustomPipeAtomicSetup
	// plugin::CallAndReturn<RpAtomic*, 0x5DA610, RpAtomic*>(arg0);
	0AA7: call_function_return 0x5DA610 num_params 1 pop 1 [arg0] func_ret [RpAtomic*]

plugin_sa\game_sa\CCustomCarPlateMgr.cpp:

	// CCustomCarPlateMgr::Initialise
	// plugin::CallAndReturn<bool, 0x6FD500>();
	0AA7: call_function_return 0x6FD500 num_params 0 pop 0 func_ret [bool]

	// CCustomCarPlateMgr::GeneratePlateText
	// plugin::CallAndReturn<bool, 0x6FD5B0, char*, int>(plateTextBuf, length);
	0AA7: call_function_return 0x6FD5B0 num_params 2 pop 2 [plateTextBuf] [length] func_ret [bool]

	// CCustomCarPlateMgr::Shutdown
	// plugin::CallAndReturn<bool, 0x6FD720>();
	0AA7: call_function_return 0x6FD720 num_params 0 pop 0 func_ret [bool]

	// CCustomCarPlateMgr::GetMapRegionPlateDesign
	// plugin::CallAndReturn<unsigned char, 0x6FD7A0>();
	0AA7: call_function_return 0x6FD7A0 num_params 0 pop 0 func_ret [unsigned char]

	// CCustomCarPlateMgr::LoadPlatecharsetDat
	// plugin::CallAndReturn<bool, 0x6FDC00, char const*, unsigned char*, int, int>(filename, data, arg2, arg3);
	0AA7: call_function_return 0x6FDC00 num_params 4 pop 4 [filename] [data] [arg2] [arg3] func_ret [bool]

	// RenderLicenseplateTextToRaster
	// plugin::CallAndReturn<bool, 0x6FDD70, char*, RwRaster*, void*, RwRaster*>(text, charsetRaster, palette, resultRaster);
	0AA7: call_function_return 0x6FDD70 num_params 4 pop 4 [text] [charsetRaster] [palette] [resultRaster] func_ret [bool]

	// CCustomCarPlateMgr::SetupMaterialPlatebackTexture
	// plugin::CallAndReturn<RpMaterial*, 0x6FDE50, RpMaterial*, unsigned char>(material, plateType);
	0AA7: call_function_return 0x6FDE50 num_params 2 pop 2 [material] [plateType] func_ret [RpMaterial*]

	// CCustomCarPlateMgr::CreatePlateTexture
	// plugin::CallAndReturn<RwTexture*, 0x6FDEA0, char*, unsigned char>(text, plateType);
	0AA7: call_function_return 0x6FDEA0 num_params 2 pop 2 [text] [plateType] func_ret [RwTexture*]

	// MaterialUpgradeSetCarplateTextureCB
	// plugin::CallAndReturn<RpMaterial*, 0x6FDF50, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x6FDF50 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// AtomicUpgradeSetCarplateTextureCB
	// plugin::CallAndReturn<RpAtomic*, 0x6FDFC0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x6FDFC0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CCustomCarPlateMgr::SetupClumpAfterVehicleUpgrade
	// plugin::CallAndReturn<bool, 0x6FDFE0, RpClump*, RpMaterial*, unsigned char>(clump, plateMaterial, plateType);
	0AA7: call_function_return 0x6FDFE0 num_params 3 pop 3 [clump] [plateMaterial] [plateType] func_ret [bool]

	// CCustomCarPlateMgr::SetupMaterialPlateTexture
	// plugin::CallAndReturn<RpMaterial*, 0x6FE020, RpMaterial*, char*, unsigned char>(material, plateText, plateType);
	0AA7: call_function_return 0x6FE020 num_params 3 pop 3 [material] [plateText] [plateType] func_ret [RpMaterial*]

	// MaterialSetCarplateTextureCB
	// plugin::CallAndReturn<RpMaterial*, 0x6FE060, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x6FE060 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// AtomicSetCarplateTextureCB
	// plugin::CallAndReturn<RpAtomic*, 0x6FE0D0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x6FE0D0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CCustomCarPlateMgr::SetupClump
	// plugin::CallAndReturn<RpMaterial*, 0x6FE0F0, RpClump*, char*, unsigned char>(clump, plateText, plateType);
	0AA7: call_function_return 0x6FE0F0 num_params 3 pop 3 [clump] [plateText] [plateType] func_ret [RpMaterial*]

plugin_sa\game_sa\CCutsceneMgr.cpp:

	// CCutsceneMgr::AddCutsceneHead
	// plugin::CallAndReturn<int, 0x5B0380, CObject*, int>(object, arg1);
	0AA7: call_function_return 0x5B0380 num_params 2 pop 2 [object] [arg1] func_ret [int]

	// CCutsceneMgr::AppendToNextCutscene
	// plugin::Call<0x4D5DB0, char const*, char const*>(objectName, animName);
	0AA5: call_function 0x4D5DB0 num_params 2 pop 2 [objectName] [animName]

	// CCutsceneMgr::AttachObjectToBone
	// plugin::Call<0x5B0450, CObject*, CObject*, int>(attachment, object, boneId);
	0AA5: call_function 0x5B0450 num_params 3 pop 3 [attachment] [object] [boneId]

	// CCutsceneMgr::AttachObjectToFrame
	// plugin::Call<0x5B0480, CObject*, CEntity*, char const*>(attachment, object, frameName);
	0AA5: call_function 0x5B0480 num_params 3 pop 3 [attachment] [object] [frameName]

	// CCutsceneMgr::AttachObjectToParent
	// plugin::Call<0x5B04B0, CObject*, CEntity*>(attachment, object);
	0AA5: call_function 0x5B04B0 num_params 2 pop 2 [attachment] [object]

	// CCutsceneMgr::BuildCutscenePlayer
	// plugin::Call<0x4D5E20>();
	0AA5: call_function 0x4D5E20 num_params 0 pop 0

	// CCutsceneMgr::CreateCutsceneObject
	// plugin::CallAndReturn<CCutsceneObject*, 0x5B02A0, int>(modelId);
	0AA7: call_function_return 0x5B02A0 num_params 1 pop 1 [modelId] func_ret [CCutsceneObject*]

	// CCutsceneMgr::DeleteCutsceneData
	// plugin::Call<0x4D5ED0>();
	0AA5: call_function 0x4D5ED0 num_params 0 pop 0

	// CCutsceneMgr::DeleteCutsceneData_overlay
	// plugin::Call<0x5AFD60>();
	0AA5: call_function 0x5AFD60 num_params 0 pop 0

	// CCutsceneMgr::FinishCutscene
	// plugin::Call<0x5B04D0>();
	0AA5: call_function 0x5B04D0 num_params 0 pop 0

	// CCutsceneMgr::GetCutsceneTimeInMilleseconds
	// plugin::CallAndReturn<long long, 0x5B0550>();
	0AA7: call_function_return 0x5B0550 num_params 0 pop 0 func_ret [long long]

	// CCutsceneMgr::HasCutsceneFinished
	// plugin::CallAndReturn<bool, 0x5B0570>();
	0AA7: call_function_return 0x5B0570 num_params 0 pop 0 func_ret [bool]

	// CCutsceneMgr::HideRequestedObjects
	// plugin::Call<0x5AFAD0>();
	0AA5: call_function 0x5AFAD0 num_params 0 pop 0

	// CCutsceneMgr::Initialise
	// plugin::Call<0x4D5A20>();
	0AA5: call_function 0x4D5A20 num_params 0 pop 0

	// CCutsceneMgr::IsCutsceneSkipButtonBeingPressed
	// plugin::Call<0x4D5D10>();
	0AA5: call_function 0x4D5D10 num_params 0 pop 0

	// CCutsceneMgr::LoadAnimationUncompressed
	// plugin::Call<0x4D5AB0, char const*>(animName);
	0AA5: call_function 0x4D5AB0 num_params 1 pop 1 [animName]

	// CCutsceneMgr::LoadCutsceneData
	// plugin::Call<0x4D5E80, char const*>(cutsceneName);
	0AA5: call_function 0x4D5E80 num_params 1 pop 1 [cutsceneName]

	// CCutsceneMgr::LoadCutsceneData_loading
	// plugin::Call<0x5B11C0>();
	0AA5: call_function 0x5B11C0 num_params 0 pop 0

	// CCutsceneMgr::LoadCutsceneData_overlay
	// plugin::Call<0x5B13F0, char const*>(cutsceneName);
	0AA5: call_function 0x5B13F0 num_params 1 pop 1 [cutsceneName]

	// CCutsceneMgr::LoadCutsceneData_postload
	// plugin::Call<0x5AFBC0>();
	0AA5: call_function 0x5AFBC0 num_params 0 pop 0

	// CCutsceneMgr::LoadCutsceneData_preload
	// plugin::Call<0x5B05A0>();
	0AA5: call_function 0x5B05A0 num_params 0 pop 0

	// CCutsceneMgr::LoadEverythingBecauseCutsceneDeletedAllOfIt
	// plugin::Call<0x4D5C10>();
	0AA5: call_function 0x4D5C10 num_params 0 pop 0

	// CCutsceneMgr::RemoveCutscenePlayer
	// plugin::Call<0x4D5E50>();
	0AA5: call_function 0x4D5E50 num_params 0 pop 0

	// CCutsceneMgr::RemoveEverythingBecauseCutsceneDoesntFitInMemory
	// plugin::Call<0x4D5AF0>();
	0AA5: call_function 0x4D5AF0 num_params 0 pop 0

	// CCutsceneMgr::SetCutsceneAnim
	// plugin::Call<0x5B0390, char const*, CObject*>(animName, object);
	0AA5: call_function 0x5B0390 num_params 2 pop 2 [animName] [object]

	// CCutsceneMgr::SetCutsceneAnimToLoop
	// plugin::Call<0x5B0420, char const*>(animName);
	0AA5: call_function 0x5B0420 num_params 1 pop 1 [animName]

	// CCutsceneMgr::SetHeadAnim
	// plugin::Call<0x5B0440, char const*, CObject*>(animName, headObject);
	0AA5: call_function 0x5B0440 num_params 2 pop 2 [animName] [headObject]

	// CCutsceneMgr::SetupCutsceneToStart
	// plugin::Call<0x5B14D0>();
	0AA5: call_function 0x5B14D0 num_params 0 pop 0

	// CCutsceneMgr::Shutdown
	// plugin::Call<0x4D5E60>();
	0AA5: call_function 0x4D5E60 num_params 0 pop 0

	// CCutsceneMgr::SkipCutscene
	// plugin::Call<0x5B1700>();
	0AA5: call_function 0x5B1700 num_params 0 pop 0

	// CCutsceneMgr::StartCutscene
	// plugin::Call<0x5B1460>();
	0AA5: call_function 0x5B1460 num_params 0 pop 0

	// CCutsceneMgr::Update
	// plugin::Call<0x4D5D00>();
	0AA5: call_function 0x4D5D00 num_params 0 pop 0

	// CCutsceneMgr::Update_overlay
	// plugin::Call<0x5B1720>();
	0AA5: call_function 0x5B1720 num_params 0 pop 0

	// FindCutsceneAudioTrackId
	// plugin::CallAndReturn<short, 0x5AFA50, char const*>(cutsceneName);
	0AA7: call_function_return 0x5AFA50 num_params 1 pop 1 [cutsceneName] func_ret [short]

	// UpdateCutsceneObjectBoundingBox
	// plugin::Call<0x5B01E0, RpClump*, int>(clump, modelId);
	0AA5: call_function 0x5B01E0 num_params 2 pop 2 [clump] [modelId]

plugin_sa\game_sa\CDarkel.cpp:

	// CDarkel::Init
	// plugin::Call<0x43CEB0>();
	0AA5: call_function 0x43CEB0 num_params 0 pop 0

	// CDarkel::DrawMessages
	// plugin::Call<0x43CEC0>();
	0AA5: call_function 0x43CEC0 num_params 0 pop 0

	// CDarkel::ReadStatus
	// plugin::CallAndReturn<short, 0x43D1E0>();
	0AA7: call_function_return 0x43D1E0 num_params 0 pop 0 func_ret [short]

	// CDarkel::RegisterKillNotByPlayer
	// plugin::Call<0x43D210, CPed const*>(pKilledPed);
	0AA5: call_function 0x43D210 num_params 1 pop 1 [pKilledPed]

	// CDarkel::ThisPedShouldBeKilledForFrenzy
	// plugin::CallAndReturn<bool, 0x43D2F0, CPed const*>(pPed);
	0AA7: call_function_return 0x43D2F0 num_params 1 pop 1 [pPed] func_ret [bool]

	// CDarkel::ThisVehicleShouldBeKilledForFrenzy
	// plugin::CallAndReturn<bool, 0x43D350, CVehicle const*>(pVehicle);
	0AA7: call_function_return 0x43D350 num_params 1 pop 1 [pVehicle] func_ret [bool]

	// CDarkel::StartFrenzy
	// plugin::Call<0x43D3B0, eWeaponType, int, unsigned short, int, unsigned short*, int, int, int, bool, bool>(weapontype, Timelimit, KillsNeeded, ModelToKill, pStartMessage, ModelToKill2, ModelToKill3, ModelToKill4, bStandardSoundAndMessages, bNeedHeadShot);
	0AA5: call_function 0x43D3B0 num_params 10 pop 10 [weapontype] [Timelimit] [KillsNeeded] [ModelToKill] [pStartMessage] [ModelToKill2] [ModelToKill3] [ModelToKill4] [bStandardSoundAndMessages] [bNeedHeadShot]

	// CDarkel::ResetModelsKilledByPlayer
	// plugin::Call<0x43D6A0, int>(playerid);
	0AA5: call_function 0x43D6A0 num_params 1 pop 1 [playerid]

	// CDarkel::QueryModelsKilledByPlayer
	// plugin::CallAndReturn<int, 0x43D6C0, int, int>(player, modelid);
	0AA7: call_function_return 0x43D6C0 num_params 2 pop 2 [player] [modelid] func_ret [int]

	// CDarkel::FindTotalPedsKilledByPlayer
	// plugin::CallAndReturn<int, 0x43D6E0, int>(player);
	0AA7: call_function_return 0x43D6E0 num_params 1 pop 1 [player] func_ret [int]

	// CDarkel::DealWithWeaponChangeAtEndOfFrenzy
	// plugin::Call<0x43D7A0>();
	0AA5: call_function 0x43D7A0 num_params 0 pop 0

	// CDarkel::CheckDamagedWeaponType
	// plugin::CallAndReturn<bool, 0x43D9E0, int, int>(damageWeaponID, expectedDamageWeaponID);
	0AA7: call_function_return 0x43D9E0 num_params 2 pop 2 [damageWeaponID] [expectedDamageWeaponID] func_ret [bool]

	// CDarkel::Update
	// plugin::Call<0x43DAC0>();
	0AA5: call_function 0x43DAC0 num_params 0 pop 0

	// CDarkel::ResetOnPlayerDeath
	// plugin::Call<0x43DC10>();
	0AA5: call_function 0x43DC10 num_params 0 pop 0

	// CDarkel::FailKillFrenzy
	// plugin::Call<0x43DC60>();
	0AA5: call_function 0x43DC60 num_params 0 pop 0

	// CDarkel::RegisterKillByPlayer
	// plugin::Call<0x43DCD0, CPed const*, eWeaponType, bool, int>(pKilledPed, damageWeaponID, bHeadShotted, arg4);
	0AA5: call_function 0x43DCD0 num_params 4 pop 4 [pKilledPed] [damageWeaponID] [bHeadShotted] [arg4]

	// CDarkel::RegisterCarBlownUpByPlayer
	// plugin::Call<0x43DF20, CVehicle*, int>(pVehicle, arg2);
	0AA5: call_function 0x43DF20 num_params 2 pop 2 [pVehicle] [arg2]

plugin_sa\game_sa\CDate.cpp:

	// CDate::CDate
	// plugin::CallMethodDynGlobal<CDate *>(ctor_gaddr(CDate), this);

	// CDate::operator<
	// plugin::CallMethodAndReturnDynGlobal<bool, CDate *, CDate const &>(gaddrof(CDate::operator<), this, rhs);
	0AA8: call_method_return 0x618D90 struct [CDate] num_params 1 pop 0 [rhs] func_ret [bool]

	// CDate::operator==
	// plugin::CallMethodAndReturnDynGlobal<bool, CDate *, CDate const &>(gaddrof(CDate::operator==), this, rhs);
	0AA8: call_method_return 0x618DF0 struct [CDate] num_params 1 pop 0 [rhs] func_ret [bool]

	// CDate::operator>
	// plugin::CallMethodAndReturnDynGlobal<bool, CDate *, CDate const &>(gaddrof(CDate::operator>), this, rhs);
	0AA8: call_method_return 0x618D30 struct [CDate] num_params 1 pop 0 [rhs] func_ret [bool]

	// CDate::PopulateDateFields
	// plugin::CallMethodDynGlobal<CDate *, char const &, char const &, char const &, char const &, char const &, short>(gaddrof(CDate::PopulateDateFields), this, seconds, minutes, hours, day, month, year);

plugin_sa\game_sa\CDecisionSimple.cpp:

	// CDecisionSimple::Set
	// plugin::CallMethod<0x600730, CDecisionSimple *, int*, unsigned char*, int>(this, taskTypes, chances, count);
	0AA6: call_method 0x600730 struct [CDecisionSimple] num_params 3 pop 0 [taskTypes] [chances] [count]

	// CDecisionSimple::MakeDecision
	// plugin::CallMethod<0x6007A0, CDecisionSimple *, int, short&, int&>(this, taskType, outTaskType, outDecisionIndex);
	0AA6: call_method 0x6007A0 struct [CDecisionSimple] num_params 3 pop 0 [taskType] [outTaskType] [outDecisionIndex]

	// CDecisionSimple::SetDefault
	// plugin::CallMethod<0x604220, CDecisionSimple *>(this);
	0AA6: call_method 0x604220 struct [CDecisionSimple] num_params 0 pop 0

plugin_sa\game_sa\CDirectory.cpp:

	// CDirectory::CDirectory
	// plugin::CallMethod<0x532290, CDirectory *>(this);
	0AA6: call_method 0x532290 struct [CDirectory] num_params 0 pop 0

	// CDirectory::CDirectory
	// plugin::CallMethod<0x5322A0, CDirectory *, int>(this, capacity);
	0AA6: call_method 0x5322A0 struct [CDirectory] num_params 1 pop 0 [capacity]

	// CDirectory::~CDirectory
	// plugin::CallMethod<0x5322D0, CDirectory *>(this);
	0AA6: call_method 0x5322D0 struct [CDirectory] num_params 0 pop 0

	// CDirectory::Init
	// plugin::CallMethod<0x5322F0, CDirectory *, int, void*>(this, capacity, entries);
	0AA6: call_method 0x5322F0 struct [CDirectory] num_params 2 pop 0 [capacity] [entries]

	// CDirectory::AddItem
	// plugin::CallMethod<0x532310, CDirectory *, DirectoryInfo const&>(this, entry);
	0AA6: call_method 0x532310 struct [CDirectory] num_params 1 pop 0 [entry]

	// CDirectory::ReadDirFile
	// plugin::CallMethod<0x532350, CDirectory *, char const*>(this, filename);
	0AA6: call_method 0x532350 struct [CDirectory] num_params 1 pop 0 [filename]

	// CDirectory::WriteDirFile
	// plugin::CallMethodAndReturn<bool, 0x532410, CDirectory *, char const*>(this, filename);
	0AA8: call_method_return 0x532410 struct [CDirectory] num_params 1 pop 0 [filename] func_ret [bool]

	// CDirectory::DirectoryInfo* CDirectory
	// plugin::CallMethodAndReturn<DirectoryInfo*, 0x532450, CDirectory *, char const*>(this, name);
	0AA8: call_method_return 0x532450 struct [CDirectory] num_params 1 pop 0 [name] func_ret [DirectoryInfo*]

	// CDirectory::DirectoryInfo* CDirectory
	// plugin::CallMethodAndReturn<DirectoryInfo*, 0x5324A0, CDirectory *, char const*, unsigned int&, unsigned int&>(this, name, outOffset, outStreamingSize);
	0AA8: call_method_return 0x5324A0 struct [CDirectory] num_params 3 pop 0 [name] [outOffset] [outStreamingSize] func_ret [DirectoryInfo*]

	// CDirectory::DirectoryInfo* CDirectory
	// plugin::CallMethodAndReturn<DirectoryInfo*, 0x5324D0, CDirectory *, unsigned int, unsigned int&, unsigned int&>(this, key, outOffset, outStreamingSize);
	0AA8: call_method_return 0x5324D0 struct [CDirectory] num_params 3 pop 0 [key] [outOffset] [outStreamingSize] func_ret [DirectoryInfo*]

plugin_sa\game_sa\CDoor.cpp:

	// CDoor::Process
	// plugin::CallMethodAndReturn<bool, 0x6F4040, CDoor *, CVehicle*, CVector&, CVector&, CVector&>(this, vehicle, arg1, arg2, arg3);
	0AA8: call_method_return 0x6F4040 struct [CDoor] num_params 4 pop 0 [vehicle] [arg1] [arg2] [arg3] func_ret [bool]

	// CDoor::ProcessImpact
	// plugin::CallMethodAndReturn<bool, 0x6F4540, CDoor *, CVehicle*, CVector&, CVector&, CVector&>(this, vehicle, arg1, arg2, arg3);
	0AA8: call_method_return 0x6F4540 struct [CDoor] num_params 4 pop 0 [vehicle] [arg1] [arg2] [arg3] func_ret [bool]

	// CDoor::Open
	// plugin::CallMethod<0x6F4790, CDoor *, float>(this, openRatio);
	0AA6: call_method 0x6F4790 struct [CDoor] num_params 1 pop 0 [openRatio]

	// CDoor::GetAngleOpenRatio
	// plugin::CallMethodAndReturn<float, 0x6F47E0, CDoor *>(this);
	0AA8: call_method_return 0x6F47E0 struct [CDoor] num_params 0 pop 0 func_ret [float]

	// CDoor::IsClosed
	// plugin::CallMethodAndReturn<bool, 0x6F4800, CDoor *>(this);
	0AA8: call_method_return 0x6F4800 struct [CDoor] num_params 0 pop 0 func_ret [bool]

	// CDoor::IsFullyOpen
	// plugin::CallMethodAndReturn<bool, 0x6F4820, CDoor *>(this);
	0AA8: call_method_return 0x6F4820 struct [CDoor] num_params 0 pop 0 func_ret [bool]

plugin_sa\game_sa\CDraw.cpp:

	// CDraw::SetFOV
	// plugin::Call<0x6FF410, float>(fovValue);
	0AA5: call_function 0x6FF410 num_params 1 pop 1 [fovValue]

	// CDraw::CalculateAspectRatio
	// plugin::CallAndReturn<float, 0x6FF420>();
	0AA7: call_function_return 0x6FF420 num_params 0 pop 0 func_ret [float]

plugin_sa\game_sa\CEntryExit.cpp:

	// CEntryExit::GenerateAmbientPeds
	// plugin::CallMethodDynGlobal<CEntryExit *, CVector const &>(gaddrof(CEntryExit::GenerateAmbientPeds), this, position);

	// *CEntryExit::GetEntryExitToDisplayNameOf
	// plugin::CallMethodAndReturnDynGlobal<char *, CEntryExit *>(gaddrof(CEntryExit::GetEntryExitToDisplayNameOf), this);
	0AA8: call_method_return 0x43E650 struct [*CEntryExit] num_params 0 pop 0 func_ret [char *]

	// CEntryExit::GetPositionRelativeToOutsideWorld
	// plugin::CallMethodDynGlobal<CEntryExit *, CVector &>(gaddrof(CEntryExit::GetPositionRelativeToOutsideWorld), this, positionInOut);

	// CEntryExit::IsInArea
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntryExit *, CVector const &>(gaddrof(CEntryExit::IsInArea), this, position);
	0AA8: call_method_return 0x43E460 struct [CEntryExit] num_params 1 pop 0 [position] func_ret [bool]

	// CEntryExit::RequestAmbientPeds
	// plugin::CallMethodDynGlobal<CEntryExit *>(gaddrof(CEntryExit::RequestAmbientPeds), this);

	// CEntryExit::RequestObjectsInFrustum
	// plugin::CallMethodDynGlobal<CEntryExit *>(gaddrof(CEntryExit::RequestObjectsInFrustum), this);

	// CEntryExit::TransitionFinished
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntryExit *, CPed *>(gaddrof(CEntryExit::TransitionFinished), this, player);
	0AA8: call_method_return 0x4404A0 struct [CEntryExit] num_params 1 pop 0 [player] func_ret [bool]

	// CEntryExit::TransitionStarted
	// plugin::CallMethodAndReturnDynGlobal<bool, CEntryExit *, CPed *>(gaddrof(CEntryExit::TransitionStarted), this, player);
	0AA8: call_method_return 0x43FFD0 struct [CEntryExit] num_params 1 pop 0 [player] func_ret [bool]

	// CEntryExit::WarpGangWithPlayer
	// plugin::CallMethodDynGlobal<CEntryExit *, CPed *>(gaddrof(CEntryExit::WarpGangWithPlayer), this, player);

plugin_sa\game_sa\CEntryExitManager.cpp:

	// CEntryExitManager::AddEntryExitToStack
	// plugin::CallDynGlobal<CEntryExit *>(gaddrof(CEntryExitManager::AddEntryExitToStack), a1);

	// CEntryExitManager::AddOne
	// plugin::CallAndReturnDynGlobal<int, float, float, float, float, float, float, int, float, float, float, float, int, int, int, int, int, int, char const *>(gaddrof(CEntryExitManager::AddOne), entranceX, entranceY, entranceZ, entranceAngle, entranceRangeX, entranceRangeY, unused, exitX, exitY, exitZ, exitAngle, area, flags, skyColor, timeOn, timeOff, numberOfPeds, name);

	// CEntryExitManager::DeleteOne
	// plugin::CallDynGlobal<int>(gaddrof(CEntryExitManager::DeleteOne), index);

	// CEntryExitManager::EnableBurglaryHouses
	// plugin::CallDynGlobal<bool>(gaddrof(CEntryExitManager::EnableBurglaryHouses), enable);

	// *CEntryExitManager::FindNearestDoor
	// plugin::CallAndReturnDynGlobal<CEntity *, CEntryExit const &, float>(gaddrof(CEntryExitManager::FindNearestDoor), entryExit, range);

	// CEntryExitManager::FindNearestEntryExit
	// plugin::CallAndReturnDynGlobal<int, CVector2D const &, float, int>(gaddrof(CEntryExitManager::FindNearestEntryExit), position, range, ignoreArea);

	// *CEntryExitManager::GetEntryExit
	// plugin::CallAndReturnDynGlobal<CEntryExit *, int>(gaddrof(CEntryExitManager::GetEntryExit), index);

	// CEntryExitManager::GetEntryExitIndex
	// plugin::CallAndReturnDynGlobal<int, char const *, unsigned short, unsigned short>(gaddrof(CEntryExitManager::GetEntryExitIndex), name, enabledFlags, disabledFlags);

	// CEntryExitManager::GetPositionRelativeToOutsideWorld
	// plugin::CallDynGlobal<CVector &>(gaddrof(CEntryExitManager::GetPositionRelativeToOutsideWorld), positionInOut);

	// CEntryExitManager::GotoEntryExit
	// plugin::CallDynGlobal<CEntryExit *>(gaddrof(CEntryExitManager::GotoEntryExit), entryExit);

	// CEntryExitManager::GotoEntryExitVC
	// plugin::CallDynGlobal<char const *>(gaddrof(CEntryExitManager::GotoEntryExitVC), name);

	// CEntryExitManager::LinkEntryExit
	// plugin::CallDynGlobal<CEntryExit *>(gaddrof(CEntryExitManager::LinkEntryExit), entryExit);

	// CEntryExitManager::Load
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CEntryExitManager::Load));

	// CEntryExitManager::Save
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CEntryExitManager::Save));

	// CEntryExitManager::SetEnabled
	// plugin::CallDynGlobal<int, bool>(gaddrof(CEntryExitManager::SetEnabled), index, enable);

	// CEntryExitManager::SetEnabledByName
	// plugin::CallDynGlobal<char const *, bool>(gaddrof(CEntryExitManager::SetEnabledByName), name, enable);

	// CEntryExitManager::SetEntryExitFlag
	// plugin::CallDynGlobal<char const *, unsigned int, bool>(gaddrof(CEntryExitManager::SetEntryExitFlag), name, flag, enable);

	// CEntryExitManager::SetEntryExitFlagWithIndex
	// plugin::CallDynGlobal<int, unsigned int, bool>(gaddrof(CEntryExitManager::SetEntryExitFlagWithIndex), index, flag, enable);

	// CEntryExitManager::WeAreInInteriorTransition
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CEntryExitManager::WeAreInInteriorTransition));

plugin_sa\game_sa\CExplosion.cpp:

	// CExplosion::ClearAllExplosions
	// plugin::Call<0x736840>();
	0AA5: call_function 0x736840 num_params 0 pop 0

	// CExplosion::Shutdown
	// plugin::Call<0x7368F0>();
	0AA5: call_function 0x7368F0 num_params 0 pop 0

	// CExplosion::GetExplosionActiveCounter
	// plugin::CallAndReturn<unsigned char, 0x736900, unsigned char>(explosionId);
	0AA7: call_function_return 0x736900 num_params 1 pop 1 [explosionId] func_ret [unsigned char]

	// CExplosion::ResetExplosionActiveCounter
	// plugin::Call<0x736910, unsigned char>(explosionId);
	0AA5: call_function 0x736910 num_params 1 pop 1 [explosionId]

	// CExplosion::DoesExplosionMakeSound
	// plugin::CallAndReturn<bool, 0x736920, unsigned char>(explosionId);
	0AA7: call_function_return 0x736920 num_params 1 pop 1 [explosionId] func_ret [bool]

	// CExplosion::GetExplosionType
	// plugin::CallAndReturn<unsigned int, 0x736930, unsigned char>(explosionId);
	0AA7: call_function_return 0x736930 num_params 1 pop 1 [explosionId] func_ret [unsigned int]

	// CExplosion::GetExplosionPosition
	// plugin::CallAndReturn<CVector*, 0x736940, unsigned char>(explosionId);
	0AA7: call_function_return 0x736940 num_params 1 pop 1 [explosionId] func_ret [CVector*]

	// CExplosion::TestForExplosionInArea
	// plugin::CallAndReturn<bool, 0x736950, eExplosionType, float, float, float, float, float, float>(explosionType, x1, y1, z1, x2, y2, z2);
	0AA7: call_function_return 0x736950 num_params 7 pop 7 [explosionType] [x1] [y1] [z1] [x2] [y2] [z2] func_ret [bool]

	// CExplosion::RemoveAllExplosionsInArea
	// plugin::Call<0x7369E0, CVector, float>(posn, radius);
	0AA5: call_function 0x7369E0 num_params 2 pop 2 [posn] [radius]

	// CExplosion::Initialise
	// plugin::Call<0x736A40>();
	0AA5: call_function 0x736A40 num_params 0 pop 0

	// CExplosion::AddExplosion
	// plugin::CallAndReturn<bool, 0x736A50, CEntity*, CEntity*, eExplosionType, CVector const&, unsigned int, unsigned char, float, unsigned char>(victim, creator, explosionType, posn, time, makeSound, camShake, visibility);
	0AA7: call_function_return 0x736A50 num_params 8 pop 8 [victim] [creator] [explosionType] [posn] [time] [makeSound] [camShake] [visibility] func_ret [bool]

	// CExplosion::Update
	// plugin::Call<0x737620>();
	0AA5: call_function 0x737620 num_params 0 pop 0

plugin_sa\game_sa\CFileLoader.cpp:

	// CFileLoader::AddTexDictionaries
	// plugin::CallDynGlobal<RwTexDictionary *, RwTexDictionary *>(gaddrof(CFileLoader::AddTexDictionaries), dictionary, baseDictionary);

	// *CFileLoader::FindRelatedModelInfoCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CFileLoader::FindRelatedModelInfoCB), atomic, data);

	// CFileLoader::FinishLoadClumpFile
	// plugin::CallAndReturnDynGlobal<bool, RwStream *, unsigned int>(gaddrof(CFileLoader::FinishLoadClumpFile), stream, modelIndex);

	// CFileLoader::LoadAnimatedClumpObject
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadAnimatedClumpObject), line);

	// CFileLoader::LoadAtomicFile
	// plugin::CallDynGlobal<RwStream *, unsigned int>(gaddrof_o(CFileLoader::LoadAtomicFile, void (*)(RwStream *, unsigned int)), stream, modelIndex);

	// CFileLoader::LoadAtomicFile
	// plugin::CallDynGlobal<char const *>(gaddrof_o(CFileLoader::LoadAtomicFile, void (*)(char const *)), filename);

	// *CFileLoader::LoadAtomicFile2Return
	// plugin::CallAndReturnDynGlobal<RpClump *, char const *>(gaddrof(CFileLoader::LoadAtomicFile2Return), filename);

	// CFileLoader::LoadAudioZone
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadAudioZone), line);

	// CFileLoader::LoadBoundingBox
	// plugin::CallDynGlobal<unsigned char *, CBoundingBox &>(gaddrof(CFileLoader::LoadBoundingBox), data, outBoundBox);

	// CFileLoader::LoadCarGenerator
	// plugin::CallDynGlobal<CFileCarGenerator *, int>(gaddrof_o(CFileLoader::LoadCarGenerator, void (*)(CFileCarGenerator *, int)), carGen, iplId);

	// CFileLoader::LoadCarGenerator
	// plugin::CallDynGlobal<char const *, int>(gaddrof_o(CFileLoader::LoadCarGenerator, void (*)(char const *, int)), line, iplId);

	// CFileLoader::LoadCarPathNode
	// plugin::CallDynGlobal<char const *, int, int, bool>(gaddrof(CFileLoader::LoadCarPathNode), line, objModelIndex, pathEntryIndex, a4);

	// CFileLoader::LoadClumpFile
	// plugin::CallAndReturnDynGlobal<bool, RwStream *, unsigned int>(gaddrof_o(CFileLoader::LoadClumpFile, bool (*)(RwStream *, unsigned int)), stream, modelIndex);

	// CFileLoader::LoadClumpFile
	// plugin::CallDynGlobal<char const *>(gaddrof_o(CFileLoader::LoadClumpFile, void (*)(char const *)), filename);

	// CFileLoader::LoadClumpObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadClumpObject), line);

	// CFileLoader::LoadCollisionFile
	// plugin::CallAndReturnDynGlobal<bool, unsigned char *, unsigned int, unsigned char>(gaddrof_o(CFileLoader::LoadCollisionFile, bool (*)(unsigned char *, unsigned int, unsigned char)), data, dataSize, colId);

	// CFileLoader::LoadCollisionFile
	// plugin::CallDynGlobal<char const *, unsigned char>(gaddrof_o(CFileLoader::LoadCollisionFile, void (*)(char const *, unsigned char)), filename, colId);

	// CFileLoader::LoadCollisionFileFirstTime
	// plugin::CallAndReturnDynGlobal<bool, unsigned char *, unsigned int, unsigned char>(gaddrof(CFileLoader::LoadCollisionFileFirstTime), data, dataSize, colId);

	// CFileLoader::LoadCollisionModel
	// plugin::CallDynGlobal<unsigned char *, CColModel &>(gaddrof(CFileLoader::LoadCollisionModel), data, outColModel);

	// CFileLoader::LoadCollisionModelVer2
	// plugin::CallDynGlobal<unsigned char *, unsigned int, CColModel &, char const *>(gaddrof(CFileLoader::LoadCollisionModelVer2), data, dataSize, outColModel, modelName);

	// CFileLoader::LoadCollisionModelVer3
	// plugin::CallDynGlobal<unsigned char *, unsigned int, CColModel &, char const *>(gaddrof(CFileLoader::LoadCollisionModelVer3), data, dataSize, outColModel, modelName);

	// CFileLoader::LoadCollisionModelVer4
	// plugin::CallDynGlobal<void *, unsigned int, CColModel &, char const *>(gaddrof(CFileLoader::LoadCollisionModelVer4), data, dataSize, outColModel, modelName);

	// CFileLoader::LoadCullZone
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadCullZone), line);

	// CFileLoader::LoadEntryExit
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadEntryExit), line);

	// CFileLoader::LoadGarage
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadGarage), line);

	// CFileLoader::LoadLevel
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadLevel), filename);

	// *CFileLoader::LoadLine
	// plugin::CallAndReturnDynGlobal<char *, FILESTREAM>(gaddrof_o(CFileLoader::LoadLine, char *(*)(FILESTREAM)), file);

	// *CFileLoader::LoadLine
	// plugin::CallAndReturnDynGlobal<char *, char **, int &>(gaddrof_o(CFileLoader::LoadLine, char *(*)(char **, int &)), outLine, outSize);

	// CFileLoader::LoadObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadObject), line);

	// *CFileLoader::LoadObjectInstance
	// plugin::CallAndReturnDynGlobal<CEntity *, CFileObjectInstance *, char const *>(gaddrof_o(CFileLoader::LoadObjectInstance, CEntity *(*)(CFileObjectInstance *, char const *)), objInstance, modelname);

	// *CFileLoader::LoadObjectInstance
	// plugin::CallAndReturnDynGlobal<CEntity *, char const *>(gaddrof_o(CFileLoader::LoadObjectInstance, CEntity *(*)(char const *)), line);

	// CFileLoader::LoadObjectTypes
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadObjectTypes), filename);

	// CFileLoader::LoadOcclusionVolume
	// plugin::CallDynGlobal<char const *, char const *>(gaddrof(CFileLoader::LoadOcclusionVolume), line, filename);

	// CFileLoader::LoadPathHeader
	// plugin::CallAndReturnDynGlobal<int, char const *, int &>(gaddrof(CFileLoader::LoadPathHeader), line, outPathType);

	// CFileLoader::LoadPedObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadPedObject), line);

	// CFileLoader::LoadPedPathNode
	// plugin::CallDynGlobal<char const *, int, int>(gaddrof(CFileLoader::LoadPedPathNode), line, objModelIndex, pathEntryIndex);

	// CFileLoader::LoadPickup
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadPickup), line);

	// CFileLoader::LoadScene
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadScene), filename);

	// CFileLoader::LoadStuntJump
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadStuntJump), line);

	// CFileLoader::LoadTXDParent
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadTXDParent), line);

	// *CFileLoader::LoadTexDictionary
	// plugin::CallAndReturnDynGlobal<RwTexDictionary *, char const *>(gaddrof(CFileLoader::LoadTexDictionary), filename);

	// CFileLoader::LoadTimeCyclesModifier
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadTimeCyclesModifier), line);

	// CFileLoader::LoadTimeObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadTimeObject), line);

	// CFileLoader::LoadVehicleObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadVehicleObject), line);

	// CFileLoader::LoadWeaponObject
	// plugin::CallAndReturnDynGlobal<int, char const *>(gaddrof(CFileLoader::LoadWeaponObject), line);

	// CFileLoader::LoadZone
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::LoadZone), line);

	// CFileLoader::ReloadObjectTypes
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::ReloadObjectTypes), arg1);

	// CFileLoader::ReloadPaths
	// plugin::CallDynGlobal<char const *>(gaddrof(CFileLoader::ReloadPaths), filename);

	// CFileLoader::SaveTexDictionary
	// plugin::CallDynGlobal<RwTexDictionary *, char const *>(gaddrof(CFileLoader::SaveTexDictionary), dictionary, filename);

	// *CFileLoader::SetRelatedModelInfoCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CFileLoader::SetRelatedModelInfoCB), atomic, data);

	// CFileLoader::StartLoadClumpFile
	// plugin::CallAndReturnDynGlobal<bool, RwStream *, unsigned int>(gaddrof(CFileLoader::StartLoadClumpFile), stream, modelIndex);

	// GetNameAndDamage
	// plugin::CallDynGlobal<char const *, char *, bool &>(gaddrof(GetNameAndDamage), nodeName, outName, outDamage);

	// *CloneAtomicToClumpCB
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(CloneAtomicToClumpCB), atomic, data);

	// *GetFilename
	// plugin::CallAndReturnDynGlobal<char const *, char const *>(gaddrof(GetFilename), filepath);

	// LoadingScreenLoadingFile
	// plugin::CallDynGlobal<char const *>(gaddrof(LoadingScreenLoadingFile), filename);

	// *AddTextureCB
	// plugin::CallAndReturnDynGlobal<RwTexture *, RwTexture *, void *>(gaddrof(AddTextureCB), texture, data);

plugin_sa\game_sa\CFormation.cpp:

	// CFormation::DistributeDestinations
	// plugin::CallDynGlobal<CPedList *>(gaddrof(CFormation::DistributeDestinations), pedlist);

	// CFormation::DistributeDestinations_CoverPoints
	// plugin::CallDynGlobal<CPedList *, CVector>(gaddrof(CFormation::DistributeDestinations_CoverPoints), pedlist, pos);

	// CFormation::DistributeDestinations_PedsToAttack
	// plugin::CallDynGlobal<CPedList *>(gaddrof(CFormation::DistributeDestinations_PedsToAttack), pedlist);

	// CFormation::FindCoverPoints
	// plugin::CallDynGlobal<CVector, float>(gaddrof(CFormation::FindCoverPoints), pos, radius);

	// CFormation::FindCoverPointsBehindBox
	// plugin::CallDynGlobal<CPointList *, CVector, CMatrix *, CVector const *, CVector const *, CVector const *, float>(gaddrof(CFormation::FindCoverPointsBehindBox), pointlist, Pos, coverEntityMatrix, vecCenter, vecMin, vecMax, radius);

	// CFormation::FindNearestAvailableDestination
	// plugin::CallAndReturnDynGlobal<signed int, CVector, float *>(gaddrof(CFormation::FindNearestAvailableDestination), pos, pOutDistance);

	// CFormation::GenerateGatherDestinations
	// plugin::CallDynGlobal<CPedList *, CPed *>(gaddrof(CFormation::GenerateGatherDestinations), pedList, ped);

	// CFormation::GenerateGatherDestinations_AroundCar
	// plugin::CallDynGlobal<CPedList *, CVehicle *>(gaddrof(CFormation::GenerateGatherDestinations_AroundCar), pedlist, vehicle);

	// CFormation::ReturnDestinationForPed
	// plugin::CallAndReturnDynGlobal<bool, CPed *, CVector *>(gaddrof(CFormation::ReturnDestinationForPed), ped, pos);

	// CFormation::ReturnTargetPedForPed
	// plugin::CallAndReturnDynGlobal<int, CPed *, CPed **>(gaddrof(CFormation::ReturnTargetPedForPed), ped, pOutTargetPed);

plugin_sa\game_sa\CGame.cpp:

	// CGame::CanSeeOutSideFromCurrArea
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::CanSeeOutSideFromCurrArea));

	// CGame::CanSeeWaterFromCurrArea
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::CanSeeWaterFromCurrArea));

	// CGame::DrasticTidyUpMemory
	// plugin::CallDynGlobal<bool>(gaddrof(CGame::DrasticTidyUpMemory), a1);

	// CGame::Init1
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Init1), datFile);

	// CGame::Init2
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Init2), datFile);

	// CGame::Init3
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Init3), datFile);

	// CGame::Initialise
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Initialise), datFile);

	// CGame::InitialiseCoreDataAfterRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseCoreDataAfterRW));

	// CGame::InitialiseEssentialsAfterRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseEssentialsAfterRW));

	// CGame::InitialiseOnceBeforeRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseOnceBeforeRW));

	// CGame::InitialiseRenderWare
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseRenderWare));

	// CGame::Shutdown
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::Shutdown));

	// CGame::TidyUpMemory
	// plugin::CallDynGlobal<bool, bool>(gaddrof(CGame::TidyUpMemory), a1, clearD3Dmem);

	// MoveMem
	// plugin::CallAndReturnDynGlobal<bool, void **>(gaddrof(MoveMem), pMem);

	// MoveColModelMemory
	// plugin::CallAndReturnDynGlobal<bool, CColModel &, bool>(gaddrof(MoveColModelMemory), colModel, a2);

	// *MoveGeometryMemory
	// plugin::CallAndReturnDynGlobal<RpGeometry *, RpGeometry *>(gaddrof(MoveGeometryMemory), geometry);

	// TidyUpModelInfo2
	// plugin::CallAndReturnDynGlobal<bool, CEntity *, bool>(gaddrof(TidyUpModelInfo2), entity, a2);

	// DoHaspChecks
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(DoHaspChecks));

plugin_sa\game_sa\CGameLogic.cpp:

	// CGameLogic::InitAtStartOfGame
	// plugin::Call<0x441210>();
	0AA5: call_function 0x441210 num_params 0 pop 0

	// CGameLogic::IsCoopGameGoingOn
	// plugin::CallAndReturn<bool, 0x441390>();
	0AA7: call_function_return 0x441390 num_params 0 pop 0 func_ret [bool]

	// CGameLogic::Remove2ndPlayerIfPresent
	// plugin::Call<0x4413C0>();
	0AA5: call_function 0x4413C0 num_params 0 pop 0

	// CGameLogic::SortOutStreamingAndMemory
	// plugin::Call<0x441440, CVector*, float>(translation, angle);
	0AA5: call_function 0x441440 num_params 2 pop 2 [translation] [angle]

	// CGameLogic::PassTime
	// plugin::Call<0x4414C0, unsigned int>(time);
	0AA5: call_function 0x4414C0 num_params 1 pop 1 [time]

	// CGameLogic::ClearSkip
	// plugin::Call<0x441560, char>(a1);
	0AA5: call_function 0x441560 num_params 1 pop 1 [a1]

	// CGameLogic::SkipCanBeActivated
	// plugin::CallAndReturn<bool, 0x4415C0>();
	0AA7: call_function_return 0x4415C0 num_params 0 pop 0 func_ret [bool]

	// CGameLogic::IsPointWithinLineArea
	// plugin::CallAndReturn<int, 0x4416E0, RwV3d*, signed int, float, float>(vectors, sizeofvectors, x, y);
	0AA7: call_function_return 0x4416E0 num_params 4 pop 4 [vectors] [sizeofvectors] [x] [y] func_ret [int]

	// CGameLogic::SetPlayerWantedLevelForForbiddenTerritories
	// plugin::Call<0x441770, char>(townNumber);
	0AA5: call_function 0x441770 num_params 1 pop 1 [townNumber]

	// CGameLogic::CalcDistanceToForbiddenTrainCrossing
	// plugin::CallAndReturn<long double, 0x4418E0, float, float, float, float, float, float, char, CVector*>(x1, y1, z1, x2, y2, z2, a7, a8);
	0AA7: call_function_return 0x4418E0 num_params 8 pop 8 [x1] [y1] [z1] [x2] [y2] [z2] [a7] [a8] func_ret [long double]

	// CGameLogic::LaRiotsActiveHere
	// plugin::CallAndReturn<bool, 0x441C10>();
	0AA7: call_function_return 0x441C10 num_params 0 pop 0 func_ret [bool]

	// CGameLogic::RestorePedsWeapons
	// plugin::CallAndReturn<signed int, 0x441D30, int>(a1);
	0AA7: call_function_return 0x441D30 num_params 1 pop 1 [a1] func_ret [signed int]

	// CGameLogic::IsPlayerAllowedToGoInThisDirection
	// plugin::CallAndReturn<bool, 0x441E10, CPed*, float, float, float, float>(a1, a2, a3, a4, a5);
	0AA7: call_function_return 0x441E10 num_params 5 pop 5 [a1] [a2] [a3] [a4] [a5] func_ret [bool]

	// CGameLogic::RestorePlayerStuffDuringResurrection
	// plugin::Call<0x442060, CPlayerPed*, float, float, float, float>(player, x, y, z, fAngle);
	0AA5: call_function 0x442060 num_params 5 pop 5 [player] [x] [y] [z] [fAngle]

	// CGameLogic::UpdateSkip
	// plugin::Call<0x442480>();
	0AA5: call_function 0x442480 num_params 0 pop 0

	// CGameLogic::ResetStuffUponResurrection
	// plugin::Call<0x442980>();
	0AA5: call_function 0x442980 num_params 0 pop 0

	// CGameLogic::Update
	// plugin::Call<0x442AD0>();
	0AA5: call_function 0x442AD0 num_params 0 pop 0

	// CGameLogic::Save
	// plugin::Call<0x5D33C0>();
	0AA5: call_function 0x5D33C0 num_params 0 pop 0

plugin_sa\game_sa\CGangs.cpp:

	// CGangs::ChooseGangPedModel
	// plugin::CallAndReturnDynGlobal<signed int, short>(gaddrof(CGangs::ChooseGangPedModel), gangID);

	// CGangs::GetWillAttackPlayerWithCops
	// plugin::CallAndReturnDynGlobal<bool, ePedType>(gaddrof(CGangs::GetWillAttackPlayerWithCops), gangID);

	// CGangs::SetGangPedModelOverride
	// plugin::CallDynGlobal<short, signed char>(gaddrof(CGangs::SetGangPedModelOverride), gangID, PedModelOverride);

	// CGangs::SetGangWeapons
	// plugin::CallDynGlobal<short, int, int, int>(gaddrof(CGangs::SetGangWeapons), gangID, weapID1, weapID2, weapID3);

	// CGangs::SetWillAttackPlayerWithCops
	// plugin::CallDynGlobal<ePedType, bool>(gaddrof(CGangs::SetWillAttackPlayerWithCops), gangID, bAttackPlayerWithCops);

plugin_sa\game_sa\CGangWars.cpp:

	// CGangWars::AddKillToProvocation
	// plugin::CallDynGlobal<int>(gaddrof(CGangWars::AddKillToProvocation), Pedtype);

	// CGangWars::AttackWaveOvercome
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGangWars::AttackWaveOvercome));

	// CGangWars::CalculateTimeTillNextAttack
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CGangWars::CalculateTimeTillNextAttack));

	// CGangWars::CanPlayerStartAGangWarHere
	// plugin::CallAndReturnDynGlobal<bool, CZoneInfo *>(gaddrof(CGangWars::CanPlayerStartAGangWarHere), zoneInfo);

	// CGangWars::CreateAttackWave
	// plugin::CallAndReturnDynGlobal<bool, int, int>(gaddrof(CGangWars::CreateAttackWave), warFerocity, waveID);

	// CGangWars::CreateDefendingGroup
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CGangWars::CreateDefendingGroup), unsued);

	// CGangWars::DoesPlayerControlThisZone
	// plugin::CallAndReturnDynGlobal<bool, CZoneInfo *>(gaddrof(CGangWars::DoesPlayerControlThisZone), zoneinfo);

	// CGangWars::DontCreateCivilians
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGangWars::DontCreateCivilians));

	// CGangWars::EndGangWar
	// plugin::CallDynGlobal<bool>(gaddrof(CGangWars::EndGangWar), bEnd);

	// CGangWars::GangWarFightingGoingOn
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGangWars::GangWarFightingGoingOn));

	// CGangWars::GangWarGoingOn
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGangWars::GangWarGoingOn));

	// CGangWars::MakeEnemyGainInfluenceInZone
	// plugin::CallDynGlobal<int, int>(gaddrof(CGangWars::MakeEnemyGainInfluenceInZone), GangID, GangDensityIncreaser);

	// CGangWars::MakePlayerGainInfluenceInZone
	// plugin::CallAndReturnDynGlobal<bool, float>(gaddrof(CGangWars::MakePlayerGainInfluenceInZone), remove_mult);

	// CGangWars::PedStreamedInForThisGang
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CGangWars::PedStreamedInForThisGang), gangID);

	// CGangWars::PickStreamedInPedForThisGang
	// plugin::CallAndReturnDynGlobal<bool, int, int *>(gaddrof(CGangWars::PickStreamedInPedForThisGang), gangID, outPedID);

	// CGangWars::PickZoneToAttack
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGangWars::PickZoneToAttack));

	// CGangWars::ReleasePedsInAttackWave
	// plugin::CallAndReturnDynGlobal<int, bool, bool>(gaddrof(CGangWars::ReleasePedsInAttackWave), IsEndOfWar, RestoreGangPedsAcquaintance);

	// CGangWars::SetGangWarsActive
	// plugin::CallDynGlobal<bool>(gaddrof(CGangWars::SetGangWarsActive), bActive);

	// CGangWars::SetSpecificZoneToTriggerGangWar
	// plugin::CallDynGlobal<int>(gaddrof(CGangWars::SetSpecificZoneToTriggerGangWar), zoneId);

	// CGangWars::StrengthenPlayerInfluenceInZone
	// plugin::CallDynGlobal<int>(gaddrof(CGangWars::StrengthenPlayerInfluenceInZone), GroveDensityIncreaser);

	// CGangWars::TellGangMembersTo
	// plugin::CallDynGlobal<int>(gaddrof(CGangWars::TellGangMembersTo), bIsGangWarEnding);

	// CGangWars::TellStreamingWhichGangsAreNeeded
	// plugin::CallDynGlobal<int *>(gaddrof(CGangWars::TellStreamingWhichGangsAreNeeded), GangsBitFlags);

plugin_sa\game_sa\CGangWarsSaveStructure.cpp:

	// CGangWarsSaveStructure::Construct
	// plugin::CallMethodDynGlobal<CGangWarsSaveStructure *>(gaddrof(CGangWarsSaveStructure::Construct), this);

	// CGangWarsSaveStructure::Extract
	// plugin::CallMethodDynGlobal<CGangWarsSaveStructure *>(gaddrof(CGangWarsSaveStructure::Extract), this);

plugin_sa\game_sa\CGenericGameStorage.cpp:

	// CGenericGameStorage::CheckDataNotCorrupt
	// plugin::CallAndReturnDynGlobal<bool, int, char *>(gaddrof(CGenericGameStorage::CheckDataNotCorrupt), saveID, saveGameFilename);

	// CGenericGameStorage::CheckSlotDataValid
	// plugin::CallAndReturnDynGlobal<bool, int, bool>(gaddrof(CGenericGameStorage::CheckSlotDataValid), saveID, unused);

	// CGenericGameStorage::GenericLoad
	// plugin::CallAndReturnDynGlobal<bool, bool *>(gaddrof(CGenericGameStorage::GenericLoad), arg1);

	// CGenericGameStorage::GenericSave
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CGenericGameStorage::GenericSave), unused);

	// CGenericGameStorage::GetCurrentVersionNumber
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CGenericGameStorage::GetCurrentVersionNumber));

	// *CGenericGameStorage::GetNameOfSavedGame
	// plugin::CallAndReturnDynGlobal<char *, int>(gaddrof(CGenericGameStorage::GetNameOfSavedGame), saveID);

	// *CGenericGameStorage::GetNameOfSavedGame_Alt
	// plugin::CallAndReturnDynGlobal<char *, int>(gaddrof(CGenericGameStorage::GetNameOfSavedGame_Alt), saveID);

	// CGenericGameStorage::GetSavedRadioStationPosition
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CGenericGameStorage::GetSavedRadioStationPosition));

	// CGenericGameStorage::LoadWorkBuffer
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGenericGameStorage::LoadWorkBuffer));

	// CGenericGameStorage::MakeValidSaveName
	// plugin::CallDynGlobal<int>(gaddrof(CGenericGameStorage::MakeValidSaveName), saveNum);

	// CGenericGameStorage::OpenFileForReading
	// plugin::CallAndReturnDynGlobal<bool, char *, unsigned int *>(gaddrof(CGenericGameStorage::OpenFileForReading), saveGameFilename, saveID);

	// CGenericGameStorage::OpenFileForWriting
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGenericGameStorage::OpenFileForWriting));

	// CGenericGameStorage::ReportError
	// plugin::CallDynGlobal<eSaveLoadBlocks, eSaveLoadError>(gaddrof(CGenericGameStorage::ReportError),block,errorType);

	// CGenericGameStorage::RestoreForStartLoad
	// plugin::CallAndReturnDynGlobal<char>(gaddrof(CGenericGameStorage::RestoreForStartLoad));

	// CGenericGameStorage::SaveWorkBuffer
	// plugin::CallAndReturnDynGlobal<bool, bool>(gaddrof(CGenericGameStorage::SaveWorkBuffer), a1);

	// CGenericGameStorage::_LoadDataFromWorkBuffer
	// plugin::CallAndReturnDynGlobal<bool, void *, int>(gaddrof(CGenericGameStorage::_LoadDataFromWorkBuffer), pData, size);

	// CGenericGameStorage::_SaveDataToWorkBuffer
	// plugin::CallAndReturnDynGlobal<bool, void *, int>(gaddrof(CGenericGameStorage::_SaveDataToWorkBuffer), pData, Size);

plugin_sa\game_sa\CGridRef.cpp:

	// *CGridRef::GetAreaName
	// plugin::CallAndReturnDynGlobal<char *, unsigned char, unsigned char>(gaddrof(CGridRef::GetAreaName), sectorX, sectorY);

	// CGridRef::GetArtistBugstarID
	// plugin::CallAndReturnDynGlobal<unsigned int, unsigned char, unsigned char>(gaddrof(CGridRef::GetArtistBugstarID), sectorX, sectorY);

	// CGridRef::GetGridRefPositions
	// plugin::CallDynGlobal<CVector, unsigned char *, unsigned char *>(gaddrof_o(CGridRef::GetGridRefPositions, void (*)(CVector, unsigned char *, unsigned char *)), posn, outSectorX, outSectorY);

	// CGridRef::GetGridRefPositions
	// plugin::CallDynGlobal<unsigned char *, unsigned char *>(gaddrof_o(CGridRef::GetGridRefPositions, void (*)(unsigned char *, unsigned char *)), outSectorX, outSectorY);

plugin_sa\game_sa\CHud.cpp:

	// CHud::Draw
	// plugin::Call<0x58FAE0>();
	0AA5: call_function 0x58FAE0 num_params 0 pop 0

	// CHud::DrawAfterFade
	// plugin::Call<0x58D490>();
	0AA5: call_function 0x58D490 num_params 0 pop 0

	// CHud::DrawAreaName
	// plugin::Call<0x58AA50>();
	0AA5: call_function 0x58AA50 num_params 0 pop 0

	// CHud::DrawBustedWastedMessage
	// plugin::Call<0x58CA50>();
	0AA5: call_function 0x58CA50 num_params 0 pop 0

	// CHud::DrawCrossHairs
	// plugin::Call<0x58E020>();
	0AA5: call_function 0x58E020 num_params 0 pop 0

	// CHud::DrawFadeState
	// plugin::CallAndReturn<float, 0x58D580, DRAW_FADE_STATE, int>(fadeState, arg1);
	0AA7: call_function_return 0x58D580 num_params 2 pop 2 [fadeState] [arg1] func_ret [float]

	// CHud::DrawHelpText
	// plugin::Call<0x58B6E0>();
	0AA5: call_function 0x58B6E0 num_params 0 pop 0

	// CHud::DrawMissionTimers
	// plugin::Call<0x58B180>();
	0AA5: call_function 0x58B180 num_params 0 pop 0

	// CHud::DrawMissionTitle
	// plugin::Call<0x58D240>();
	0AA5: call_function 0x58D240 num_params 0 pop 0

	// CHud::DrawOddJobMessage
	// plugin::Call<0x58CC80, unsigned char>(priority);
	0AA5: call_function 0x58CC80 num_params 1 pop 1 [priority]

	// CHud::DrawRadar
	// plugin::Call<0x58A330>();
	0AA5: call_function 0x58A330 num_params 0 pop 0

	// CHud::DrawScriptText
	// plugin::Call<0x58C080, unsigned char>(priority);
	0AA5: call_function 0x58C080 num_params 1 pop 1 [priority]

	// CHud::DrawSubtitles
	// plugin::Call<0x58C250>();
	0AA5: call_function 0x58C250 num_params 0 pop 0

	// CHud::DrawSuccessFailedMessage
	// plugin::Call<0x58C6A0>();
	0AA5: call_function 0x58C6A0 num_params 0 pop 0

	// CHud::DrawVehicleName
	// plugin::Call<0x58AEA0>();
	0AA5: call_function 0x58AEA0 num_params 0 pop 0

	// CHud::DrawVitalStats
	// plugin::Call<0x589650>();
	0AA5: call_function 0x589650 num_params 0 pop 0

	// CHud::GetRidOfAllHudMessages
	// plugin::Call<0x588A50, unsigned char>(arg0);
	0AA5: call_function 0x588A50 num_params 1 pop 1 [arg0]

	// CHud::GetYPosBasedOnHealth
	// plugin::CallAndReturn<float, 0x588B60, unsigned char, float, signed>(playerId, pos, offset);
	0AA7: call_function_return 0x588B60 num_params 3 pop 3 [playerId] [pos] [offset] func_ret [float]

	// CHud::HelpMessageDisplayed
	// plugin::CallAndReturn<bool, 0x588B50>();
	0AA7: call_function_return 0x588B50 num_params 0 pop 0 func_ret [bool]

	// CHud::Initialise
	// plugin::Call<0x5BA850>();
	0AA5: call_function 0x5BA850 num_params 0 pop 0

	// CHud::ReInitialise
	// plugin::Call<0x588880>();
	0AA5: call_function 0x588880 num_params 0 pop 0

	// CHud::ResetWastedText
	// plugin::Call<0x589070>();
	0AA5: call_function 0x589070 num_params 0 pop 0

	// CHud::SetBigMessage
	// plugin::Call<0x588FC0, char*, unsigned short>(text, style);
	0AA5: call_function 0x588FC0 num_params 2 pop 2 [text] [style]

	// CHud::SetHelpMessage
	// plugin::Call<0x588BE0, char const*, bool, bool, bool>(text, quickMessage, permanent, addToBrief);
	0AA5: call_function 0x588BE0 num_params 4 pop 4 [text] [quickMessage] [permanent] [addToBrief]

	// CHud::SetHelpMessageStatUpdate
	// plugin::Call<0x588D40, unsigned char, unsigned short, float, float>(state, statId, diff, max);
	0AA5: call_function 0x588D40 num_params 4 pop 4 [state] [statId] [diff] [max]

	// CHud::SetHelpMessageWithNumber
	// plugin::Call<0x588E30, char const*, int, bool, bool>(text, number, quickMessage, permanent);
	0AA5: call_function 0x588E30 num_params 4 pop 4 [text] [number] [quickMessage] [permanent]

	// CHud::SetMessage
	// plugin::Call<0x588F60, char*>(text);
	0AA5: call_function 0x588F60 num_params 1 pop 1 [text]

	// CHud::SetVehicleName
	// plugin::Call<0x588F50, char*>(name);
	0AA5: call_function 0x588F50 num_params 1 pop 1 [name]

	// CHud::SetZoneName
	// plugin::Call<0x588BB0, char*, unsigned char>(name, displayState);
	0AA5: call_function 0x588BB0 num_params 2 pop 2 [name] [displayState]

	// CHud::Shutdown
	// plugin::Call<0x588850>();
	0AA5: call_function 0x588850 num_params 0 pop 0

	// CHud::DrawAmmo
	// plugin::Call<0x5893B0, CPed*, int, int, float>(ped, x, y, alpha);
	0AA5: call_function 0x5893B0 num_params 4 pop 4 [ped] [x] [y] [alpha]

	// CHud::DrawPlayerInfo
	// plugin::Call<0x58EAF0>();
	0AA5: call_function 0x58EAF0 num_params 0 pop 0

	// CHud::DrawTripSkip
	// plugin::Call<0x58A160>();
	0AA5: call_function 0x58A160 num_params 0 pop 0

	// CHud::DrawWanted
	// plugin::Call<0x58D9A0>();
	0AA5: call_function 0x58D9A0 num_params 0 pop 0

	// CHud::DrawWeaponIcon
	// plugin::Call<0x58D7D0, CPed*, int, int, float>(ped, x, y, alpha);
	0AA5: call_function 0x58D7D0 num_params 4 pop 4 [ped] [x] [y] [alpha]

	// CHud::RenderArmorBar
	// plugin::Call<0x5890A0, int, int, int>(playerId, x, y);
	0AA5: call_function 0x5890A0 num_params 3 pop 3 [playerId] [x] [y]

	// CHud::RenderBreathBar
	// plugin::Call<0x589190, int, int, int>(playerId, x, y);
	0AA5: call_function 0x589190 num_params 3 pop 3 [playerId] [x] [y]

	// CHud::RenderHealthBar
	// plugin::Call<0x589270, int, int, int>(playerId, x, y);
	0AA5: call_function 0x589270 num_params 3 pop 3 [playerId] [x] [y]

plugin_sa\game_sa\CIplStore.cpp:

	// CIplStore::AddIplSlot
	// plugin::CallAndReturn<int, 0x405AC0, char const*>(name);
	0AA7: call_function_return 0x405AC0 num_params 1 pop 1 [name] func_ret [int]

	// CIplStore::AddIplsNeededAtPosn
	// plugin::Call<0x4045B0, CVector const&>(posn);
	0AA5: call_function 0x4045B0 num_params 1 pop 1 [posn]

	// CIplStore::ClearIplsNeededAtPosn
	// plugin::Call<0x4045E0>();
	0AA5: call_function 0x4045E0 num_params 0 pop 0

	// CIplStore::EnableDynamicStreaming
	// plugin::Call<0x404D30, int, bool>(iplSlotIndex, enable);
	0AA5: call_function 0x404D30 num_params 2 pop 2 [iplSlotIndex] [enable]

	// CIplStore::EnsureIplsAreInMemory
	// plugin::Call<0x4053F0, CVector const&>(posn);
	0AA5: call_function 0x4053F0 num_params 1 pop 1 [posn]

	// CIplStore::FindIplSlot
	// plugin::CallAndReturn<int, 0x404AC0, char const*>(name);
	0AA7: call_function_return 0x404AC0 num_params 1 pop 1 [name] func_ret [int]

	// CIplStore::GetBoundingBox
	// plugin::CallAndReturn<CRect*, 0x404C70, int>(iplSlotIndex);
	0AA7: call_function_return 0x404C70 num_params 1 pop 1 [iplSlotIndex] func_ret [CRect*]

	// CIplStore::GetIplEntityIndexArray
	// plugin::CallAndReturn<int*, 0x4047B0, int>(arrayIndex);
	0AA7: call_function_return 0x4047B0 num_params 1 pop 1 [arrayIndex] func_ret [int*]

	// CIplStore::GetIplName
	// plugin::CallAndReturn<char*, 0x404A60, int>(iplSlotIndex);
	0AA7: call_function_return 0x404A60 num_params 1 pop 1 [iplSlotIndex] func_ret [char*]

	// CIplStore::GetNewIplEntityIndexArray
	// plugin::CallAndReturn<int, 0x404780, int>(entitiesCount);
	0AA7: call_function_return 0x404780 num_params 1 pop 1 [entitiesCount] func_ret [int]

	// CIplStore::HaveIplsLoaded
	// plugin::CallAndReturn<bool, 0x405600, CVector const&, int>(coords, playerNumber);
	0AA7: call_function_return 0x405600 num_params 2 pop 2 [coords] [playerNumber] func_ret [bool]

	// CIplStore::IncludeEntity
	// plugin::Call<0x404C90, int, CEntity*>(iplSlotIndex, entity);
	0AA5: call_function 0x404C90 num_params 2 pop 2 [iplSlotIndex] [entity]

	// CIplStore::Initialise
	// plugin::Call<0x405EC0>();
	0AA5: call_function 0x405EC0 num_params 0 pop 0

	// CIplStore::Load
	// plugin::CallAndReturn<bool, 0x5D54A0>();
	0AA7: call_function_return 0x5D54A0 num_params 0 pop 0 func_ret [bool]

	// CIplStore::LoadAllRemainingIpls
	// plugin::Call<0x405780>();
	0AA5: call_function 0x405780 num_params 0 pop 0

	// CIplStore::LoadIpl
	// plugin::CallAndReturn<bool, 0x406080, int, unsigned char*, int>(iplSlotIndex, data, dataSize);
	0AA7: call_function_return 0x406080 num_params 3 pop 3 [iplSlotIndex] [data] [dataSize] func_ret [bool]

	// CIplStore::LoadIplBoundingBox
	// plugin::CallAndReturn<bool, 0x405C00, int, unsigned char*, int>(iplSlotIndex, data, dataSize);
	0AA7: call_function_return 0x405C00 num_params 3 pop 3 [iplSlotIndex] [data] [dataSize] func_ret [bool]

	// CIplStore::LoadIpls
	// plugin::Call<0x405170, CVector, bool>(posn, arg1);
	0AA5: call_function 0x405170 num_params 2 pop 2 [posn] [arg1]

	// CIplStore::RemoveAllIpls
	// plugin::Call<0x405720>();
	0AA5: call_function 0x405720 num_params 0 pop 0

	// CIplStore::RemoveIpl
	// plugin::Call<0x404B20, int>(iplSlotIndex);
	0AA5: call_function 0x404B20 num_params 1 pop 1 [iplSlotIndex]

	// CIplStore::RemoveIplAndIgnore
	// plugin::Call<0x405890, int>(iplSlotIndex);
	0AA5: call_function 0x405890 num_params 1 pop 1 [iplSlotIndex]

	// CIplStore::RemoveIplSlot
	// plugin::Call<0x405B60, int>(iplSlotIndex);
	0AA5: call_function 0x405B60 num_params 1 pop 1 [iplSlotIndex]

	// CIplStore::RemoveIplWhenFarAway
	// plugin::Call<0x4058D0, int>(iplSlotIndex);
	0AA5: call_function 0x4058D0 num_params 1 pop 1 [iplSlotIndex]

	// CIplStore::RemoveRelatedIpls
	// plugin::Call<0x405110, int>(entityArraysIndex);
	0AA5: call_function 0x405110 num_params 1 pop 1 [entityArraysIndex]

	// CIplStore::RequestIplAndIgnore
	// plugin::Call<0x405850, int>(iplSlotIndex);
	0AA5: call_function 0x405850 num_params 1 pop 1 [iplSlotIndex]

	// CIplStore::RequestIpls
	// plugin::Call<0x405520, CVector const&, int>(posn, playerNumber);
	0AA5: call_function 0x405520 num_params 2 pop 2 [posn] [playerNumber]

	// CIplStore::Save
	// plugin::CallAndReturn<bool, 0x5D5420>();
	0AA7: call_function_return 0x5D5420 num_params 0 pop 0 func_ret [bool]

	// CIplStore::SetIplsRequired
	// plugin::Call<0x404700, CVector const&, int>(posn, playerNumber);
	0AA5: call_function 0x404700 num_params 2 pop 2 [posn] [playerNumber]

	// CIplStore::SetIsInterior
	// plugin::Call<0x404A90, int, bool>(iplSlotIndex, isInterior);
	0AA5: call_function 0x404A90 num_params 2 pop 2 [iplSlotIndex] [isInterior]

	// CIplStore::SetupRelatedIpls
	// plugin::CallAndReturn<int, 0x404DE0, char const*, int, CEntity**>(iplName, entityArraysIndex, instances);
	0AA7: call_function_return 0x404DE0 num_params 3 pop 3 [iplName] [entityArraysIndex] [instances] func_ret [int]

	// CIplStore::Shutdown
	// plugin::Call<0x405FA0>();
	0AA5: call_function 0x405FA0 num_params 0 pop 0

	// SetIfInteriorIplIsRequired
	// plugin::Call<0x4045F0, CVector2D const&, void*>(posn, data);
	0AA5: call_function 0x4045F0 num_params 2 pop 2 [posn] [data]

	// SetIfIplIsRequired
	// plugin::Call<0x404660, CVector2D const&, void*>(posn, data);
	0AA5: call_function 0x404660 num_params 2 pop 2 [posn] [data]

	// SetIfIplIsRequiredReducedBB
	// plugin::Call<0x404690, CVector2D const&, void*>(posn, data);
	0AA5: call_function 0x404690 num_params 2 pop 2 [posn] [data]

plugin_sa\game_sa\CLoadedCarGroup.cpp:

	// CLoadedCarGroup::SortBasedOnUsage
	// plugin::CallMethod<0x611E10, CLoadedCarGroup *>(this);
	0AA6: call_method 0x611E10 struct [CLoadedCarGroup] num_params 0 pop 0

	// CLoadedCarGroup::RemoveMember
	// plugin::CallMethodAndReturn<int, 0x611BD0, CLoadedCarGroup *, int>(this, modelindex);
	0AA8: call_method_return 0x611BD0 struct [CLoadedCarGroup] num_params 1 pop 0 [modelindex] func_ret [int]

	// CLoadedCarGroup::PickRandomCar
	// plugin::CallMethodAndReturn<int, 0x611C50, CLoadedCarGroup *, bool, bool>(this, arg1, arg2);
	0AA8: call_method_return 0x611C50 struct [CLoadedCarGroup] num_params 2 pop 0 [arg1] [arg2] func_ret [int]

	// CLoadedCarGroup::PickLeastUsedModel
	// plugin::CallMethodAndReturn<int, 0x611E90, CLoadedCarGroup *, int>(this, minRefs);
	0AA8: call_method_return 0x611E90 struct [CLoadedCarGroup] num_params 1 pop 0 [minRefs] func_ret [int]

	// CLoadedCarGroup::GetMember
	// plugin::CallMethodAndReturn<int, 0x611C20, CLoadedCarGroup *, int>(this, count);
	0AA8: call_method_return 0x611C20 struct [CLoadedCarGroup] num_params 1 pop 0 [count] func_ret [int]

	// CLoadedCarGroup::CountMembers
	// plugin::CallMethodAndReturn<unsigned int, 0x611C30, CLoadedCarGroup *>(this);
	0AA8: call_method_return 0x611C30 struct [CLoadedCarGroup] num_params 0 pop 0 func_ret [unsigned int]

	// CLoadedCarGroup::Clear
	// plugin::CallMethod<0x611B90, CLoadedCarGroup *>(this);
	0AA6: call_method 0x611B90 struct [CLoadedCarGroup] num_params 0 pop 0

	// CLoadedCarGroup::AddMember
	// plugin::CallMethod<0x611BB0, CLoadedCarGroup *, int>(this, member);
	0AA6: call_method 0x611BB0 struct [CLoadedCarGroup] num_params 1 pop 0 [member]

plugin_sa\game_sa\CLoadingScreen.cpp:

	// CLoadingScreen::Shutdown
	// plugin::Call<0x58FF10>();
	0AA5: call_function 0x58FF10 num_params 0 pop 0

	// CLoadingScreen::RenderSplash
	// plugin::Call<0x58FF60>();
	0AA5: call_function 0x58FF60 num_params 0 pop 0

	// CLoadingScreen::LoadSplashes
	// plugin::Call<0x5900B0, unsigned char, unsigned char>(bStarting, bNvidia);
	0AA5: call_function 0x5900B0 num_params 2 pop 2 [bStarting] [bNvidia]

	// CLoadingScreen::DisplayMessage
	// plugin::Call<0x590220, char const*>(message);
	0AA5: call_function 0x590220 num_params 1 pop 1 [message]

	// CLoadingScreen::SetLoadingBarMsg
	// plugin::Call<0x590240, char const*, char const*>(msg1, msg2);
	0AA5: call_function 0x590240 num_params 2 pop 2 [msg1] [msg2]

	// CLoadingScreen::GetClockTime
	// plugin::CallAndReturn<double, 0x590280, bool>(bIgnorePauseTime);
	0AA7: call_function_return 0x590280 num_params 1 pop 1 [bIgnorePauseTime] func_ret [double]

	// CLoadingScreen::Init
	// plugin::Call<0x5902B0, bool, bool>(unusedflag, bLoaded);
	0AA5: call_function 0x5902B0 num_params 2 pop 2 [unusedflag] [bLoaded]

	// CLoadingScreen::Continue
	// plugin::Call<0x590320>();
	0AA5: call_function 0x590320 num_params 0 pop 0

	// CLoadingScreen::RenderLoadingBar
	// plugin::Call<0x590370>();
	0AA5: call_function 0x590370 num_params 0 pop 0

	// CLoadingScreen::DisplayNextSplash
	// plugin::Call<0x5904D0>();
	0AA5: call_function 0x5904D0 num_params 0 pop 0

	// CLoadingScreen::StartFading
	// plugin::Call<0x590530>();
	0AA5: call_function 0x590530 num_params 0 pop 0

	// CLoadingScreen::DisplayPCScreen
	// plugin::Call<0x590570>();
	0AA5: call_function 0x590570 num_params 0 pop 0

	// CLoadingScreen::Update
	// plugin::Call<0x5905E0>();
	0AA5: call_function 0x5905E0 num_params 0 pop 0

	// CLoadingScreen::DoPCTitleFadeOut
	// plugin::Call<0x590990>();
	0AA5: call_function 0x590990 num_params 0 pop 0

	// CLoadingScreen::DoPCTitleFadeIn
	// plugin::Call<0x590860>();
	0AA5: call_function 0x590860 num_params 0 pop 0

	// CLoadingScreen::DoPCScreenChange
	// plugin::Call<0x590AC0, unsigned int>(bFinish);
	0AA5: call_function 0x590AC0 num_params 1 pop 1 [bFinish]

	// CLoadingScreen::NewChunkLoaded
	// plugin::Call<0x590D00>();
	0AA5: call_function 0x590D00 num_params 0 pop 0

plugin_sa\game_sa\CMatrix.cpp:

	// CMatrix::Scale
	// plugin::CallMethod<0x459350, CMatrix *, float>(this, scale);
	0AA6: call_method 0x459350 struct [CMatrix] num_params 1 pop 0 [scale]

	// CMatrix::Scale
	// plugin::CallMethod<0x459350, CMatrix *, float, float, float>(this, x, y, z);
	0AA6: call_method 0x459350 struct [CMatrix] num_params 3 pop 0 [x] [y] [z]

plugin_sa\game_sa\CMatrixLink.cpp:

	// CMatrixLink::Insert
	// plugin::CallMethodDynGlobal<CMatrixLink *, CMatrixLink *>(gaddrof(CMatrixLink::Insert), this, where);

	// CMatrixLink::Remove
	// plugin::CallMethodDynGlobal<CMatrixLink *>(gaddrof(CMatrixLink::Remove), this);

plugin_sa\game_sa\CMenuManager.cpp:

	// CMenuManager::CMenuManager
	// plugin::CallMethod<0x574350, CMenuManager*>(this);
	0AA6: call_method 0x574350 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::~CMenuManager
	// plugin::CallMethod<0x579440, CMenuManager*>(this);
	0AA6: call_method 0x579440 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::AdditionalOptionInput
	// plugin::CallMethodAndReturn<char, 0x5773D0, CMenuManager*, char, char>(this, input, enter);
	0AA8: call_method_return 0x5773D0 struct [CMenuManager] num_params 2 pop 0 [input] [enter] func_ret [char]

	// CMenuManager::CentreMousePointer
	// plugin::CallMethod<0x57C520, CMenuManager*>(this);
	0AA6: call_method 0x57C520 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::CheckCodesForControls
	// plugin::CallMethodAndReturn<char, 0x57DB20, CMenuManager*, int>(this, code);
	0AA8: call_method_return 0x57DB20 struct [CMenuManager] num_params 1 pop 0 [code] func_ret [char]

	// CMenuManager::CheckFrontEndDownInput
	// plugin::CallMethodAndReturn<char, 0x5738B0, CMenuManager*>(this);
	0AA8: call_method_return 0x5738B0 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckFrontEndLeftInput
	// plugin::CallMethodAndReturn<char, 0x573920, CMenuManager*>(this);
	0AA8: call_method_return 0x573920 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckFrontEndRightInput
	// plugin::CallMethodAndReturn<char, 0x573990, CMenuManager*>(this);
	0AA8: call_method_return 0x573990 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckFrontEndUpInput
	// plugin::CallMethodAndReturn<char, 0x573840, CMenuManager*>(this);
	0AA8: call_method_return 0x573840 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckHover
	// plugin::CallMethodAndReturn<bool, 0x57C4F0, CMenuManager*>(this, x1, x2, y1, y2);
	0AA8: call_method_return 0x57C4F0 struct [CMenuManager] num_params 4 pop 0 [x1] [x2] [y1] [y2] func_ret [bool]

	// CMenuManager::CheckMissionPackValidMenu
	// plugin::CallMethodAndReturn<char, 0x57D720, CMenuManager*>(this);
	0AA8: call_method_return 0x57D720 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckRedefineControlInput
	// plugin::CallMethodAndReturn<char, 0x57E4D0, CMenuManager*>(this);
	0AA8: call_method_return 0x57E4D0 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::CheckSliderMovement
	// plugin::CallMethod<0x57E4D0, CMenuManager*>(this, input);
	0AA6: call_method 0x57E4D0 struct [CMenuManager] num_params 1 pop 0 [input]

	// CMenuManager::DisplayHelperText
	// plugin::CallMethod<0x57E4D0, CMenuManager*>(this, text);
	0AA6: call_method 0x57E4D0 struct [CMenuManager] num_params 1 pop 0 [text]

	// CMenuManager::DisplaySlider
	// plugin::CallMethodAndReturn<int, 0x576860, CMenuManager*>(this, posX, posY, beginHeight, endHeight, distBetweenRects, filledAmount, colour);
	0AA8: call_method_return 0x576860 struct [CMenuManager] num_params 7 pop 0 [posX] [posY] [beginHeight] [endHeight] [distBetweenRects] [filledAmount] [colour] func_ret [int]

	// CMenuManager::DoSettingsBeforeStartingAGame
	// plugin::CallMethodAndReturn<signed int, 0x573330, CMenuManager*>(this);
	0AA8: call_method_return 0x573330 struct [CMenuManager] num_params 0 pop 0 func_ret [signed int]

	// CMenuManager::DrawBackground
	// plugin::CallMethodAndReturn<char, 0x57B750, CMenuManager*>(this);
	0AA8: call_method_return 0x57B750 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::DrawControllerScreenExtraText
	// plugin::CallMethodAndReturn<char, 0x57D8D0, CMenuManager*>(this, unk);
	0AA8: call_method_return 0x57D8D0 struct [CMenuManager] num_params 1 pop 0 [unk] func_ret [char]

	// CMenuManager::DrawControllerSetupScreen
	// plugin::CallMethodAndReturn<char, 0x57F300, CMenuManager*>(this);
	0AA8: call_method_return 0x57F300 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::DrawFrontEnd
	// plugin::CallMethod<0x57C290, CMenuManager*>(this);
	0AA6: call_method 0x57C290 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::DrawQuitGameScreen
	// plugin::CallMethod<0x57D860, CMenuManager*>(this, unused);
	0AA6: call_method 0x57D860 struct [CMenuManager] num_params 1 pop 0 [unused]

	// CMenuManager::DrawStandardMenu
	// plugin::CallMethod<0x5794A0, CMenuManager*>(this, header);
	0AA6: call_method 0x5794A0 struct [CMenuManager] num_params 1 pop 0 [header]

	// CMenuManager::DrawWindow
	// plugin::CallMethod<0x573EE0, CMenuManager*>(this, coords, pKey, nColour, backColor, Unused, bBackground);
	0AA6: call_method 0x573EE0 struct [CMenuManager] num_params 6 pop 0 [coords] [pKey] [nColour] [backColor] [Unused] [bBackground]

	// CMenuManager::DrawWindowedText
	// plugin::CallMethod<0x578F50, CMenuManager*>(this, x1, y1, x2, y2, gxt, align);
	0AA6: call_method 0x578F50 struct [CMenuManager] num_params 6 pop 0 [x1] [y1] [x2] [y2] [gxt] [align]

	// CMenuManager::GetNumberOfMenuOptions
	// plugin::CallMethodAndReturn<unsigned char, 0x573E70, CMenuManager*>(this);
	0AA8: call_method_return 0x573E70 struct [CMenuManager] num_params 0 pop 0 func_ret [unsigned char]

	// CMenuManager::HasLanguageChanged
	// plugin::CallMethodAndReturn<bool, 0x573CD0, CMenuManager*>(this);
	0AA8: call_method_return 0x573CD0 struct [CMenuManager] num_params 0 pop 0 func_ret [bool]

	// CMenuManager::Initialise
	// plugin::CallMethod<0x5744D0, CMenuManager*>(this);
	0AA6: call_method 0x5744D0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::InitialiseChangedLanguageSettings
	// plugin::CallMethod<0x573260, CMenuManager*>(this, reInitControls);
	0AA6: call_method 0x573260 struct [CMenuManager] num_params 1 pop 0 [reInitControls]

	// CMenuManager::JumpToGenericMessageScreen
	// plugin::CallMethodAndReturn<int, 0x576AE0, CMenuManager*>(this, screen, header, action);
	0AA8: call_method_return 0x576AE0 struct [CMenuManager] num_params 3 pop 0 [screen] [header] [action] func_ret [int]

	// CMenuManager::LoadAllTextures
	// plugin::CallMethod<0x572EC0, CMenuManager*>(this);
	0AA6: call_method 0x572EC0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::LoadSettings
	// plugin::CallMethod<0x57C8F0, CMenuManager*>(this);
	0AA6: call_method 0x57C8F0 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::MessageScreen
	// plugin::CallMethod<0x579330, CMenuManager*>(this, message, col, frame);
	0AA6: call_method 0x579330 struct [CMenuManager] num_params 3 pop 0 [message] [col] [frame]

	// CMenuManager::PrintBriefs
	// plugin::CallMethodAndReturn<float, 0x576320, CMenuManager*>(this);
	0AA8: call_method_return 0x576320 struct [CMenuManager] num_params 0 pop 0 func_ret [float]

	// CMenuManager::PrintMap
	// plugin::CallMethodAndReturn<char, 0x575130, CMenuManager*>(this);
	0AA8: call_method_return 0x575130 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::PrintRadioStationList
	// plugin::CallMethodAndReturn<char, 0x5746F0, CMenuManager*>(this);
	0AA8: call_method_return 0x5746F0 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::PrintStats
	// plugin::CallMethodAndReturn<char, 0x574900, CMenuManager*>(this);
	0AA8: call_method_return 0x574900 struct [CMenuManager] num_params 0 pop 0 func_ret [char]

	// CMenuManager::Process
	// plugin::CallMethodAndReturn<int, 0x57B440, CMenuManager*>(this);
	0AA8: call_method_return 0x57B440 struct [CMenuManager] num_params 0 pop 0 func_ret [int]

	// CMenuManager::ProcessFileActions
	// plugin::CallMethod<0x578D60, CMenuManager*>(this);
	0AA6: call_method 0x578D60 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::ProcessMenuOptions
	// plugin::CallMethod<0x576FE0, CMenuManager*>(this, input, exit, enter);
	0AA6: call_method 0x576FE0 struct [CMenuManager] num_params 3 pop 0 [input] [exit] [enter]

	// CMenuManager::ProcessMissionPackNewGame
	// plugin::CallMethod<0x57D520, CMenuManager*>(this);
	0AA6: call_method 0x57D520 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::ProcessPCMenuOptions
	// plugin::CallMethodAndReturn<char, 0x57CD50, CMenuManager*>(this, input, enter);
	0AA8: call_method_return 0x57CD50 struct [CMenuManager] num_params 2 pop 0 [input] [enter] func_ret [char]

	// CMenuManager::ProcessStreaming
	// plugin::CallMethod<0x573CF0, CMenuManager*>(this, all);
	0AA6: call_method 0x573CF0 struct [CMenuManager] num_params 1 pop 0 [all]

	// CMenuManager::ProcessUserInput
	// plugin::CallMethod<0x57B480, CMenuManager*>(this, down, up, enter, exit, input);
	0AA6: call_method 0x57B480 struct [CMenuManager] num_params 5 pop 0 [down] [up] [enter] [exit] [input]

	// CMenuManager::RedefineScreenUserInput
	// plugin::CallMethodAndReturn<char, 0x57EF50, CMenuManager*>(this, enter, exit);
	0AA8: call_method_return 0x57EF50 struct [CMenuManager] num_params 2 pop 0 [enter] [exit] func_ret [char]

	// CMenuManager::ResetHelperText
	// plugin::CallMethod<0x57CD30, CMenuManager*>(this);
	0AA6: call_method 0x57CD30 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SaveLoadFileError_SetUpErrorScreen
	// plugin::CallMethod<0x57C490, CMenuManager*>(this);
	0AA6: call_method 0x57C490 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SaveSettings
	// plugin::CallMethod<0x57C660, CMenuManager*>(this);
	0AA6: call_method 0x57C660 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SaveStatsToFile
	// plugin::CallMethodAndReturn<int, 0x57DDE0, CMenuManager*>(this);
	0AA8: call_method_return 0x57DDE0 struct [CMenuManager] num_params 0 pop 0 func_ret [int]

	// CMenuManager::ScrollRadioStations
	// plugin::CallMethod<0x573A00, CMenuManager*>(this, input);
	0AA6: call_method 0x573A00 struct [CMenuManager] num_params 1 pop 0 [input]

	// CMenuManager::SetDefaultPreferences
	// plugin::CallMethodAndReturn<char, 0x573AE0, CMenuManager*>(this, page);
	0AA8: call_method_return 0x573AE0 struct [CMenuManager] num_params 1 pop 0 [page] func_ret [char]

	// CMenuManager::SetFrontEndRenderStates
	// plugin::CallMethod<0x573A60, CMenuManager*>(this);
	0AA6: call_method 0x573A60 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SetHelperText
	// plugin::CallMethodAndReturn<int, 0x57CD10, CMenuManager*>(this, index);
	0AA8: call_method_return 0x57CD10 struct [CMenuManager] num_params 1 pop 0 [index] func_ret [int]

	// CMenuManager::SmallMessageScreen
	// plugin::CallMethod<0x574010, CMenuManager*>(this, message);
	0AA6: call_method 0x574010 struct [CMenuManager] num_params 1 pop 0 [message]

	// CMenuManager::StretchX
	// plugin::CallMethodAndReturn<float, 0x5733E0, CMenuManager*>(this, x);
	0AA8: call_method_return 0x5733E0 struct [CMenuManager] num_params 1 pop 0 [x] func_ret [float]

	// CMenuManager::StretchY
	// plugin::CallMethodAndReturn<float, 0x573410, CMenuManager*>(this, y);
	0AA8: call_method_return 0x573410 struct [CMenuManager] num_params 1 pop 0 [y] func_ret [float]

	// CMenuManager::SwapTexturesRound
	// plugin::CallMethod<0x5730A0, CMenuManager*>(this, force);
	0AA6: call_method 0x5730A0 struct [CMenuManager] num_params 1 pop 0 [force]

	// CMenuManager::SwitchMenuOnAndOff
	// plugin::CallMethod<0x576B70, CMenuManager*>(this);
	0AA6: call_method 0x576B70 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::SwitchToNewScreen
	// plugin::CallMethodAndReturn<char, 0x573680, CMenuManager*>(this, page);
	0AA8: call_method_return 0x573680 struct [CMenuManager] num_params 1 pop 0 [page] func_ret [char]

	// CMenuManager::UnloadTextures
	// plugin::CallMethod<0x574630, CMenuManager*>(this);
	0AA6: call_method 0x574630 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::UserInput
	// plugin::CallMethod<0x57FD70, CMenuManager*>(this);
	0AA6: call_method 0x57FD70 struct [CMenuManager] num_params 0 pop 0

plugin_sa\game_sa\CMirrors.cpp:

	// CMirrors::BeforeConstructRenderList
	// plugin::Call<0x726DF0>();
	0AA5: call_function 0x726DF0 num_params 0 pop 0

	// CMirrors::BeforeMainRender
	// plugin::Call<0x727140>();
	0AA5: call_function 0x727140 num_params 0 pop 0

	// CMirrors::BuildCamMatrix
	// plugin::Call<0x723150, CMatrix*, CVector, CVector>(mat, pointA, pointB);
	0AA5: call_function 0x723150 num_params 3 pop 3 [mat] [pointA] [pointB]

	// CMirrors::BuildCameraMatrixForScreens
	// plugin::Call<0x7266B0, CMatrix*>(mat);
	0AA5: call_function 0x7266B0 num_params 1 pop 1 [mat]

	// CMirrors::CreateBuffer
	// plugin::Call<0x7230A0>();
	0AA5: call_function 0x7230A0 num_params 0 pop 0

	// CMirrors::Init
	// plugin::Call<0x723000>();
	0AA5: call_function 0x723000 num_params 0 pop 0

	// CMirrors::RenderMirrorBuffer
	// plugin::Call<0x726090>();
	0AA5: call_function 0x726090 num_params 0 pop 0

	// CMirrors::ShutDown
	// plugin::Call<0x723050>();
	0AA5: call_function 0x723050 num_params 0 pop 0

plugin_sa\game_sa\CModelInfo.cpp:

	// *CModelInfo::GetModelInfo
	// plugin::CallAndReturn<CBaseModelInfo *, 0x403DA0, int>(index);
	0AA7: call_function_return 0x403DA0 num_params 1 pop 1 [index] func_ret [CBaseModelInfo *]

plugin_sa\game_sa\CModelInfoAccelerator.cpp:

	// CModelInfoAccelerator::Init
	// plugin::CallMethod<0x4C6A80, CModelInfoAccelerator *>(this);
	0AA6: call_method 0x4C6A80 struct [CModelInfoAccelerator] num_params 0 pop 0

	// CModelInfoAccelerator::AddModelInfoId
	// plugin::CallMethod<0x4C6AA0, CModelInfoAccelerator *, unsigned short>(this, modelId);
	0AA6: call_method 0x4C6AA0 struct [CModelInfoAccelerator] num_params 1 pop 0 [modelId]

	// CModelInfoAccelerator::GetNextModelInfoId
	// plugin::CallMethodAndReturn<unsigned short, 0x4C6AC0, CModelInfoAccelerator *>(this);
	0AA8: call_method_return 0x4C6AC0 struct [CModelInfoAccelerator] num_params 0 pop 0 func_ret [unsigned short]

	// CModelInfoAccelerator::AllocModelInfoIds
	// plugin::CallMethod<0x4C6AE0, CModelInfoAccelerator *>(this);
	0AA6: call_method 0x4C6AE0 struct [CModelInfoAccelerator] num_params 0 pop 0

	// CModelInfoAccelerator::FreeModelInfoIds
	// plugin::CallMethod<0x4C6B10, CModelInfoAccelerator *>(this);
	0AA6: call_method 0x4C6B10 struct [CModelInfoAccelerator] num_params 0 pop 0

	// CModelInfoAccelerator::GetEntry
	// plugin::CallMethod<0x4C6B30, CModelInfoAccelerator *, CBaseModelInfo**, int*, char*>(this, arg0, arg1, arg2);
	0AA6: call_method 0x4C6B30 struct [CModelInfoAccelerator] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CModelInfoAccelerator::End
	// plugin::CallMethod<0x4C6B40, CModelInfoAccelerator *, char*>(this, arg0);
	0AA6: call_method 0x4C6B40 struct [CModelInfoAccelerator] num_params 1 pop 0 [arg0]

	// CModelInfoAccelerator::CModelInfoAccelerator
	// plugin::CallMethod<0x4C6B50, CModelInfoAccelerator *>(this);
	0AA6: call_method 0x4C6B50 struct [CModelInfoAccelerator] num_params 0 pop 0

	// CModelInfoAccelerator::GetModelInfoIdFile
	// plugin::CallMethodAndReturn<bool, 0x4C6B70, CModelInfoAccelerator *>(this);
	0AA8: call_method_return 0x4C6B70 struct [CModelInfoAccelerator] num_params 0 pop 0 func_ret [bool]

	// CModelInfoAccelerator::EndOfLoadPhase
	// plugin::CallMethod<0x4C6BD0, CModelInfoAccelerator *>(this);
	0AA6: call_method 0x4C6BD0 struct [CModelInfoAccelerator] num_params 0 pop 0

	// CModelInfoAccelerator::Begin
	// plugin::CallMethodAndReturn<bool, 0x4C6C20, CModelInfoAccelerator *, char*>(this, filePath);
	0AA8: call_method_return 0x4C6C20 struct [CModelInfoAccelerator] num_params 1 pop 0 [filePath] func_ret [bool]

plugin_sa\game_sa\CMotionBlurStreaks.cpp:

	// CMotionBlurStreaks::Update
	// plugin::Call<0x7240C0>();
	0AA5: call_function 0x7240C0 num_params 0 pop 0

	// CMotionBlurStreaks::Render
	// plugin::Call<0x7240E0>();
	0AA5: call_function 0x7240E0 num_params 0 pop 0

	// CMotionBlurStreaks::RegisterStreak
	// plugin::Call<0x721DC0, unsigned int, unsigned char, unsigned char, unsigned char, CVector, CVector>(id, red, green, blue, leftPoint, rightPoint);
	0AA5: call_function 0x721DC0 num_params 6 pop 6 [id] [red] [green] [blue] [leftPoint] [rightPoint]

	// CMotionBlurStreaks::Init
	// plugin::Call<0x721D90>();
	0AA5: call_function 0x721D90 num_params 0 pop 0

plugin_sa\game_sa\COctTree.cpp:

	// COctTree::InsertTree
	// plugin::CallVirtualMethodAndReturn<bool, 0, COctTree *, unsigned char, unsigned char, unsigned char>(this, colorRed, colorGreen, colorBlue);

	// COctTree::FillPalette
	// plugin::CallVirtualMethod<1, COctTree *, unsigned char*>(this, colors);

	// COctTree::COctTree
	// plugin::CallMethod<0x5A6DB0, COctTree *>(this);
	0AA6: call_method 0x5A6DB0 struct [COctTree] num_params 0 pop 0

	// COctTree::FindNearestColour
	// plugin::CallMethodAndReturn<unsigned int, 0x5A71E0, COctTree *, unsigned char, unsigned char, unsigned char>(this, colorRed, colorGreen, colorBlue);
	0AA8: call_method_return 0x5A71E0 struct [COctTree] num_params 3 pop 0 [colorRed] [colorGreen] [colorBlue] func_ret [unsigned int]

	// COctTree::InitPool
	// plugin::CallMethod<0x5A7460, COctTree *, void*, int>(this, data, dataSize);
	0AA6: call_method 0x5A7460 struct [COctTree] num_params 2 pop 0 [data] [dataSize]

	// COctTree::NoOfChildren
	// plugin::CallMethodAndReturn<unsigned int, 0x5A6DE0, COctTree *>(this);
	0AA8: call_method_return 0x5A6DE0 struct [COctTree] num_params 0 pop 0 func_ret [unsigned int]

	// COctTree::ReduceTree
	// plugin::CallMethod<0x5A7040, COctTree *>(this);
	0AA6: call_method 0x5A7040 struct [COctTree] num_params 0 pop 0

	// COctTree::RemoveChildren
	// plugin::CallMethod<0x5A74F0, COctTree *>(this);
	0AA6: call_method 0x5A74F0 struct [COctTree] num_params 0 pop 0

	// COctTree::ShutdownPool
	// plugin::CallMethod<0x5A6F70, COctTree *>(this);
	0AA6: call_method 0x5A6F70 struct [COctTree] num_params 0 pop 0

	// COctTree::empty
	// plugin::CallMethod<0x5A6FC0, COctTree *>(this);
	0AA6: call_method 0x5A6FC0 struct [COctTree] num_params 0 pop 0

	// COctTree::operator delete
	// plugin::Call<0x5A7420, void*>(data);
	0AA5: call_function 0x5A7420 num_params 1 pop 1 [data]

	// COctTree::operator new
	// plugin::CallAndReturn<void*, 0x5A7410, unsigned int>(size);
	0AA7: call_function_return 0x5A7410 num_params 1 pop 1 [size] func_ret [void*]

plugin_sa\game_sa\COctTreeBase.cpp:

	// COctTreeBase::COctTreeBase
	// plugin::CallMethod<0x5A7570, COctTreeBase *>(this);
	0AA6: call_method 0x5A7570 struct [COctTreeBase] num_params 0 pop 0

	// COctTreeBase::Init
	// plugin::CallMethod<0x5A7260, COctTreeBase *, int>(this, numBranches);
	0AA6: call_method 0x5A7260 struct [COctTreeBase] num_params 1 pop 0 [numBranches]

	// COctTreeBase::Insert
	// plugin::CallMethodAndReturn<bool, 0x5A7750, COctTreeBase *, unsigned char, unsigned char, unsigned char>(this, colorRed, colorGreen, colorBlue);
	0AA8: call_method_return 0x5A7750 struct [COctTreeBase] num_params 3 pop 0 [colorRed] [colorGreen] [colorBlue] func_ret [bool]

	// COctTreeBase::ReduceBranches
	// plugin::CallMethod<0x5A7840, COctTreeBase *, int>(this, newBranchesCount);
	0AA6: call_method 0x5A7840 struct [COctTreeBase] num_params 1 pop 0 [newBranchesCount]

plugin_sa\game_sa\common.cpp:

	// RemoveRefsCB
	// plugin::CallAndReturn<RpAtomic*, 0x7226D0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x7226D0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// RemoveRefsForAtomic
	// plugin::Call<0x7226F0, RpClump*>(clump);
	0AA5: call_function 0x7226F0 num_params 1 pop 1 [clump]

	// RpAnimBlendAllocateData
	// plugin::CallAndReturn<CAnimBlendClumpData*, 0x4D5F50, RpClump*>(clump);
	0AA7: call_function_return 0x4D5F50 num_params 1 pop 1 [clump] func_ret [CAnimBlendClumpData*]

	// RpAnimBlendClumpAddAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6790, RpClump*, CAnimBlendAssociation*, unsigned int, float, float>(clump, association, flags, startTime, blendAmount);
	0AA7: call_function_return 0x4D6790 num_params 5 pop 5 [clump] [association] [flags] [startTime] [blendAmount] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpExtractAssociations
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6BE0, RpClump*>(clump);
	0AA7: call_function_return 0x4D6BE0 num_params 1 pop 1 [clump] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpFillFrameArray
	// plugin::Call<0x4D64A0, RpClump*, AnimBlendFrameData**>(clump, frameData);
	0AA5: call_function 0x4D64A0 num_params 2 pop 2 [clump] [frameData]

	// RpAnimBlendClumpFindBone
	// plugin::CallAndReturn<AnimBlendFrameData*, 0x4D6400, RpClump*, unsigned int>(clump, id);
	0AA7: call_function_return 0x4D6400 num_params 2 pop 2 [clump] [id] func_ret [AnimBlendFrameData*]

	// RpAnimBlendClumpFindFrame
	// plugin::CallAndReturn<AnimBlendFrameData*, 0x4D62A0, RpClump*, char const*>(clump, name);
	0AA7: call_function_return 0x4D62A0 num_params 2 pop 2 [clump] [name] func_ret [AnimBlendFrameData*]

	// RpAnimBlendClumpFindFrameFromHashKey
	// plugin::CallAndReturn<AnimBlendFrameData*, 0x4D6370, RpClump*, unsigned int>(clump, key);
	0AA7: call_function_return 0x4D6370 num_params 2 pop 2 [clump] [key] func_ret [AnimBlendFrameData*]

	// RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D68E0, RpClump*, bool, CAnimBlendHierarchy*>(clump, arg1, hierarchy);
	0AA7: call_function_return 0x4D68E0 num_params 3 pop 3 [clump] [arg1] [hierarchy] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6870, RpClump*, char const*>(clump, name);
	0AA7: call_function_return 0x4D6870 num_params 2 pop 2 [clump] [name] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D68B0, RpClump*, unsigned int>(clump, animId);
	0AA7: call_function_return 0x4D68B0 num_params 2 pop 2 [clump] [animId] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D15E0, RpClump*>(clump);
	0AA7: call_function_return 0x4D15E0 num_params 1 pop 1 [clump] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6A70, RpClump*, unsigned int>(clump, flags);
	0AA7: call_function_return 0x4D6A70 num_params 2 pop 2 [clump] [flags] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6910, RpClump*, CAnimBlendAssociation**, float*>(clump, pAssociation, blendAmount);
	0AA7: call_function_return 0x4D6910 num_params 3 pop 3 [clump] [pAssociation] [blendAmount] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainAssociation_N
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6A30, RpClump*, int>(clump, n);
	0AA7: call_function_return 0x4D6A30 num_params 2 pop 2 [clump] [n] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainPartialAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D69A0, RpClump*>(clump);
	0AA7: call_function_return 0x4D69A0 num_params 1 pop 1 [clump] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainPartialAssociation_N
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D69F0, RpClump*, int>(clump, n);
	0AA7: call_function_return 0x4D69F0 num_params 2 pop 2 [clump] [n] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetNumAssociations
	// plugin::CallAndReturn<unsigned int, 0x4D6B60, RpClump*>(clump);
	0AA7: call_function_return 0x4D6B60 num_params 1 pop 1 [clump] func_ret [unsigned int]

	// RpAnimBlendClumpGetNumNonPartialAssociations
	// plugin::CallAndReturn<unsigned int, 0x4D6BB0, RpClump*>(clump);
	0AA7: call_function_return 0x4D6BB0 num_params 1 pop 1 [clump] func_ret [unsigned int]

	// RpAnimBlendClumpGetNumPartialAssociations
	// plugin::CallAndReturn<unsigned int, 0x4D6B80, RpClump*>(clump);
	0AA7: call_function_return 0x4D6B80 num_params 1 pop 1 [clump] func_ret [unsigned int]

	// RpAnimBlendClumpGiveAssociations
	// plugin::Call<0x4D6C30, RpClump*, CAnimBlendAssociation*>(clump, association);
	0AA5: call_function 0x4D6C30 num_params 2 pop 2 [clump] [association]

	// RpAnimBlendClumpInit
	// plugin::Call<0x4D6720, RpClump*>(clump);
	0AA5: call_function 0x4D6720 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpIsInitialized
	// plugin::CallAndReturn<bool, 0x4D6760, RpClump*>(clump);
	0AA7: call_function_return 0x4D6760 num_params 1 pop 1 [clump] func_ret [bool]

	// RpAnimBlendClumpPauseAllAnimations
	// plugin::Call<0x4D6B00, RpClump*>(clump);
	0AA5: call_function 0x4D6B00 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpRemoveAllAssociations
	// plugin::Call<0x4D6C00, RpClump*>(clump);
	0AA5: call_function 0x4D6C00 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpRemoveAssociations
	// plugin::Call<0x4D6820, RpClump*, unsigned int>(clump, flags);
	0AA5: call_function 0x4D6820 num_params 2 pop 2 [clump] [flags]

	// RpAnimBlendClumpSetBlendDeltas
	// plugin::Call<0x4D67E0, RpClump*, unsigned int, float>(clump, flags, delta);
	0AA5: call_function 0x4D67E0 num_params 3 pop 3 [clump] [flags] [delta]

	// RpAnimBlendClumpUnPauseAllAnimations
	// plugin::Call<0x4D6B30, RpClump*>(clump);
	0AA5: call_function 0x4D6B30 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpUpdateAnimations
	// plugin::Call<0x4D34F0, RpClump*, float, bool>(clump, step, onScreen);
	0AA5: call_function 0x4D34F0 num_params 3 pop 3 [clump] [step] [onScreen]

	// RpAnimBlendCreateAnimationForHierarchy
	// plugin::CallAndReturn<RtAnimAnimation*, 0x4D60E0, RpHAnimHierarchy*>(hierarchy);
	0AA7: call_function_return 0x4D60E0 num_params 1 pop 1 [hierarchy] func_ret [RtAnimAnimation*]

	// RpAnimBlendFrameGetName
	// plugin::CallAndReturn<char*, 0x4D5EF0, RwFrame*>(frame);
	0AA7: call_function_return 0x4D5EF0 num_params 1 pop 1 [frame] func_ret [char*]

	// RpAnimBlendFrameSetName
	// plugin::Call<0x4D5F00, RwFrame*, char*>(frame, name);
	0AA5: call_function 0x4D5F00 num_params 2 pop 2 [frame] [name]

	// RpAnimBlendGetNextAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6AB0, CAnimBlendAssociation*>(association);
	0AA7: call_function_return 0x4D6AB0 num_params 1 pop 1 [association] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendGetNextAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4D6AD0, CAnimBlendAssociation*, unsigned int>(association, flags);
	0AA7: call_function_return 0x4D6AD0 num_params 2 pop 2 [association] [flags] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendKeyFrameInterpolate
	// plugin::Call<0x4D60C0, void*, void*, void*, float, void*>(voidOut, voidIn1, voidIn2, time, customData);
	0AA5: call_function 0x4D60C0 num_params 5 pop 5 [voidOut] [voidIn1] [voidIn2] [time] [customData]

	// RpAnimBlendPluginAttach
	// plugin::CallAndReturn<bool, 0x4D6150>();
	0AA7: call_function_return 0x4D6150 num_params 0 pop 0 func_ret [bool]

	// AsciiToGxtChar
	// plugin::Call<0x718600, char const *, char *>(src, dst);
	0AA5: call_function 0x718600 num_params 2 pop 2 [src] [dst]

	// assert
	// plugin::Call<0x005A4150>(pRaster, pszPath);
	0AA5: call_function 0x005A4150 num_params 2 pop 2 [pRaster] [pszPath]

	// DoRWStuffStartOfFrame
	// plugin::CallAndReturn<bool, 0x53D690>(topRed, topGreen, topBlue, bottomRed, bottomGreen, bottomBlue, alpha);
	0AA7: call_function_return 0x53D690 num_params 7 pop 7 [topRed] [topGreen] [topBlue] [bottomRed] [bottomGreen] [bottomBlue] [alpha] func_ret [bool]

	// DoRWStuffEndOfFrame
	// plugin::Call<0x53D840>();
	0AA5: call_function 0x53D840 num_params 0 pop 0

	// RsCameraShowRaster
	// plugin::Call<0x619440>(camera);
	0AA5: call_function 0x619440 num_params 1 pop 1 [camera]

plugin_sa\game_sa\COnscreenCounterEntry.cpp:

	// COnscreenCounterEntry::ProcessForDisplayCounter
	// plugin::CallMethodDynGlobal<COnscreenCounterEntry *, int>(gaddrof(COnscreenCounterEntry::ProcessForDisplayCounter), this, type);

	// COnscreenCounterEntry::SetColourID
	// plugin::CallMethodDynGlobal<COnscreenCounterEntry *, unsigned char>(gaddrof(COnscreenCounterEntry::SetColourID), this, ColourID);

plugin_sa\game_sa\COnscreenTimer.cpp:

	// COnscreenTimer::AddClock
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, char *, bool>(gaddrof(COnscreenTimer::AddClock), this, varId, gxt, bTimerDirection);

	// COnscreenTimer::AddCounter
	// plugin::CallMethodDynGlobal<COnscreenTimer *, int, short, char *, unsigned short>(gaddrof(COnscreenTimer::AddCounter), this, varId, type, gxt, counterIndex);

	// COnscreenTimer::AddCounterCounter
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, unsigned int, char *, unsigned short>(gaddrof(COnscreenTimer::AddCounterCounter), this, varId, maxValue, gxt, lineId);

	// COnscreenTimer::ClearClock
	// plugin::CallMethodAndReturnDynGlobal<int, COnscreenTimer *, unsigned int>(gaddrof(COnscreenTimer::ClearClock), this, varId);
	0AA8: call_method_return 0x44CE60 struct [COnscreenTimer] num_params 1 pop 0 [varId] func_ret [int]

	// COnscreenTimer::ClearCounter
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int>(gaddrof(COnscreenTimer::ClearCounter), this, varId);

	// COnscreenTimer::Init
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::Init), this);

	// COnscreenTimer::Process
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::Process), this);

	// COnscreenTimer::ProcessForDisplay
	// plugin::CallMethodDynGlobal<COnscreenTimer *>(gaddrof(COnscreenTimer::ProcessForDisplay), this);

	// COnscreenTimer::SetClockBeepCountdownSecs
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, unsigned int>(gaddrof(COnscreenTimer::SetClockBeepCountdownSecs), this, varID, time);

	// COnscreenTimer::SetCounterColourID
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, unsigned char>(gaddrof(COnscreenTimer::SetCounterColourID), this, varID, ColourID);

	// COnscreenTimer::SetCounterFlashWhenFirstDisplayed
	// plugin::CallMethodDynGlobal<COnscreenTimer *, unsigned int, unsigned char>(gaddrof(COnscreenTimer::SetCounterFlashWhenFirstDisplayed), this, varId, bFlashWhenFirstDisplayed);

plugin_sa\game_sa\COnscreenTimerEntry.cpp:

	// COnscreenTimerEntry::Process
	// plugin::CallMethodDynGlobal<COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::Process), this);

	// COnscreenTimerEntry::ProcessForDisplayClock
	// plugin::CallMethodDynGlobal<COnscreenTimerEntry *>(gaddrof(COnscreenTimerEntry::ProcessForDisplayClock), this);

plugin_sa\game_sa\CPad.cpp:

	// CPad::UpdateMouse
	// plugin::CallMethod<0x53F3C0, CPad *>(this);
	0AA6: call_method 0x53F3C0 struct [CPad] num_params 0 pop 0

	// CPad::ReconcileTwoControllersInput
	// plugin::CallMethod<0x53F530, CPad *, CControllerState const&, CControllerState const&>(this, controllerA, controllerB);
	0AA6: call_method 0x53F530 struct [CPad] num_params 2 pop 0 [controllerA] [controllerB]

	// CPad::SetDrunkInputDelay
	// plugin::CallMethod<0x53F910, CPad *, int>(this, delay);
	0AA6: call_method 0x53F910 struct [CPad] num_params 1 pop 0 [delay]

	// CPad::StartShake
	// plugin::CallMethod<0x53F920, CPad *, short, unsigned char, unsigned int>(this, time, frequency, arg2);
	0AA6: call_method 0x53F920 struct [CPad] num_params 3 pop 0 [time] [frequency] [arg2]

	// CPad::StartShake_Distance
	// plugin::CallMethod<0x53F9A0, CPad *, short, unsigned char, float, float, float>(this, time, frequency, x, y, z);
	0AA6: call_method 0x53F9A0 struct [CPad] num_params 5 pop 0 [time] [frequency] [x] [y] [z]

	// CPad::StartShake_Train
	// plugin::CallMethod<0x53FA70, CPad *, float, float>(this, x, y);
	0AA6: call_method 0x53FA70 struct [CPad] num_params 2 pop 0 [x] [y]

	// CPad::ProcessPCSpecificStuff
	// plugin::CallMethod<0x53FB40, CPad *>(this);
	0AA6: call_method 0x53FB40 struct [CPad] num_params 0 pop 0

	// CPad::StopShaking
	// plugin::CallMethod<0x53FB50, CPad *, short>(this, arg0);
	0AA6: call_method 0x53FB50 struct [CPad] num_params 1 pop 0 [arg0]

	// CPad::GetPad
	// plugin::CallAndReturn<CPad*, 0x53FB70, int>(padNumber);
	0AA7: call_function_return 0x53FB70 num_params 1 pop 1 [padNumber] func_ret [CPad*]

	// CPad::GetSteeringLeftRight
	// plugin::CallMethodAndReturn<short, 0x53FB80, CPad *>(this);
	0AA8: call_method_return 0x53FB80 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetSteeringUpDown
	// plugin::CallMethodAndReturn<short, 0x53FBD0, CPad *>(this);
	0AA8: call_method_return 0x53FBD0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetPedWalkLeftRight
	// plugin::CallMethodAndReturn<short, 0x53FC90, CPad *>(this);
	0AA8: call_method_return 0x53FC90 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetPedWalkUpDown
	// plugin::CallMethodAndReturn<short, 0x53FD30, CPad *>(this);
	0AA8: call_method_return 0x53FD30 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetLookLeft
	// plugin::CallMethodAndReturn<bool, 0x53FDD0, CPad *>(this);
	0AA8: call_method_return 0x53FDD0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookRight
	// plugin::CallMethodAndReturn<bool, 0x53FE10, CPad *>(this);
	0AA8: call_method_return 0x53FE10 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForCar
	// plugin::CallMethodAndReturn<bool, 0x53FE70, CPad *>(this);
	0AA8: call_method_return 0x53FE70 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForPed
	// plugin::CallMethodAndReturn<bool, 0x53FEC0, CPad *>(this);
	0AA8: call_method_return 0x53FEC0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetHorn
	// plugin::CallMethodAndReturn<bool, 0x53FEE0, CPad *>(this);
	0AA8: call_method_return 0x53FEE0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::HornJustDown
	// plugin::CallMethodAndReturn<bool, 0x53FF30, CPad *>(this);
	0AA8: call_method_return 0x53FF30 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetHydraulicJump
	// plugin::CallMethodAndReturn<bool, 0x53FF70, CPad *>(this);
	0AA8: call_method_return 0x53FF70 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetCarGunFired
	// plugin::CallMethodAndReturn<short, 0x53FF90, CPad *>(this);
	0AA8: call_method_return 0x53FF90 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::CarGunJustDown
	// plugin::CallMethodAndReturn<short, 0x53FFE0, CPad *>(this);
	0AA8: call_method_return 0x53FFE0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetHandBrake
	// plugin::CallMethodAndReturn<short, 0x540040, CPad *>(this);
	0AA8: call_method_return 0x540040 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetBrake
	// plugin::CallMethodAndReturn<short, 0x540080, CPad *>(this);
	0AA8: call_method_return 0x540080 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetExitVehicle
	// plugin::CallMethodAndReturn<bool, 0x5400D0, CPad *>(this);
	0AA8: call_method_return 0x5400D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ExitVehicleJustDown
	// plugin::CallMethodAndReturn<bool, 0x540120, CPad *>(this);
	0AA8: call_method_return 0x540120 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetMeleeAttack
	// plugin::CallMethodAndReturn<unsigned char, 0x540340, CPad *>(this, 0);
	0AA8: call_method_return 0x540340 struct [CPad] num_params 1 pop 0 [0] func_ret [unsigned char]

	// CPad::MeleeAttackJustDown
	// plugin::CallMethodAndReturn<unsigned char, 0x540390, CPad *>(this);
	0AA8: call_method_return 0x540390 struct [CPad] num_params 0 pop 0 func_ret [unsigned char]

	// CPad::GetAccelerate
	// plugin::CallMethodAndReturn<short, 0x5403F0, CPad *>(this);
	0AA8: call_method_return 0x5403F0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetAccelerateJustDown
	// plugin::CallMethodAndReturn<bool, 0x540440, CPad *>(this);
	0AA8: call_method_return 0x540440 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::NextStationJustUp
	// plugin::CallMethodAndReturn<bool, 0x5405B0, CPad *>(this);
	0AA8: call_method_return 0x5405B0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::LastStationJustUp
	// plugin::CallMethodAndReturn<bool, 0x5405E0, CPad *>(this);
	0AA8: call_method_return 0x5405E0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponLeftJustDown
	// plugin::CallMethodAndReturn<bool, 0x540610, CPad *>(this);
	0AA8: call_method_return 0x540610 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponRightJustDown
	// plugin::CallMethodAndReturn<bool, 0x540640, CPad *>(this);
	0AA8: call_method_return 0x540640 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetTarget
	// plugin::CallMethodAndReturn<bool, 0x540670, CPad *>(this);
	0AA8: call_method_return 0x540670 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetDuck
	// plugin::CallMethodAndReturn<bool, 0x540700, CPad *>(this);
	0AA8: call_method_return 0x540700 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::DuckJustDown
	// plugin::CallMethodAndReturn<bool, 0x540720, CPad *>(this);
	0AA8: call_method_return 0x540720 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetJump
	// plugin::CallMethodAndReturn<bool, 0x540750, CPad *>(this);
	0AA8: call_method_return 0x540750 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::JumpJustDown
	// plugin::CallMethodAndReturn<bool, 0x540770, CPad *>(this);
	0AA8: call_method_return 0x540770 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetSprint
	// plugin::CallMethodAndReturn<bool, 0x5407A0, CPad *>(this);
	0AA8: call_method_return 0x5407A0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SprintJustDown
	// plugin::CallMethodAndReturn<bool, 0x5407F0, CPad *>(this);
	0AA8: call_method_return 0x5407F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ShiftTargetLeftJustDown
	// plugin::CallMethodAndReturn<bool, 0x540850, CPad *>(this);
	0AA8: call_method_return 0x540850 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ShiftTargetRightJustDown
	// plugin::CallMethodAndReturn<bool, 0x540880, CPad *>(this);
	0AA8: call_method_return 0x540880 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetDisplayVitalStats
	// plugin::CallMethodAndReturn<short, 0x5408B0, CPad *, CPed*>(this, ped);
	0AA8: call_method_return 0x5408B0 struct [CPad] num_params 1 pop 0 [ped] func_ret [short]

	// CPad::CollectPickupJustDown
	// plugin::CallMethodAndReturn<bool, 0x540A70, CPad *>(this);
	0AA8: call_method_return 0x540A70 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetForceCameraBehindPlayer
	// plugin::CallMethodAndReturn<bool, 0x540AE0, CPad *>(this);
	0AA8: call_method_return 0x540AE0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperZoomIn
	// plugin::CallMethodAndReturn<bool, 0x540B30, CPad *>(this);
	0AA8: call_method_return 0x540B30 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperZoomOut
	// plugin::CallMethodAndReturn<bool, 0x540B80, CPad *>(this);
	0AA8: call_method_return 0x540B80 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetGroupControlForward
	// plugin::CallMethodAndReturn<bool, 0x541190, CPad *>(this);
	0AA8: call_method_return 0x541190 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetGroupControlBack
	// plugin::CallMethodAndReturn<bool, 0x5411B0, CPad *>(this);
	0AA8: call_method_return 0x5411B0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ConversationYesJustDown
	// plugin::CallMethodAndReturn<bool, 0x5411D0, CPad *>(this);
	0AA8: call_method_return 0x5411D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ConversationNoJustDown
	// plugin::CallMethodAndReturn<bool, 0x541200, CPad *>(this);
	0AA8: call_method_return 0x541200 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GroupControlForwardJustDown
	// plugin::CallMethodAndReturn<bool, 0x541230, CPad *>(this);
	0AA8: call_method_return 0x541230 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GroupControlBackJustDown
	// plugin::CallMethodAndReturn<bool, 0x541260, CPad *>(this);
	0AA8: call_method_return 0x541260 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::Clear
	// plugin::CallMethod<0x541A70, CPad *, bool, bool>(this, enablePlayerControls, resetPhase);
	0AA6: call_method 0x541A70 struct [CPad] num_params 2 pop 0 [enablePlayerControls] [resetPhase]

	// CPad::UpdatePads
	// plugin::Call<0x541DD0>();
	0AA5: call_function 0x541DD0 num_params 0 pop 0

	// CPad::ClearMouseHistory
	// plugin::Call<0x541BD0>();
	0AA5: call_function 0x541BD0 num_params 0 pop 0

plugin_sa\game_sa\CPathNode.cpp:

plugin_sa\game_sa\CPedClothesDesc.cpp:

	// CPedClothesDesc::Initialise
	// plugin::CallMethod<0x5A78F0, CPedClothesDesc *>(this);
	0AA6: call_method 0x5A78F0 struct [CPedClothesDesc] num_params 0 pop 0

	// CPedClothesDesc::SetModel
	// plugin::CallMethod<0x5A7910, CPedClothesDesc *, unsigned int, int>(this, modelid, eClothesModelPart);
	0AA6: call_method 0x5A7910 struct [CPedClothesDesc] num_params 2 pop 0 [modelid] [eClothesModelPart]

	// CPedClothesDesc::SetModel
	// plugin::CallMethod<0x5A7920, CPedClothesDesc *, char const*, int>(this, model, eClothesModelPart);
	0AA6: call_method 0x5A7920 struct [CPedClothesDesc] num_params 2 pop 0 [model] [eClothesModelPart]

	// CPedClothesDesc::GetIsWearingBalaclava
	// plugin::CallMethodAndReturn<bool, 0x5A7950, CPedClothesDesc *>(this);
	0AA8: call_method_return 0x5A7950 struct [CPedClothesDesc] num_params 0 pop 0 func_ret [bool]

	// CPedClothesDesc::HasVisibleNewHairCut
	// plugin::CallMethodAndReturn<bool, 0x5A7970, CPedClothesDesc *, int>(this, arg1);
	0AA8: call_method_return 0x5A7970 struct [CPedClothesDesc] num_params 1 pop 0 [arg1] func_ret [bool]

	// CPedClothesDesc::HasVisibleTattoo
	// plugin::CallMethodAndReturn<bool, 0x5A79D0, CPedClothesDesc *>(this);
	0AA8: call_method_return 0x5A79D0 struct [CPedClothesDesc] num_params 0 pop 0 func_ret [bool]

	// CPedClothesDesc::CPedClothesDesc
	// plugin::CallMethod<0x5A8020, CPedClothesDesc *>(this);
	0AA6: call_method 0x5A8020 struct [CPedClothesDesc] num_params 0 pop 0

	// CPedClothesDesc::SetTextureAndModel
	// plugin::CallMethod<0x5A8050, CPedClothesDesc *, unsigned int, unsigned int, int>(this, texture, model, eClothesTexturePart);
	0AA6: call_method 0x5A8050 struct [CPedClothesDesc] num_params 3 pop 0 [texture] [model] [eClothesTexturePart]

	// CPedClothesDesc::SetTextureAndModel
	// plugin::CallMethod<0x5A8080, CPedClothesDesc *, char const*, char const*, int>(this, texturename, modelname, eClothesTexturePart);
	0AA6: call_method 0x5A8080 struct [CPedClothesDesc] num_params 3 pop 0 [texturename] [modelname] [eClothesTexturePart]

plugin_sa\game_sa\CPedGroup.cpp:

	// CPedGroup::FindDistanceToFurthestMember
	// plugin::CallMethodAndReturnDynGlobal<float, CPedGroup *>(gaddrof(CPedGroup::FindDistanceToFurthestMember), this);
	0AA8: call_method_return 0x5FB010 struct [CPedGroup] num_params 0 pop 0 func_ret [float]

	// CPedGroup::FindDistanceToNearestMember
	// plugin::CallMethodAndReturnDynGlobal<float, CPedGroup *, CPed **>(gaddrof(CPedGroup::FindDistanceToNearestMember), this, ppOutNearestMember);
	0AA8: call_method_return 0x5FB0A0 struct [CPedGroup] num_params 1 pop 0 [ppOutNearestMember] func_ret [float]

	// CPedGroup::Flush
	// plugin::CallMethodDynGlobal<CPedGroup *>(gaddrof(CPedGroup::Flush), this);

	// *CPedGroup::GetClosestGroupPed
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CPedGroup *, CPed *, float *>(gaddrof(CPedGroup::GetClosestGroupPed), this, ped, pOutDistance);
	0AA8: call_method_return 0x5FACD0 struct [*CPedGroup] num_params 2 pop 0 [ped] [pOutDistance] func_ret [CPed *]

	// CPedGroup::IsAnyoneUsingCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroup *, CVehicle const *>(gaddrof(CPedGroup::IsAnyoneUsingCar), this, vehicle);
	0AA8: call_method_return 0x5F7DB0 struct [CPedGroup] num_params 1 pop 0 [vehicle] func_ret [bool]

	// CPedGroup::PlayerGaveCommand_Attack
	// plugin::CallMethodDynGlobal<CPedGroup *, CPed *, CPed *>(gaddrof(CPedGroup::PlayerGaveCommand_Attack), this, playerPed, ped);

	// CPedGroup::PlayerGaveCommand_Gather
	// plugin::CallMethodDynGlobal<CPedGroup *, CPed *>(gaddrof(CPedGroup::PlayerGaveCommand_Gather), this, ped);

	// CPedGroup::Process
	// plugin::CallMethodDynGlobal<CPedGroup *>(gaddrof(CPedGroup::Process), this);

	// CPedGroup::RemoveAllFollowers
	// plugin::CallMethodDynGlobal<CPedGroup *>(gaddrof(CPedGroup::RemoveAllFollowers), this);

	// CPedGroup::Teleport
	// plugin::CallMethodDynGlobal<CPedGroup *, CVector const *>(gaddrof(CPedGroup::Teleport), this, Pos);

plugin_sa\game_sa\CPedGroupIntelligence.cpp:

	// CPedGroupIntelligence::AddEvent
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupIntelligence *, CEvent *>(gaddrof(CPedGroupIntelligence::AddEvent), this, event);
	0AA8: call_method_return 0x5F7470 struct [CPedGroupIntelligence] num_params 1 pop 0 [event] func_ret [bool]

	// CPedGroupIntelligence::ComputeDefaultTasks
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPed *>(gaddrof(CPedGroupIntelligence::ComputeDefaultTasks), this, ped);

	// *CPedGroupIntelligence::ComputeEventResponseTasks
	// plugin::CallMethodAndReturnDynGlobal<void *, CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::ComputeEventResponseTasks), this);
	0AA8: call_method_return 0x5FC440 struct [*CPedGroupIntelligence] num_params 0 pop 0 func_ret [void *]

	// CPedGroupIntelligence::ComputeScriptCommandTasks
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::ComputeScriptCommandTasks), this);

	// CPedGroupIntelligence::FlushTasks
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPedTaskPair *, CPed *>(gaddrof(CPedGroupIntelligence::FlushTasks), this, taskpair, ped);

	// *CPedGroupIntelligence::GetTask
	// plugin::CallMethodAndReturnDynGlobal<CTask *, CPedGroupIntelligence *, CPed *, CPedTaskPair const *>(gaddrof(CPedGroupIntelligence::GetTask), this, ped, taskpair);
	0AA8: call_method_return 0x5F7660 struct [*CPedGroupIntelligence] num_params 2 pop 0 [ped] [taskpair] func_ret [CTask *]

	// *CPedGroupIntelligence::GetTaskDefault
	// plugin::CallMethodAndReturnDynGlobal<CTask *, CPedGroupIntelligence *, CPed *>(gaddrof(CPedGroupIntelligence::GetTaskDefault), this, ped);
	0AA8: call_method_return 0x5F86C0 struct [*CPedGroupIntelligence] num_params 1 pop 0 [ped] func_ret [CTask *]

	// *CPedGroupIntelligence::GetTaskScriptCommand
	// plugin::CallMethodAndReturnDynGlobal<CTask *, CPedGroupIntelligence *, CPed *>(gaddrof(CPedGroupIntelligence::GetTaskScriptCommand), this, ped);
	0AA8: call_method_return 0x5F8690 struct [*CPedGroupIntelligence] num_params 1 pop 0 [ped] func_ret [CTask *]

	// *CPedGroupIntelligence::GetTaskSecondary
	// plugin::CallMethodAndReturnDynGlobal<CTask *, CPedGroupIntelligence *, CPed *>(gaddrof(CPedGroupIntelligence::GetTaskSecondary), this, ped);
	0AA8: call_method_return 0x5F8620 struct [*CPedGroupIntelligence] num_params 1 pop 0 [ped] func_ret [CTask *]

	// CPedGroupIntelligence::GetTaskSecondarySlot
	// plugin::CallMethodAndReturnDynGlobal<signed int, CPedGroupIntelligence *, CPed *>(gaddrof(CPedGroupIntelligence::GetTaskSecondarySlot), this, ped);
	0AA8: call_method_return 0x5F8650 struct [CPedGroupIntelligence] num_params 1 pop 0 [ped] func_ret [signed int]

	// CPedGroupIntelligence::IsCurrentEventValid
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::IsCurrentEventValid), this);
	0AA8: call_method_return 0x5F77A0 struct [CPedGroupIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedGroupIntelligence::IsGroupResponding
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::IsGroupResponding), this);
	0AA8: call_method_return 0x5F7760 struct [CPedGroupIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedGroupIntelligence::Process
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::Process), this);

	// CPedGroupIntelligence::ProcessIgnorePlayerGroup
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::ProcessIgnorePlayerGroup), this);

	// CPedGroupIntelligence::ReportAllBarScriptTasksFinished
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(gaddrof(CPedGroupIntelligence::ReportAllBarScriptTasksFinished), this);

	// CPedGroupIntelligence::ReportAllTasksFinished
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPedTaskPair *>(gaddrof_o(CPedGroupIntelligence::ReportAllTasksFinished, void (CPedGroupIntelligence::*)(CPedTaskPair *)), this, taskpair);

	// CPedGroupIntelligence::ReportAllTasksFinished
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(gaddrof_o(CPedGroupIntelligence::ReportAllTasksFinished, void (CPedGroupIntelligence::*)()), this);

	// CPedGroupIntelligence::ReportFinishedTask
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupIntelligence *, CPed const *, CTask const *, CPedTaskPair *>(gaddrof_o(CPedGroupIntelligence::ReportFinishedTask, bool (CPedGroupIntelligence::*)(CPed const *, CTask const *, CPedTaskPair *)), this, ped, task, taskpair);
	0AA8: call_method_return 0x5F86F0 struct [CPedGroupIntelligence] num_params 3 pop 0 [ped] [task] [taskpair] func_ret [bool]

	// CPedGroupIntelligence::ReportFinishedTask
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupIntelligence *, CPed const *, CTask const *>(gaddrof_o(CPedGroupIntelligence::ReportFinishedTask, bool (CPedGroupIntelligence::*)(CPed const *, CTask const *)), this, ped, task);
	0AA8: call_method_return 0x5F86F0 struct [CPedGroupIntelligence] num_params 2 pop 0 [ped] [task] func_ret [bool]

	// CPedGroupIntelligence::SetDefaultTask
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPed *, CTask const *>(gaddrof(CPedGroupIntelligence::SetDefaultTask), this, ped, task);

	// CPedGroupIntelligence::SetDefaultTaskAllocator
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPedGroupDefaultTaskAllocator const *>(gaddrof(CPedGroupIntelligence::SetDefaultTaskAllocator), this, PedGroupDefaultTaskAllocator);

	// CPedGroupIntelligence::SetDefaultTaskAllocatorType
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, int>(gaddrof(CPedGroupIntelligence::SetDefaultTaskAllocatorType), this, nPedGroupTaskAllocator);

	// CPedGroupIntelligence::SetEventResponseTask
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPed *, bool, CTask const *, bool, CTask const *, int>(gaddrof(CPedGroupIntelligence::SetEventResponseTask), this, ped, arg3, task1, arg5, task2, arg7);

	// CPedGroupIntelligence::SetEventResponseTaskAllocator
	// plugin::CallMethodAndReturnDynGlobal<int, CPedGroupIntelligence *, int>(gaddrof(CPedGroupIntelligence::SetEventResponseTaskAllocator), this, a2);
	0AA8: call_method_return 0x5F7440 struct [CPedGroupIntelligence] num_params 1 pop 0 [a2] func_ret [int]

	// CPedGroupIntelligence::SetGroupDecisionMakerType
	// plugin::CallMethodAndReturnDynGlobal<int, CPedGroupIntelligence *, int>(gaddrof(CPedGroupIntelligence::SetGroupDecisionMakerType), this, a2);
	0AA8: call_method_return 0x5F7340 struct [CPedGroupIntelligence] num_params 1 pop 0 [a2] func_ret [int]

	// CPedGroupIntelligence::SetPrimaryTaskAllocator
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CTaskAllocator *>(gaddrof(CPedGroupIntelligence::SetPrimaryTaskAllocator), this, taskAllocator);

	// CPedGroupIntelligence::SetScriptCommandTask
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPed *, CTask const *>(gaddrof(CPedGroupIntelligence::SetScriptCommandTask), this, ped, task);

	// CPedGroupIntelligence::SetTask
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *, CPed *, CTask const *, CPedTaskPair *, int, bool>(gaddrof(CPedGroupIntelligence::SetTask), this, ped, task, taskpair, arg5, arg6);

plugin_sa\game_sa\CPedGroupMembership.cpp:

	// CPedGroupMembership::AddFollower
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPed *>(gaddrof(CPedGroupMembership::AddFollower), this, ped);

	// CPedGroupMembership::AddMember
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPed *, int>(gaddrof(CPedGroupMembership::AddMember), this, member, memberID);

	// CPedGroupMembership::AppointNewLeader
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(gaddrof(CPedGroupMembership::AppointNewLeader), this);

	// CPedGroupMembership::CountMembers
	// plugin::CallMethodAndReturnDynGlobal<int, CPedGroupMembership *>(gaddrof(CPedGroupMembership::CountMembers), this);
	0AA8: call_method_return 0x5F6A50 struct [CPedGroupMembership] num_params 0 pop 0 func_ret [int]

	// CPedGroupMembership::CountMembersExcludingLeader
	// plugin::CallMethodAndReturnDynGlobal<int, CPedGroupMembership *>(gaddrof(CPedGroupMembership::CountMembersExcludingLeader), this);
	0AA8: call_method_return 0x5F6AA0 struct [CPedGroupMembership] num_params 0 pop 0 func_ret [int]

	// CPedGroupMembership::Flush
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(gaddrof(CPedGroupMembership::Flush), this);

	// CPedGroupMembership::From
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPedGroupMembership const *>(gaddrof(CPedGroupMembership::From), this, obj);

	// *CPedGroupMembership::GetLeader
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CPedGroupMembership *>(gaddrof(CPedGroupMembership::GetLeader), this);
	0AA8: call_method_return 0x5F69A0 struct [*CPedGroupMembership] num_params 0 pop 0 func_ret [CPed *]

	// *CPedGroupMembership::GetMember
	// plugin::CallMethodAndReturnDynGlobal<CPed *, CPedGroupMembership *, int>(gaddrof(CPedGroupMembership::GetMember), this, memberId);
	0AA8: call_method_return 0x5F69B0 struct [*CPedGroupMembership] num_params 1 pop 0 [memberId] func_ret [CPed *]

	// CPedGroupMembership::IsFollower
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupMembership *, CPed const *>(gaddrof(CPedGroupMembership::IsFollower), this, ped);
	0AA8: call_method_return 0x5F69E0 struct [CPedGroupMembership] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedGroupMembership::IsLeader
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupMembership *, CPed const *>(gaddrof(CPedGroupMembership::IsLeader), this, ped);
	0AA8: call_method_return 0x5F69C0 struct [CPedGroupMembership] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedGroupMembership::IsMember
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupMembership *, CPed const *>(gaddrof(CPedGroupMembership::IsMember), this, ped);
	0AA8: call_method_return 0x5F6A10 struct [CPedGroupMembership] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedGroupMembership::Process
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(gaddrof(CPedGroupMembership::Process), this);

	// CPedGroupMembership::RemoveAllFollowers
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, bool>(gaddrof(CPedGroupMembership::RemoveAllFollowers), this, bCreatedByGameOnly);

	// CPedGroupMembership::RemoveMember
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, int>(gaddrof(CPedGroupMembership::RemoveMember), this, memberID);

	// CPedGroupMembership::RemoveNFollowers
	// plugin::CallMethodAndReturnDynGlobal<char, CPedGroupMembership *, int>(gaddrof(CPedGroupMembership::RemoveNFollowers), this, count);
	0AA8: call_method_return 0x5FB1D0 struct [CPedGroupMembership] num_params 1 pop 0 [count] func_ret [char]

	// CPedGroupMembership::SetLeader
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPed *>(gaddrof(CPedGroupMembership::SetLeader), this, ped);

	// CPedGroupMembership::GetObjectForPedToHold
	// plugin::CallAndReturnDynGlobal<signed int>(gaddrof(CPedGroupMembership::GetObjectForPedToHold));

plugin_sa\game_sa\CPedGroupPlacer.cpp:

	// CPedGroupPlacer::PlaceChatGroup
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupPlacer *, ePedType, int, CVector const *, int>(gaddrof(CPedGroupPlacer::PlaceChatGroup), this, pedtype, numOfPeds, origin, unused);
	0AA8: call_method_return 0x5FCE80 struct [CPedGroupPlacer] num_params 4 pop 0 [pedtype] [numOfPeds] [origin] [unused] func_ret [bool]

	// CPedGroupPlacer::PlaceFormationGroup
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupPlacer *, ePedType, int, CVector const *, int>(gaddrof(CPedGroupPlacer::PlaceFormationGroup), this, pedtype, numOfPeds, origin, unused);
	0AA8: call_method_return 0x5FC9B0 struct [CPedGroupPlacer] num_params 4 pop 0 [pedtype] [numOfPeds] [origin] [unused] func_ret [bool]

	// CPedGroupPlacer::PlaceGroup
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupPlacer *, ePedType, int, CVector const *, int>(gaddrof(CPedGroupPlacer::PlaceGroup), this, pedtype, numOfPeds, origin, nGroupPlacerType);
	0AA8: call_method_return 0x5FD810 struct [CPedGroupPlacer] num_params 4 pop 0 [pedtype] [numOfPeds] [origin] [nGroupPlacerType] func_ret [bool]

	// CPedGroupPlacer::PlaceRandomGroup
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedGroupPlacer *, ePedType, int, CVector *, int>(gaddrof(CPedGroupPlacer::PlaceRandomGroup), this, pedtype, numOfPeds, origin, unused);
	0AA8: call_method_return 0x5FD330 struct [CPedGroupPlacer] num_params 4 pop 0 [pedtype] [numOfPeds] [origin] [unused] func_ret [bool]

plugin_sa\game_sa\CPedGroups.cpp:

	// CPedGroups::AddGroup
	// plugin::CallAndReturnDynGlobal<signed int>(gaddrof(CPedGroups::AddGroup));

	// CPedGroups::AreInSameGroup
	// plugin::CallAndReturnDynGlobal<bool, CPed *, CPed *>(gaddrof(CPedGroups::AreInSameGroup), ped1, ped2);

	// CPedGroups::GetGroupId
	// plugin::CallAndReturnDynGlobal<signed int, CPedGroup *>(gaddrof(CPedGroups::GetGroupId), pedgrp);

	// *CPedGroups::GetPedsGroup
	// plugin::CallAndReturnDynGlobal<char *, CPed *>(gaddrof(CPedGroups::GetPedsGroup), ped);

	// CPedGroups::IsGroupLeader
	// plugin::CallAndReturnDynGlobal<bool, CPed *>(gaddrof(CPedGroups::IsGroupLeader), ped);

	// CPedGroups::IsInPlayersGroup
	// plugin::CallAndReturnDynGlobal<char, CPed *>(gaddrof(CPedGroups::IsInPlayersGroup), a1);

	// CPedGroups::RemoveAllFollowersFromGroup
	// plugin::CallDynGlobal<int>(gaddrof(CPedGroups::RemoveAllFollowersFromGroup), groupID);

	// CPedGroups::RemoveGroup
	// plugin::CallDynGlobal<int>(gaddrof(CPedGroups::RemoveGroup), groupID);

plugin_sa\game_sa\CPedIK.cpp:

	// CPedIK::RotateTorso
	// plugin::CallMethod<0x5FDDB0, CPedIK *, AnimBlendFrameData*, LimbOrientation&, bool>(this, bone, orientation, flag);
	0AA6: call_method 0x5FDDB0 struct [CPedIK] num_params 3 pop 0 [bone] [orientation] [flag]

	// CPedIK::PointGunInDirection
	// plugin::CallMethodAndReturn<bool, 0x5FDC00, CPedIK *, float, float, bool, float>(this, Z_angle, arg2, flag, arg4);
	0AA8: call_method_return 0x5FDC00 struct [CPedIK] num_params 4 pop 0 [Z_angle] [arg2] [flag] [arg4] func_ret [bool]

	// CPedIK::PointGunAtPosition
	// plugin::CallMethod<0x5FDE20, CPedIK *, CVector const&, float>(this, posn, arg2);
	0AA6: call_method 0x5FDE20 struct [CPedIK] num_params 2 pop 0 [posn] [arg2]

	// CPedIK::GetWorldMatrix
	// plugin::CallAndReturn<RwMatrixTag*, 0x5FD8F0, RwFrame*, RwMatrixTag*>(frame, transformMat);
	0AA7: call_function_return 0x5FD8F0 num_params 2 pop 2 [frame] [transformMat] func_ret [RwMatrixTag*]

plugin_sa\game_sa\CPedIntelligence.cpp:

	// CPedIntelligence::SetPedDecisionMakerType
	// plugin::CallMethod<0x600B50, CPedIntelligence *, int>(this, newtype);
	0AA6: call_method 0x600B50 struct [CPedIntelligence] num_params 1 pop 0 [newtype]

	// CPedIntelligence::SetPedDecisionMakerTypeInGroup
	// plugin::CallMethod<0x600BB0, CPedIntelligence *, int>(this, newtype);
	0AA6: call_method 0x600BB0 struct [CPedIntelligence] num_params 1 pop 0 [newtype]

	// CPedIntelligence::RestorePedDecisionMakerType
	// plugin::CallMethod<0x600BC0, CPedIntelligence *>(this);
	0AA6: call_method 0x600BC0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::SetHearingRange
	// plugin::CallMethod<0x600BE0, CPedIntelligence *, float>(this, range);
	0AA6: call_method 0x600BE0 struct [CPedIntelligence] num_params 1 pop 0 [range]

	// CPedIntelligence::SetSeeingRange
	// plugin::CallMethod<0x600BF0, CPedIntelligence *, float>(this, range);
	0AA6: call_method 0x600BF0 struct [CPedIntelligence] num_params 1 pop 0 [range]

	// CPedIntelligence::IsInHearingRange
	// plugin::CallMethodAndReturn<bool, 0x600C00, CPedIntelligence *, CVector const&>(this, posn);
	0AA8: call_method_return 0x600C00 struct [CPedIntelligence] num_params 1 pop 0 [posn] func_ret [bool]

	// CPedIntelligence::IsInSeeingRange
	// plugin::CallMethodAndReturn<bool, 0x600C60, CPedIntelligence *, CVector const&>(this, posn);
	0AA8: call_method_return 0x600C60 struct [CPedIntelligence] num_params 1 pop 0 [posn] func_ret [bool]

	// CPedIntelligence::FindRespectedFriendInInformRange
	// plugin::CallMethodAndReturn<bool, 0x600CF0, CPedIntelligence *>(this);
	0AA8: call_method_return 0x600CF0 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::IsRespondingToEvent
	// plugin::CallMethodAndReturn<bool, 0x600DB0, CPedIntelligence *, int>(this, event);
	0AA8: call_method_return 0x600DB0 struct [CPedIntelligence] num_params 1 pop 0 [event] func_ret [bool]

	// CPedIntelligence::AddTaskPhysResponse
	// plugin::CallMethod<0x600DC0, CPedIntelligence *, CTask*, bool>(this, task, arg2);
	0AA6: call_method 0x600DC0 struct [CPedIntelligence] num_params 2 pop 0 [task] [arg2]

	// CPedIntelligence::AddTaskEventResponseTemp
	// plugin::CallMethod<0x600DE0, CPedIntelligence *, CTask*, bool>(this, task, arg2);
	0AA6: call_method 0x600DE0 struct [CPedIntelligence] num_params 2 pop 0 [task] [arg2]

	// CPedIntelligence::AddTaskEventResponseNonTemp
	// plugin::CallMethod<0x600E00, CPedIntelligence *, CTask*, bool>(this, task, arg2);
	0AA6: call_method 0x600E00 struct [CPedIntelligence] num_params 2 pop 0 [task] [arg2]

	// CPedIntelligence::AddTaskPrimaryMaybeInGroup
	// plugin::CallMethod<0x600E20, CPedIntelligence *, CTask*, bool>(this, task, arg2);
	0AA6: call_method 0x600E20 struct [CPedIntelligence] num_params 2 pop 0 [task] [arg2]

	// CPedIntelligence::FindTaskByType
	// plugin::CallMethodAndReturn<CTask*, 0x600EE0, CPedIntelligence *, int>(this, type);
	0AA8: call_method_return 0x600EE0 struct [CPedIntelligence] num_params 1 pop 0 [type] func_ret [CTask*]

	// CPedIntelligence::GetTaskFighting
	// plugin::CallMethodAndReturn<CTaskSimpleFight*, 0x600F30, CPedIntelligence *>(this);
	0AA8: call_method_return 0x600F30 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleFight*]

	// CPedIntelligence::GetTaskUseGun
	// plugin::CallMethodAndReturn<CTaskSimpleUseGun*, 0x600F70, CPedIntelligence *>(this);
	0AA8: call_method_return 0x600F70 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleUseGun*]

	// CPedIntelligence::GetTaskThrow
	// plugin::CallMethodAndReturn<CTaskSimpleThrowProjectile*, 0x600FB0, CPedIntelligence *>(this);
	0AA8: call_method_return 0x600FB0 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleThrowProjectile*]

	// CPedIntelligence::GetTaskHold
	// plugin::CallMethodAndReturn<CTaskSimpleHoldEntity*, 0x600FF0, CPedIntelligence *, bool>(this, arg1);
	0AA8: call_method_return 0x600FF0 struct [CPedIntelligence] num_params 1 pop 0 [arg1] func_ret [CTaskSimpleHoldEntity*]

	// CPedIntelligence::GetTaskSwim
	// plugin::CallMethodAndReturn<CTaskSimpleSwim*, 0x601070, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601070 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleSwim*]

	// CPedIntelligence::GetTaskDuck
	// plugin::CallMethodAndReturn<CTaskSimpleDuck*, 0x6010A0, CPedIntelligence *, bool>(this, arg1);
	0AA8: call_method_return 0x6010A0 struct [CPedIntelligence] num_params 1 pop 0 [arg1] func_ret [CTaskSimpleDuck*]

	// CPedIntelligence::GetTaskJetPack
	// plugin::CallMethodAndReturn<CTaskSimpleJetPack*, 0x601110, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601110 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleJetPack*]

	// CPedIntelligence::GetTaskInAir
	// plugin::CallMethodAndReturn<CTaskSimpleInAir*, 0x601150, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601150 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleInAir*]

	// CPedIntelligence::GetTaskClimb
	// plugin::CallMethodAndReturn<CTaskSimpleClimb*, 0x601180, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601180 struct [CPedIntelligence] num_params 0 pop 0 func_ret [CTaskSimpleClimb*]

	// CPedIntelligence::GetUsingParachute
	// plugin::CallMethodAndReturn<bool, 0x6011B0, CPedIntelligence *>(this);
	0AA8: call_method_return 0x6011B0 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::SetTaskDuckSecondary
	// plugin::CallMethod<0x601230, CPedIntelligence *, unsigned short>(this, arg1);
	0AA6: call_method 0x601230 struct [CPedIntelligence] num_params 1 pop 0 [arg1]

	// CPedIntelligence::ClearTaskDuckSecondary
	// plugin::CallMethod<0x601390, CPedIntelligence *>(this);
	0AA6: call_method 0x601390 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::ClearTasks
	// plugin::CallMethod<0x601420, CPedIntelligence *, bool, bool>(this, arg1, arg2);
	0AA6: call_method 0x601420 struct [CPedIntelligence] num_params 2 pop 0 [arg1] [arg2]

	// CPedIntelligence::FlushImmediately
	// plugin::CallMethod<0x601640, CPedIntelligence *, bool>(this, arg1);
	0AA6: call_method 0x601640 struct [CPedIntelligence] num_params 1 pop 0 [arg1]

	// CPedIntelligence::GetEffectInUse
	// plugin::CallMethodAndReturn<C2dEffect*, 0x6018D0, CPedIntelligence *>(this);
	0AA8: call_method_return 0x6018D0 struct [CPedIntelligence] num_params 0 pop 0 func_ret [C2dEffect*]

	// CPedIntelligence::SetEffectInUse
	// plugin::CallMethod<0x6018E0, CPedIntelligence *, C2dEffect*>(this, arg1);
	0AA6: call_method 0x6018E0 struct [CPedIntelligence] num_params 1 pop 0 [arg1]

	// CPedIntelligence::ProcessAfterProcCol
	// plugin::CallMethod<0x6018F0, CPedIntelligence *>(this);
	0AA6: call_method 0x6018F0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::ProcessAfterPreRender
	// plugin::CallMethod<0x6019B0, CPedIntelligence *>(this);
	0AA6: call_method 0x6019B0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::ProcessEventHandler
	// plugin::CallMethod<0x601BB0, CPedIntelligence *>(this);
	0AA6: call_method 0x601BB0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::IsFriendlyWith
	// plugin::CallMethodAndReturn<bool, 0x601BC0, CPedIntelligence *, CPed const&>(this, ped);
	0AA8: call_method_return 0x601BC0 struct [CPedIntelligence] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedIntelligence::IsThreatenedBy
	// plugin::CallMethodAndReturn<bool, 0x601C30, CPedIntelligence *, CPed const&>(this, ped);
	0AA8: call_method_return 0x601C30 struct [CPedIntelligence] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedIntelligence::Respects
	// plugin::CallMethodAndReturn<bool, 0x601C90, CPedIntelligence *, CPed const&>(this, ped);
	0AA8: call_method_return 0x601C90 struct [CPedIntelligence] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedIntelligence::IsInACarOrEnteringOne
	// plugin::CallMethodAndReturn<bool, 0x601CC0, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601CC0 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::AreFriends
	// plugin::CallAndReturn<bool, 0x601D10, CPed const&, CPed const&>(ped1, ped2);
	0AA7: call_function_return 0x601D10 num_params 2 pop 2 [ped1] [ped2] func_ret [bool]

	// CPedIntelligence::IsPedGoingSomewhereOnFoot
	// plugin::CallMethodAndReturn<bool, 0x601D50, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601D50 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::GetMoveStateFromGoToTask
	// plugin::CallMethodAndReturn<int*, 0x601D70, CPedIntelligence *>(this);
	0AA8: call_method_return 0x601D70 struct [CPedIntelligence] num_params 0 pop 0 func_ret [int*]

	// CPedIntelligence::FlushIntelligence
	// plugin::CallMethod<0x601DA0, CPedIntelligence *>(this);
	0AA6: call_method 0x601DA0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::TestForStealthKill
	// plugin::CallMethodAndReturn<bool, 0x601E00, CPedIntelligence *, CPed*, bool>(this, pPed, arg2);
	0AA8: call_method_return 0x601E00 struct [CPedIntelligence] num_params 2 pop 0 [pPed] [arg2] func_ret [bool]

	// CPedIntelligence::RecordEventForScript
	// plugin::CallMethod<0x602050, CPedIntelligence *, int, int>(this, EventID, EventPriority);
	0AA6: call_method 0x602050 struct [CPedIntelligence] num_params 2 pop 0 [EventID] [EventPriority]

	// CPedIntelligence::HasInterestingEntites
	// plugin::CallMethodAndReturn<bool, 0x602080, CPedIntelligence *>(this);
	0AA8: call_method_return 0x602080 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::IsInterestingEntity
	// plugin::CallMethodAndReturn<bool, 0x6020A0, CPedIntelligence *, CEntity*>(this, pEntity);
	0AA8: call_method_return 0x6020A0 struct [CPedIntelligence] num_params 1 pop 0 [pEntity] func_ret [bool]

	// CPedIntelligence::LookAtInterestingEntities
	// plugin::CallMethod<0x6020D0, CPedIntelligence *>(this);
	0AA6: call_method 0x6020D0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::RemoveAllInterestingEntities
	// plugin::CallMethod<0x602320, CPedIntelligence *>(this);
	0AA6: call_method 0x602320 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::IsPedGoingForCarDoor
	// plugin::CallMethodAndReturn<bool, 0x602350, CPedIntelligence *>(this);
	0AA8: call_method_return 0x602350 struct [CPedIntelligence] num_params 0 pop 0 func_ret [bool]

	// CPedIntelligence::CanSeeEntityWithLights
	// plugin::CallMethodAndReturn<float, 0x605550, CPedIntelligence *, CEntity const*, bool>(this, pEntity, arg2);
	0AA8: call_method_return 0x605550 struct [CPedIntelligence] num_params 2 pop 0 [pEntity] [arg2] func_ret [float]

	// CPedIntelligence::ProcessStaticCounter
	// plugin::CallMethod<0x605650, CPedIntelligence *>(this);
	0AA6: call_method 0x605650 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::ProcessFirst
	// plugin::CallMethod<0x6073A0, CPedIntelligence *>(this);
	0AA6: call_method 0x6073A0 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::Process
	// plugin::CallMethod<0x608260, CPedIntelligence *>(this);
	0AA6: call_method 0x608260 struct [CPedIntelligence] num_params 0 pop 0

	// CPedIntelligence::operator delete
	// plugin::Call<0x6074E0, void*>(arg1);
	0AA5: call_function 0x6074E0 num_params 1 pop 1 [arg1]

plugin_sa\game_sa\CPedList.cpp:

	// CPedList::BuildListFromGroup_NoLeader
	// plugin::CallMethodDynGlobal<CPedList *, CPedGroupMembership *>(gaddrof(CPedList::BuildListFromGroup_NoLeader), this, pedGroupMemberShip);

	// CPedList::BuildListFromGroup_NotInCar_NoLeader
	// plugin::CallMethodDynGlobal<CPedList *, CPedGroupMembership *>(gaddrof(CPedList::BuildListFromGroup_NotInCar_NoLeader), this, pedGroupMembership);

	// CPedList::BuildListOfPedsOfPedType
	// plugin::CallMethodDynGlobal<CPedList *, int>(gaddrof(CPedList::BuildListOfPedsOfPedType), this, pedtype);

	// CPedList::Empty
	// plugin::CallMethodDynGlobal<CPedList *>(gaddrof(CPedList::Empty), this);

	// CPedList::ExtractPedsWithGuns
	// plugin::CallMethodDynGlobal<CPedList *, CPedList *>(gaddrof(CPedList::ExtractPedsWithGuns), this, pedlist);

	// CPedList::FillUpHoles
	// plugin::CallMethodDynGlobal<CPedList *>(gaddrof(CPedList::FillUpHoles), this);

	// CPedList::RemovePedsAttackingPedType
	// plugin::CallMethodDynGlobal<CPedList *, int>(gaddrof(CPedList::RemovePedsAttackingPedType), this, pedtype);

	// CPedList::RemovePedsThatDontListenToPlayer
	// plugin::CallMethodDynGlobal<CPedList *>(gaddrof(CPedList::RemovePedsThatDontListenToPlayer), this);

plugin_sa\game_sa\CPedPlacement.cpp:

	// CPedPlacement::FindZCoorForPed
	// plugin::CallAndReturnDynGlobal<bool, CVector *>(gaddrof(CPedPlacement::FindZCoorForPed), pos);

	// CPedPlacement::IsPositionClearForPed
	// plugin::CallAndReturnDynGlobal<bool, CVector const *, float, int, CEntity **, unsigned char, unsigned char, unsigned char>(gaddrof(CPedPlacement::IsPositionClearForPed), pos, radius, maxNumObjects, pObjectList, bCheckVehicles, bCheckPeds, bCheckObjects);

	// *CPedPlacement::IsPositionClearOfCars
	// plugin::CallAndReturnDynGlobal<CVehicle *, CVector const *>(gaddrof_o(CPedPlacement::IsPositionClearOfCars, CVehicle *(*)(CVector const *)), pos);

	// *CPedPlacement::IsPositionClearOfCars
	// plugin::CallAndReturnDynGlobal<CVehicle *, CPed const *>(gaddrof_o(CPedPlacement::IsPositionClearOfCars, CVehicle *(*)(CPed const *)), ped);

plugin_sa\game_sa\CPedTaskPair.cpp:

	// CPedTaskPair::Flush
	// plugin::CallMethodDynGlobal<CPedTaskPair *>(gaddrof(CPedTaskPair::Flush), this);

plugin_sa\game_sa\CPickup.cpp:

	// CPickup::SetPosn
	// plugin::CallMethod<0x454960, CPickup *, float, float, float>(this, x, y, z);
	0AA6: call_method 0x454960 struct [CPickup] num_params 3 pop 0 [x] [y] [z]

	// CPickup::GetXCoord
	// plugin::CallMethodAndReturn<float, 0x4549F0, CPickup *>(this);
	0AA8: call_method_return 0x4549F0 struct [CPickup] num_params 0 pop 0 func_ret [float]

	// CPickup::GetYCoord
	// plugin::CallMethodAndReturn<float, 0x454A10, CPickup *>(this);
	0AA8: call_method_return 0x454A10 struct [CPickup] num_params 0 pop 0 func_ret [float]

	// CPickup::GetZCoord
	// plugin::CallMethodAndReturn<float, 0x454A30, CPickup *>(this);
	0AA8: call_method_return 0x454A30 struct [CPickup] num_params 0 pop 0 func_ret [float]

	// CPickup::ExtractAmmoFromPickup
	// plugin::CallMethod<0x454BE0, CPickup *, CPlayerPed*>(this, playerPed);
	0AA6: call_method 0x454BE0 struct [CPickup] num_params 1 pop 0 [playerPed]

	// CPickup::IsVisible
	// plugin::CallMethodAndReturn<bool, 0x454C70, CPickup *>(this);
	0AA8: call_method_return 0x454C70 struct [CPickup] num_params 0 pop 0 func_ret [bool]

	// CPickup::GetRidOfObjects
	// plugin::CallMethod<0x454CF0, CPickup *>(this);
	0AA6: call_method 0x454CF0 struct [CPickup] num_params 0 pop 0

	// CPickup::PickUpShouldBeInvisible
	// plugin::CallMethodAndReturn<bool, 0x454D20, CPickup *>(this);
	0AA8: call_method_return 0x454D20 struct [CPickup] num_params 0 pop 0 func_ret [bool]

	// CPickup::FindTextIndexForString
	// plugin::Call<0x455500, char*>(message);
	0AA5: call_function 0x455500 num_params 1 pop 1 [message]

	// *CPickup::FindStringForTextIndex
	// plugin::CallAndReturn<char const *, 0x455540, int>(index);
	0AA7: call_function_return 0x455540 num_params 1 pop 1 [index] func_ret [char const *]

	// CPickup::Remove
	// plugin::CallMethod<0x4556C0, CPickup *>(this);
	0AA6: call_method 0x4556C0 struct [CPickup] num_params 0 pop 0

	// CPickup::GiveUsAPickUpObject
	// plugin::CallMethod<0x4567E0, CPickup *, CObject**, int>(this, pObject, objectPoolSlotIndex);
	0AA6: call_method 0x4567E0 struct [CPickup] num_params 2 pop 0 [pObject] [objectPoolSlotIndex]

	// CPickup::Update
	// plugin::CallMethodAndReturn<bool,0x457410, CPickup *, CPlayerPed*, CVehicle*, int>(this, playerPed, vehicle, playerId);
	0AA8: call_method_return 0x457410 struct [CPickup] num_params 3 pop 0 [playerPed] [vehicle] [playerId] func_ret [bool]

	// CPickup::ProcessGunShot
	// plugin::CallMethod<0x4588B0, CPickup *, CVector*, CVector*>(this, origin, target);
	0AA6: call_method 0x4588B0 struct [CPickup] num_params 2 pop 0 [origin] [target]

plugin_sa\game_sa\CPickups.cpp:

	// CPickups::AddToCollectedPickupsArray
	// plugin::Call<0x455240, int>(handle);
	0AA5: call_function 0x455240 num_params 1 pop 1 [handle]

	// CPickups::CreatePickupCoorsCloseToCoors
	// plugin::Call<0x458A80, float, float, float, float*, float*, float*>(in_x, in_y, in_z, out_x, out_y, out_z);
	0AA5: call_function 0x458A80 num_params 6 pop 6 [in_x] [in_y] [in_z] [out_x] [out_y] [out_z]

	// CPickups::CreateSomeMoney
	// plugin::Call<0x458970, CVector, int>(coors, amount);
	0AA5: call_function 0x458970 num_params 2 pop 2 [coors] [amount]

	// CPickups::DetonateMinesHitByGunShot
	// plugin::Call<0x4590C0, CVector*, CVector*>(shotOrigin, shotTarget);
	0AA5: call_function 0x4590C0 num_params 2 pop 2 [shotOrigin] [shotTarget]

	// CPickups::DoCollectableEffects
	// plugin::Call<0x455E20, CEntity*>(entity);
	0AA5: call_function 0x455E20 num_params 1 pop 1 [entity]

	// CPickups::DoMineEffects
	// plugin::Call<0x4560E0, CEntity*>(entity);
	0AA5: call_function 0x4560E0 num_params 1 pop 1 [entity]

	// CPickups::DoMoneyEffects
	// plugin::Call<0x454E80, CEntity*>(entity);
	0AA5: call_function 0x454E80 num_params 1 pop 1 [entity]

	// CPickups::DoPickUpEffects
	// plugin::Call<0x455720, CEntity*>(entity);
	0AA5: call_function 0x455720 num_params 1 pop 1 [entity]

	// CPickups::FindPickUpForThisObject
	// plugin::CallAndReturn<CPickup*, 0x4551C0, CObject*>(object);
	0AA7: call_function_return 0x4551C0 num_params 1 pop 1 [object] func_ret [CPickup*]

	// CPickups::GenerateNewOne
	// plugin::CallAndReturn<int, 0x456F20, CVector, unsigned int, unsigned char, unsigned int, unsigned int, bool, char*>(coors, modelId, pickupType, ammo, moneyPerDay, isEmpty, message);
	0AA7: call_function_return 0x456F20 num_params 7 pop 7 [coors] [modelId] [pickupType] [ammo] [moneyPerDay] [isEmpty] [message] func_ret [int]

	// CPickups::GenerateNewOne_WeaponType
	// plugin::CallAndReturn<int, 0x457380, CVector, eWeaponType, unsigned char, unsigned int, bool, char*>(coors, weaponType, pickupType, ammo, isEmpty, message);
	0AA7: call_function_return 0x457380 num_params 6 pop 6 [coors] [weaponType] [pickupType] [ammo] [isEmpty] [message] func_ret [int]

	// CPickups::GetActualPickupIndex
	// plugin::CallAndReturn<int, 0x4552A0, int>(pickupIndex);
	0AA7: call_function_return 0x4552A0 num_params 1 pop 1 [pickupIndex] func_ret [int]

	// CPickups::GetNewUniquePickupIndex
	// plugin::CallAndReturn<int, 0x456A30, int>(pickupIndex);
	0AA7: call_function_return 0x456A30 num_params 1 pop 1 [pickupIndex] func_ret [int]

	// CPickups::GetUniquePickupIndex
	// plugin::CallAndReturn<int, 0x455280, int>(pickupIndex);
	0AA7: call_function_return 0x455280 num_params 1 pop 1 [pickupIndex] func_ret [int]

	// CPickups::GivePlayerGoodiesWithPickUpMI
	// plugin::CallAndReturn<bool, 0x4564F0, unsigned short, int>(modelId, playerId);
	0AA7: call_function_return 0x4564F0 num_params 2 pop 2 [modelId] [playerId] func_ret [bool]

	// CPickups::Init
	// plugin::Call<0x454A70>();
	0AA5: call_function 0x454A70 num_params 0 pop 0

	// CPickups::IsPickUpPickedUp
	// plugin::CallAndReturn<bool, 0x454B40, int>(pickupHandle);
	0AA7: call_function_return 0x454B40 num_params 1 pop 1 [pickupHandle] func_ret [bool]

	// CPickups::Load
	// plugin::CallAndReturn<bool, 0x5D35A0>();
	0AA7: call_function_return 0x5D35A0 num_params 0 pop 0 func_ret [bool]

	// CPickups::ModelForWeapon
	// plugin::CallAndReturn<int, 0x454AC0, eWeaponType>(weaponType);
	0AA7: call_function_return 0x454AC0 num_params 1 pop 1 [weaponType] func_ret [int]

	// CPickups::PassTime
	// plugin::Call<0x455200, unsigned int>(time);
	0AA5: call_function 0x455200 num_params 1 pop 1 [time]

	// CPickups::PickedUpHorseShoe
	// plugin::Call<0x455390>();
	0AA5: call_function 0x455390 num_params 0 pop 0

	// CPickups::PickedUpOyster
	// plugin::Call<0x4552D0>();
	0AA5: call_function 0x4552D0 num_params 0 pop 0

	// CPickups::PictureTaken
	// plugin::Call<0x456A70>();
	0AA5: call_function 0x456A70 num_params 0 pop 0

	// CPickups::PlayerCanPickUpThisWeaponTypeAtThisMoment
	// plugin::CallAndReturn<bool, 0x4554C0, eWeaponType>(weaponType);
	0AA7: call_function_return 0x4554C0 num_params 1 pop 1 [weaponType] func_ret [bool]

	// CPickups::ReInit
	// plugin::Call<0x456E60>();
	0AA5: call_function 0x456E60 num_params 0 pop 0

	// CPickups::RemoveMissionPickUps
	// plugin::Call<0x456DE0>();
	0AA5: call_function 0x456DE0 num_params 0 pop 0

	// CPickups::RemovePickUp
	// plugin::Call<0x4573D0, int>(pickupHandle);
	0AA5: call_function 0x4573D0 num_params 1 pop 1 [pickupHandle]

	// CPickups::RemovePickUpsInArea
	// plugin::Call<0x456D30, float, float, float, float, float, float>(cornerA_x, cornerA_y, cornerA_z, cornerB_x, cornerB_y, cornerB_z);
	0AA5: call_function 0x456D30 num_params 6 pop 6 [cornerA_x] [cornerA_y] [cornerA_z] [cornerB_x] [cornerB_y] [cornerB_z]

	// CPickups::RemovePickupObjects
	// plugin::Call<0x455470>();
	0AA5: call_function 0x455470 num_params 0 pop 0

	// CPickups::RemoveUnnecessaryPickups
	// plugin::Call<0x4563A0, CVector const&, float>(posn, radius);
	0AA5: call_function 0x4563A0 num_params 2 pop 2 [posn] [radius]

	// CPickups::RenderPickUpText
	// plugin::Call<0x455000>();
	0AA5: call_function 0x455000 num_params 0 pop 0

	// CPickups::Save
	// plugin::CallAndReturn<bool, 0x5D3540>();
	0AA7: call_function_return 0x5D3540 num_params 0 pop 0 func_ret [bool]

	// CPickups::TestForPickupsInBubble
	// plugin::CallAndReturn<bool, 0x456450, CVector, float>(posn, radius);
	0AA7: call_function_return 0x456450 num_params 2 pop 2 [posn] [radius] func_ret [bool]

	// CPickups::TryToMerge_WeaponType
	// plugin::CallAndReturn<bool, 0x4555A0, CVector, eWeaponType, unsigned char, unsigned int, bool>(posn, weaponType, pickupType, ammo, arg4);
	0AA7: call_function_return 0x4555A0 num_params 5 pop 5 [posn] [weaponType] [pickupType] [ammo] [arg4] func_ret [bool]

	// CPickups::Update
	// plugin::Call<0x458DE0>();
	0AA5: call_function 0x458DE0 num_params 0 pop 0

	// CPickups::UpdateMoneyPerDay
	// plugin::Call<0x455680, int, unsigned short>(pickupHandle, money);
	0AA5: call_function 0x455680 num_params 2 pop 2 [pickupHandle] [money]

	// CPickups::WeaponForModel
	// plugin::CallAndReturn<int, 0x454AE0, int>(modelId);
	0AA7: call_function_return 0x454AE0 num_params 1 pop 1 [modelId] func_ret [int]

	// ModifyStringLabelForControlSetting
	// plugin::Call<0x454B70, char*>(stringLabel);
	0AA5: call_function 0x454B70 num_params 1 pop 1 [stringLabel]

plugin_sa\game_sa\CPlayerInfo.cpp:

plugin_sa\game_sa\CPlayerPed.cpp:

	// CPlayerPed::CPlayerPed
	// plugin::CallMethod<0x60D5B0, CPlayerPed *, int, bool>(this, playerId, bGroupCreated);
	0AA6: call_method 0x60D5B0 struct [CPlayerPed] num_params 2 pop 0 [playerId] [bGroupCreated]

	// CPlayerPed::RemovePlayerPed
	// plugin::Call<0x6094A0, int>(playerId);
	0AA5: call_function 0x6094A0 num_params 1 pop 1 [playerId]

	// CPlayerPed::DeactivatePlayerPed
	// plugin::Call<0x609520, int>(playerId);
	0AA5: call_function 0x609520 num_params 1 pop 1 [playerId]

	// CPlayerPed::ReactivatePlayerPed
	// plugin::Call<0x609540, int>(playerId);
	0AA5: call_function 0x609540 num_params 1 pop 1 [playerId]

	// CPlayerPed::GetPadFromPlayer
	// plugin::CallMethodAndReturn<CPad*, 0x609560, CPlayerPed *>(this);
	0AA8: call_method_return 0x609560 struct [CPlayerPed] num_params 0 pop 0 func_ret [CPad*]

	// CPlayerPed::CanPlayerStartMission
	// plugin::CallMethodAndReturn<bool, 0x609590, CPlayerPed *>(this);
	0AA8: call_method_return 0x609590 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::IsHidden
	// plugin::CallMethodAndReturn<bool, 0x609620, CPlayerPed *>(this);
	0AA8: call_method_return 0x609620 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::ReApplyMoveAnims
	// plugin::CallMethod<0x609650, CPlayerPed *>(this);
	0AA6: call_method 0x609650 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::DoesPlayerWantNewWeapon
	// plugin::CallMethodAndReturn<bool, 0x609710, CPlayerPed *, eWeaponType, bool>(this, weaponType, arg1);
	0AA8: call_method_return 0x609710 struct [CPlayerPed] num_params 2 pop 0 [weaponType] [arg1] func_ret [bool]

	// CPlayerPed::ProcessPlayerWeapon
	// plugin::CallMethod<0x6097F0, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x6097F0 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PickWeaponAllowedFor2Player
	// plugin::CallMethod<0x609800, CPlayerPed *>(this);
	0AA6: call_method 0x609800 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::UpdateCameraWeaponModes
	// plugin::CallMethod<0x609830, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x609830 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::ProcessAnimGroups
	// plugin::CallMethod<0x6098F0, CPlayerPed *>(this);
	0AA6: call_method 0x6098F0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ClearWeaponTarget
	// plugin::CallMethod<0x609C80, CPlayerPed *>(this);
	0AA6: call_method 0x609C80 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::GetWeaponRadiusOnScreen
	// plugin::CallMethodAndReturn<float, 0x609CD0, CPlayerPed *>(this);
	0AA8: call_method_return 0x609CD0 struct [CPlayerPed] num_params 0 pop 0 func_ret [float]

	// CPlayerPed::PedCanBeTargettedVehicleWise
	// plugin::CallAndReturn<bool, 0x609D90, CPed*>(ped);
	0AA7: call_function_return 0x609D90 num_params 1 pop 1 [ped] func_ret [bool]

	// CPlayerPed::FindTargetPriority
	// plugin::CallMethodAndReturn<float, 0x609DE0, CPlayerPed *, CEntity*>(this, entity);
	0AA8: call_method_return 0x609DE0 struct [CPlayerPed] num_params 1 pop 0 [entity] func_ret [float]

	// CPlayerPed::Clear3rdPersonMouseTarget
	// plugin::CallMethod<0x609ED0, CPlayerPed *>(this);
	0AA6: call_method 0x609ED0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::Busted
	// plugin::CallMethod<0x609EF0, CPlayerPed *>(this);
	0AA6: call_method 0x609EF0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetWantedLevel
	// plugin::CallMethod<0x609F10, CPlayerPed *, int>(this, level);
	0AA6: call_method 0x609F10 struct [CPlayerPed] num_params 1 pop 0 [level]

	// CPlayerPed::SetWantedLevelNoDrop
	// plugin::CallMethod<0x609F30, CPlayerPed *, int>(this, level);
	0AA6: call_method 0x609F30 struct [CPlayerPed] num_params 1 pop 0 [level]

	// CPlayerPed::CheatWantedLevel
	// plugin::CallMethod<0x609F50, CPlayerPed *, int>(this, level);
	0AA6: call_method 0x609F50 struct [CPlayerPed] num_params 1 pop 0 [level]

	// CPlayerPed::CanIKReachThisTarget
	// plugin::CallMethodAndReturn<bool, 0x609F80, CPlayerPed *, CVector, CWeapon*, bool>(this, posn, weapon, arg2);
	0AA8: call_method_return 0x609F80 struct [CPlayerPed] num_params 3 pop 0 [posn] [weapon] [arg2] func_ret [bool]

	// CPlayerPed::GetPlayerInfoForThisPlayerPed
	// plugin::CallMethodAndReturn<CPlayerInfo*, 0x609FF0, CPlayerPed *>(this);
	0AA8: call_method_return 0x609FF0 struct [CPlayerPed] num_params 0 pop 0 func_ret [CPlayerInfo*]

	// CPlayerPed::DoStuffToGoOnFire
	// plugin::CallMethod<0x60A020, CPlayerPed *>(this);
	0AA6: call_method 0x60A020 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::AnnoyPlayerPed
	// plugin::CallMethod<0x60A040, CPlayerPed *, bool>(this, arg0);
	0AA6: call_method 0x60A040 struct [CPlayerPed] num_params 1 pop 0 [arg0]

	// CPlayerPed::ClearAdrenaline
	// plugin::CallMethod<0x60A070, CPlayerPed *>(this);
	0AA6: call_method 0x60A070 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::DisbandPlayerGroup
	// plugin::CallMethod<0x60A0A0, CPlayerPed *>(this);
	0AA6: call_method 0x60A0A0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::MakeGroupRespondToPlayerTakingDamage
	// plugin::CallMethod<0x60A110, CPlayerPed *, CEventDamage const&>(this, damageEvent);
	0AA6: call_method 0x60A110 struct [CPlayerPed] num_params 1 pop 0 [damageEvent]

	// CPlayerPed::TellGroupToStartFollowingPlayer
	// plugin::CallMethod<0x60A1D0, CPlayerPed *, bool, bool, bool>(this, arg0, arg1, arg2);
	0AA6: call_method 0x60A1D0 struct [CPlayerPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPlayerPed::MakePlayerGroupDisappear
	// plugin::CallMethod<0x60A440, CPlayerPed *>(this);
	0AA6: call_method 0x60A440 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::MakePlayerGroupReappear
	// plugin::CallMethod<0x60A4B0, CPlayerPed *>(this);
	0AA6: call_method 0x60A4B0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ResetSprintEnergy
	// plugin::CallMethod<0x60A530, CPlayerPed *>(this);
	0AA6: call_method 0x60A530 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::HandleSprintEnergy
	// plugin::CallMethodAndReturn<bool, 0x60A550, CPlayerPed *, bool, float>(this, arg0, arg1);
	0AA8: call_method_return 0x60A550 struct [CPlayerPed] num_params 2 pop 0 [arg0] [arg1] func_ret [bool]

	// CPlayerPed::ControlButtonSprint
	// plugin::CallMethodAndReturn<float, 0x60A610, CPlayerPed *, eSprintType>(this, sprintType);
	0AA8: call_method_return 0x60A610 struct [CPlayerPed] num_params 1 pop 0 [sprintType] func_ret [float]

	// CPlayerPed::GetButtonSprintResults
	// plugin::CallMethodAndReturn<float, 0x60A820, CPlayerPed *, eSprintType>(this, sprintType);
	0AA8: call_method_return 0x60A820 struct [CPlayerPed] num_params 1 pop 0 [sprintType] func_ret [float]

	// CPlayerPed::ResetPlayerBreath
	// plugin::CallMethod<0x60A8A0, CPlayerPed *>(this);
	0AA6: call_method 0x60A8A0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::HandlePlayerBreath
	// plugin::CallMethod<0x60A8D0, CPlayerPed *, bool, float>(this, arg0, arg1);
	0AA6: call_method 0x60A8D0 struct [CPlayerPed] num_params 2 pop 0 [arg0] [arg1]

	// CPlayerPed::SetRealMoveAnim
	// plugin::CallMethod<0x60A9C0, CPlayerPed *>(this);
	0AA6: call_method 0x60A9C0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::MakeChangesForNewWeapon
	// plugin::CallMethod<0x60B460, CPlayerPed *, eWeaponType>(this, weaponType);
	0AA6: call_method 0x60B460 struct [CPlayerPed] num_params 1 pop 0 [weaponType]

	// LOSBlockedBetweenPeds
	// plugin::CallAndReturn<bool, 0x60B550, CEntity*, CEntity*>(entity1, entity2);
	0AA7: call_function_return 0x60B550 num_params 2 pop 2 [entity1] [entity2] func_ret [bool]

	// CPlayerPed::Compute3rdPersonMouseTarget
	// plugin::CallMethod<0x60B650, CPlayerPed *, bool>(this, meleeWeapon);
	0AA6: call_method 0x60B650 struct [CPlayerPed] num_params 1 pop 0 [meleeWeapon]

	// CPlayerPed::DrawTriangleForMouseRecruitPed
	// plugin::CallMethod<0x60BA80, CPlayerPed *>(this);
	0AA6: call_method 0x60BA80 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::DoesTargetHaveToBeBroken
	// plugin::CallMethodAndReturn<bool, 0x60C0C0, CPlayerPed *, CEntity*, CWeapon*>(this, entity, weapon);
	0AA8: call_method_return 0x60C0C0 struct [CPlayerPed] num_params 2 pop 0 [entity] [weapon] func_ret [bool]

	// CPlayerPed::KeepAreaAroundPlayerClear
	// plugin::CallMethod<0x60C1E0, CPlayerPed *>(this);
	0AA6: call_method 0x60C1E0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetPlayerMoveBlendRatio
	// plugin::CallMethod<0x60C520, CPlayerPed *, CVector*>(this, arg0);
	0AA6: call_method 0x60C520 struct [CPlayerPed] num_params 1 pop 0 [arg0]

	// CPlayerPed::FindPedToAttack
	// plugin::CallMethodAndReturn<CPed*, 0x60C5F0, CPlayerPed *>(this);
	0AA8: call_method_return 0x60C5F0 struct [CPlayerPed] num_params 0 pop 0 func_ret [CPed*]

	// CPlayerPed::ForceGroupToAlwaysFollow
	// plugin::CallMethod<0x60C7C0, CPlayerPed *, bool>(this, enable);
	0AA6: call_method 0x60C7C0 struct [CPlayerPed] num_params 1 pop 0 [enable]

	// CPlayerPed::ForceGroupToNeverFollow
	// plugin::CallMethod<0x60C800, CPlayerPed *, bool>(this, enable);
	0AA6: call_method 0x60C800 struct [CPlayerPed] num_params 1 pop 0 [enable]

	// CPlayerPed::MakeThisPedJoinOurGroup
	// plugin::CallMethod<0x60C840, CPlayerPed *, CPed*>(this, ped);
	0AA6: call_method 0x60C840 struct [CPlayerPed] num_params 1 pop 0 [ped]

	// CPlayerPed::PlayerWantsToAttack
	// plugin::CallMethodAndReturn<bool, 0x60CC50, CPlayerPed *>(this);
	0AA8: call_method_return 0x60CC50 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::SetInitialState
	// plugin::CallMethod<0x60CD20, CPlayerPed *, bool>(this, bGroupCreated);
	0AA6: call_method 0x60CD20 struct [CPlayerPed] num_params 1 pop 0 [bGroupCreated]

	// CPlayerPed::MakeChangesForNewWeapon
	// plugin::CallMethod<0x60D000, CPlayerPed *, int>(this, weaponSlot);
	0AA6: call_method 0x60D000 struct [CPlayerPed] num_params 1 pop 0 [weaponSlot]

	// CPlayerPed::EvaluateTarget
	// plugin::CallMethod<0x60D020, CPlayerPed *, CEntity*, CEntity**, float*, float, float, bool>(this, target, outTarget, outTargetPriority, maxDistance, arg4, arg5);
	0AA6: call_method 0x60D020 struct [CPlayerPed] num_params 6 pop 0 [target] [outTarget] [outTargetPriority] [maxDistance] [arg4] [arg5]

	// CPlayerPed::EvaluateNeighbouringTarget
	// plugin::CallMethod<0x60D1C0, CPlayerPed *, CEntity*, CEntity**, float*, float, float, bool>(this, target, outTarget, outTargetPriority, maxDistance, arg4, arg5);
	0AA6: call_method 0x60D1C0 struct [CPlayerPed] num_params 6 pop 0 [target] [outTarget] [outTargetPriority] [maxDistance] [arg4] [arg5]

	// CPlayerPed::ProcessGroupBehaviour
	// plugin::CallMethod<0x60D350, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x60D350 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerHasJustAttackedSomeone
	// plugin::CallMethodAndReturn<bool, 0x60D5A0, CPlayerPed *>(this);
	0AA8: call_method_return 0x60D5A0 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::SetupPlayerPed
	// plugin::Call<0x60D790, int>(playerId);
	0AA5: call_function 0x60D790 num_params 1 pop 1 [playerId]

	// CPlayerPed::ProcessWeaponSwitch
	// plugin::CallMethod<0x60D850, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x60D850 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::FindWeaponLockOnTarget
	// plugin::CallMethodAndReturn<bool, 0x60DC50, CPlayerPed *>(this);
	0AA8: call_method_return 0x60DC50 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::FindNextWeaponLockOnTarget
	// plugin::CallMethodAndReturn<bool, 0x60E530, CPlayerPed *, CEntity*, bool>(this, arg0, arg1);
	0AA8: call_method_return 0x60E530 struct [CPlayerPed] num_params 2 pop 0 [arg0] [arg1] func_ret [bool]

	// CPlayerPed::GetWantedLevel
	// plugin::CallMethodAndReturn<int, 0x41BE60, CPlayerPed *>(this);
	0AA8: call_method_return 0x41BE60 struct [CPlayerPed] num_params 0 pop 0 func_ret [int]

plugin_sa\game_sa\CPointLights.cpp:

	// CPointLights::Init
	// plugin::Call<0x6FFB40>();
	0AA5: call_function 0x6FFB40 num_params 0 pop 0

	// CPointLights::GenerateLightsAffectingObject
	// plugin::CallAndReturn<float, 0x6FFBB0, CVector const*, float*, CEntity*>(point, totalLighting, entity);
	0AA7: call_function_return 0x6FFBB0 num_params 3 pop 3 [point] [totalLighting] [entity] func_ret [float]

	// CPointLights::GetLightMultiplier
	// plugin::CallAndReturn<float, 0x6FFE70, CVector const*>(point);
	0AA7: call_function_return 0x6FFE70 num_params 1 pop 1 [point] func_ret [float]

	// CPointLights::RemoveLightsAffectingObject
	// plugin::Call<0x6FFFE0>();
	0AA5: call_function 0x6FFFE0 num_params 0 pop 0

	// CPointLights::ProcessVerticalLineUsingCache
	// plugin::CallAndReturn<bool, 0x6FFFF0, CVector, float*>(point, outZ);
	0AA7: call_function_return 0x6FFFF0 num_params 2 pop 2 [point] [outZ] func_ret [bool]

	// CPointLights::AddLight
	// plugin::Call<0x7000E0, unsigned char, CVector, CVector, float, float, float, float, unsigned char, bool, CEntity*>(lightType, point, direction, radius, red, green, blue, fogType, generateExtraShadows, entityAffected);
	0AA5: call_function 0x7000E0 num_params 10 pop 10 [lightType] [point] [direction] [radius] [red] [green] [blue] [fogType] [generateExtraShadows] [entityAffected]

	// CPointLights::RenderFogEffect
	// plugin::Call<0x7002D0>();
	0AA5: call_function 0x7002D0 num_params 0 pop 0

plugin_sa\game_sa\CPointList.cpp:

	// CPointList::Empty
	// plugin::CallMethodDynGlobal<CPointList *>(gaddrof(CPointList::Empty), this);

plugin_sa\game_sa\CPools.cpp:

	// CPools::CheckBuildingAtomics
	// plugin::CallAndReturn<int, 0x550170>();
	0AA7: call_function_return 0x550170 num_params 0 pop 0 func_ret [int]

	// CPools::CheckPoolsEmpty
	// plugin::Call<0x551950>();
	0AA5: call_function 0x551950 num_params 0 pop 0

	// CPools::GetObject
	// plugin::CallAndReturn<CObject*, 0x550050, int>(handle);
	0AA7: call_function_return 0x550050 num_params 1 pop 1 [handle] func_ret [CObject*]

	// CPools::GetObjectRef
	// plugin::CallAndReturn<int, 0x550020, CObject*>(object);
	0AA7: call_function_return 0x550020 num_params 1 pop 1 [object] func_ret [int]

	// CPools::GetPed
	// plugin::CallAndReturn<CPed*, 0x54FF90, int>(handle);
	0AA7: call_function_return 0x54FF90 num_params 1 pop 1 [handle] func_ret [CPed*]

	// CPools::GetPedRef
	// plugin::CallAndReturn<int, 0x54FF60, CPed*>(ped);
	0AA7: call_function_return 0x54FF60 num_params 1 pop 1 [ped] func_ret [int]

	// CPools::GetVehicle
	// plugin::CallAndReturn<CVehicle*, 0x54FFF0, int>(handle);
	0AA7: call_function_return 0x54FFF0 num_params 1 pop 1 [handle] func_ret [CVehicle*]

	// CPools::GetVehicleRef
	// plugin::CallAndReturn<int, 0x54FFC0, CVehicle*>(vehicle);
	0AA7: call_function_return 0x54FFC0 num_params 1 pop 1 [vehicle] func_ret [int]

	// CPools::Initialise
	// plugin::Call<0x550F10>();
	0AA5: call_function 0x550F10 num_params 0 pop 0

	// CPools::Load
	// plugin::CallAndReturn<bool, 0x5D0890>();
	0AA7: call_function_return 0x5D0890 num_params 0 pop 0 func_ret [bool]

	// CPools::LoadObjectPool
	// plugin::CallAndReturn<bool, 0x5D4A40>();
	0AA7: call_function_return 0x5D4A40 num_params 0 pop 0 func_ret [bool]

	// CPools::LoadPedPool
	// plugin::CallAndReturn<bool, 0x5D2D70>();
	0AA7: call_function_return 0x5D2D70 num_params 0 pop 0 func_ret [bool]

	// CPools::LoadVehiclePool
	// plugin::CallAndReturn<bool, 0x5D2A20>();
	0AA7: call_function_return 0x5D2A20 num_params 0 pop 0 func_ret [bool]

	// CPools::MakeSureSlotInObjectPoolIsEmpty
	// plugin::Call<0x550080, int>(slot);
	0AA5: call_function 0x550080 num_params 1 pop 1 [slot]

	// CPools::Save
	// plugin::CallAndReturn<bool, 0x5D0880>();
	0AA7: call_function_return 0x5D0880 num_params 0 pop 0 func_ret [bool]

	// CPools::SaveObjectPool
	// plugin::CallAndReturn<bool, 0x5D4940>();
	0AA7: call_function_return 0x5D4940 num_params 0 pop 0 func_ret [bool]

	// CPools::SavePedPool
	// plugin::CallAndReturn<bool, 0x5D4B40>();
	0AA7: call_function_return 0x5D4B40 num_params 0 pop 0 func_ret [bool]

	// CPools::SaveVehiclePool
	// plugin::CallAndReturn<bool, 0x5D4800>();
	0AA7: call_function_return 0x5D4800 num_params 0 pop 0 func_ret [bool]

	// CPools::ShutDown
	// plugin::Call<0x5519F0>();
	0AA5: call_function 0x5519F0 num_params 0 pop 0

plugin_sa\game_sa\CPopCycle.cpp:

	// CPopCycle::FindNewPedType
	// plugin::CallAndReturn<bool, 0x60FBD0, ePedType*, int*, bool, bool>(arg1, modelindex, arg3, arg4);
	0AA7: call_function_return 0x60FBD0 num_params 4 pop 4 [arg1] [modelindex] [arg3] [arg4] func_ret [bool]

	// CPopCycle::GetCurrentPercOther_Peds
	// plugin::CallAndReturn<float, 0x610310>();
	0AA7: call_function_return 0x610310 num_params 0 pop 0 func_ret [float]

	// CPopCycle::Initialise
	// plugin::Call<0x5BC090>();
	0AA5: call_function 0x5BC090 num_params 0 pop 0

	// CPopCycle::IsPedAppropriateForCurrentZone
	// plugin::CallAndReturn<bool, 0x610150, int>(modelindex);
	0AA7: call_function_return 0x610150 num_params 1 pop 1 [modelindex] func_ret [bool]

	// CPopCycle::IsPedInGroup
	// plugin::CallAndReturn<bool, 0x610210, int, int>(modelIndex, PopCycle_Group);
	0AA7: call_function_return 0x610210 num_params 2 pop 2 [modelIndex] [PopCycle_Group] func_ret [bool]

	// CPopCycle::PedIsAcceptableInCurrentZone
	// plugin::CallAndReturn<bool, 0x610720, int>(modelIndex);
	0AA7: call_function_return 0x610720 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopCycle::PickARandomGroupOfOtherPeds
	// plugin::CallAndReturn<int, 0x610420>();
	0AA7: call_function_return 0x610420 num_params 0 pop 0 func_ret [int]

	// CPopCycle::PlayerKilledADealer
	// plugin::Call<0x610490>();
	0AA5: call_function 0x610490 num_params 0 pop 0

	// CPopCycle::Update
	// plugin::Call<0x610BF0>();
	0AA5: call_function 0x610BF0 num_params 0 pop 0

	// CPopCycle::UpdateAreaDodgyness
	// plugin::Call<0x610560>();
	0AA5: call_function 0x610560 num_params 0 pop 0

	// CPopCycle::UpdateDealerStrengths
	// plugin::Call<0x6104B0>();
	0AA5: call_function 0x6104B0 num_params 0 pop 0

	// CPopCycle::UpdatePercentages
	// plugin::Call<0x610770>();
	0AA5: call_function 0x610770 num_params 0 pop 0

plugin_sa\game_sa\CProjectileInfo.cpp:

	// CProjectileInfo::Initialise
	// plugin::Call<0x737B40>();
	0AA5: call_function 0x737B40 num_params 0 pop 0

	// CProjectileInfo::RemoveFXSystem
	// plugin::Call<0x737B80, unsigned char>(bInstantly);
	0AA5: call_function 0x737B80 num_params 1 pop 1 [bInstantly]

	// CProjectileInfo::Shutdown
	// plugin::Call<0x737BC0>();
	0AA5: call_function 0x737BC0 num_params 0 pop 0

	// CProjectileInfo::GetProjectileInfo
	// plugin::CallAndReturn<CProjectileInfo*, 0x737BF0, int>(infoId);
	0AA7: call_function_return 0x737BF0 num_params 1 pop 1 [infoId] func_ret [CProjectileInfo*]

	// CProjectileInfo::RemoveNotAdd
	// plugin::Call<0x737C00, CEntity*, eWeaponType, CVector>(creator, weaponType, posn);
	0AA5: call_function 0x737C00 num_params 3 pop 3 [creator] [weaponType] [posn]

	// CProjectileInfo::AddProjectile
	// plugin::CallAndReturn<bool, 0x737C80, CEntity*, eWeaponType, CVector, float, CVector*, CEntity*>(creator, weaponType, posn, force, direction, victim);
	0AA7: call_function_return 0x737C80 num_params 6 pop 6 [creator] [weaponType] [posn] [force] [direction] [victim] func_ret [bool]

	// CProjectileInfo::RemoveDetonatorProjectiles
	// plugin::Call<0x738860>();
	0AA5: call_function 0x738860 num_params 0 pop 0

	// CProjectileInfo::RemoveProjectile
	// plugin::Call<0x7388F0, CProjectileInfo*, CProjectile*>(projectileInfo, projectileObject);
	0AA5: call_function 0x7388F0 num_params 2 pop 2 [projectileInfo] [projectileObject]

	// CProjectileInfo::Update
	// plugin::Call<0x738B20>();
	0AA5: call_function 0x738B20 num_params 0 pop 0

	// CProjectileInfo::IsProjectileInRange
	// plugin::CallAndReturn<bool, 0x739860, float, float, float, float, float, float, bool>(x1, y1, z1, x2, y2, z2, bDestroy);
	0AA7: call_function_return 0x739860 num_params 7 pop 7 [x1] [y1] [z1] [x2] [y2] [z2] [bDestroy] func_ret [bool]

	// CProjectileInfo::RemoveAllProjectiles
	// plugin::Call<0x7399B0>();
	0AA5: call_function 0x7399B0 num_params 0 pop 0

	// CProjectileInfo::RemoveIfThisIsAProjectile
	// plugin::CallAndReturn<bool, 0x739A40, CObject*>(object);
	0AA7: call_function_return 0x739A40 num_params 1 pop 1 [object] func_ret [bool]

plugin_sa\game_sa\CPtrList.cpp:

	// CPtrList::CountElements
	// plugin::CallMethodAndReturn<unsigned int, 0x5521B0, CPtrList *>(this);
	0AA8: call_method_return 0x5521B0 struct [CPtrList] num_params 0 pop 0 func_ret [unsigned int]

	// CPtrList::IsMemberOfList
	// plugin::CallMethodAndReturn<bool, 0x5521D0, CPtrList *, void*>(this, memberNode);
	0AA8: call_method_return 0x5521D0 struct [CPtrList] num_params 1 pop 0 [memberNode] func_ret [bool]

plugin_sa\game_sa\CPtrListDoubleLink.cpp:

	// CPtrListDoubleLink::Flush
	// plugin::CallMethod<0x552470, CPtrListDoubleLink *>(this);
	0AA6: call_method 0x552470 struct [CPtrListDoubleLink] num_params 0 pop 0

	// CPtrListDoubleLink::AddItem
	// plugin::CallMethod<0x533670, CPtrListDoubleLink *, void*>(this, item);
	0AA6: call_method 0x533670 struct [CPtrListDoubleLink] num_params 1 pop 0 [item]

	// CPtrListDoubleLink::DeleteItem
	// plugin::CallMethod<0x5336B0, CPtrListDoubleLink *, void*>(this, item);
	0AA6: call_method 0x5336B0 struct [CPtrListDoubleLink] num_params 1 pop 0 [item]

plugin_sa\game_sa\CPtrListSingleLink.cpp:

	// CPtrListSingleLink::Flush
	// plugin::CallMethod<0x552400, CPtrListSingleLink *>(this);
	0AA6: call_method 0x552400 struct [CPtrListSingleLink] num_params 0 pop 0

	// CPtrListSingleLink::AddItem
	// plugin::CallMethod<0x5335E0, CPtrListSingleLink *, void*>(this, item);
	0AA6: call_method 0x5335E0 struct [CPtrListSingleLink] num_params 1 pop 0 [item]

	// CPtrListSingleLink::DeleteItem
	// plugin::CallMethod<0x533610, CPtrListSingleLink *, void*>(this, item);
	0AA6: call_method 0x533610 struct [CPtrListSingleLink] num_params 1 pop 0 [item]

plugin_sa\game_sa\CPtrNodeDoubleLink.cpp:

	// CPtrNodeDoubleLink::operator new
	// plugin::CallAndReturn<void*, 0x5523C0, unsigned int>(size);
	0AA7: call_function_return 0x5523C0 num_params 1 pop 1 [size] func_ret [void*]

	// CPtrNodeDoubleLink::operator delete
	// plugin::Call<0x5523D0, void*>(data);
	0AA5: call_function 0x5523D0 num_params 1 pop 1 [data]

plugin_sa\game_sa\CPtrNodeSingleLink.cpp:

	// CPtrNodeSingleLink::operator new
	// plugin::CallAndReturn<void*, 0x552380, unsigned int>(size);
	0AA7: call_function_return 0x552380 num_params 1 pop 1 [size] func_ret [void*]

	// CPtrNodeSingleLink::operator delete
	// plugin::Call<0x552390, void*>(data);
	0AA5: call_function 0x552390 num_params 1 pop 1 [data]

plugin_sa\game_sa\CQuadTreeNode.cpp:

	// CQuadTreeNode::AddItem
	// plugin::CallMethod<0x552CD0, CQuadTreeNode *, void*, CRect const&>(this, item, rect);
	0AA6: call_method 0x552CD0 struct [CQuadTreeNode] num_params 2 pop 0 [item] [rect]

	// CQuadTreeNode::CQuadTreeNode
	// plugin::CallMethod<0x552830, CQuadTreeNode *, CRect const&, int>(this, rect, startLevel);
	0AA6: call_method 0x552830 struct [CQuadTreeNode] num_params 2 pop 0 [rect] [startLevel]

	// CQuadTreeNode::DeleteItem
	// plugin::CallMethod<0x552A40, CQuadTreeNode *, void*>(this, item);
	0AA6: call_method 0x552A40 struct [CQuadTreeNode] num_params 1 pop 0 [item]

	// CQuadTreeNode::DeleteItem
	// plugin::CallMethod<0x552A90, CQuadTreeNode *, void*, CRect const&>(this, item, rect);
	0AA6: call_method 0x552A90 struct [CQuadTreeNode] num_params 2 pop 0 [item] [rect]

	// CQuadTreeNode::FindSector
	// plugin::CallMethodAndReturn<int, 0x5525A0, CQuadTreeNode *, CRect const&>(this, rect);
	0AA8: call_method_return 0x5525A0 struct [CQuadTreeNode] num_params 1 pop 0 [rect] func_ret [int]

	// CQuadTreeNode::FindSector
	// plugin::CallMethodAndReturn<int, 0x552640, CQuadTreeNode *, CVector2D const&>(this, posn);
	0AA8: call_method_return 0x552640 struct [CQuadTreeNode] num_params 1 pop 0 [posn] func_ret [int]

	// CQuadTreeNode::ForAllMatching
	// plugin::CallMethod<0x552980, CQuadTreeNode *, CRect const&, void(*)(CRect const&, void *)>(this, rect, callback);
	0AA6: call_method 0x552980 struct [CQuadTreeNode] num_params 3 pop 0 [void *)>(this] [rect] [callback]

	// CQuadTreeNode::ForAllMatching
	// plugin::CallMethod<0x5529F0, CQuadTreeNode *, CVector2D const&, void(*)(CVector2D const&, void *)>(this, posn, callback);
	0AA6: call_method 0x5529F0 struct [CQuadTreeNode] num_params 3 pop 0 [void *)>(this] [posn] [callback]

	// CQuadTreeNode::GetAll
	// plugin::CallMethod<0x552870, CQuadTreeNode *, CPtrListSingleLink&>(this, list);
	0AA6: call_method 0x552870 struct [CQuadTreeNode] num_params 1 pop 0 [list]

	// CQuadTreeNode::GetAllMatching
	// plugin::CallMethod<0x5528C0, CQuadTreeNode *, CRect const&, CPtrListSingleLink&>(this, rect, list);
	0AA6: call_method 0x5528C0 struct [CQuadTreeNode] num_params 2 pop 0 [rect] [list]

	// CQuadTreeNode::GetAllMatching
	// plugin::CallMethod<0x552930, CQuadTreeNode *, CVector2D const&, CPtrListSingleLink&>(this, posn, list);
	0AA6: call_method 0x552930 struct [CQuadTreeNode] num_params 2 pop 0 [posn] [list]

	// CQuadTreeNode::InSector
	// plugin::CallMethodAndReturn<bool, 0x5526A0, CQuadTreeNode *, CRect const&, int>(this, rect, sector);
	0AA8: call_method_return 0x5526A0 struct [CQuadTreeNode] num_params 2 pop 0 [rect] [sector] func_ret [bool]

	// CQuadTreeNode::InitPool
	// plugin::CallMethod<0x552C00, CQuadTreeNode *>(this);
	0AA6: call_method 0x552C00 struct [CQuadTreeNode] num_params 0 pop 0

	// CQuadTreeNode::operator delete
	// plugin::Call<0x552C90, void*>(data);
	0AA5: call_function 0x552C90 num_params 1 pop 1 [data]

	// CQuadTreeNode::operator new
	// plugin::CallAndReturn<void*, 0x552C80, unsigned int>(size);
	0AA7: call_function_return 0x552C80 num_params 1 pop 1 [size] func_ret [void*]

	// CQuadTreeNode::~CQuadTreeNode
	// plugin::CallMethod<0x552520, CQuadTreeNode *>(this);
	0AA6: call_method 0x552520 struct [CQuadTreeNode] num_params 0 pop 0

plugin_sa\game_sa\CRegisteredMotionBlurStreak.cpp:

	// CRegisteredMotionBlurStreak::Update
	// plugin::CallMethod<0x721EE0, CRegisteredMotionBlurStreak *>(this);
	0AA6: call_method 0x721EE0 struct [CRegisteredMotionBlurStreak] num_params 0 pop 0

	// CRegisteredMotionBlurStreak::Render
	// plugin::CallMethod<0x721F70, CRegisteredMotionBlurStreak *>(this);
	0AA6: call_method 0x721F70 struct [CRegisteredMotionBlurStreak] num_params 0 pop 0

plugin_sa\game_sa\CRenderer.cpp:

	// CRenderer::Init
	// plugin::Call<0x5531C0>();
	0AA5: call_function 0x5531C0 num_params 0 pop 0

	// CRenderer::Shutdown
	// plugin::Call<0x5531D0>();
	0AA5: call_function 0x5531D0 num_params 0 pop 0

	// CRenderer::RenderFadingInEntities
	// plugin::Call<0x5531E0>();
	0AA5: call_function 0x5531E0 num_params 0 pop 0

	// CRenderer::RenderFadingInUnderwaterEntities
	// plugin::Call<0x553220>();
	0AA5: call_function 0x553220 num_params 0 pop 0

	// CRenderer::RenderOneRoad
	// plugin::Call<0x553230, CEntity*>(entity);
	0AA5: call_function 0x553230 num_params 1 pop 1 [entity]

	// CRenderer::RenderOneNonRoad
	// plugin::Call<0x553260, CEntity*>(entity);
	0AA5: call_function 0x553260 num_params 1 pop 1 [entity]

	// CRenderer::RemoveVehiclePedLights
	// plugin::Call<0x553390, CPhysical*>(entity);
	0AA5: call_function 0x553390 num_params 1 pop 1 [entity]

	// CRenderer::AddEntityToRenderList
	// plugin::Call<0x5534B0, CEntity*, float>(entity, distance);
	0AA5: call_function 0x5534B0 num_params 2 pop 2 [entity] [distance]

	// CRenderer::ScanSectorList_ListModels
	// plugin::Call<0x5535D0, int, int>(sector_x, sector_y);
	0AA5: call_function 0x5535D0 num_params 2 pop 2 [sector_x] [sector_y]

	// CRenderer::ScanSectorList_ListModelsVisible
	// plugin::Call<0x553650, int, int>(sector_x, sector_y);
	0AA5: call_function 0x553650 num_params 2 pop 2 [sector_x] [sector_y]

	// CRenderer::GetLodRenderListBase
	// plugin::CallAndReturn<tRenderListEntry*, 0x5536D0>();
	0AA7: call_function_return 0x5536D0 num_params 0 pop 0 func_ret [tRenderListEntry*]

	// CRenderer::GetLodDontRenderListBase
	// plugin::CallAndReturn<tRenderListEntry*, 0x5536E0>();
	0AA7: call_function_return 0x5536E0 num_params 0 pop 0 func_ret [tRenderListEntry*]

	// CRenderer::ResetLodRenderLists
	// plugin::Call<0x5536F0>();
	0AA5: call_function 0x5536F0 num_params 0 pop 0

	// CRenderer::AddToLodRenderList
	// plugin::Call<0x553710, CEntity*, float>(entity, distance);
	0AA5: call_function 0x553710 num_params 2 pop 2 [entity] [distance]

	// CRenderer::AddToLodDontRenderList
	// plugin::Call<0x553740, CEntity*, float>(entity, distance);
	0AA5: call_function 0x553740 num_params 2 pop 2 [entity] [distance]

	// CRenderer::ProcessLodRenderLists
	// plugin::Call<0x553770>();
	0AA5: call_function 0x553770 num_params 0 pop 0

	// CRenderer::PreRender
	// plugin::Call<0x553910>();
	0AA5: call_function 0x553910 num_params 0 pop 0

	// CRenderer::RenderRoads
	// plugin::Call<0x553A10>();
	0AA5: call_function 0x553A10 num_params 0 pop 0

	// CRenderer::RenderEverythingBarRoads
	// plugin::Call<0x553AA0>();
	0AA5: call_function 0x553AA0 num_params 0 pop 0

	// CRenderer::RenderFirstPersonVehicle
	// plugin::Call<0x553D00>();
	0AA5: call_function 0x553D00 num_params 0 pop 0

	// CRenderer::SetupLightingForEntity
	// plugin::CallAndReturn<bool, 0x553E40, CEntity*>(entity);
	0AA7: call_function_return 0x553E40 num_params 1 pop 1 [entity] func_ret [bool]

	// CRenderer::SetupMapEntityVisibility
	// plugin::CallAndReturn<int, 0x553F60, CEntity*, CBaseModelInfo*, float, bool>(entity, modelInfo, distance, arg3);
	0AA7: call_function_return 0x553F60 num_params 4 pop 4 [entity] [modelInfo] [distance] [arg3] func_ret [int]

	// CRenderer::SetupEntityVisibility
	// plugin::CallAndReturn<int, 0x554230, CEntity*, float&>(entity, outDistance);
	0AA7: call_function_return 0x554230 num_params 2 pop 2 [entity] [outDistance] func_ret [int]

	// CRenderer::SetupBigBuildingVisibility
	// plugin::CallAndReturn<int, 0x554650, CEntity*, float&>(entity, outDistance);
	0AA7: call_function_return 0x554650 num_params 2 pop 2 [entity] [outDistance] func_ret [int]

	// CRenderer::ScanSectorList
	// plugin::Call<0x554840, int, int>(sector_x, sector_y);
	0AA5: call_function 0x554840 num_params 2 pop 2 [sector_x] [sector_y]

	// CRenderer::ScanBigBuildingList
	// plugin::Call<0x554B10, int, int>(sector_x, sector_y);
	0AA5: call_function 0x554B10 num_params 2 pop 2 [sector_x] [sector_y]

	// CRenderer::GetObjectsInFrustum
	// plugin::CallAndReturn<int, 0x554C60, CEntity**, float, RwMatrixTag*>(outEntities, distance, transformMat);
	0AA7: call_function_return 0x554C60 num_params 3 pop 3 [outEntities] [distance] [transformMat] func_ret [int]

	// CRenderer::ShouldModelBeStreamed
	// plugin::CallAndReturn<bool, 0x554EB0, CEntity*, CVector const&, float>(entity, origin, farClip);
	0AA7: call_function_return 0x554EB0 num_params 3 pop 3 [entity] [origin] [farClip] func_ret [bool]

	// CRenderer::ScanWorld
	// plugin::Call<0x554FE0>();
	0AA5: call_function 0x554FE0 num_params 0 pop 0

	// CRenderer::ScanPtrList_RequestModels
	// plugin::Call<0x555680, CPtrList&>(ptrList);
	0AA5: call_function 0x555680 num_params 1 pop 1 [ptrList]

	// CRenderer::ConstructRenderList
	// plugin::Call<0x5556E0>();
	0AA5: call_function 0x5556E0 num_params 0 pop 0

	// CRenderer::ScanSectorList_RequestModels
	// plugin::Call<0x555900, int, int>(sector_x, sector_y);
	0AA5: call_function 0x555900 num_params 2 pop 2 [sector_x] [sector_y]

	// CRenderer::RequestObjectsInFrustum
	// plugin::Call<0x555960, RwMatrixTag*, int>(transformMat, modelRequesFlags);
	0AA5: call_function 0x555960 num_params 2 pop 2 [transformMat] [modelRequesFlags]

	// CRenderer::RequestObjectsInDirection
	// plugin::Call<0x555CB0, CVector const&, float, int>(posn, angle, modelRequesFlags);
	0AA5: call_function 0x555CB0 num_params 3 pop 3 [posn] [angle] [modelRequesFlags]

	// CRenderer::SetupScanLists
	// plugin::Call<0x553540, int, int>(sector_x, sector_y);
	0AA5: call_function 0x553540 num_params 2 pop 2 [sector_x] [sector_y]

plugin_sa\game_sa\CRoadBlocks.cpp:

	// CRoadBlocks::RegisterScriptRoadBlock
	// plugin::CallDynGlobal<CVector *, CVector *, byte>(gaddrof(CRoadBlocks::RegisterScriptRoadBlock), cornerA, cornerB, type);

	// CRoadBlocks::ClearScriptRoadBlocks
	// plugin::CallDynGlobal<>(gaddrof(CRoadBlocks::ClearScriptRoadBlocks));

	// CRoadBlocks::Init
	// plugin::CallDynGlobal<>(gaddrof(CRoadBlocks::Init));

	// CRoadBlocks::GenerateRoadBlockCopsForCar
	// plugin::CallDynGlobal<CVehicle *, int, byte>(gaddrof(CRoadBlocks::GenerateRoadBlockCopsForCar), car, pedsPositionsType, type);

	// CRoadBlocks::CreateRoadBlockBetween2Points
	// plugin::CallDynGlobal<CVector *, CVector *, byte>(gaddrof(CRoadBlocks::CreateRoadBlockBetween2Points), a, b, type);

	// CRoadBlocks::GenerateRoadBlocks
	// plugin::CallDynGlobal<>(gaddrof(CRoadBlocks::GenerateRoadBlocks));

plugin_sa\game_sa\CRunningScript.cpp:

	// CRunningScript::AddScriptToList
	// plugin::CallMethodDynGlobal<CRunningScript *, CRunningScript **>(gaddrof(CRunningScript::AddScriptToList), this, queuelist);

	// CRunningScript::CarInAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::CarInAreaCheckCommand), this, commandID);

	// CRunningScript::CharInAngledAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::CharInAngledAreaCheckCommand), this, commandID);

	// CRunningScript::CharInAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::CharInAreaCheckCommand), this, commandID);

	// CRunningScript::CollectNextParameterWithoutIncreasingPC
	// plugin::CallMethodAndReturnDynGlobal<tScriptParam, CRunningScript *>(gaddrof(CRunningScript::CollectNextParameterWithoutIncreasingPC), this);
	0AA8: call_method_return 0x464250 struct [CRunningScript] num_params 0 pop 0 func_ret [tScriptParam]

	// CRunningScript::CollectParameters
	// plugin::CallMethodDynGlobal<CRunningScript *, short>(gaddrof(CRunningScript::CollectParameters), this, count);

	// CRunningScript::DoDeatharrestCheck
	// plugin::CallMethodDynGlobal<CRunningScript *>(gaddrof(CRunningScript::DoDeatharrestCheck), this);

	// CRunningScript::FlameInAngledAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::FlameInAngledAreaCheckCommand), this, commandID);

	// CRunningScript::GetCorrectPedModelIndexForEmergencyServiceType
	// plugin::CallMethodDynGlobal<CRunningScript *, ePedType, int *>(gaddrof(CRunningScript::GetCorrectPedModelIndexForEmergencyServiceType), this, pedType, pModelId);

	// CRunningScript::GetIndexOfGlobalVariable
	// plugin::CallMethodAndReturnDynGlobal<short, CRunningScript *>(gaddrof(CRunningScript::GetIndexOfGlobalVariable), this);
	0AA8: call_method_return 0x464700 struct [CRunningScript] num_params 0 pop 0 func_ret [short]

	// CRunningScript::GetPadState
	// plugin::CallMethodAndReturnDynGlobal<short, CRunningScript *, unsigned short, unsigned short>(gaddrof(CRunningScript::GetPadState), this, playerIndex, buttonID);
	0AA8: call_method_return 0x485B10 struct [CRunningScript] num_params 2 pop 0 [playerIndex] [buttonID] func_ret [short]

	// *CRunningScript::GetPointerToLocalArrayElement
	// plugin::CallMethodAndReturnDynGlobal<void*,CRunningScript *, int, unsigned short, unsigned char>(gaddrof(CRunningScript::GetPointerToLocalArrayElement), this, off, idx, mul);
	0AA8: call_method_return 0x463CC0 struct [*CRunningScript] num_params 3 pop 0 [off] [idx] [mul] func_ret [void*]

	// *CRunningScript::GetPointerToLocalVariable
	// plugin::CallMethodAndReturnDynGlobal<void* ,CRunningScript *, int>(gaddrof(CRunningScript::GetPointerToLocalVariable), this, varId);
	0AA8: call_method_return 0x463CA0 struct [*CRunningScript] num_params 1 pop 0 [varId] func_ret [void*]

	// *CRunningScript::GetPointerToScriptVariable
	// plugin::CallMethodAndReturnDynGlobal<tScriptParam *, CRunningScript *, unsigned char>(gaddrof(CRunningScript::GetPointerToScriptVariable), this, variableType);
	0AA8: call_method_return 0x464790 struct [*CRunningScript] num_params 1 pop 0 [variableType] func_ret [tScriptParam *]

	// CRunningScript::GivePedScriptedTask
	// plugin::CallMethodDynGlobal<CRunningScript *, int, CTask *, int>(gaddrof(CRunningScript::GivePedScriptedTask), this, pedHandle, task, commandID);

	// CRunningScript::Init
	// plugin::CallMethodDynGlobal<CRunningScript *>(gaddrof(CRunningScript::Init), this);

	// CRunningScript::IsPedDead
	// plugin::CallMethodAndReturnDynGlobal<bool, CRunningScript *, CPed *>(gaddrof(CRunningScript::IsPedDead), this, pPed);
	0AA8: call_method_return 0x464D70 struct [CRunningScript] num_params 1 pop 0 [pPed] func_ret [bool]

	// CRunningScript::LocateCarCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateCarCommand), this, commandID);

	// CRunningScript::LocateCharCarCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateCharCarCommand), this, commandID);

	// CRunningScript::LocateCharCharCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateCharCharCommand), this, commandID);

	// CRunningScript::LocateCharCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateCharCommand), this, commandID);

	// CRunningScript::LocateCharObjectCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateCharObjectCommand), this, commandID);

	// CRunningScript::LocateObjectCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::LocateObjectCommand), this, commandID);

	// CRunningScript::ObjectInAngledAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::ObjectInAngledAreaCheckCommand), this, commandID);

	// CRunningScript::ObjectInAreaCheckCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::ObjectInAreaCheckCommand), this, commandID);

	// CRunningScript::PlayAnimScriptCommand
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::PlayAnimScriptCommand), this, commandID);

	// CRunningScript::Process
	// plugin::CallMethodDynGlobal<CRunningScript *>(gaddrof(CRunningScript::Process), this);

	// CRunningScript::ProcessCommands0To99
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands0To99), this, commandID);
	0AA8: call_method_return 0x465E60 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1000To1099
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1000To1099), this, commandID);
	0AA8: call_method_return 0x489500 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands100To199
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands100To199), this, commandID);
	0AA8: call_method_return 0x466DE0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1100To1199
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1100To1199), this, commandID);
	0AA8: call_method_return 0x48A320 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1200To1299
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1200To1299), this, commandID);
	0AA8: call_method_return 0x48B590 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1300To1399
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1300To1399), this, commandID);
	0AA8: call_method_return 0x48CDD0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1400To1499
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1400To1499), this, commandID);
	0AA8: call_method_return 0x48EAA0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1500To1599
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1500To1599), this, commandID);
	0AA8: call_method_return 0x490DB0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1600To1699
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1600To1699), this, commandID);
	0AA8: call_method_return 0x493FE0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1700To1799
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1700To1799), this, commandID);
	0AA8: call_method_return 0x496E00 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1800To1899
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1800To1899), this, commandID);
	0AA8: call_method_return 0x46D050 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands1900To1999
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands1900To1999), this, commandID);
	0AA8: call_method_return 0x46B460 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2000To2099
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2000To2099), this, commandID);
	0AA8: call_method_return 0x472310 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands200To299
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands200To299), this, commandID);
	0AA8: call_method_return 0x469390 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2100To2199
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2100To2199), this, commandID);
	0AA8: call_method_return 0x470A90 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2200To2299
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2200To2299), this, commandID);
	0AA8: call_method_return 0x474900 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2300To2399
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2300To2399), this, commandID);
	0AA8: call_method_return 0x4762D0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2400To2499
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2400To2499), this, commandID);
	0AA8: call_method_return 0x478000 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2500To2599
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2500To2599), this, commandID);
	0AA8: call_method_return 0x47A760 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands2600To2699
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands2600To2699), this, commandID);
	0AA8: call_method_return 0x479DA0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands300To399
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands300To399), this, commandID);
	0AA8: call_method_return 0x47C100 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands400To499
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands400To499), this, commandID);
	0AA8: call_method_return 0x47D210 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands500To599
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands500To599), this, commandID);
	0AA8: call_method_return 0x47E090 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands600To699
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands600To699), this, commandID);
	0AA8: call_method_return 0x47F370 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands700To799
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands700To799), this, commandID);
	0AA8: call_method_return 0x47FA30 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands800To899
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands800To899), this, commandID);
	0AA8: call_method_return 0x481300 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessCommands900To999
	// plugin::CallMethodAndReturnDynGlobal<char, CRunningScript *, int>(gaddrof(CRunningScript::ProcessCommands900To999), this, commandID);
	0AA8: call_method_return 0x483BD0 struct [CRunningScript] num_params 1 pop 0 [commandID] func_ret [char]

	// CRunningScript::ProcessOneCommand
	// plugin::CallMethodDynGlobal<CRunningScript *>(gaddrof(CRunningScript::ProcessOneCommand), this);

	// CRunningScript::ReadArrayInformation
	// plugin::CallMethodDynGlobal<CRunningScript *, int, unsigned short *, int *>(gaddrof(CRunningScript::ReadArrayInformation), this, move, pOffset, pIdx);

	// CRunningScript::ReadParametersForNewlyStartedScript
	// plugin::CallMethodDynGlobal<CRunningScript *, CRunningScript *>(gaddrof(CRunningScript::ReadParametersForNewlyStartedScript), this, pNewScript);

	// CRunningScript::ReadTextLabelFromScript
	// plugin::CallMethodDynGlobal<CRunningScript *, char *, unsigned char>(gaddrof(CRunningScript::ReadTextLabelFromScript), this, pBuffer, nBufferLength);

	// CRunningScript::RemoveScriptFromList
	// plugin::CallMethodDynGlobal<CRunningScript *, CRunningScript **>(gaddrof(CRunningScript::RemoveScriptFromList), this, queuelist);

	// CRunningScript::ScriptTaskPickUpObject
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::ScriptTaskPickUpObject), this, commandID);

	// CRunningScript::SetCharCoordinates
	// plugin::CallMethodDynGlobal<CRunningScript *, CPed *, float, float, float, bool, bool>(gaddrof(CRunningScript::SetCharCoordinates), this, pPed, x_coord, y_coord, z_coord, bWarpGang, bOffset);

	// CRunningScript::ShutdownThisScript
	// plugin::CallMethodDynGlobal<CRunningScript *>(gaddrof(CRunningScript::ShutdownThisScript), this);

	// CRunningScript::StoreParameters
	// plugin::CallMethodDynGlobal<CRunningScript *, short>(gaddrof(CRunningScript::StoreParameters), this, count);

	// CRunningScript::ThisIsAValidRandomPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CRunningScript *, ePedType, bool, bool, bool>(gaddrof(CRunningScript::ThisIsAValidRandomPed), this, pedType, civilian, gang, criminal);
	0AA8: call_method_return 0x489490 struct [CRunningScript] num_params 4 pop 0 [pedType] [civilian] [gang] [criminal] func_ret [bool]

	// CRunningScript::UpdateCompareFlag
	// plugin::CallMethodDynGlobal<CRunningScript *, bool>(gaddrof(CRunningScript::UpdateCompareFlag), this, state);

	// CRunningScript::UpdatePC
	// plugin::CallMethodDynGlobal<CRunningScript *, int>(gaddrof(CRunningScript::UpdatePC), this, newIP);

plugin_sa\game_sa\CScriptResourceManager.cpp:

	// CScriptResourceManager::AddToResourceManager
	// plugin::CallMethodDynGlobal<CScriptResourceManager *, int, unsigned int, CRunningScript *>(gaddrof(CScriptResourceManager::AddToResourceManager), this, modelID, ResourceType, pScript);

	// CScriptResourceManager::HasResourceBeenRequested
	// plugin::CallMethodAndReturnDynGlobal<bool, CScriptResourceManager *, int, unsigned int>(gaddrof(CScriptResourceManager::HasResourceBeenRequested), this, ModelId, a4);
	0AA8: call_method_return 0x470620 struct [CScriptResourceManager] num_params 2 pop 0 [ModelId] [a4] func_ret [bool]

	// CScriptResourceManager::RemoveFromResourceManager
	// plugin::CallMethodAndReturnDynGlobal<bool, CScriptResourceManager *, int, unsigned int, CRunningScript *>(gaddrof(CScriptResourceManager::RemoveFromResourceManager), this, modelID, ResourceType, pScript);
	0AA8: call_method_return 0x470510 struct [CScriptResourceManager] num_params 3 pop 0 [modelID] [ResourceType] [pScript] func_ret [bool]

plugin_sa\game_sa\CScriptsForBrains.cpp:

	// CScriptsForBrains::AddNewScriptBrain
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, short, short, unsigned short, signed char, signed char, float>(gaddrof(CScriptsForBrains::AddNewScriptBrain), this, ImgIndex, Model, Priority, attachType, Type, Radius);

	// CScriptsForBrains::AddNewStreamedScriptBrainForCodeUse
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, short, char *, signed char>(gaddrof(CScriptsForBrains::AddNewStreamedScriptBrainForCodeUse), this, a2, a3, attachtype);

	// CScriptsForBrains::CheckIfNewEntityNeedsScript
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, CEntity *, signed char, void *>(gaddrof(CScriptsForBrains::CheckIfNewEntityNeedsScript), this, pEntity, attachType, unused);

	// CScriptsForBrains::GetIndexOfScriptBrainWithThisName
	// plugin::CallMethodAndReturnDynGlobal<signed short, CScriptsForBrains *, char const *, signed char>(gaddrof(CScriptsForBrains::GetIndexOfScriptBrainWithThisName), this, name, Attachtype);
	0AA8: call_method_return 0x46AA30 struct [CScriptsForBrains] num_params 2 pop 0 [name] [Attachtype] func_ret [signed short]

	// CScriptsForBrains::HasAttractorScriptBrainWithThisNameLoaded
	// plugin::CallMethodAndReturnDynGlobal<bool, CScriptsForBrains *, char const *>(gaddrof(CScriptsForBrains::HasAttractorScriptBrainWithThisNameLoaded), this, name);
	0AA8: call_method_return 0x46AB20 struct [CScriptsForBrains] num_params 1 pop 0 [name] func_ret [bool]

	// CScriptsForBrains::Init
	// plugin::CallMethodDynGlobal<CScriptsForBrains *>(gaddrof(CScriptsForBrains::Init), this);

	// CScriptsForBrains::IsObjectWithinBrainActivationRange
	// plugin::CallMethodAndReturnDynGlobal<bool, CScriptsForBrains *, CObject *, CVector const *>(gaddrof(CScriptsForBrains::IsObjectWithinBrainActivationRange), this, entity, point);
	0AA8: call_method_return 0x46B3D0 struct [CScriptsForBrains] num_params 2 pop 0 [entity] [point] func_ret [bool]

	// CScriptsForBrains::MarkAttractorScriptBrainWithThisNameAsNoLongerNeeded
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, char const *>(gaddrof(CScriptsForBrains::MarkAttractorScriptBrainWithThisNameAsNoLongerNeeded), this, name);

	// CScriptsForBrains::RequestAttractorScriptBrainWithThisName
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, char const *>(gaddrof(CScriptsForBrains::RequestAttractorScriptBrainWithThisName), this, name);

	// CScriptsForBrains::StartAttractorScriptBrainWithThisName
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, char const *, CEntity *, unsigned char>(gaddrof(CScriptsForBrains::StartAttractorScriptBrainWithThisName), this, name, pEntity, bHasAScriptBrain);

	// CScriptsForBrains::StartNewStreamedScriptBrain
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, unsigned char, CEntity *, unsigned char>(gaddrof(CScriptsForBrains::StartNewStreamedScriptBrain), this, index, pEntity, bHasAScriptBrain);

	// CScriptsForBrains::StartOrRequestNewStreamedScriptBrain
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, unsigned char, CEntity *, signed char, unsigned char>(gaddrof(CScriptsForBrains::StartOrRequestNewStreamedScriptBrain), this, index, pEntity, attachType, bAddToWaitingArray);

	// CScriptsForBrains::StartOrRequestNewStreamedScriptBrainWithThisName
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, char const *, CEntity *, signed char>(gaddrof(CScriptsForBrains::StartOrRequestNewStreamedScriptBrainWithThisName), this, name, pEntity, attachType);

	// CScriptsForBrains::SwitchAllObjectBrainsWithThisID
	// plugin::CallMethodDynGlobal<CScriptsForBrains *, signed char, bool>(gaddrof(CScriptsForBrains::SwitchAllObjectBrainsWithThisID), this, ID, bStatus);

plugin_sa\game_sa\CSetPiece.cpp:

	// CSetPiece::TryToGenerateCopPed
	// plugin::CallMethodAndReturn<CCopPed*, 0x499690, CSetPiece *, CVector2D>(this, posn);
	0AA8: call_method_return 0x499690 struct [CSetPiece] num_params 1 pop 0 [posn] func_ret [CCopPed*]

	// CSetPiece::TryToGenerateCopCar
	// plugin::CallMethodAndReturn<CVehicle*, 0x4998A0, CSetPiece *, CVector2D, CVector2D>(this, posn, target);
	0AA8: call_method_return 0x4998A0 struct [CSetPiece] num_params 2 pop 0 [posn] [target] func_ret [CVehicle*]

	// CSetPiece::Update
	// plugin::CallMethod<0x499A80, CSetPiece *>(this);
	0AA6: call_method 0x499A80 struct [CSetPiece] num_params 0 pop 0

	// CSetPiece::SetCornerA
	// plugin::CallMethod<0x499120, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x499120 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::SetCornerB
	// plugin::CallMethod<0x499150, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x499150 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::SetSpawnCoord1
	// plugin::CallMethod<0x499180, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x499180 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::SetSpawnCoord2
	// plugin::CallMethod<0x4991B0, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x4991B0 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::SetTargetCoord1
	// plugin::CallMethod<0x4991E0, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x4991E0 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::SetTargetCoord2
	// plugin::CallMethod<0x499210, CSetPiece *, CVector2D>(this, coord);
	0AA6: call_method 0x499210 struct [CSetPiece] num_params 1 pop 0 [coord]

	// CSetPiece::GetCornerAX
	// plugin::CallMethodAndReturn<float, 0x499240, CSetPiece *>(this);
	0AA8: call_method_return 0x499240 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetCornerAY
	// plugin::CallMethodAndReturn<float, 0x499260, CSetPiece *>(this);
	0AA8: call_method_return 0x499260 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetCornerBX
	// plugin::CallMethodAndReturn<float, 0x499280, CSetPiece *>(this);
	0AA8: call_method_return 0x499280 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetCornerBY
	// plugin::CallMethodAndReturn<float, 0x4992A0, CSetPiece *>(this);
	0AA8: call_method_return 0x4992A0 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetSpawnCoord1X
	// plugin::CallMethodAndReturn<float, 0x4992C0, CSetPiece *>(this);
	0AA8: call_method_return 0x4992C0 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetSpawnCoord1Y
	// plugin::CallMethodAndReturn<float, 0x4992E0, CSetPiece *>(this);
	0AA8: call_method_return 0x4992E0 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetSpawnCoord2X
	// plugin::CallMethodAndReturn<float, 0x499300, CSetPiece *>(this);
	0AA8: call_method_return 0x499300 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetSpawnCoord2Y
	// plugin::CallMethodAndReturn<float, 0x499320, CSetPiece *>(this);
	0AA8: call_method_return 0x499320 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetTargetCoord1X
	// plugin::CallMethodAndReturn<float, 0x499340, CSetPiece *>(this);
	0AA8: call_method_return 0x499340 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetTargetCoord1Y
	// plugin::CallMethodAndReturn<float, 0x499360, CSetPiece *>(this);
	0AA8: call_method_return 0x499360 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetTargetCoord2X
	// plugin::CallMethodAndReturn<float, 0x499380, CSetPiece *>(this);
	0AA8: call_method_return 0x499380 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::GetTargetCoord2Y
	// plugin::CallMethodAndReturn<float, 0x4993A0, CSetPiece *>(this);
	0AA8: call_method_return 0x4993A0 struct [CSetPiece] num_params 0 pop 0 func_ret [float]

	// CSetPiece::CSetPiece
	// plugin::CallMethod<0x4993C0, CSetPiece *>(this);
	0AA6: call_method 0x4993C0 struct [CSetPiece] num_params 0 pop 0

plugin_sa\game_sa\CSetPieces.cpp:

	// CSetPieces::AddOne
	// plugin::Call<0x499500, unsigned char, CVector2D, CVector2D, CVector2D, CVector2D, CVector2D, CVector2D>(type, cornerA, cornerB, spawnCoord1, targetCoord1, spawnCoord2, targetCoord2);
	0AA5: call_function 0x499500 num_params 7 pop 7 [type] [cornerA] [cornerB] [spawnCoord1] [targetCoord1] [spawnCoord2] [targetCoord2]

	// CSetPieces::Init
	// plugin::Call<0x4994F0>();
	0AA5: call_function 0x4994F0 num_params 0 pop 0

	// CSetPieces::Load
	// plugin::CallAndReturn<bool, 0x5D3CA0>();
	0AA7: call_function_return 0x5D3CA0 num_params 0 pop 0 func_ret [bool]

	// CSetPieces::Save
	// plugin::CallAndReturn<bool, 0x5D3C70>();
	0AA7: call_function_return 0x5D3C70 num_params 0 pop 0 func_ret [bool]

	// CSetPieces::Update
	// plugin::Call<0x49AA00>();
	0AA5: call_function 0x49AA00 num_params 0 pop 0

plugin_sa\game_sa\CShinyTexts.cpp:

	// CShinyTexts::Init
	// plugin::Call<0x7221B0>();
	0AA5: call_function 0x7221B0 num_params 0 pop 0

	// CShinyTexts::RenderOutGeometryBuffer
	// plugin::Call<0x7221C0>();
	0AA5: call_function 0x7221C0 num_params 0 pop 0

	// CShinyTexts::Render
	// plugin::Call<0x724890>();
	0AA5: call_function 0x724890 num_params 0 pop 0

	// CShinyTexts::RegisterOne
	// plugin::Call<0x724B60, CVector, CVector, CVector, CVector, float, float, float, float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, float>(cornerAA, cornerBA, cornerBB, cornerAB, u1, v1, u2, v2, u3, v3, u4, v4, red, green, blue, alpha, maxDistance);
	0AA5: call_function 0x724B60 num_params 17 pop 17 [cornerAA] [cornerBA] [cornerBB] [cornerAB] [u1] [v1] [u2] [v2] [u3] [v3] [u4] [v4] [red] [green] [blue] [alpha] [maxDistance]

plugin_sa\game_sa\CShotInfo.cpp:

	// CShotInfo::Initialise
	// plugin::Call<0x739B60>();
	0AA5: call_function 0x739B60 num_params 0 pop 0

	// CShotInfo::Shutdown
	// plugin::Call<0x739C20>();
	0AA5: call_function 0x739C20 num_params 0 pop 0

	// CShotInfo::AddShot
	// plugin::CallAndReturn<bool, 0x739C30, CEntity*, eWeaponType, CVector, CVector>(creator, weaponType, origin, target);
	0AA7: call_function_return 0x739C30 num_params 4 pop 4 [creator] [weaponType] [origin] [target] func_ret [bool]

	// CShotInfo::GetFlameThrowerShotPosn
	// plugin::CallAndReturn<bool, 0x739DE0, unsigned char, CVector*>(shotId, outPosn);
	0AA7: call_function_return 0x739DE0 num_params 2 pop 2 [shotId] [outPosn] func_ret [bool]

	// CShotInfo::Update
	// plugin::Call<0x739E60>();
	0AA5: call_function 0x739E60 num_params 0 pop 0

plugin_sa\game_sa\CSpecialFX.cpp:

	// CSpecialFX::AddWeaponStreak
	// plugin::Call<0x7233F0, int>(weaponType);
	0AA5: call_function 0x7233F0 num_params 1 pop 1 [weaponType]

	// CSpecialFX::Init
	// plugin::Call<0x7268F0>();
	0AA5: call_function 0x7268F0 num_params 0 pop 0

	// CSpecialFX::Render
	// plugin::Call<0x726AD0>();
	0AA5: call_function 0x726AD0 num_params 0 pop 0

	// CSpecialFX::Render2DFXs
	// plugin::Call<0x721660>();
	0AA5: call_function 0x721660 num_params 0 pop 0

	// CSpecialFX::ReplayStarted
	// plugin::Call<0x721D30>();
	0AA5: call_function 0x721D30 num_params 0 pop 0

	// CSpecialFX::Shutdown
	// plugin::Call<0x723390>();
	0AA5: call_function 0x723390 num_params 0 pop 0

	// CSpecialFX::Update
	// plugin::Call<0x726AA0>();
	0AA5: call_function 0x726AA0 num_params 0 pop 0

plugin_sa\game_sa\CSpecialPlateHandler.cpp:

	// CSpecialPlateHandler::Init
	// plugin::CallMethod<0x6F2D10, CSpecialPlateHandler *>(this);
	0AA6: call_method 0x6F2D10 struct [CSpecialPlateHandler] num_params 0 pop 0

	// CSpecialPlateHandler::Find
	// plugin::CallMethodAndReturn<int, 0x6F2D30, CSpecialPlateHandler *, int, char*>(this, carGenId, outText);
	0AA8: call_method_return 0x6F2D30 struct [CSpecialPlateHandler] num_params 2 pop 0 [carGenId] [outText] func_ret [int]

	// CSpecialPlateHandler::Add
	// plugin::CallMethod<0x6F2D90, CSpecialPlateHandler *, int, char*>(this, carGenId, plateText);
	0AA6: call_method 0x6F2D90 struct [CSpecialPlateHandler] num_params 2 pop 0 [carGenId] [plateText]

	// CSpecialPlateHandler::Remove
	// plugin::CallMethod<0x6F2DD0, CSpecialPlateHandler *, int>(this, plateTextId);
	0AA6: call_method 0x6F2DD0 struct [CSpecialPlateHandler] num_params 1 pop 0 [plateTextId]

plugin_sa\game_sa\CStats.cpp:

	// CStats::GetStatID
	// plugin::CallAndReturn<char*, 0x558DE0, unsigned short>(stat);
	0AA7: call_function_return 0x558DE0 num_params 1 pop 1 [stat] func_ret [char*]

	// CStats::GetStatType
	// plugin::CallAndReturn<bool, 0x558E30, unsigned short>(stat);
	0AA7: call_function_return 0x558E30 num_params 1 pop 1 [stat] func_ret [bool]

	// CStats::GetStatValue
	// plugin::CallAndReturn<float, 0x558E40, unsigned short>(stat);
	0AA7: call_function_return 0x558E40 num_params 1 pop 1 [stat] func_ret [float]

	// CStats::GetTimesMissionAttempted
	// plugin::CallAndReturn<char, 0x558E70, unsigned char>(missionId);
	0AA7: call_function_return 0x558E70 num_params 1 pop 1 [missionId] func_ret [char]

	// CStats::RegisterMissionAttempted
	// plugin::Call<0x558E80, unsigned char>(missionId);
	0AA5: call_function 0x558E80 num_params 1 pop 1 [missionId]

	// CStats::RegisterMissionPassed
	// plugin::Call<0x558EA0, unsigned char>(missionId);
	0AA5: call_function 0x558EA0 num_params 1 pop 1 [missionId]

	// CStats::PopulateFavoriteRadioStationList
	// plugin::CallAndReturn<bool, 0x558EC0>();
	0AA7: call_function_return 0x558EC0 num_params 0 pop 0 func_ret [bool]

	// *CStats::GetFullFavoriteRadioStationList
	// plugin::CallAndReturn<int*, 0x558F90>();
	0AA7: call_function_return 0x558F90 num_params 0 pop 0 func_ret [int*]

	// CStats::FindMostFavoriteRadioStation
	// plugin::CallAndReturn<int, 0x558FA0>();
	0AA7: call_function_return 0x558FA0 num_params 0 pop 0 func_ret [int]

	// CStats::FindLeastFavoriteRadioStation
	// plugin::CallAndReturn<int, 0x559010>();
	0AA7: call_function_return 0x559010 num_params 0 pop 0 func_ret [int]

	// CStats::FindCriminalRatingNumber
	// plugin::CallAndReturn<int, 0x559080>();
	0AA7: call_function_return 0x559080 num_params 0 pop 0 func_ret [int]

	// CStats::GetPercentageProgress
	// plugin::CallAndReturn<float, 0x5591E0>();
	0AA7: call_function_return 0x5591E0 num_params 0 pop 0 func_ret [float]

	// CStats::BuildStatLine
	// plugin::Call<0x559230, char*, void*, int, void*, int>(line, pValue1, metrics, pValue2, type);
	0AA5: call_function 0x559230 num_params 5 pop 5 [line] [pValue1] [metrics] [pValue2] [type]

	// CStats::ConvertToMins
	// plugin::CallAndReturn<int, 0x559540, int>(value);
	0AA7: call_function_return 0x559540 num_params 1 pop 1 [value] func_ret [int]

	// CStats::ConvertToSecs
	// plugin::CallAndReturn<int, 0x559560, int>(value);
	0AA7: call_function_return 0x559560 num_params 1 pop 1 [value] func_ret [int]

	// CStats::SafeToShowThisStat
	// plugin::CallAndReturn<bool, 0x559590, unsigned char>(stat);
	0AA7: call_function_return 0x559590 num_params 1 pop 1 [stat] func_ret [bool]

	// CStats::CheckForThreshold
	// plugin::CallAndReturn<bool, 0x5595F0, float*, float>(pValue, range);
	0AA7: call_function_return 0x5595F0 num_params 2 pop 2 [pValue] [range] func_ret [bool]

	// CStats::IsStatCapped
	// plugin::CallAndReturn<bool, 0x559630, unsigned short>(stat);
	0AA7: call_function_return 0x559630 num_params 1 pop 1 [stat] func_ret [bool]

	// CStats::ProcessReactionStatsOnDecrement
	// plugin::Call<0x559730, unsigned char>(stat);
	0AA5: call_function 0x559730 num_params 1 pop 1 [stat]

	// CStats::CheckForStatsMessage
	// plugin::Call<0x559760>();
	0AA5: call_function 0x559760 num_params 0 pop 0

	// CStats::LoadStatUpdateConditions
	// plugin::Call<0x559860>();
	0AA5: call_function 0x559860 num_params 0 pop 0

	// CStats::LoadActionReactionStats
	// plugin::Call<0x5599B0>();
	0AA5: call_function 0x5599B0 num_params 0 pop 0

	// CStats::FindMaxNumberOfGroupMembers
	// plugin::CallAndReturn<int, 0x559A50>();
	0AA7: call_function_return 0x559A50 num_params 0 pop 0 func_ret [int]

	// CStats::GetFatAndMuscleModifier
	// plugin::CallAndReturn<float, 0x559AF0, eStatModAbilities>(statMod);
	0AA7: call_function_return 0x559AF0 num_params 1 pop 1 [statMod] func_ret [float]

	// CStats::DecrementStat
	// plugin::Call<0x559FA0, unsigned short, float>(stat, value);
	0AA5: call_function 0x559FA0 num_params 2 pop 2 [stat] [value]

	// CStats::SetStatValue
	// plugin::Call<0x55A070, unsigned short, float>(stat, value);
	0AA5: call_function 0x55A070 num_params 2 pop 2 [stat] [value]

	// CStats::RegisterFastestTime
	// plugin::Call<0x55A0B0, int, int>(stat, time);
	0AA5: call_function 0x55A0B0 num_params 2 pop 2 [stat] [time]

	// CStats::RegisterBestPosition
	// plugin::Call<0x55A160, int, int>(stat, position);
	0AA5: call_function 0x55A160 num_params 2 pop 2 [stat] [position]

	// CStats::FindCriminalRatingString
	// plugin::CallAndReturn<char*, 0x55A210>();
	0AA7: call_function_return 0x55A210 num_params 0 pop 0 func_ret [char*]

	// CStats::ConstructStatLine
	// plugin::CallAndReturn<int, 0x55A780, int, unsigned char>(arg0, arg1);
	0AA7: call_function_return 0x55A780 num_params 2 pop 2 [arg0] [arg1] func_ret [int]

	// CStats::ProcessReactionStatsOnIncrement
	// plugin::Call<0x55B900, unsigned char>(stat);
	0AA5: call_function 0x55B900 num_params 1 pop 1 [stat]

	// CStats::DisplayScriptStatUpdateMessage
	// plugin::Call<0x55B980, unsigned char, unsigned int, float>(state, stat, value);
	0AA5: call_function 0x55B980 num_params 3 pop 3 [state] [stat] [value]

	// CStats::UpdateRespectStat
	// plugin::Call<0x55BC50, unsigned char>(arg0);
	0AA5: call_function 0x55BC50 num_params 1 pop 1 [arg0]

	// CStats::UpdateSexAppealStat
	// plugin::Call<0x55BF20>();
	0AA5: call_function 0x55BF20 num_params 0 pop 0

	// CStats::Init
	// plugin::Call<0x55C0C0>();
	0AA5: call_function 0x55C0C0 num_params 0 pop 0

	// CStats::IncrementStat
	// plugin::Call<0x55C180, unsigned short, float>(stat, value);
	0AA5: call_function 0x55C180 num_params 2 pop 2 [stat] [value]

	// CStats::SetNewRecordStat
	// plugin::Call<0x55C410, unsigned short, float>(stat, value);
	0AA5: call_function 0x55C410 num_params 2 pop 2 [stat] [value]

	// CStats::UpdateFatAndMuscleStats
	// plugin::Call<0x55C470, unsigned int>(value);
	0AA5: call_function 0x55C470 num_params 1 pop 1 [value]

	// CStats::UpdateStatsWhenSprinting
	// plugin::Call<0x55C660>();
	0AA5: call_function 0x55C660 num_params 0 pop 0

	// CStats::UpdateStatsWhenRunning
	// plugin::Call<0x55C6F0>();
	0AA5: call_function 0x55C6F0 num_params 0 pop 0

	// CStats::UpdateStatsWhenCycling
	// plugin::Call<0x55C780, bool, CBmx*>(arg0, bmx);
	0AA5: call_function 0x55C780 num_params 2 pop 2 [arg0] [bmx]

	// CStats::UpdateStatsWhenSwimming
	// plugin::Call<0x55C990, bool, bool>(arg0, arg1);
	0AA5: call_function 0x55C990 num_params 2 pop 2 [arg0] [arg1]

	// CStats::UpdateStatsWhenDriving
	// plugin::Call<0x55CAC0, CVehicle*>(vehicle);
	0AA5: call_function 0x55CAC0 num_params 1 pop 1 [vehicle]

	// CStats::UpdateStatsWhenFlying
	// plugin::Call<0x55CC00, CVehicle*>(vehicle);
	0AA5: call_function 0x55CC00 num_params 1 pop 1 [vehicle]

	// CStats::UpdateStatsWhenOnMotorBike
	// plugin::Call<0x55CD60, CBike*>(bike);
	0AA5: call_function 0x55CD60 num_params 1 pop 1 [bike]

	// CStats::UpdateStatsWhenWeaponHit
	// plugin::Call<0x55CEB0, int>(weaponType);
	0AA5: call_function 0x55CEB0 num_params 1 pop 1 [weaponType]

	// CStats::UpdateStatsWhenFighting
	// plugin::Call<0x55CFA0>();
	0AA5: call_function 0x55CFA0 num_params 0 pop 0

	// CStats::UpdateStatsOnRespawn
	// plugin::Call<0x55CFC0>();
	0AA5: call_function 0x55CFC0 num_params 0 pop 0

	// CStats::UpdateStatsAddToHealth
	// plugin::Call<0x55D030, unsigned int>(addToHealth);
	0AA5: call_function 0x55D030 num_params 1 pop 1 [addToHealth]

	// CStats::ModifyStat
	// plugin::Call<0x55D090, unsigned short, float>(stat, value);
	0AA5: call_function 0x55D090 num_params 2 pop 2 [stat] [value]

	// CStats::Save
	// plugin::CallAndReturn<bool, 0x5D3B40>();
	0AA7: call_function_return 0x5D3B40 num_params 0 pop 0 func_ret [bool]

	// CStats::Load
	// plugin::CallAndReturn<bool, 0x5D3BF0>();
	0AA7: call_function_return 0x5D3BF0 num_params 0 pop 0 func_ret [bool]

plugin_sa\game_sa\CStreamedScripts.cpp:

	// CStreamedScripts::FindStreamedScript
	// plugin::CallMethodAndReturnDynGlobal<signed int, CStreamedScripts *, char const *>(gaddrof(CStreamedScripts::FindStreamedScript), this, scriptname);
	0AA8: call_method_return 0x470740 struct [CStreamedScripts] num_params 1 pop 0 [scriptname] func_ret [signed int]

	// CStreamedScripts::FindStreamedScriptQuiet
	// plugin::CallMethodAndReturnDynGlobal<signed int, CStreamedScripts *, char const *>(gaddrof(CStreamedScripts::FindStreamedScriptQuiet), this, scriptName);
	0AA8: call_method_return 0x4706F0 struct [CStreamedScripts] num_params 1 pop 0 [scriptName] func_ret [signed int]

	// CStreamedScripts::GetProperIndexFromIndexUsedByScript
	// plugin::CallMethodAndReturnDynGlobal<signed short, CStreamedScripts *, short>(gaddrof(CStreamedScripts::GetProperIndexFromIndexUsedByScript), this, scmIndex);
	0AA8: call_method_return 0x470810 struct [CStreamedScripts] num_params 1 pop 0 [scmIndex] func_ret [signed short]

	// *CStreamedScripts::GetStreamedScriptFilename
	// plugin::CallMethodAndReturnDynGlobal<char const *, CStreamedScripts *, unsigned short>(gaddrof(CStreamedScripts::GetStreamedScriptFilename), this, index);
	0AA8: call_method_return 0x470900 struct [*CStreamedScripts] num_params 1 pop 0 [index] func_ret [char const *]

	// CStreamedScripts::GetStreamedScriptWithThisStartAddress
	// plugin::CallMethodAndReturnDynGlobal<unsigned short, CStreamedScripts *, unsigned char *>(gaddrof(CStreamedScripts::GetStreamedScriptWithThisStartAddress), this, dataPtr);
	0AA8: call_method_return 0x470910 struct [CStreamedScripts] num_params 1 pop 0 [dataPtr] func_ret [unsigned short]

	// CStreamedScripts::Initialise
	// plugin::CallMethodDynGlobal<CStreamedScripts *>(gaddrof(CStreamedScripts::Initialise), this);

	// CStreamedScripts::LoadStreamedScript
	// plugin::CallMethodDynGlobal<CStreamedScripts *, RwStream *, int>(gaddrof(CStreamedScripts::LoadStreamedScript), this, stream, index);

	// CStreamedScripts::ReInitialise
	// plugin::CallMethodDynGlobal<CStreamedScripts *>(gaddrof(CStreamedScripts::ReInitialise), this);

	// CStreamedScripts::ReadStreamedScriptData
	// plugin::CallMethodDynGlobal<CStreamedScripts *>(gaddrof(CStreamedScripts::ReadStreamedScriptData), this);

	// CStreamedScripts::RegisterScript
	// plugin::CallMethodAndReturnDynGlobal<int, CStreamedScripts *, char const *>(gaddrof(CStreamedScripts::RegisterScript), this, scriptName);
	0AA8: call_method_return 0x4706C0 struct [CStreamedScripts] num_params 1 pop 0 [scriptName] func_ret [int]

	// CStreamedScripts::RemoveStreamedScriptFromMemory
	// plugin::CallMethodDynGlobal<CStreamedScripts *, int>(gaddrof(CStreamedScripts::RemoveStreamedScriptFromMemory), this, index);

	// *CStreamedScripts::StartNewStreamedScript
	// plugin::CallMethodAndReturnDynGlobal<CRunningScript *, CStreamedScripts *, int>(gaddrof(CStreamedScripts::StartNewStreamedScript), this, index);
	0AA8: call_method_return 0x470890 struct [*CStreamedScripts] num_params 1 pop 0 [index] func_ret [CRunningScript *]

plugin_sa\game_sa\CStreaming.cpp:

	// *CStreaming::AddEntity
	// plugin::CallAndReturnDynGlobal<void *, CEntity *>(gaddrof(CStreaming::AddEntity), a2);

	// CStreaming::AddImageToList
	// plugin::CallAndReturnDynGlobal<int, char const *, bool>(gaddrof(CStreaming::AddImageToList), lpFileName, bNotPlayerImg);

	// CStreaming::AddLodsToRequestList
	// plugin::CallDynGlobal<CVector const *, unsigned int>(gaddrof(CStreaming::AddLodsToRequestList), Posn, Streamingflags);

	// CStreaming::AddModelsToRequestList
	// plugin::CallDynGlobal<CVector const *, unsigned int>(gaddrof(CStreaming::AddModelsToRequestList), posn, StreamingFlags);

	// CStreaming::AddToLoadedVehiclesList
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::AddToLoadedVehiclesList));

	// CStreaming::AreAnimsUsedByRequestedModels
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::AreAnimsUsedByRequestedModels), AnimFileIndex);

	// CStreaming::AreTexturesUsedByRequestedModels
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::AreTexturesUsedByRequestedModels), txdIndex);

	// CStreaming::ClearFlagForAll
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CStreaming::ClearFlagForAll), eStreamingFlag);

	// CStreaming::ClearSlots
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::ClearSlots), NumOfSlots);

	// CStreaming::ConvertBufferToObject
	// plugin::CallAndReturnDynGlobal<char, char *, int, int>(gaddrof(CStreaming::ConvertBufferToObject), pFileContect, index, ChannelIndex);

	// CStreaming::DeleteLeastUsedEntityRwObject
	// plugin::CallAndReturnDynGlobal<bool, bool, unsigned int>(gaddrof(CStreaming::DeleteLeastUsedEntityRwObject), bNotOnScreen, StreamingFlags);

	// CStreaming::DeleteRwObjectsAfterDeath
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::DeleteRwObjectsAfterDeath), PlayerPosn);

	// CStreaming::DeleteRwObjectsBehindCamera
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::DeleteRwObjectsBehindCamera), memoryToCleanInBytes);

	// CStreaming::DeleteRwObjectsBehindCameraInSectorList
	// plugin::CallAndReturnDynGlobal<bool, CPtrList *, int>(gaddrof(CStreaming::DeleteRwObjectsBehindCameraInSectorList), List, memoryToCleanInBytes);

	// CStreaming::DeleteRwObjectsInSectorList
	// plugin::CallDynGlobal<CPtrList *, int, int>(gaddrof(CStreaming::DeleteRwObjectsInSectorList), PtrList, arg2, arg3);

	// CStreaming::DeleteRwObjectsNotInFrustumInSectorList
	// plugin::CallAndReturnDynGlobal<char, CPtrList *, int>(gaddrof(CStreaming::DeleteRwObjectsNotInFrustumInSectorList), List, memoryToCleanInBytes);

	// CStreaming::DisableCopBikes
	// plugin::CallDynGlobal<bool>(gaddrof(CStreaming::DisableCopBikes), bDisable);

	// CStreaming::FindMIPedSlotForInterior
	// plugin::CallAndReturnDynGlobal<int, int>(gaddrof(CStreaming::FindMIPedSlotForInterior), RandFactor);

	// CStreaming::FinishLoadingLargeFile
	// plugin::CallAndReturnDynGlobal<bool, char *, int>(gaddrof(CStreaming::FinishLoadingLargeFile), FileName, modelIndex);

	// CStreaming::FlushChannels
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::FlushChannels));

	// CStreaming::FlushRequestList
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::FlushRequestList));

	// CStreaming::ForceLayerToRead
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::ForceLayerToRead), arg1);

	// CStreaming::GetDefaultCabDriverModel
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CStreaming::GetDefaultCabDriverModel));

	// CStreaming::GetDefaultCopCarModel
	// plugin::CallAndReturnDynGlobal<int, unsigned int>(gaddrof(CStreaming::GetDefaultCopCarModel), bIncludeCopBike);

	// CStreaming::GetDefaultCopModel
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CStreaming::GetDefaultCopModel));

	// CStreaming::GetDefaultFiremanModel
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CStreaming::GetDefaultFiremanModel));

	// CStreaming::GetDefaultMedicModel
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CStreaming::GetDefaultMedicModel));

	// CStreaming::GetDiscInDrive
	// plugin::CallAndReturnDynGlobal<signed int>(gaddrof(CStreaming::GetDiscInDrive));

	// CStreaming::GetNextFileOnCd
	// plugin::CallAndReturnDynGlobal<int, int, bool>(gaddrof(CStreaming::GetNextFileOnCd), pos, bNotPriority);

	// CStreaming::HasSpecialCharLoaded
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::HasSpecialCharLoaded), slot);

	// CStreaming::HasVehicleUpgradeLoaded
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::HasVehicleUpgradeLoaded), ModelIndex);

	// CStreaming::InstanceLoadedModels
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::InstanceLoadedModels), posn);

	// CStreaming::IsCarModelNeededInCurrentZone
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::IsCarModelNeededInCurrentZone), VehicleModelIndex);

	// CStreaming::IsInitialised
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::IsInitialised));

	// CStreaming::IsObjectInCdImage
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::IsObjectInCdImage), ModelInex);

	// CStreaming::IsVeryBusy
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::IsVeryBusy));

	// CStreaming::LoadAllRequestedModels
	// plugin::CallDynGlobal<bool>(gaddrof(CStreaming::LoadAllRequestedModels), bOnlyPriorityRequests);

	// CStreaming::LoadCdDirectory
	// plugin::CallDynGlobal<char const *, int>(gaddrof_o(CStreaming::LoadCdDirectory, void (*)(char const *, int)), ArchiveName, archiveID);

	// CStreaming::LoadScene
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::LoadScene), Posn);

	// CStreaming::LoadSceneCollision
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::LoadSceneCollision), Posn);

	// CStreaming::LoadZoneVehicle
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::LoadZoneVehicle), posn);

	// CStreaming::MakeSpaceFor
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::MakeSpaceFor), memoryToCleanInBytes);

	// CStreaming::PossiblyStreamCarOutAfterCreation
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::PossiblyStreamCarOutAfterCreation), modelId);

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::CallDynGlobal<CPtrList *, float, float, float, float, float, float, float, unsigned int>(gaddrof_o(CStreaming::ProcessEntitiesInSectorList, void (*)(CPtrList *, float, float, float, float, float, float, float, unsigned int)), list, posn_x, posn_y, min_posn_x, min_posn_y, max_posn_x, max_posn_y, distance, Streamingflags);

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::CallDynGlobal<CPtrList *, unsigned int>(gaddrof_o(CStreaming::ProcessEntitiesInSectorList, void (*)(CPtrList *, unsigned int)), list, streamingFlags);

	// CStreaming::ProcessLoadingChannel
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::ProcessLoadingChannel), channelIndex);

	// CStreaming::ReInit
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CStreaming::ReInit));

	// CStreaming::RemoveBuildingsNotInArea
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveBuildingsNotInArea), AreaCode);

	// CStreaming::RemoveCarModel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveCarModel), modelIndex);

	// CStreaming::RemoveEntity
	// plugin::CallDynGlobal<CLink<CEntity*> *>(gaddrof(CStreaming::RemoveEntity), streamingLink);

	// CStreaming::RemoveLeastUsedModel
	// plugin::CallAndReturnDynGlobal<bool, unsigned int>(gaddrof(CStreaming::RemoveLeastUsedModel), StreamingFlags);

	// CStreaming::RemoveLoadedVehicle
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::RemoveLoadedVehicle));

	// CStreaming::RemoveLoadedZoneModel
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::RemoveLoadedZoneModel));

	// CStreaming::RemoveModel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveModel), Modelindex);

	// CStreaming::RemoveUnusedModelsInLoadedList
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CStreaming::RemoveUnusedModelsInLoadedList));

	// CStreaming::RenderEntity
	// plugin::CallDynGlobal<CLink<CEntity*> *>(gaddrof(CStreaming::RenderEntity), streamingLink);

	// CStreaming::RequestBigBuildings
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::RequestBigBuildings), posn);

	// CStreaming::RequestFile
	// plugin::CallDynGlobal<int, int, int, int, int>(gaddrof(CStreaming::RequestFile), index, offset, size, imgId, streamingFlags);

	// CStreaming::RequestFilesInChannel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RequestFilesInChannel), channelId);

	// CStreaming::RequestModel
	// plugin::CallDynGlobal<int, int>(gaddrof(CStreaming::RequestModel), dwModelId, Streamingflags);

	// CStreaming::RequestModelStream
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RequestModelStream), streamNum);

	// CStreaming::RequestPlayerSection
	// plugin::CallDynGlobal<int, char const *, int>(gaddrof(CStreaming::RequestPlayerSection), modelIndex, string, streamingFlags);

	// CStreaming::RequestSpecialChar
	// plugin::CallDynGlobal<int, char const *, int>(gaddrof(CStreaming::RequestSpecialChar), slot, Name, streamingFlags);

	// CStreaming::RequestSpecialModel
	// plugin::CallDynGlobal<int, char const *, int>(gaddrof(CStreaming::RequestSpecialModel), slot, name, StreamingFlags);

	// CStreaming::RequestTxdModel
	// plugin::CallDynGlobal<int, int>(gaddrof(CStreaming::RequestTxdModel), TxdModelID, Streamingflags);

	// CStreaming::RequestVehicleUpgrade
	// plugin::CallDynGlobal<int, int>(gaddrof(CStreaming::RequestVehicleUpgrade), modelIndex, StreamingFlags);

	// CStreaming::RetryLoadFile
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RetryLoadFile), streamNum);

	// CStreaming::SetLoadVehiclesInLoadScene
	// plugin::CallDynGlobal<bool>(gaddrof(CStreaming::SetLoadVehiclesInLoadScene), bEnable);

	// CStreaming::SetMissionDoesntRequireAnim
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetMissionDoesntRequireAnim), slot);

	// CStreaming::SetMissionDoesntRequireModel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetMissionDoesntRequireModel), modelIndex);

	// CStreaming::SetMissionDoesntRequireSpecialChar
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetMissionDoesntRequireSpecialChar), slot);

	// CStreaming::SetModelIsDeletable
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetModelIsDeletable), modelIndex);

	// CStreaming::SetModelTxdIsDeletable
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetModelTxdIsDeletable), modelIndex);

	// CStreaming::SetSpecialCharIsDeletable
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetSpecialCharIsDeletable), slot);

	// CStreaming::StreamAmbulanceAndMedic
	// plugin::CallAndReturnDynGlobal<bool, bool>(gaddrof(CStreaming::StreamAmbulanceAndMedic), bStreamForAccident);

	// CStreaming::StreamCopModels
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::StreamCopModels), townID);

	// CStreaming::StreamFireEngineAndFireman
	// plugin::CallAndReturnDynGlobal<bool, bool>(gaddrof(CStreaming::StreamFireEngineAndFireman), bStreamForFire);

	// CStreaming::StreamPedsForInterior
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::StreamPedsForInterior), interiorType);

	// CStreaming::StreamPedsIntoRandomSlots
	// plugin::CallDynGlobal<int *>(gaddrof(CStreaming::StreamPedsIntoRandomSlots), pModelID);

	// CStreaming::StreamVehiclesAndPeds_Always
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::StreamVehiclesAndPeds_Always), posn);

	// CStreaming::StreamZoneModels
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::StreamZoneModels), posn);

	// CStreaming::StreamZoneModels_Gangs
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::StreamZoneModels_Gangs), unused);

	// CStreaming::WeAreTryingToPhaseVehicleOut
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::WeAreTryingToPhaseVehicleOut), modelIndex);

plugin_sa\game_sa\CStreamingInfo.cpp:

	// CStreamingInfo::AddToList
	// plugin::CallMethodDynGlobal<CStreamingInfo *, CStreamingInfo *>(gaddrof(CStreamingInfo::AddToList), this, listStart);

	// CStreamingInfo::GetCdPosn
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CStreamingInfo *>(gaddrof(CStreamingInfo::GetCdPosn), this);
	0AA8: call_method_return 0x407570 struct [CStreamingInfo] num_params 0 pop 0 func_ret [unsigned int]

	// CStreamingInfo::GetCdPosnAndSize
	// plugin::CallMethodAndReturnDynGlobal<bool, CStreamingInfo *, unsigned int *, unsigned int *>(gaddrof(CStreamingInfo::GetCdPosnAndSize), this, CdPosn, CdSize);
	0AA8: call_method_return 0x4075A0 struct [CStreamingInfo] num_params 2 pop 0 [CdPosn] [CdSize] func_ret [bool]

	// CStreamingInfo::GetCdSize
	// plugin::CallMethodAndReturnDynGlobal<unsigned int, CStreamingInfo *>(gaddrof(CStreamingInfo::GetCdSize), this);
	0AA8: call_method_return 0x407590 struct [CStreamingInfo] num_params 0 pop 0 func_ret [unsigned int]

	// *CStreamingInfo::GetNext
	// plugin::CallMethodAndReturnDynGlobal<CStreamingInfo *, CStreamingInfo *>(gaddrof(CStreamingInfo::GetNext), this);
	0AA8: call_method_return 0x407520 struct [*CStreamingInfo] num_params 0 pop 0 func_ret [CStreamingInfo *]

	// *CStreamingInfo::GetPrev
	// plugin::CallMethodAndReturnDynGlobal<CStreamingInfo *, CStreamingInfo *>(gaddrof(CStreamingInfo::GetPrev), this);
	0AA8: call_method_return 0x407540 struct [*CStreamingInfo] num_params 0 pop 0 func_ret [CStreamingInfo *]

	// CStreamingInfo::InList
	// plugin::CallMethodAndReturnDynGlobal<bool, CStreamingInfo *>(gaddrof(CStreamingInfo::InList), this);
	0AA8: call_method_return 0x407560 struct [CStreamingInfo] num_params 0 pop 0 func_ret [bool]

	// CStreamingInfo::Init
	// plugin::CallMethodDynGlobal<CStreamingInfo *>(gaddrof(CStreamingInfo::Init), this);

	// CStreamingInfo::RemoveFromList
	// plugin::CallMethodDynGlobal<CStreamingInfo *>(gaddrof(CStreamingInfo::RemoveFromList), this);

	// CStreamingInfo::SetCdPosnAndSize
	// plugin::CallMethodDynGlobal<CStreamingInfo *, unsigned int, unsigned int>(gaddrof(CStreamingInfo::SetCdPosnAndSize), this, CdPosn, CdSize);

plugin_sa\game_sa\CStuckCarCheck.cpp:

	// CStuckCarCheck::AddCarToCheck
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, int, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, signed char>(gaddrof(CStuckCarCheck::AddCarToCheck), this, carHandle, distance, time, a5, bStuck, bFlipped, bWarp, pathID);

	// CStuckCarCheck::AttemptToWarpVehicle
	// plugin::CallMethodAndReturnDynGlobal<bool, CStuckCarCheck *, CVehicle *, CVector *, float>(gaddrof(CStuckCarCheck::AttemptToWarpVehicle), this, vehicle, origin, orientation);
	0AA8: call_method_return 0x463A60 struct [CStuckCarCheck] num_params 3 pop 0 [vehicle] [origin] [orientation] func_ret [bool]

	// CStuckCarCheck::ClearStuckFlagForCar
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::ClearStuckFlagForCar), this, carHandle);

	// CStuckCarCheck::HasCarBeenStuckForAWhile
	// plugin::CallMethodAndReturnDynGlobal<bool, CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::HasCarBeenStuckForAWhile), this, carHandle);
	0AA8: call_method_return 0x463C00 struct [CStuckCarCheck] num_params 1 pop 0 [carHandle] func_ret [bool]

	// CStuckCarCheck::Init
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(gaddrof(CStuckCarCheck::Init), this);

	// CStuckCarCheck::IsCarInStuckCarArray
	// plugin::CallMethodAndReturnDynGlobal<bool, CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::IsCarInStuckCarArray), this, carHandle);
	0AA8: call_method_return 0x463C70 struct [CStuckCarCheck] num_params 1 pop 0 [carHandle] func_ret [bool]

	// CStuckCarCheck::Process
	// plugin::CallMethodDynGlobal<CStuckCarCheck *>(gaddrof(CStuckCarCheck::Process), this);

	// CStuckCarCheck::RemoveCarFromCheck
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, int>(gaddrof(CStuckCarCheck::RemoveCarFromCheck), this, carHandle);

	// CStuckCarCheck::ResetArrayElement
	// plugin::CallMethodDynGlobal<CStuckCarCheck *, unsigned short>(gaddrof(CStuckCarCheck::ResetArrayElement), this, index);

plugin_sa\game_sa\CTaskComplex.cpp:

plugin_sa\game_sa\CTaskComplexClimb.cpp:

plugin_sa\game_sa\CTaskComplexDie.cpp:

plugin_sa\game_sa\CTaskComplexEnterBoatAsDriver.cpp:

plugin_sa\game_sa\CTaskComplexEnterCar.cpp:

plugin_sa\game_sa\CTaskComplexEnterCarAsDriver.cpp:

plugin_sa\game_sa\CTaskComplexEnterCarAsPassenger.cpp:

plugin_sa\game_sa\CTaskComplexFacial.cpp:

plugin_sa\game_sa\CTaskComplexJump.cpp:

plugin_sa\game_sa\CTaskComplexLeaveCar.cpp:

plugin_sa\game_sa\CTaskComplexProstituteSolicit.cpp:

	// CTaskComplexProstituteSolicit::CTaskComplexProstituteSolicit
	// plugin::CallMethod<0x661A60, CTaskComplexProstituteSolicit *, CPed*>(this, pClient);
	0AA6: call_method 0x661A60 struct [CTaskComplexProstituteSolicit] num_params 1 pop 0 [pClient]

	// CTaskComplexProstituteSolicit::CreateSubTask
	// plugin::CallMethodAndReturn<CTask*, 0x666360, CTaskComplexProstituteSolicit *, int, CPed*>(this, taskId, pProstitute);
	0AA8: call_method_return 0x666360 struct [CTaskComplexProstituteSolicit] num_params 2 pop 0 [taskId] [pProstitute] func_ret [CTask*]

	// CTaskComplexProstituteSolicit::GetRidOfPlayerProstitute
	// plugin::Call<0x661D30>();
	0AA5: call_function 0x661D30 num_params 0 pop 0

	// CTaskComplexProstituteSolicit::IsTaskValid
	// plugin::CallAndReturn<bool, 0x661BB0, CPed*, CPed*>(pProstitute, pClient);
	0AA7: call_function_return 0x661BB0 num_params 2 pop 2 [pProstitute] [pClient] func_ret [bool]

plugin_sa\game_sa\CTaskComplexSequence.cpp:

plugin_sa\game_sa\CTaskComplexStuckInAir.cpp:

plugin_sa\game_sa\CTaskComplexSunbathe.cpp:

plugin_sa\game_sa\CTaskComplexUseMobilePhone.cpp:

plugin_sa\game_sa\CTaskComplexWander.cpp:

plugin_sa\game_sa\CTaskComplexWanderStandard.cpp:

plugin_sa\game_sa\CTaskSimpleAnim.cpp:

plugin_sa\game_sa\CTaskSimpleCarSetPedInAsPassenger.cpp:

plugin_sa\game_sa\CTaskSimpleCarSetPedOut.cpp:

plugin_sa\game_sa\CTaskSimpleChoking.cpp:

plugin_sa\game_sa\CTaskSimpleClimb.cpp:

plugin_sa\game_sa\CTaskSimpleDuck.cpp:

plugin_sa\game_sa\CTaskSimpleDuckToggle.cpp:

plugin_sa\game_sa\CTaskSimpleFacial.cpp:

plugin_sa\game_sa\CTaskSimpleFight.cpp:

plugin_sa\game_sa\CTaskSimpleGangDriveBy.cpp:

plugin_sa\game_sa\CTaskSimpleIKChain.cpp:

plugin_sa\game_sa\CTaskSimpleIKLookAt.cpp:

plugin_sa\game_sa\CTaskSimpleIKManager.cpp:

plugin_sa\game_sa\CTaskSimpleInAir.cpp:

plugin_sa\game_sa\CTaskSimpleJetPack.cpp:

plugin_sa\game_sa\CTaskSimpleJump.cpp:

plugin_sa\game_sa\CTaskSimplePlayerOnFoot.cpp:

plugin_sa\game_sa\CTaskSimpleRunAnim.cpp:

plugin_sa\game_sa\CTaskSimpleRunNamedAnim.cpp:

plugin_sa\game_sa\CTaskSimpleStandStill.cpp:

plugin_sa\game_sa\CTaskSimpleStealthKill.cpp:

plugin_sa\game_sa\CTaskSimpleSwim.cpp:

plugin_sa\game_sa\CTaskSimpleThrowProjectile.cpp:

plugin_sa\game_sa\CTaskSimpleTriggerLookAt.cpp:

plugin_sa\game_sa\CTaskSimpleUseGun.cpp:

plugin_sa\game_sa\CTaskUtilityLineUpPedWithCar.cpp:

	// CTaskUtilityLineUpPedWithCar::GetLocalPositionToOpenCarDoor
	// plugin::CallMethodAndReturn<CVector*, 0x64FC10, CTaskUtilityLineUpPedWithCar *, int, CVehicle*, float, CAnimBlendAssociation*>(this, unused, pVehicle, arg3, pAnimBlendAssoc);
	0AA8: call_method_return 0x64FC10 struct [CTaskUtilityLineUpPedWithCar] num_params 4 pop 0 [unused] [pVehicle] [arg3] [pAnimBlendAssoc] func_ret [CVector*]

	// CTaskUtilityLineUpPedWithCar::ProcessPed
	// plugin::CallMethod<0x6513A0, CTaskUtilityLineUpPedWithCar *, CPed*, CVehicle*, CAnimBlendAssociation*>(this, pPed, pVehicle, pAnimBlendAssoc);
	0AA6: call_method 0x6513A0 struct [CTaskUtilityLineUpPedWithCar] num_params 3 pop 0 [pPed] [pVehicle] [pAnimBlendAssoc]

	// CTaskUtilityLineUpPedWithCar::GetPositionToOpenCarDoor
	// plugin::CallMethodAndReturn<RwV3d*, 0x650A80, CTaskUtilityLineUpPedWithCar *, int, CVehicle*, float, CAnimBlendAssociation*>(this, unused, pVehicle, arg2, pAnimBlendAssoc);
	0AA8: call_method_return 0x650A80 struct [CTaskUtilityLineUpPedWithCar] num_params 4 pop 0 [unused] [pVehicle] [arg2] [pAnimBlendAssoc] func_ret [RwV3d*]

plugin_sa\game_sa\CTheCarGenerators.cpp:

	// CTheCarGenerators::CreateCarGenerator
	// plugin::CallAndReturnDynGlobal<signed int, float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char>(gaddrof(CTheCarGenerators::CreateCarGenerator), x, y, z, angle, modelId, color1, color2, forceSpawn, alarm_chances, doorLock_chances, minDelay, maxDelay, iplId, bOwnedbyplayer);

	// CTheCarGenerators::RemoveCarGenerators
	// plugin::CallDynGlobal<unsigned char>(gaddrof(CTheCarGenerators::RemoveCarGenerators), IplID);

plugin_sa\game_sa\CTheScripts.cpp:

	// CTheScripts::AddScriptCheckpoint
	// plugin::CallAndReturnDynGlobal<int, float, float, float, float, float, float, float, int>(gaddrof(CTheScripts::AddScriptCheckpoint), at_X, at_Y, at_Z, PointTo_X, PointTo_Y, PointTo_Z, radius, type);

	// CTheScripts::AddScriptEffectSystem
	// plugin::CallAndReturnDynGlobal<int, FxSystem_c *>(gaddrof(CTheScripts::AddScriptEffectSystem), a1);

	// CTheScripts::AddScriptSearchLight
	// plugin::CallAndReturnDynGlobal<int, float, float, float, CEntity *, float, float, float, float, float>(gaddrof(CTheScripts::AddScriptSearchLight), startX, startY, startZ, entity, targetX, targetY, targetZ, targetRadius, baseRadius);

	// CTheScripts::AddScriptSphere
	// plugin::CallAndReturnDynGlobal<unsigned int, unsigned int, CVector, float>(gaddrof(CTheScripts::AddScriptSphere), id, posn, radius);

	// CTheScripts::AddToBuildingSwapArray
	// plugin::CallDynGlobal<CBuilding *, int, int>(gaddrof(CTheScripts::AddToBuildingSwapArray), a1, newModelId, oldModelId);

	// CTheScripts::AddToInvisibilitySwapArray
	// plugin::CallDynGlobal<CEntity *, bool>(gaddrof(CTheScripts::AddToInvisibilitySwapArray), a2, bVisible);

	// CTheScripts::AddToListOfConnectedLodObjects
	// plugin::CallDynGlobal<CObject *, CObject *>(gaddrof(CTheScripts::AddToListOfConnectedLodObjects), pObject1, pObject2);

	// CTheScripts::AddToListOfSpecialAnimGroupsAttachedToCharModels
	// plugin::CallDynGlobal<int, char *>(gaddrof(CTheScripts::AddToListOfSpecialAnimGroupsAttachedToCharModels), modelid, ifpName);

	// CTheScripts::AddToSwitchJumpTable
	// plugin::CallAndReturnDynGlobal<double, int, int>(gaddrof(CTheScripts::AddToSwitchJumpTable), switchValue, switchLabelLocalAddress);

	// CTheScripts::AddToVehicleModelsBlockedByScript
	// plugin::CallDynGlobal<int>(gaddrof(CTheScripts::AddToVehicleModelsBlockedByScript), modelindex);

	// CTheScripts::AddToWaitingForScriptBrainArray
	// plugin::CallDynGlobal<CEntity *, short>(gaddrof(CTheScripts::AddToWaitingForScriptBrainArray), pEntity, arg2);

	// CTheScripts::AttachSearchlightToSearchlightObject
	// plugin::CallDynGlobal<int, CObject *, CObject *, CObject *, float, float, float>(gaddrof(CTheScripts::AttachSearchlightToSearchlightObject), searchlightid, tower, housing, bulb, offsetX, offsetY, offsetZ);

	// CTheScripts::CheckStreamedScriptVersion
	// plugin::CallAndReturnDynGlobal<char, RwStream *, char *>(gaddrof(CTheScripts::CheckStreamedScriptVersion), arg1, arg2);

	// CTheScripts::CleanUpThisObject
	// plugin::CallDynGlobal<CObject *>(gaddrof(CTheScripts::CleanUpThisObject), pObject);

	// CTheScripts::CleanUpThisPed
	// plugin::CallDynGlobal<CPed *>(gaddrof(CTheScripts::CleanUpThisPed), ped);

	// CTheScripts::CleanUpThisVehicle
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CTheScripts::CleanUpThisVehicle), pVehicle);

	// CTheScripts::ClearSpaceForMissionEntity
	// plugin::CallDynGlobal<CVector const &, CEntity *>(gaddrof(CTheScripts::ClearSpaceForMissionEntity), pos, pEntity);

	// CTheScripts::DrawDebugAngledSquare
	// plugin::CallDynGlobal<float, float, float, float, float, float, float, float>(gaddrof(CTheScripts::DrawDebugAngledSquare), x1, y1, x2, y2, x3, y3, x4, y4);

	// CTheScripts::DrawDebugCube
	// plugin::CallDynGlobal<float, float, float, float>(gaddrof(CTheScripts::DrawDebugCube), x1, y1, x2, y2);

	// CTheScripts::DrawScriptSpritesAndRectangles
	// plugin::CallDynGlobal<char>(gaddrof(CTheScripts::DrawScriptSpritesAndRectangles), bDrawBeforeFade);

	// CTheScripts::GetActualScriptThingIndex
	// plugin::CallAndReturnDynGlobal<signed int, int, unsigned char>(gaddrof(CTheScripts::GetActualScriptThingIndex), index, type);

	// CTheScripts::GetNewUniqueScriptThingIndex
	// plugin::CallAndReturnDynGlobal<unsigned int, unsigned int, char>(gaddrof(CTheScripts::GetNewUniqueScriptThingIndex), index, type);

	// CTheScripts::GetScriptIndexFromPointer
	// plugin::CallAndReturnDynGlobal<int, CRunningScript *>(gaddrof(CTheScripts::GetScriptIndexFromPointer), thread);

	// CTheScripts::GetUniqueScriptThingIndex
	// plugin::CallAndReturnDynGlobal<unsigned int, int, unsigned char>(gaddrof(CTheScripts::GetUniqueScriptThingIndex), playergroup, type);

	// CTheScripts::HasVehicleModelBeenBlockedByScript
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CTheScripts::HasVehicleModelBeenBlockedByScript), modelindex);

	// CTheScripts::HighlightImportantAngledArea
	// plugin::CallDynGlobal<unsigned int, float, float, float, float, float, float, float, float, float>(gaddrof(CTheScripts::HighlightImportantAngledArea), markerid, from_X, from_Y, to_X, to_Y, angledTo_X, angledTo_Y, angledFrom_X, angledFrom_Y, height);

	// CTheScripts::HighlightImportantArea
	// plugin::CallDynGlobal<int, float, float, float, float, float>(gaddrof(CTheScripts::HighlightImportantArea), markerid, from_X, from_Y, to_X, to_Y, height);

	// CTheScripts::InitialiseConnectLodObjects
	// plugin::CallDynGlobal<unsigned short>(gaddrof(CTheScripts::InitialiseConnectLodObjects), a1);

	// CTheScripts::InitialiseSpecialAnimGroup
	// plugin::CallDynGlobal<unsigned short>(gaddrof(CTheScripts::InitialiseSpecialAnimGroup), a1);

	// CTheScripts::IsEntityWithinAnySearchLight
	// plugin::CallAndReturnDynGlobal<bool, CEntity *, int *>(gaddrof(CTheScripts::IsEntityWithinAnySearchLight), pEntity, pIndex);

	// CTheScripts::IsEntityWithinSearchLight
	// plugin::CallAndReturnDynGlobal<bool, unsigned int, CEntity *>(gaddrof(CTheScripts::IsEntityWithinSearchLight), index, pEntity);

	// CTheScripts::IsPedStopped
	// plugin::CallAndReturnDynGlobal<bool, CPed *>(gaddrof(CTheScripts::IsPedStopped), ped);

	// CTheScripts::IsPlayerOnAMission
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CTheScripts::IsPlayerOnAMission));

	// CTheScripts::IsPointWithinSearchLight
	// plugin::CallAndReturnDynGlobal<bool, CVector *, int>(gaddrof(CTheScripts::IsPointWithinSearchLight), pointPosn, index);

	// CTheScripts::IsVehicleStopped
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CTheScripts::IsVehicleStopped), pVehicle);

	// CTheScripts::MoveSearchLightBetweenTwoPoints
	// plugin::CallDynGlobal<int, float, float, float, float, float, float, float>(gaddrof(CTheScripts::MoveSearchLightBetweenTwoPoints), index, x1, y1, z1, x2, y2, z2, pathSpeed);

	// CTheScripts::MoveSearchLightToEntity
	// plugin::CallDynGlobal<int, CEntity *, float>(gaddrof(CTheScripts::MoveSearchLightToEntity), index, pEntity, pathSpeed);

	// CTheScripts::MoveSearchLightToPointAndStop
	// plugin::CallDynGlobal<int, float, float, float, float>(gaddrof(CTheScripts::MoveSearchLightToPointAndStop), index, x, y, z, pathSpeed);

	// CTheScripts::RemoveFromVehicleModelsBlockedByScript
	// plugin::CallDynGlobal<int>(gaddrof(CTheScripts::RemoveFromVehicleModelsBlockedByScript), modelindex);

	// CTheScripts::RemoveFromWaitingForScriptBrainArray
	// plugin::CallAndReturnDynGlobal<int, CEntity *, short>(gaddrof(CTheScripts::RemoveFromWaitingForScriptBrainArray), a1, modelIndex);

	// CTheScripts::RemoveScriptCheckpoint
	// plugin::CallDynGlobal<int>(gaddrof(CTheScripts::RemoveScriptCheckpoint), arg1);

	// CTheScripts::RemoveScriptEffectSystem
	// plugin::CallDynGlobal<int>(gaddrof(CTheScripts::RemoveScriptEffectSystem), arg1);

	// CTheScripts::RemoveScriptSearchLight
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CTheScripts::RemoveScriptSearchLight), index);

	// CTheScripts::RemoveScriptSphere
	// plugin::CallDynGlobal<int>(gaddrof(CTheScripts::RemoveScriptSphere), index);

	// CTheScripts::RemoveThisPed
	// plugin::CallDynGlobal<CPed *>(gaddrof(CTheScripts::RemoveThisPed), ped);

	// CTheScripts::ScriptAttachAnimGroupToCharModel
	// plugin::CallAndReturnDynGlobal<bool, int, char *>(gaddrof(CTheScripts::ScriptAttachAnimGroupToCharModel), modelId, ifpName);

	// CTheScripts::ScriptConnectLodsFunction
	// plugin::CallDynGlobal<int, int>(gaddrof(CTheScripts::ScriptConnectLodsFunction), objecthandle1, objecthandle2);

	// CTheScripts::ScriptDebugCircle2D
	// plugin::CallDynGlobal<float, float, float, float, CRGBA>(gaddrof(CTheScripts::ScriptDebugCircle2D), x, y, width, height, color);

	// *CTheScripts::StartNewScript
	// plugin::CallAndReturnDynGlobal<CRunningScript *, unsigned char *>(gaddrof_o(CTheScripts::StartNewScript, CRunningScript *(*)(unsigned char *)), startIP);

	// CTheScripts::StartNewScript
	// plugin::CallAndReturnDynGlobal<int, unsigned char *, unsigned short>(gaddrof_o(CTheScripts::StartNewScript, int(*)(unsigned char *, unsigned short)), startIP, index);

	// CTheScripts::UseSwitchJumpTable
	// plugin::CallDynGlobal<int *>(gaddrof(CTheScripts::UseSwitchJumpTable), pSwitchLabelAddress);

plugin_sa\game_sa\CTimeCycle.cpp:

	// CTimeCycle::AddOne
	// plugin::Call<0x55FF40, CBox&, short, int, float, float, float>(box, farclip, extracolor, strength, falloff, lodDistMult);
	0AA5: call_function 0x55FF40 num_params 6 pop 6 [box] [farclip] [extracolor] [strength] [falloff] [lodDistMult]

	// CTimeCycle::CalcColoursForPoint
	// plugin::Call<0x5603D0, CVector, CColourSet*>(point, pCurrentColourSet);
	0AA5: call_function 0x5603D0 num_params 2 pop 2 [point] [pCurrentColourSet]

	// CTimeCycle::FindFarClipForCoors
	// plugin::Call<0x5616E0, CVector>(cam_pos);
	0AA5: call_function 0x5616E0 num_params 1 pop 1 [cam_pos]

	// CTimeCycle::FindTimeCycleBox
	// plugin::Call<0x55FFD0, CVector, CTimeCycleBox**, float*, bool, bool, CTimeCycleBox*>(pos, outbox, interpolation, bCheckLod, bCheckFar, exclude);
	0AA5: call_function 0x55FFD0 num_params 6 pop 6 [pos] [outbox] [interpolation] [bCheckLod] [bCheckFar] [exclude]

	// CTimeCycle::GetAmbientBlue
	// plugin::CallAndReturn<float, 0x560350>();
	0AA7: call_function_return 0x560350 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientBlue_BeforeBrightness
	// plugin::CallAndReturn<float, 0x5603B0>();
	0AA7: call_function_return 0x5603B0 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientBlue_Obj
	// plugin::CallAndReturn<float, 0x560380>();
	0AA7: call_function_return 0x560380 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientGreen
	// plugin::CallAndReturn<float, 0x560340>();
	0AA7: call_function_return 0x560340 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientGreen_BeforeBrightness
	// plugin::CallAndReturn<float, 0x5603A0>();
	0AA7: call_function_return 0x5603A0 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientGreen_Obj
	// plugin::CallAndReturn<float, 0x560370>();
	0AA7: call_function_return 0x560370 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientRed
	// plugin::CallAndReturn<float, 0x560330>();
	0AA7: call_function_return 0x560330 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientRed_BeforeBrightness
	// plugin::CallAndReturn<float, 0x560390>();
	0AA7: call_function_return 0x560390 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::GetAmbientRed_Obj
	// plugin::CallAndReturn<float, 0x560360>();
	0AA7: call_function_return 0x560360 num_params 0 pop 0 func_ret [float]

	// CTimeCycle::InitForRestart
	// plugin::Call<0x5601F0>();
	0AA5: call_function 0x5601F0 num_params 0 pop 0

	// CTimeCycle::Initialise
	// plugin::Call<0x5BBAC0>();
	0AA5: call_function 0x5BBAC0 num_params 0 pop 0

	// CTimeCycle::SetConstantParametersForPostFX
	// plugin::Call<0x560210>();
	0AA5: call_function 0x560210 num_params 0 pop 0

	// CTimeCycle::Shutdown
	// plugin::Call<0x5601E0>();
	0AA5: call_function 0x5601E0 num_params 0 pop 0

	// CTimeCycle::StartExtraColour
	// plugin::Call<0x55FEC0, int, bool>(colour, bNoExtraColorInterior);
	0AA5: call_function 0x55FEC0 num_params 2 pop 2 [colour] [bNoExtraColorInterior]

	// CTimeCycle::StopExtraColour
	// plugin::Call<0x55FF20, bool>(bNoExtraColorInterior);
	0AA5: call_function 0x55FF20 num_params 1 pop 1 [bNoExtraColorInterior]

	// CTimeCycle::Update
	// plugin::Call<0x561760>();
	0AA5: call_function 0x561760 num_params 0 pop 0

plugin_sa\game_sa\CUpsideDownCarCheck.cpp:

	// CUpsideDownCarCheck::AddCarToCheck
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::AddCarToCheck), this, carHandle);

	// CUpsideDownCarCheck::AreAnyCarsUpsideDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::AreAnyCarsUpsideDown), this);
	0AA8: call_method_return 0x4638A0 struct [CUpsideDownCarCheck] num_params 0 pop 0 func_ret [bool]

	// CUpsideDownCarCheck::HasCarBeenUpsideDownForAWhile
	// plugin::CallMethodAndReturnDynGlobal<char, CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::HasCarBeenUpsideDownForAWhile), this, carHandle);
	0AA8: call_method_return 0x463940 struct [CUpsideDownCarCheck] num_params 1 pop 0 [carHandle] func_ret [char]

	// CUpsideDownCarCheck::Init
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::Init), this);

	// CUpsideDownCarCheck::RemoveCarFromCheck
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *, int>(gaddrof(CUpsideDownCarCheck::RemoveCarFromCheck), this, carHandle);

	// CUpsideDownCarCheck::UpdateTimers
	// plugin::CallMethodDynGlobal<CUpsideDownCarCheck *>(gaddrof(CUpsideDownCarCheck::UpdateTimers), this);

	// CUpsideDownCarCheck::IsCarUpsideDown
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof_o(CUpsideDownCarCheck::IsCarUpsideDown, bool (*)(CVehicle *)), pVehicle);

	// CUpsideDownCarCheck::IsCarUpsideDown
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof_o(CUpsideDownCarCheck::IsCarUpsideDown, bool (*)(int)), carhandle);

plugin_sa\game_sa\CVisibilityPlugins.cpp:

	// CVisibilityPlugins::AtomicConstructor
	// plugin::Call<0x732150, void*>(object);
	0AA5: call_function 0x732150 num_params 1 pop 1 [object]

	// CVisibilityPlugins::AtomicCopyConstructor
	// plugin::Call<0x732170, void*, void const*>(object, originalObject);
	0AA5: call_function 0x732170 num_params 2 pop 2 [object] [originalObject]

	// CVisibilityPlugins::AtomicDestructor
	// plugin::CallAndReturn<void*, 0x7321A0, void*>(object);
	0AA7: call_function_return 0x7321A0 num_params 1 pop 1 [object] func_ret [void*]

	// CVisibilityPlugins::CalculateFadingAtomicAlpha
	// plugin::CallAndReturn<int, 0x732500, CBaseModelInfo*, CEntity*, float>(pBaseModelInfo, pEntity, arg3);
	0AA7: call_function_return 0x732500 num_params 3 pop 3 [pBaseModelInfo] [pEntity] [arg3] func_ret [int]

	// CVisibilityPlugins::ClearAtomicFlag
	// plugin::Call<0x732310, RpAtomic*, int>(pRpAtomic, flag);
	0AA5: call_function 0x732310 num_params 2 pop 2 [pRpAtomic] [flag]

	// CVisibilityPlugins::ClearAtomicFlag
	// plugin::Call<0x732330, RpAtomic*, unsigned short>(pRpAtomic, flag);
	0AA5: call_function 0x732330 num_params 2 pop 2 [pRpAtomic] [flag]

	// CVisibilityPlugins::ClearClumpForAllAtomicsFlag
	// plugin::Call<0x732350, RpClump*, int>(pRpClump, flag);
	0AA5: call_function 0x732350 num_params 2 pop 2 [pRpClump] [flag]

	// CVisibilityPlugins::ClumpConstructor
	// plugin::Call<0x732E10, void*>(object);
	0AA5: call_function 0x732E10 num_params 1 pop 1 [object]

	// CVisibilityPlugins::ClumpCopyConstructor
	// plugin::Call<0x732200, void*, void const*>(object, originalObject);
	0AA5: call_function 0x732200 num_params 2 pop 2 [object] [originalObject]

	// CVisibilityPlugins::ClumpDestructor
	// plugin::CallAndReturn<void*, 0x732220, void*>(object);
	0AA7: call_function_return 0x732220 num_params 1 pop 1 [object] func_ret [void*]

	// CVisibilityPlugins::DefaultVisibilityCB
	// plugin::CallAndReturn<int, 0x732A30>();
	0AA7: call_function_return 0x732A30 num_params 0 pop 0 func_ret [int]

	// CVisibilityPlugins::FrameConstructor
	// plugin::Call<0x7321B0, void*>(object);
	0AA5: call_function 0x7321B0 num_params 1 pop 1 [object]

	// CVisibilityPlugins::FrameCopyConstructor
	// plugin::Call<0x7321D0, void*, void const*>(object, originalObject);
	0AA5: call_function 0x7321D0 num_params 2 pop 2 [object] [originalObject]

	// CVisibilityPlugins::FrameDestructor
	// plugin::CallAndReturn<void*, 0x7321F0, void*, int, int>(arg0, arg1, arg2);
	0AA7: call_function_return 0x7321F0 num_params 3 pop 3 [arg0] [arg1] [arg2] func_ret [void*]

	// CVisibilityPlugins::FrustumSphereCB
	// plugin::CallAndReturn<bool, 0x732A40, RpClump*>(pRpClump);
	0AA7: call_function_return 0x732A40 num_params 1 pop 1 [pRpClump] func_ret [bool]

	// CVisibilityPlugins::GetAtomicId
	// plugin::CallAndReturn<short, 0x732370, RpAtomic*>(pRpAtomic);
	0AA7: call_function_return 0x732370 num_params 1 pop 1 [pRpAtomic] func_ret [short]

	// CVisibilityPlugins::GetAtomicModelInfo
	// plugin::CallAndReturn<CAtomicModelInfo*, 0x732260, RpAtomic*>(pRpAtomic);
	0AA7: call_function_return 0x732260 num_params 1 pop 1 [pRpAtomic] func_ret [CAtomicModelInfo*]

	// CVisibilityPlugins::GetClumpAlpha
	// plugin::CallAndReturn<int, 0x732B20, RpClump*>(pRpClump);
	0AA7: call_function_return 0x732B20 num_params 1 pop 1 [pRpClump] func_ret [int]

	// CVisibilityPlugins::GetClumpModelInfo
	// plugin::CallAndReturn<CClumpModelInfo*, 0x732AC0, RpClump*>(pRpClump);
	0AA7: call_function_return 0x732AC0 num_params 1 pop 1 [pRpClump] func_ret [CClumpModelInfo*]

	// CVisibilityPlugins::GetDistanceSquaredFromCamera
	// plugin::CallAndReturn<float, 0x732C80, RwFrame*>(pRwFrame);
	0AA7: call_function_return 0x732C80 num_params 1 pop 1 [pRwFrame] func_ret [float]

	// CVisibilityPlugins::GetDistanceSquaredFromCamera
	// plugin::CallAndReturn<float, 0x732CC0, RwV3d*>(pRwV3d);
	0AA7: call_function_return 0x732CC0 num_params 1 pop 1 [pRwV3d] func_ret [float]

	// CVisibilityPlugins::GetDotProductWithCameraVector
	// plugin::CallAndReturn<float, 0x7326D0, RwMatrixTag*, RwMatrixTag*, unsigned int>(atomicMat, rootMat, flags);
	0AA7: call_function_return 0x7326D0 num_params 3 pop 3 [atomicMat] [rootMat] [flags] func_ret [float]

	// CVisibilityPlugins::GetFrameHierarchyId
	// plugin::CallAndReturn<int, 0x732A20, RwFrame*>(pRwFrame);
	0AA7: call_function_return 0x732A20 num_params 1 pop 1 [pRwFrame] func_ret [int]

	// CVisibilityPlugins::GetModelInfoIndex
	// plugin::CallAndReturn<short, 0x732250, RpAtomic*>(pRpAtomic);
	0AA7: call_function_return 0x732250 num_params 1 pop 1 [pRpAtomic] func_ret [short]

	// CVisibilityPlugins::GetUserValue
	// plugin::CallAndReturn<short, 0x7323A0, RpAtomic*>(pRpAtomic);
	0AA7: call_function_return 0x7323A0 num_params 1 pop 1 [pRpAtomic] func_ret [short]

	// CVisibilityPlugins::InitAlphaAtomicList
	// plugin::Call<0x734530>();
	0AA5: call_function 0x734530 num_params 0 pop 0

	// CVisibilityPlugins::InitAlphaEntityList
	// plugin::Call<0x734540>();
	0AA5: call_function 0x734540 num_params 0 pop 0

	// CVisibilityPlugins::Initialise
	// plugin::Call<0x733A20>();
	0AA5: call_function 0x733A20 num_params 0 pop 0

	// CVisibilityPlugins::InsertAtomicIntoReallyDrawLastList
	// plugin::CallAndReturn<bool, 0x733E10, RpAtomic*, float>(pRpAtomic, arg2);
	0AA7: call_function_return 0x733E10 num_params 2 pop 2 [pRpAtomic] [arg2] func_ret [bool]

	// CVisibilityPlugins::InsertEntityIntoReallyDrawLastList
	// plugin::CallAndReturn<bool, 0x733E50, CEntity*, float>(pEntity, arg2);
	0AA7: call_function_return 0x733E50 num_params 2 pop 2 [pEntity] [arg2] func_ret [bool]

	// CVisibilityPlugins::InsertEntityIntoSortedList
	// plugin::CallAndReturn<bool, 0x734570, CEntity*, float>(pEntity, distance);
	0AA7: call_function_return 0x734570 num_params 2 pop 2 [pEntity] [distance] func_ret [bool]

	// CVisibilityPlugins::IsAtomicVisible
	// plugin::CallAndReturn<bool, 0x732990, RpAtomic*>(pRpAtomic);
	0AA7: call_function_return 0x732990 num_params 1 pop 1 [pRpAtomic] func_ret [bool]

	// CVisibilityPlugins::IsClumpVisible
	// plugin::CallAndReturn<bool, 0x732AE0, RpClump*>(pRpClump);
	0AA7: call_function_return 0x732AE0 num_params 1 pop 1 [pRpClump] func_ret [bool]

	// CVisibilityPlugins::PluginAttach
	// plugin::CallAndReturn<bool, 0x732E30>();
	0AA7: call_function_return 0x732E30 num_params 0 pop 0 func_ret [bool]

	// CVisibilityPlugins::RenderAlphaAtomic
	// plugin::Call<0x732480, RpAtomic*, int>(pRpAtomic, dwAlpha);
	0AA5: call_function 0x732480 num_params 2 pop 2 [pRpAtomic] [dwAlpha]

	// CVisibilityPlugins::RenderAlphaAtomics
	// plugin::Call<0x733E90>();
	0AA5: call_function 0x733E90 num_params 0 pop 0

	// CVisibilityPlugins::RenderAtomicWithAlphaCB
	// plugin::Call<0x732660, RpAtomic*, void*>(pRpAtomic, pData);
	0AA5: call_function 0x732660 num_params 2 pop 2 [pRpAtomic] [pData]

	// CVisibilityPlugins::RenderBoatAlphaAtomics
	// plugin::Call<0x733EC0>();
	0AA5: call_function 0x733EC0 num_params 0 pop 0

	// CVisibilityPlugins::RenderEntity
	// plugin::Call<0x732B40, void*, bool, float>(entity, unused, arg3);
	0AA5: call_function 0x732B40 num_params 3 pop 3 [entity] [unused] [arg3]

	// CVisibilityPlugins::RenderFadingAtomic
	// plugin::Call<0x732610, CBaseModelInfo*, RpAtomic*, int>(pBaseModelInfo, pRpAtomic, dwAlpha);
	0AA5: call_function 0x732610 num_params 3 pop 3 [pBaseModelInfo] [pRpAtomic] [dwAlpha]

	// CVisibilityPlugins::RenderFadingClump
	// plugin::Call<0x732680, CBaseModelInfo*, RpClump*, int>(pBaseModelInfo, pRpClump, dwAlpha);
	0AA5: call_function 0x732680 num_params 3 pop 3 [pBaseModelInfo] [pRpClump] [dwAlpha]

	// CVisibilityPlugins::RenderFadingClumpCB
	// plugin::Call<0x733630, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733630 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderFadingEntities
	// plugin::Call<0x733F10>();
	0AA5: call_function 0x733F10 num_params 0 pop 0

	// CVisibilityPlugins::RenderFadingUnderwaterEntities
	// plugin::Call<0x7337D0>();
	0AA5: call_function 0x7337D0 num_params 0 pop 0

	// CVisibilityPlugins::RenderHeliRotorAlphaCB
	// plugin::Call<0x7340B0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7340B0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderHeliTailRotorAlphaCB
	// plugin::Call<0x734170, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x734170 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderObjNormalAtomic
	// plugin::Call<0x7323E0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7323E0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderOrderedList
	// plugin::Call <0x7337A0, CLinkList<CVisibilityPlugins::AlphaObjectInfo>&>(AlphaObjectInfoList);

	// CVisibilityPlugins::RenderPedCB
	// plugin::Call<0x7335B0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7335B0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderPlayerCB
	// plugin::Call<0x732870, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x732870 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderReallyDrawLastObjects
	// plugin::Call<0x733800>();
	0AA5: call_function 0x733800 num_params 0 pop 0

	// CVisibilityPlugins::RenderTrainHiDetailAlphaCB
	// plugin::Call<0x734240, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x734240 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderTrainHiDetailCB
	// plugin::Call<0x733330, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733330 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailAlphaCB
	// plugin::Call<0x733F80, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733F80 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailAlphaCB_BigVehicle
	// plugin::Call<0x734370, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x734370 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailAlphaCB_Boat
	// plugin::Call<0x7344A0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7344A0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailCB
	// plugin::Call<0x733240, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733240 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailCB_BigVehicle
	// plugin::Call<0x733420, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733420 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleHiDetailCB_Boat
	// plugin::Call<0x733550, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733550 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleLoDetailCB_Boat
	// plugin::Call<0x7334F0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7334F0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleReallyLowDetailCB
	// plugin::Call<0x7331E0, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x7331E0 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderVehicleReallyLowDetailCB_BigVehicle
	// plugin::Call<0x732820, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x732820 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderWeaponCB
	// plugin::Call<0x733670, RpAtomic*>(pRpAtomic);
	0AA5: call_function 0x733670 num_params 1 pop 1 [pRpAtomic]

	// CVisibilityPlugins::RenderWeaponPedsForPC
	// plugin::Call<0x732F30>();
	0AA5: call_function 0x732F30 num_params 0 pop 0

	// CVisibilityPlugins::SetAtomicFlag
	// plugin::Call<0x7322D0, RpAtomic*, int>(pRpAtomic, flag);
	0AA5: call_function 0x7322D0 num_params 2 pop 2 [pRpAtomic] [flag]

	// CVisibilityPlugins::SetAtomicFlag
	// plugin::Call<0x7322B0, RpAtomic*, unsigned short>(pRpAtomic, flag);
	0AA5: call_function 0x7322B0 num_params 2 pop 2 [pRpAtomic] [flag]

	// CVisibilityPlugins::SetAtomicId
	// plugin::Call<0x732230, RpAtomic*, int>(pRpAtomic, id);
	0AA5: call_function 0x732230 num_params 2 pop 2 [pRpAtomic] [id]

	// CVisibilityPlugins::SetAtomicRenderCallback
	// plugin::Call<0x7328A0,RpAtomic*, RpAtomic * (*)(RpAtomic *)>(pRpAtomic,renderCB);
	0AA5: call_function 0x7328A0 num_params 2 pop 2 [*)(RpAtomic *)>(pRpAtomic] [renderCB]

	// CVisibilityPlugins::SetClumpAlpha
	// plugin::Call<0x732B00, RpClump*, int>(pRpClump, dwAlpha);
	0AA5: call_function 0x732B00 num_params 2 pop 2 [pRpClump] [dwAlpha]

	// CVisibilityPlugins::SetClumpModelInfo
	// plugin::Call<0x733750, RpClump*, CClumpModelInfo*>(pRpClump, pClumpModelInfo);
	0AA5: call_function 0x733750 num_params 2 pop 2 [pRpClump] [pClumpModelInfo]

	// CVisibilityPlugins::SetFrameHierarchyId
	// plugin::Call<0x732A00, RwFrame*, int>(pRwFrame, id);
	0AA5: call_function 0x732A00 num_params 2 pop 2 [pRwFrame] [id]

	// CVisibilityPlugins::SetRenderWareCamera
	// plugin::Call<0x7328C0, RwCamera*>(pRwCamera);
	0AA5: call_function 0x7328C0 num_params 1 pop 1 [pRwCamera]

	// CVisibilityPlugins::SetUserValue
	// plugin::Call<0x732380, RpAtomic*, unsigned short>(pRpAtomic, value);
	0AA5: call_function 0x732380 num_params 2 pop 2 [pRpAtomic] [value]

	// CVisibilityPlugins::SetupVehicleVariables
	// plugin::Call<0x733160, RpClump*>(pRpClump);
	0AA5: call_function 0x733160 num_params 1 pop 1 [pRpClump]

	// CVisibilityPlugins::Shutdown
	// plugin::Call<0x732EB0>();
	0AA5: call_function 0x732EB0 num_params 0 pop 0

	// CVisibilityPlugins::VehicleVisibilityCB
	// plugin::CallAndReturn<bool, 0x7336F0, RpClump*>(pRpClump);
	0AA7: call_function_return 0x7336F0 num_params 1 pop 1 [pRpClump] func_ret [bool]

	// CVisibilityPlugins::VehicleVisibilityCB_BigVehicle
	// plugin::CallAndReturn<bool, 0x732AB0, RpClump*>(pRpClump);
	0AA7: call_function_return 0x732AB0 num_params 1 pop 1 [pRpClump] func_ret [bool]

plugin_sa\game_sa\CWanted.cpp:

	// CWanted::InitialiseStaticVariables
	// plugin::Call<0x561C70>();
	0AA5: call_function 0x561C70 num_params 0 pop 0

	// CWanted::UpdateWantedLevel
	// plugin::CallMethod<0x561C90, CWanted *>(this);
	0AA6: call_method 0x561C90 struct [CWanted] num_params 0 pop 0

	// CWanted::SetMaximumWantedLevel
	// plugin::Call<0x561E70, int>(level);
	0AA5: call_function 0x561E70 num_params 1 pop 1 [level]

	// CWanted::AreMiamiViceRequired
	// plugin::CallMethodAndReturn<bool, 0x561F30, CWanted *>(this);
	0AA8: call_method_return 0x561F30 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreSwatRequired
	// plugin::CallMethodAndReturn<bool, 0x561F40, CWanted *>(this);
	0AA8: call_method_return 0x561F40 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreFbiRequired
	// plugin::CallMethodAndReturn<bool, 0x561F60, CWanted *>(this);
	0AA8: call_method_return 0x561F60 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreArmyRequired
	// plugin::CallMethodAndReturn<bool, 0x561F80, CWanted *>(this);
	0AA8: call_method_return 0x561F80 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::NumOfHelisRequired
	// plugin::CallMethodAndReturn<int, 0x561FA0, CWanted *>(this);
	0AA8: call_method_return 0x561FA0 struct [CWanted] num_params 0 pop 0 func_ret [int]

	// CWanted::ResetPolicePursuit
	// plugin::Call<0x561FD0>();
	0AA5: call_function 0x561FD0 num_params 0 pop 0

	// CWanted::ClearQdCrimes
	// plugin::CallMethod<0x561FE0, CWanted *>(this);
	0AA6: call_method 0x561FE0 struct [CWanted] num_params 0 pop 0

	// CWanted::AddCrimeToQ
	// plugin::CallMethodAndReturn<bool, 0x562000, CWanted *, eCrimeType, int, CVector const&, bool, bool>(this, crimeType, crimeId, posn, bAlreadyReported, bPoliceDontReallyCare);
	0AA8: call_method_return 0x562000 struct [CWanted] num_params 5 pop 0 [crimeType] [crimeId] [posn] [bAlreadyReported] [bPoliceDontReallyCare] func_ret [bool]

	// CWanted::ReportCrimeNow
	// plugin::CallMethod<0x562120, CWanted *, eCrimeType, CVector const&, bool>(this, crimeType, posn, bPoliceDontReallyCare);
	0AA6: call_method 0x562120 struct [CWanted] num_params 3 pop 0 [crimeType] [posn] [bPoliceDontReallyCare]

	// CWanted::RemovePursuitCop
	// plugin::Call<0x562300, CCopPed*, CCopPed**, unsigned char&>(cop, copsArray, copsCounter);
	0AA5: call_function 0x562300 num_params 3 pop 3 [cop] [copsArray] [copsCounter]

	// CWanted::IsInPursuit
	// plugin::CallMethodAndReturn<bool, 0x562330, CWanted *, CCopPed*>(this, cop);
	0AA8: call_method_return 0x562330 struct [CWanted] num_params 1 pop 0 [cop] func_ret [bool]

	// CWanted::UpdateEachFrame
	// plugin::Call<0x562360>();
	0AA5: call_function 0x562360 num_params 0 pop 0

	// CWanted::Initialise
	// plugin::CallMethod<0x562390, CWanted *>(this);
	0AA6: call_method 0x562390 struct [CWanted] num_params 0 pop 0

	// CWanted::Reset
	// plugin::CallMethod<0x562400, CWanted *>(this);
	0AA6: call_method 0x562400 struct [CWanted] num_params 0 pop 0

	// CWanted::RegisterCrime
	// plugin::CallMethod<0x562410, CWanted *, eCrimeType, CVector const&, unsigned int, bool>(this, crimeType, posn, crimeId, bPoliceDontReallyCare);
	0AA6: call_method 0x562410 struct [CWanted] num_params 4 pop 0 [crimeType] [posn] [crimeId] [bPoliceDontReallyCare]

	// CWanted::RegisterCrime_Immediately
	// plugin::CallMethod<0x562430, CWanted *, eCrimeType, CVector const&, unsigned int, bool>(this, crimeType, posn, crimeId, bPoliceDontReallyCare);
	0AA6: call_method 0x562430 struct [CWanted] num_params 4 pop 0 [crimeType] [posn] [crimeId] [bPoliceDontReallyCare]

	// CWanted::SetWantedLevel
	// plugin::CallMethod<0x562470, CWanted *, int>(this, level);
	0AA6: call_method 0x562470 struct [CWanted] num_params 1 pop 0 [level]

	// CWanted::CheatWantedLevel
	// plugin::CallMethod<0x562540, CWanted *, int>(this, level);
	0AA6: call_method 0x562540 struct [CWanted] num_params 1 pop 0 [level]

	// CWanted::SetWantedLevelNoDrop
	// plugin::CallMethod<0x562570, CWanted *, int>(this, level);
	0AA6: call_method 0x562570 struct [CWanted] num_params 1 pop 0 [level]

	// CWanted::ClearWantedLevelAndGoOnParole
	// plugin::CallMethod<0x5625A0, CWanted *>(this);
	0AA6: call_method 0x5625A0 struct [CWanted] num_params 0 pop 0

	// CWanted::WorkOutPolicePresence
	// plugin::CallAndReturn<int, 0x5625F0, CVector, float>(posn, radius);
	0AA7: call_function_return 0x5625F0 num_params 2 pop 2 [posn] [radius] func_ret [int]

	// CWanted::UpdateCrimesQ
	// plugin::CallMethod<0x562760, CWanted *>(this);
	0AA6: call_method 0x562760 struct [CWanted] num_params 0 pop 0

	// CWanted::IsClosestCop
	// plugin::CallMethodAndReturn<bool, 0x5627D0, CWanted *, CPed*, int>(this, ped, numCopsToCheck);
	0AA8: call_method_return 0x5627D0 struct [CWanted] num_params 2 pop 0 [ped] [numCopsToCheck] func_ret [bool]

	// CWanted::ComputePursuitCopToDisplace
	// plugin::CallAndReturn<CCopPed*, 0x562B00, CCopPed*, CCopPed**>(cop, copsArray);
	0AA7: call_function_return 0x562B00 num_params 2 pop 2 [cop] [copsArray] func_ret [CCopPed*]

	// CWanted::RemovePursuitCop
	// plugin::CallMethod<0x562C10, CWanted *, CCopPed*>(this, cop);
	0AA6: call_method 0x562C10 struct [CWanted] num_params 1 pop 0 [cop]

	// CWanted::RemoveExcessPursuitCops
	// plugin::CallMethod<0x562C40, CWanted *>(this);
	0AA6: call_method 0x562C40 struct [CWanted] num_params 0 pop 0

	// CWanted::Update
	// plugin::CallMethod<0x562C90, CWanted *>(this);
	0AA6: call_method 0x562C90 struct [CWanted] num_params 0 pop 0

	// CWanted::CanCopJoinPursuit
	// plugin::CallAndReturn<bool, 0x562F60, CCopPed*, unsigned char, CCopPed**, unsigned char&>(cop, maxCopsCount, copsArray, copsCounter);
	0AA7: call_function_return 0x562F60 num_params 4 pop 4 [cop] [maxCopsCount] [copsArray] [copsCounter] func_ret [bool]

	// CWanted::CanCopJoinPursuit
	// plugin::CallMethodAndReturn<bool, 0x562FB0, CWanted *, CCopPed*>(this, cop);
	0AA8: call_method_return 0x562FB0 struct [CWanted] num_params 1 pop 0 [cop] func_ret [bool]

	// CWanted::SetPursuitCop
	// plugin::CallMethodAndReturn<bool, 0x563060, CWanted *, CCopPed*>(this, cop);
	0AA8: call_method_return 0x563060 struct [CWanted] num_params 1 pop 0 [cop] func_ret [bool]

plugin_sa\game_sa\CWeapon.cpp:

	// CWeapon::InitialiseWeapons
	// plugin::Call<0x73A300>();
	0AA5: call_function 0x73A300 num_params 0 pop 0

	// CWeapon::ShutdownWeapons
	// plugin::Call<0x73A330>();
	0AA5: call_function 0x73A330 num_params 0 pop 0

	// CWeapon::UpdateWeapons
	// plugin::Call<0x73A360>();
	0AA5: call_function 0x73A360 num_params 0 pop 0

	// CWeapon::Shutdown
	// plugin::CallMethod<0x73A380, CWeapon *>(this);
	0AA6: call_method 0x73A380 struct [CWeapon] num_params 0 pop 0

	// CWeapon::AddGunshell
	// plugin::CallMethod<0x73A3E0, CWeapon *, CEntity*, CVector const&, CVector2D const&, float>(this, creator, position, direction, size);
	0AA6: call_method 0x73A3E0 struct [CWeapon] num_params 4 pop 0 [creator] [position] [direction] [size]

	// CWeapon::GenerateDamageEvent
	// plugin::Call<0x73A530, CPed*, CEntity*, eWeaponType, int, ePedPieceTypes, int>(victim, creator, weaponType, damageFactor, pedPiece, direction);
	0AA5: call_function 0x73A530 num_params 6 pop 6 [victim] [creator] [weaponType] [damageFactor] [pedPiece] [direction]

	// CWeapon::LaserScopeDot
	// plugin::CallMethodAndReturn<bool, 0x73A8D0, CWeapon *, CVector*, float*>(this, outCoord, outSize);
	0AA8: call_method_return 0x73A8D0 struct [CWeapon] num_params 2 pop 0 [outCoord] [outSize] func_ret [bool]

	// CWeapon::FireSniper
	// plugin::CallMethodAndReturn<bool, 0x73AAC0, CWeapon *, CPed*, CEntity*, CVector*>(this, creator, victim, target);
	0AA8: call_method_return 0x73AAC0 struct [CWeapon] num_params 3 pop 0 [creator] [victim] [target] func_ret [bool]

	// CWeapon::Reload
	// plugin::CallMethod<0x73AEB0, CWeapon *, CPed*>(this, owner);
	0AA6: call_method 0x73AEB0 struct [CWeapon] num_params 1 pop 0 [owner]

	// FireOneInstantHitRound
	// plugin::Call<0x73AF00, CVector*, CVector*, int>(startPoint, endPoint, intensity);
	0AA5: call_function 0x73AF00 num_params 3 pop 3 [startPoint] [endPoint] [intensity]

	// CWeapon::IsTypeMelee
	// plugin::CallMethodAndReturn<bool, 0x73B1C0, CWeapon *>(this);
	0AA8: call_method_return 0x73B1C0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::IsType2Handed
	// plugin::CallMethodAndReturn<bool, 0x73B1E0, CWeapon *>(this);
	0AA8: call_method_return 0x73B1E0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::IsTypeProjectile
	// plugin::CallMethodAndReturn<bool, 0x73B210, CWeapon *>(this);
	0AA8: call_method_return 0x73B210 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::CanBeUsedFor2Player
	// plugin::CallAndReturn<bool, 0x73B240, eWeaponType>(weaponType);
	0AA7: call_function_return 0x73B240 num_params 1 pop 1 [weaponType] func_ret [bool]

	// CWeapon::HasWeaponAmmoToBeUsed
	// plugin::CallMethodAndReturn<bool, 0x73B2A0, CWeapon *>(this);
	0AA8: call_method_return 0x73B2A0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x73B300, CVector const&, CVector const&, CColPoint&, CEntity*&, eWeaponType, CEntity*, bool, bool, bool, bool, bool, bool, bool>(startPoint, endPoint, outColPoint, outEntity, weaponType, arg5, buildings, vehicles, peds, objects, dummies, arg11, doIgnoreCameraCheck);
	0AA7: call_function_return 0x73B300 num_params 13 pop 13 [startPoint] [endPoint] [outColPoint] [outEntity] [weaponType] [arg5] [buildings] [vehicles] [peds] [objects] [dummies] [arg11] [doIgnoreCameraCheck] func_ret [bool]

	// CWeapon::StopWeaponEffect
	// plugin::CallMethod<0x73B360, CWeapon *>(this);
	0AA6: call_method 0x73B360 struct [CWeapon] num_params 0 pop 0

	// CWeapon::TargetWeaponRangeMultiplier
	// plugin::CallAndReturn<float, 0x73B380, CEntity*, CEntity*>(victim, weaponOwner);
	0AA7: call_function_return 0x73B380 num_params 2 pop 2 [victim] [weaponOwner] func_ret [float]

	// CWeapon::CWeapon
	// plugin::CallMethod<0x73B430, CWeapon *, eWeaponType, int>(this, weaponType, ammo);
	0AA6: call_method 0x73B430 struct [CWeapon] num_params 2 pop 0 [weaponType] [ammo]

	// CWeapon::Initialise
	// plugin::CallMethod<0x73B4A0, CWeapon *, eWeaponType, int, CPed*>(this, weaponType, ammo, owner);
	0AA6: call_method 0x73B4A0 struct [CWeapon] num_params 3 pop 0 [weaponType] [ammo] [owner]

	// CWeapon::DoBulletImpact
	// plugin::CallMethod<0x73B550, CWeapon *, CEntity*, CEntity*, CVector*, CVector*, CColPoint*, int>(this, owner, victim, startPoint, endPoint, colPoint, arg5);
	0AA6: call_method 0x73B550 struct [CWeapon] num_params 6 pop 0 [owner] [victim] [startPoint] [endPoint] [colPoint] [arg5]

	// CWeapon::TakePhotograph
	// plugin::CallMethodAndReturn<bool, 0x73C1F0, CWeapon *, CEntity*, CVector*>(this, owner, point);
	0AA8: call_method_return 0x73C1F0 struct [CWeapon] num_params 2 pop 0 [owner] [point] func_ret [bool]

	// CWeapon::SetUpPelletCol
	// plugin::CallMethod<0x73C710, CWeapon *, int, CEntity*, CEntity*, CVector&, CColPoint&, CMatrix&>(this, numPellets, owner, victim, point, colPoint, outMatrix);
	0AA6: call_method 0x73C710 struct [CWeapon] num_params 6 pop 0 [numPellets] [owner] [victim] [point] [colPoint] [outMatrix]

	// CWeapon::FireInstantHitFromCar2
	// plugin::CallMethod<0x73CBA0, CWeapon *, CVector, CVector, CVehicle*, CEntity*>(this, startPoint, endPoint, vehicle, owner);
	0AA6: call_method 0x73CBA0 struct [CWeapon] num_params 4 pop 0 [startPoint] [endPoint] [vehicle] [owner]

	// CWeapon::DoDoomAiming
	// plugin::Call<0x73CDC0, CEntity*, CVector*, CVector*>(owner, start, end);
	0AA5: call_function 0x73CDC0 num_params 3 pop 3 [owner] [start] [end]

	// CWeapon::DoTankDoomAiming
	// plugin::Call<0x73D1E0, CEntity*, CEntity*, CVector*, CVector*>(vehicle, owner, startPoint, endPoint);
	0AA5: call_function 0x73D1E0 num_params 4 pop 4 [vehicle] [owner] [startPoint] [endPoint]

	// CWeapon::DoDriveByAutoAiming
	// plugin::Call<0x73D720, CEntity*, CVehicle*, CVector*, CVector*, bool>(owner, vehicle, startPoint, endPoint, canAimVehicles);
	0AA5: call_function 0x73D720 num_params 5 pop 5 [owner] [vehicle] [startPoint] [endPoint] [canAimVehicles]

	// CWeapon::Update
	// plugin::CallMethod<0x73DB40, CWeapon *, CPed*>(this, owner);
	0AA6: call_method 0x73DB40 struct [CWeapon] num_params 1 pop 0 [owner]

	// CWeapon::CanBeUsedFor2Player
	// plugin::CallMethodAndReturn<bool, 0x73DEF0, CWeapon *>(this);
	0AA8: call_method_return 0x73DEF0 struct [CWeapon] num_params 0 pop 0 func_ret [bool]

	// CWeapon::FindNearestTargetEntityWithScreenCoors
	// plugin::Call<0x73E240, float, float, float, CVector, float*, float*>(screenX, screenY, range, point, outX, outY);
	0AA5: call_function 0x73E240 num_params 6 pop 6 [screenX] [screenY] [range] [point] [outX] [outY]

	// CWeapon::EvaluateTargetForHeatSeekingMissile
	// plugin::CallAndReturn<float, 0x73E560, CEntity*, CVector&, CVector&, float, bool, CEntity*>(entity, posn, direction, distanceMultiplier, fromVehicle, lastEntity);
	0AA7: call_function_return 0x73E560 num_params 6 pop 6 [entity] [posn] [direction] [distanceMultiplier] [fromVehicle] [lastEntity] func_ret [float]

	// CWeapon::DoWeaponEffect
	// plugin::CallMethod<0x73E690, CWeapon *, CVector, CVector>(this, origin, target);
	0AA6: call_method 0x73E690 struct [CWeapon] num_params 2 pop 0 [origin] [target]

	// CWeapon::FireAreaEffect
	// plugin::CallMethodAndReturn<bool, 0x73E800, CWeapon *, CEntity*, CVector*, CEntity*, CVector*>(this, firingEntity, origin, targetEntity, target);
	0AA8: call_method_return 0x73E800 struct [CWeapon] num_params 4 pop 0 [firingEntity] [origin] [targetEntity] [target] func_ret [bool]

	// CWeapon::FireInstantHitFromCar
	// plugin::CallMethodAndReturn<bool, 0x73EC40, CWeapon *, CVehicle*, bool, bool>(this, vehicle, leftSide, rightSide);
	0AA8: call_method_return 0x73EC40 struct [CWeapon] num_params 3 pop 0 [vehicle] [leftSide] [rightSide] func_ret [bool]

	// CWeapon::CheckForShootingVehicleOccupant
	// plugin::CallAndReturn<bool, 0x73F480, CEntity**, CColPoint*, eWeaponType, CVector const&, CVector const&>(pCarEntity, colPoint, weaponType, origin, target);
	0AA7: call_function_return 0x73F480 num_params 5 pop 5 [pCarEntity] [colPoint] [weaponType] [origin] [target] func_ret [bool]

	// CWeapon::PickTargetForHeatSeekingMissile
	// plugin::CallAndReturn<CEntity*, 0x73F910, CVector, CVector, float, CEntity*, bool, CEntity*>(origin, direction, distanceMultiplier, ignoreEntity, fromVehicle, lastEntity);
	0AA7: call_function_return 0x73F910 num_params 6 pop 6 [origin] [direction] [distanceMultiplier] [ignoreEntity] [fromVehicle] [lastEntity] func_ret [CEntity*]

	// CWeapon::FireFromCar
	// plugin::CallMethod<0x73FA20, CWeapon *, CVehicle*, bool, bool>(this, vehicle, leftSide, rightSide);
	0AA6: call_method 0x73FA20 struct [CWeapon] num_params 3 pop 0 [vehicle] [leftSide] [rightSide]

	// CWeapon::FireInstantHit
	// plugin::CallMethodAndReturn<bool, 0x73FB10, CWeapon *, CEntity*, CVector*, CVector*, CEntity*, CVector*, CVector*, bool, bool>(this, firingEntity, origin, muzzlePosn, targetEntity, target, originForDriveBy, arg6, muzzle);
	0AA8: call_method_return 0x73FB10 struct [CWeapon] num_params 8 pop 0 [firingEntity] [origin] [muzzlePosn] [targetEntity] [target] [originForDriveBy] [arg6] [muzzle] func_ret [bool]

	// CWeapon::FireProjectile
	// plugin::CallMethodAndReturn<bool, 0x741360, CWeapon *, CEntity*, CVector*, CEntity*, CVector*, float>(this, firingEntity, origin, targetEntity, target, force);
	0AA8: call_method_return 0x741360 struct [CWeapon] num_params 5 pop 0 [firingEntity] [origin] [targetEntity] [target] [force] func_ret [bool]

	// CWeapon::FireM16_1stPerson
	// plugin::CallMethodAndReturn<bool, 0x741C00, CWeapon *, CEntity*>(this, owner);
	0AA8: call_method_return 0x741C00 struct [CWeapon] num_params 1 pop 0 [owner] func_ret [bool]

	// CWeapon::Fire
	// plugin::CallMethodAndReturn<bool, 0x742300, CWeapon *, CEntity*, CVector*, CVector*, CEntity*, CVector*, CVector*>(this, firingEntity, origin, muzzlePosn, targetEntity, target, originForDriveBy);
	0AA8: call_method_return 0x742300 struct [CWeapon] num_params 6 pop 0 [firingEntity] [origin] [muzzlePosn] [targetEntity] [target] [originForDriveBy] func_ret [bool]

plugin_sa\game_sa\CWeaponEffects.cpp:

	// CWeaponEffects::CWeaponEffects
	// plugin::CallMethod<0x742A90, CWeaponEffects *>(this);
	0AA6: call_method 0x742A90 struct [CWeaponEffects] num_params 0 pop 0

	// CWeaponEffects::~CWeaponEffects
	// plugin::CallMethod<0x742AA0, CWeaponEffects *>(this);
	0AA6: call_method 0x742AA0 struct [CWeaponEffects] num_params 0 pop 0

	// CWeaponEffects::Init
	// plugin::Call<0x742AB0>();
	0AA5: call_function 0x742AB0 num_params 0 pop 0

	// CWeaponEffects::Shutdown
	// plugin::Call<0x742B80>();
	0AA5: call_function 0x742B80 num_params 0 pop 0

	// CWeaponEffects::IsLockedOn
	// plugin::CallAndReturn<bool, 0x742BD0, int>(crosshairId);
	0AA7: call_function_return 0x742BD0 num_params 1 pop 1 [crosshairId] func_ret [bool]

	// CWeaponEffects::MarkTarget
	// plugin::Call<0x742BF0, int, CVector, unsigned char, unsigned char, unsigned char, unsigned char, float, unsigned char>(crosshairId, posn, red, green, blue, alpha, size, arg7);
	0AA5: call_function 0x742BF0 num_params 8 pop 8 [crosshairId] [posn] [red] [green] [blue] [alpha] [size] [arg7]

	// CWeaponEffects::ClearCrossHair
	// plugin::Call<0x742C60, int>(crosshairId);
	0AA5: call_function 0x742C60 num_params 1 pop 1 [crosshairId]

	// CWeaponEffects::ClearCrossHairs
	// plugin::Call<0x742C80>();
	0AA5: call_function 0x742C80 num_params 0 pop 0

	// CWeaponEffects::ClearCrossHairImmediately
	// plugin::Call<0x742CA0, int>(crosshairId);
	0AA5: call_function 0x742CA0 num_params 1 pop 1 [crosshairId]

	// CWeaponEffects::ClearCrossHairsImmediately
	// plugin::Call<0x742CC0>();
	0AA5: call_function 0x742CC0 num_params 0 pop 0

	// CWeaponEffects::Render
	// plugin::Call<0x742CF0>();
	0AA5: call_function 0x742CF0 num_params 0 pop 0

plugin_sa\game_sa\CWeather.cpp:

	// CWeather::AddRain
	// plugin::Call<0x72A9A0>();
	0AA5: call_function 0x72A9A0 num_params 0 pop 0

	// CWeather::AddSandStormParticles
	// plugin::Call<0x72A820>();
	0AA5: call_function 0x72A820 num_params 0 pop 0

	// CWeather::FindWeatherTypesList
	// plugin::CallAndReturn<unsigned char*, 0x72A520>();
	0AA7: call_function_return 0x72A520 num_params 0 pop 0 func_ret [unsigned char*]

	// CWeather::ForceWeather
	// plugin::Call<0x72A4E0, short>(weatherType);
	0AA5: call_function 0x72A4E0 num_params 1 pop 1 [weatherType]

	// CWeather::ForceWeatherNow
	// plugin::Call<0x72A4F0, short>(weatherType);
	0AA5: call_function 0x72A4F0 num_params 1 pop 1 [weatherType]

	// CWeather::ForecastWeather
	// plugin::CallAndReturn<bool, 0x72A590, int, int>(weatherType, numSteps);
	0AA7: call_function_return 0x72A590 num_params 2 pop 2 [weatherType] [numSteps] func_ret [bool]

	// CWeather::Init
	// plugin::Call<0x72A480>();
	0AA5: call_function 0x72A480 num_params 0 pop 0

	// CWeather::ReleaseWeather
	// plugin::Call<0x72A510>();
	0AA5: call_function 0x72A510 num_params 0 pop 0

	// CWeather::RenderRainStreaks
	// plugin::Call<0x72AF70>();
	0AA5: call_function 0x72AF70 num_params 0 pop 0

	// CWeather::SetWeatherToAppropriateTypeNow
	// plugin::Call<0x72A790>();
	0AA5: call_function 0x72A790 num_params 0 pop 0

	// CWeather::Update
	// plugin::Call<0x72B850>();
	0AA5: call_function 0x72B850 num_params 0 pop 0

	// CWeather::UpdateInTunnelness
	// plugin::Call<0x72B630>();
	0AA5: call_function 0x72B630 num_params 0 pop 0

	// CWeather::UpdateWeatherRegion
	// plugin::Call<0x72A640, CVector*>(posn);
	0AA5: call_function 0x72A640 num_params 1 pop 1 [posn]

plugin_sa\game_sa\CWorld.cpp:

	// CWorld::ResetLineTestOptions
	// plugin::Call<0x5631C0>();
	0AA5: call_function 0x5631C0 num_params 0 pop 0

	// CWorld::Initialise
	// plugin::Call<0x5631E0>();
	0AA5: call_function 0x5631E0 num_params 0 pop 0

	// CWorld::Add
	// plugin::Call<0x563220, CEntity*>(entity);
	0AA5: call_function 0x563220 num_params 1 pop 1 [entity]

	// CWorld::Remove
	// plugin::Call<0x563280, CEntity*>(entity);
	0AA5: call_function 0x563280 num_params 1 pop 1 [entity]

	// CWorld::ProcessVerticalLineSectorList
	// plugin::CallAndReturn<bool, 0x5632B0, CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, CStoredCollPoly*>(ptrList, colLine, colPoint, maxTouchDistance, outEntity, doSeeThroughCheck, collPoly);
	0AA7: call_function_return 0x5632B0 num_params 7 pop 7 [ptrList] [colLine] [colPoint] [maxTouchDistance] [outEntity] [doSeeThroughCheck] [collPoly] func_ret [bool]

	// CWorld::CastShadowSectorList
	// plugin::Call<0x563390, CPtrList&, float, float, float, float>(ptrList, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x563390 num_params 5 pop 5 [ptrList] [arg1] [arg2] [arg3] [arg4]

	// CWorld::ProcessForAnimViewer
	// plugin::Call<0x5633D0>();
	0AA5: call_function 0x5633D0 num_params 0 pop 0

	// CWorld::ProcessPedsAfterPreRender
	// plugin::Call<0x563430>();
	0AA5: call_function 0x563430 num_params 0 pop 0

	// CWorld::ClearScanCodes
	// plugin::Call<0x563470>();
	0AA5: call_function 0x563470 num_params 0 pop 0

	// CWorld::FindObjectsInRangeSectorList
	// plugin::Call<0x563500, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(arg0, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x563500 num_params 7 pop 7 [arg0] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsOfTypeInRangeSectorList
	// plugin::Call<0x5635C0, unsigned int, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(modelId, ptrList, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x5635C0 num_params 8 pop 8 [modelId] [ptrList] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::ProcessVerticalLineSectorList_FillGlobeColPoints
	// plugin::CallAndReturn<bool, 0x5636A0, CPtrList&, CColLine const&, CEntity*&, bool, CStoredCollPoly*>(ptrList, colLine, outEntity, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x5636A0 num_params 5 pop 5 [ptrList] [colLine] [outEntity] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::RemoveStaticObjects
	// plugin::Call<0x563840>();
	0AA5: call_function 0x563840 num_params 0 pop 0

	// CWorld::TestForBuildingsOnTopOfEachOther
	// plugin::Call<0x563950, CPtrList&>(ptrList);
	0AA5: call_function 0x563950 num_params 1 pop 1 [ptrList]

	// CWorld::TestForUnusedModels
	// plugin::Call<0x5639D0, CPtrList&, int*>(ptrList, models);
	0AA5: call_function 0x5639D0 num_params 2 pop 2 [ptrList] [models]

	// CWorld::RemoveEntityInsteadOfProcessingIt
	// plugin::Call<0x563A10, CEntity*>(entity);
	0AA5: call_function 0x563A10 num_params 1 pop 1 [entity]

	// CWorld::CallOffChaseForAreaSectorListVehicles
	// plugin::Call<0x563A80, CPtrList&, float, float, float, float, float, float, float, float>(ptrList, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x563A80 num_params 9 pop 9 [ptrList] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::CallOffChaseForAreaSectorListPeds
	// plugin::Call<0x563D00, CPtrList&, float, float, float, float, float, float, float, float>(ptrList, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x563D00 num_params 9 pop 9 [ptrList] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::CameraToIgnoreThisObject
	// plugin::CallAndReturn<bool, 0x563F40, CEntity*>(entity);
	0AA7: call_function_return 0x563F40 num_params 1 pop 1 [entity] func_ret [bool]

	// CWorld::FindPlayerSlotWithPedPointer
	// plugin::CallAndReturn<int, 0x563FA0, void*>(ptr);
	0AA7: call_function_return 0x563FA0 num_params 1 pop 1 [ptr] func_ret [int]

	// CWorld::FindPlayerSlotWithRemoteVehiclePointer
	// plugin::CallAndReturn<int, 0x563FD0, void*>(ptr);
	0AA7: call_function_return 0x563FD0 num_params 1 pop 1 [ptr] func_ret [int]

	// CWorld::FindPlayerSlotWithVehiclePointer
	// plugin::Call<0x564000, CEntity*>(vehiclePtr);
	0AA5: call_function 0x564000 num_params 1 pop 1 [vehiclePtr]

	// CWorld::ShutDown
	// plugin::Call<0x564050>();
	0AA5: call_function 0x564050 num_params 0 pop 0

	// CWorld::ClearForRestart
	// plugin::Call<0x564360>();
	0AA5: call_function 0x564360 num_params 0 pop 0

	// CWorld::ProcessVerticalLineSector_FillGlobeColPoints
	// plugin::CallAndReturn<bool, 0x564420, CSector&, CRepeatSector&, CColLine const&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(sector, repeatSector, colLine, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x564420 num_params 11 pop 11 [sector] [repeatSector] [colLine] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::ProcessVerticalLineSector
	// plugin::CallAndReturn<bool, 0x564500, CSector&, CRepeatSector&, CColLine const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(sector, repeatSector, colLine, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x564500 num_params 12 pop 12 [sector] [repeatSector] [colLine] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::CastShadow
	// plugin::Call<0x564600, float, float, float, float>(x1, y1, x2, y2);
	0AA5: call_function 0x564600 num_params 4 pop 4 [x1] [y1] [x2] [y2]

	// CWorld::ProcessAttachedEntities
	// plugin::Call<0x5647F0>();
	0AA5: call_function 0x5647F0 num_params 0 pop 0

	// CWorld::GetIsLineOfSightSectorListClear
	// plugin::CallAndReturn<bool, 0x564970, CPtrList&, CColLine const&, bool, bool>(ptrList, colLine, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x564970 num_params 4 pop 4 [ptrList] [colLine] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::FindObjectsInRange
	// plugin::Call<0x564A20, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x564A20 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsOfTypeInRange
	// plugin::Call<0x564C70, unsigned int, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(modelId, point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x564C70 num_params 12 pop 12 [modelId] [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindLodOfTypeInRange
	// plugin::Call<0x564ED0, unsigned int, CVector const&, float, bool, short*, short, CEntity**>(modelId, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x564ED0 num_params 7 pop 7 [modelId] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsKindaCollidingSectorList
	// plugin::Call<0x565000, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(ptrList, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x565000 num_params 7 pop 7 [ptrList] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingCubeSectorList
	// plugin::Call<0x5650E0, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**>(ptrList, cornerA, cornerB, outCount, maxCount, outEntities);
	0AA5: call_function 0x5650E0 num_params 6 pop 6 [ptrList] [cornerA] [cornerB] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingAngledCollisionBoxSectorList
	// plugin::Call<0x565200, CPtrList&, CBox const&, CMatrix const&, CVector const&, short*, short, CEntity**>(ptrList, box, transform, point, outCount, maxCount, outEntities);
	0AA5: call_function 0x565200 num_params 7 pop 7 [ptrList] [box] [transform] [point] [outCount] [maxCount] [outEntities]

	// CWorld::FindMissionEntitiesIntersectingCubeSectorList
	// plugin::Call<0x565300, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(ptrList, cornerA, cornerB, outCount, maxCount, outEntities, vehiclesList, pedsList, objectsList);
	0AA5: call_function 0x565300 num_params 9 pop 9 [ptrList] [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehiclesList] [pedsList] [objectsList]

	// CWorld::FindNearestObjectOfTypeSectorList
	// plugin::Call<0x565450, int, CPtrList&, CVector const&, float, bool, CEntity**, float*>(modelId, ptrList, point, radius, b2D, outEntities, outDistance);
	0AA5: call_function 0x565450 num_params 7 pop 7 [modelId] [ptrList] [point] [radius] [b2D] [outEntities] [outDistance]

	// CWorld::RemoveReferencesToDeletedObject
	// plugin::Call<0x565510, CEntity*>(entity);
	0AA5: call_function 0x565510 num_params 1 pop 1 [entity]

	// CWorld::SetPedsOnFire
	// plugin::Call<0x565610, float, float, float, float, CEntity*>(x1, y1, x2, y2, fireCreator);
	0AA5: call_function 0x565610 num_params 5 pop 5 [x1] [y1] [x2] [y2] [fireCreator]

	// CWorld::SetPedsChoking
	// plugin::Call<0x565800, float, float, float, float, CEntity*>(x1, y1, x2, y2, gasCreator);
	0AA5: call_function 0x565800 num_params 5 pop 5 [x1] [y1] [x2] [y2] [gasCreator]

	// CWorld::SetCarsOnFire
	// plugin::Call<0x5659F0, float, float, float, float, CEntity*>(x1, y1, x2, y2, fireCreator);
	0AA5: call_function 0x5659F0 num_params 5 pop 5 [x1] [y1] [x2] [y2] [fireCreator]

	// CWorld::SprayPaintWorld
	// plugin::CallAndReturn<bool, 0x565B70, CVector&, CVector&, float, bool>(posn, outDir, radius, processTagAlphaState);
	0AA7: call_function_return 0x565B70 num_params 4 pop 4 [posn] [outDir] [radius] [processTagAlphaState] func_ret [bool]

	// CWorld::RemoveFallenPeds
	// plugin::Call<0x565CB0>();
	0AA5: call_function 0x565CB0 num_params 0 pop 0

	// CWorld::RemoveFallenCars
	// plugin::Call<0x565E80>();
	0AA5: call_function 0x565E80 num_params 0 pop 0

	// CWorld::UseDetonator
	// plugin::Call<0x5660B0, CEntity*>(creator);
	0AA5: call_function 0x5660B0 num_params 1 pop 1 [creator]

	// CWorld::TestSphereAgainstSectorList
	// plugin::CallAndReturn<CEntity*, 0x566140, CPtrList&, CVector, float, CEntity*, bool>(ptrList, sphereCenter, sphereRadius, ignoreEntity, doCameraIgnoreCheck);
	0AA7: call_function_return 0x566140 num_params 5 pop 5 [ptrList] [sphereCenter] [sphereRadius] [ignoreEntity] [doCameraIgnoreCheck] func_ret [CEntity*]

	// CWorld::PrintCarChanges
	// plugin::Call<0x566420>();
	0AA5: call_function 0x566420 num_params 0 pop 0

	// CWorld::TestForBuildingsOnTopOfEachOther
	// plugin::Call<0x5664A0>();
	0AA5: call_function 0x5664A0 num_params 0 pop 0

	// CWorld::TestForUnusedModels
	// plugin::Call<0x566510>();
	0AA5: call_function 0x566510 num_params 0 pop 0

	// CWorld::ClearCarsFromArea
	// plugin::Call<0x566610, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x566610 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::ClearPedsFromArea
	// plugin::Call<0x5667F0, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x5667F0 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::SetAllCarsCanBeDamaged
	// plugin::Call<0x5668F0, bool>(enable);
	0AA5: call_function 0x5668F0 num_params 1 pop 1 [enable]

	// CWorld::ExtinguishAllCarFiresInArea
	// plugin::Call<0x566950, CVector, float>(point, radius);
	0AA5: call_function 0x566950 num_params 2 pop 2 [point] [radius]

	// CWorld::CallOffChaseForArea
	// plugin::Call<0x566A60, float, float, float, float>(x1, y1, x2, y2);
	0AA5: call_function 0x566A60 num_params 4 pop 4 [x1] [y1] [x2] [y2]

	// CWorld::StopAllLawEnforcersInTheirTracks
	// plugin::Call<0x566C10>();
	0AA5: call_function 0x566C10 num_params 0 pop 0

	// CWorld::FindUnsuspectingTargetCar
	// plugin::CallAndReturn<CVehicle*, 0x566C90, CVector, CVector>(point, playerPosn);
	0AA7: call_function_return 0x566C90 num_params 2 pop 2 [point] [playerPosn] func_ret [CVehicle*]

	// CWorld::FindUnsuspectingTargetPed
	// plugin::CallAndReturn<CPed*, 0x566DA0, CVector, CVector>(point, playerPosn);
	0AA7: call_function_return 0x566DA0 num_params 2 pop 2 [point] [playerPosn] func_ret [CPed*]

	// CWorld::ProcessLineOfSightSectorList
	// plugin::CallAndReturn<bool, 0x566EE0, CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool>(ptrList, colLine, outColPoint, maxTouchDistance, outEntity, doSeeThroughCheck, doIgnoreCameraCheck, doShootThroughCheck);
	0AA7: call_function_return 0x566EE0 num_params 8 pop 8 [ptrList] [colLine] [outColPoint] [maxTouchDistance] [outEntity] [doSeeThroughCheck] [doIgnoreCameraCheck] [doShootThroughCheck] func_ret [bool]

	// CWorld::ProcessVerticalLine
	// plugin::CallAndReturn<bool, 0x5674E0, CVector const&, float, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(origin, distance, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x5674E0 num_params 11 pop 11 [origin] [distance] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::ProcessVerticalLine_FillGlobeColPoints
	// plugin::CallAndReturn<bool, 0x567620, CVector const&, float, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(origin, distance, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x567620 num_params 10 pop 10 [origin] [distance] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::TriggerExplosionSectorList
	// plugin::Call<0x567750, CPtrList&, CVector const&, float, float, CEntity*, CEntity*, bool, float>(ptrList, point, radius, visibleDistance, victim, creator, processVehicleBombTimer, damage);
	0AA5: call_function 0x567750 num_params 8 pop 8 [ptrList] [point] [radius] [visibleDistance] [victim] [creator] [processVehicleBombTimer] [damage]

	// CWorld::Process
	// plugin::Call<0x5684A0>();
	0AA5: call_function 0x5684A0 num_params 0 pop 0

	// CWorld::GetIsLineOfSightSectorClear
	// plugin::CallAndReturn<bool, 0x568AD0, CSector&, CRepeatSector&, CColLine const&, bool, bool, bool, bool, bool, bool, bool>(sector, repeatSector, colLine, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doIgnoreCameraCheck);
	0AA7: call_function_return 0x568AD0 num_params 10 pop 10 [sector] [repeatSector] [colLine] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doIgnoreCameraCheck] func_ret [bool]

	// CWorld::FindObjectsKindaColliding
	// plugin::Call<0x568B80, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x568B80 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingCube
	// plugin::Call<0x568DD0, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x568DD0 num_params 10 pop 10 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingAngledCollisionBox
	// plugin::Call<0x568FF0, CBox const&, CMatrix const&, CVector const&, float, float, float, float, short*, short, CEntity**, bool, bool, bool, bool, bool>(box, transform, point, x1, y1, x2, y2, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x568FF0 num_params 15 pop 15 [box] [transform] [point] [x1] [y1] [x2] [y2] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindMissionEntitiesIntersectingCube
	// plugin::Call<0x569240, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, vehicles, peds, objects);
	0AA5: call_function 0x569240 num_params 8 pop 8 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehicles] [peds] [objects]

	// CWorld::FindNearestObjectOfType
	// plugin::Call<0x5693F0, int, CVector const&, float, bool, bool, bool, bool, bool, bool>(modelId, point, radius, b2D, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x5693F0 num_params 9 pop 9 [modelId] [point] [radius] [b2D] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindGroundZForCoord
	// plugin::CallAndReturn<float, 0x569660, float, float>(x, y);
	0AA7: call_function_return 0x569660 num_params 2 pop 2 [x] [y] func_ret [float]

	// CWorld::FindGroundZFor3DCoord
	// plugin::CallAndReturn<float, 0x5696C0, float, float, float, bool*, CEntity**>(x, y, z, outResult, outEntity);
	0AA7: call_function_return 0x5696C0 num_params 5 pop 5 [x] [y] [z] [outResult] [outEntity] func_ret [float]

	// CWorld::FindRoofZFor3DCoord
	// plugin::CallAndReturn<float, 0x569750, float, float, float, bool*>(x, y, z, outResult);
	0AA7: call_function_return 0x569750 num_params 4 pop 4 [x] [y] [z] [outResult] func_ret [float]

	// CWorld::FindLowestZForCoord
	// plugin::CallAndReturn<float, 0x5697F0, float, float>(x, y);
	0AA7: call_function_return 0x5697F0 num_params 2 pop 2 [x] [y] func_ret [float]

	// CWorld::RepositionOneObject
	// plugin::Call<0x569850, CEntity*>(object);
	0AA5: call_function 0x569850 num_params 1 pop 1 [object]

	// CWorld::TestSphereAgainstWorld
	// plugin::CallAndReturn<CEntity*, 0x569E20, CVector, float, CEntity*, bool, bool, bool, bool, bool, bool>(sphereCenter, sphereRadius, arg2, buildings, vehicles, peds, objects, dummies, doCameraIgnoreCheck);
	0AA7: call_function_return 0x569E20 num_params 9 pop 9 [sphereCenter] [sphereRadius] [arg2] [buildings] [vehicles] [peds] [objects] [dummies] [doCameraIgnoreCheck] func_ret [CEntity*]

	// CWorld::ClearExcitingStuffFromArea
	// plugin::Call<0x56A0D0, CVector const&, float, unsigned char>(point, radius, bRemoveProjectilesAndShadows);
	0AA5: call_function 0x56A0D0 num_params 3 pop 3 [point] [radius] [bRemoveProjectilesAndShadows]

	// CWorld::GetIsLineOfSightClear
	// plugin::CallAndReturn<bool, 0x56A490, CVector const&, CVector const&, bool, bool, bool, bool, bool, bool, bool>(origin, target, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x56A490 num_params 9 pop 9 [origin] [target] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::ProcessLineOfSightSector
	// plugin::CallAndReturn<bool, 0x56B5E0, CSector&, CRepeatSector&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool>(sector, repeatSector, colLine, outColPoint, maxTouchDistance, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck, doShootThroughCheck);
	0AA7: call_function_return 0x56B5E0 num_params 14 pop 14 [sector] [repeatSector] [colLine] [outColPoint] [maxTouchDistance] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] [doShootThroughCheck] func_ret [bool]

	// CWorld::TriggerExplosion
	// plugin::Call<0x56B790, CVector const&, float, float, CEntity*, CEntity*, bool, float>(point, radius, visibleDistance, victim, creator, processVehicleBombTimer, damage);
	0AA5: call_function 0x56B790 num_params 7 pop 7 [point] [radius] [visibleDistance] [victim] [creator] [processVehicleBombTimer] [damage]

	// CWorld::SetWorldOnFire
	// plugin::Call<0x56B910, float, float, float, float, CEntity*>(x, y, z, radius, fireCreator);
	0AA5: call_function 0x56B910 num_params 5 pop 5 [x] [y] [z] [radius] [fireCreator]

	// CWorld::RepositionCertainDynamicObjects
	// plugin::Call<0x56B9C0>();
	0AA5: call_function 0x56B9C0 num_params 0 pop 0

	// CWorld::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x56BA00, CVector const&, CVector const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool>(origin, target, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck, doShootThroughCheck);
	0AA7: call_function_return 0x56BA00 num_params 12 pop 12 [origin] [target] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] [doShootThroughCheck] func_ret [bool]

	// GetCurrentScanCode
	// plugin::CallAndReturn<short, 0x407250>();
	0AA7: call_function_return 0x407250 num_params 0 pop 0 func_ret [short]

	// GetSector
	// plugin::CallAndReturn<CSector*, 0x407260, int, int>(x, y);
	0AA7: call_function_return 0x407260 num_params 2 pop 2 [x] [y] func_ret [CSector*]

	// GetRepeatSector
	// plugin::CallAndReturn<CRepeatSector*, 0x4072A0, int, int>(x, y);
	0AA7: call_function_return 0x4072A0 num_params 2 pop 2 [x] [y] func_ret [CRepeatSector*]

	// GetLodPtrList
	// plugin::CallAndReturn<CPtrListSingleLink*, 0x4072C0, int, int>(x, y);
	0AA7: call_function_return 0x4072C0 num_params 2 pop 2 [x] [y] func_ret [CPtrListSingleLink*]

	// SetNextScanCode
	// plugin::Call<0x4072E0>();
	0AA5: call_function 0x4072E0 num_params 0 pop 0

plugin_sa\game_sa\D3DIndexDataBuffer.cpp:

	// D3DIndexDataBuffer::Clear
	// plugin::CallMethod<0x7301D0, D3DIndexDataBuffer *>(this);
	0AA6: call_method 0x7301D0 struct [D3DIndexDataBuffer] num_params 0 pop 0

	// D3DIndexDataBuffer::Destroy
	// plugin::CallMethod<0x730200, D3DIndexDataBuffer *>(this);
	0AA6: call_method 0x730200 struct [D3DIndexDataBuffer] num_params 0 pop 0

	// D3DIndexDataBuffer::GetTotalDataSize
	// plugin::CallMethodAndReturn<unsigned int, 0x7303B0, D3DIndexDataBuffer *>(this);
	0AA8: call_method_return 0x7303B0 struct [D3DIndexDataBuffer] num_params 0 pop 0 func_ret [unsigned int]

	// D3DIndexDataBuffer::Resize
	// plugin::CallMethod<0x730330, D3DIndexDataBuffer *, unsigned int>(this, newCapacity);
	0AA6: call_method 0x730330 struct [D3DIndexDataBuffer] num_params 1 pop 0 [newCapacity]

	// D3DIndexDataBuffer::Setup
	// plugin::CallMethod<0x730190, D3DIndexDataBuffer *, unsigned int, int, unsigned int>(this, format, _f4, capacity);
	0AA6: call_method 0x730190 struct [D3DIndexDataBuffer] num_params 3 pop 0 [format] [_f4] [capacity]

	// D3DIndexDataBuffer::Pop
	// plugin::CallMethodAndReturn<IDirect3DIndexBuffer9*, 0x730250, D3DIndexDataBuffer *>(this);
	0AA8: call_method_return 0x730250 struct [D3DIndexDataBuffer] num_params 0 pop 0 func_ret [IDirect3DIndexBuffer9*]

	// D3DIndexDataBuffer::Pop
	// plugin::CallMethodAndReturn<IDirect3DIndexBuffer9*, 0x730270, D3DIndexDataBuffer *, unsigned int>(this, indexCount);
	0AA8: call_method_return 0x730270 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexCount] func_ret [IDirect3DIndexBuffer9*]

	// D3DIndexDataBuffer::Push
	// plugin::CallMethodAndReturn<bool, 0x730300, D3DIndexDataBuffer *, IDirect3DIndexBuffer9*>(this, indexBuffer);
	0AA8: call_method_return 0x730300 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexBuffer] func_ret [bool]

	// D3DIndexDataBuffer::PushWithoutIncreasingCounter
	// plugin::CallMethodAndReturn<bool, 0x730B00, D3DIndexDataBuffer *, IDirect3DIndexBuffer9*>(this, indexBuffer);
	0AA8: call_method_return 0x730B00 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexBuffer] func_ret [bool]

	// D3DIndexDataBuffer::Pop
	// plugin::CallMethodAndReturn<void*, 0x730250, D3DIndexDataBuffer *>(this);
	0AA8: call_method_return 0x730250 struct [D3DIndexDataBuffer] num_params 0 pop 0 func_ret [void*]

	// D3DIndexDataBuffer::Pop
	// plugin::CallMethodAndReturn<void*, 0x730270, D3DIndexDataBuffer *, unsigned int>(this, indexCount);
	0AA8: call_method_return 0x730270 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexCount] func_ret [void*]

	// D3DIndexDataBuffer::Push
	// plugin::CallMethodAndReturn<bool, 0x730300, D3DIndexDataBuffer *, void*>(this, indexBuffer);
	0AA8: call_method_return 0x730300 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexBuffer] func_ret [bool]

	// D3DIndexDataBuffer::PushWithoutIncreasingCounter
	// plugin::CallMethodAndReturn<bool, 0x730B00, D3DIndexDataBuffer *, void*>(this, indexBuffer);
	0AA8: call_method_return 0x730B00 struct [D3DIndexDataBuffer] num_params 1 pop 0 [indexBuffer] func_ret [bool]

plugin_sa\game_sa\D3DResourceSystem.cpp:

	// D3DResourceSystem::CancelBuffering
	// plugin::Call<0x730900>();
	0AA5: call_function 0x730900 num_params 0 pop 0

	// D3DResourceSystem::GetTotalIndexDataSize
	// plugin::CallAndReturn<unsigned int, 0x7307F0>();
	0AA7: call_function_return 0x7307F0 num_params 0 pop 0 func_ret [unsigned int]

	// D3DResourceSystem::GetTotalPixelsSize
	// plugin::CallAndReturn<unsigned int, 0x730660>();
	0AA7: call_function_return 0x730660 num_params 0 pop 0 func_ret [unsigned int]

	// D3DResourceSystem::Init
	// plugin::Call<0x730830>();
	0AA5: call_function 0x730830 num_params 0 pop 0

	// D3DResourceSystem::SetUseD3DResourceBuffering
	// plugin::Call<0x730AC0, bool>(bUse);
	0AA5: call_function 0x730AC0 num_params 1 pop 1 [bUse]

	// D3DResourceSystem::Shutdown
	// plugin::Call<0x730A00>();
	0AA5: call_function 0x730A00 num_params 0 pop 0

	// D3DResourceSystem::TidyUpD3DIndexBuffers
	// plugin::Call<0x730740, unsigned int>(count);
	0AA5: call_function 0x730740 num_params 1 pop 1 [count]

	// D3DResourceSystem::TidyUpD3DTextures
	// plugin::Call<0x7305E0, unsigned int>(count);
	0AA5: call_function 0x7305E0 num_params 1 pop 1 [count]

	// D3DResourceSystem::CreateIndexBuffer
	// plugin::CallAndReturn<HRESULT, 0x7306A0, unsigned int, unsigned int, IDirect3DIndexBuffer9**>(numIndices, format, ppIndexBuffer);
	0AA7: call_function_return 0x7306A0 num_params 3 pop 3 [numIndices] [format] [ppIndexBuffer] func_ret [HRESULT]

	// D3DResourceSystem::CreateTexture
	// plugin::CallAndReturn<HRESULT, 0x730510, int, int, unsigned int, IDirect3DTexture9**>(width, height, format, ppTexture);
	0AA7: call_function_return 0x730510 num_params 4 pop 4 [width] [height] [format] [ppTexture] func_ret [HRESULT]

	// D3DResourceSystem::DestroyIndexBuffer
	// plugin::Call<0x730D30, IDirect3DIndexBuffer9*>(pIndexBuffer);
	0AA5: call_function 0x730D30 num_params 1 pop 1 [pIndexBuffer]

	// D3DResourceSystem::DestroyTexture
	// plugin::Call<0x730B70, IDirect3DTexture9*>(pTexture);
	0AA5: call_function 0x730B70 num_params 1 pop 1 [pTexture]

	// D3DResourceSystem::CreateIndexBuffer
	// plugin::CallAndReturn<int, 0x7306A0, unsigned int, unsigned int, void**>(numIndices, format, ppIndexBuffer);
	0AA7: call_function_return 0x7306A0 num_params 3 pop 3 [numIndices] [format] [ppIndexBuffer] func_ret [int]

	// D3DResourceSystem::CreateTexture
	// plugin::CallAndReturn<int, 0x730510, int, int, unsigned int, void**>(width, height, format, ppTexture);
	0AA7: call_function_return 0x730510 num_params 4 pop 4 [width] [height] [format] [ppTexture] func_ret [int]

	// D3DResourceSystem::DestroyIndexBuffer
	// plugin::Call<0x730D30, void*>(pIndexBuffer);
	0AA5: call_function 0x730D30 num_params 1 pop 1 [pIndexBuffer]

	// D3DResourceSystem::DestroyTexture
	// plugin::Call<0x730B70, void*>(pTexture);
	0AA5: call_function 0x730B70 num_params 1 pop 1 [pTexture]

plugin_sa\game_sa\D3DTextureBuffer.cpp:

	// D3DTextureBuffer::Clear
	// plugin::CallMethod<0x72FEC0, D3DTextureBuffer *>(this);
	0AA6: call_method 0x72FEC0 struct [D3DTextureBuffer] num_params 0 pop 0

	// D3DTextureBuffer::Destroy
	// plugin::CallMethod<0x72FEF0, D3DTextureBuffer *>(this);
	0AA6: call_method 0x72FEF0 struct [D3DTextureBuffer] num_params 0 pop 0

	// D3DTextureBuffer::GetTotalDataSize
	// plugin::CallMethodAndReturn<unsigned int, 0x7300A0, D3DTextureBuffer *>(this);
	0AA8: call_method_return 0x7300A0 struct [D3DTextureBuffer] num_params 0 pop 0 func_ret [unsigned int]

	// D3DTextureBuffer::Resize
	// plugin::CallMethod<0x730020, D3DTextureBuffer *, unsigned int>(this, newCapacity);
	0AA6: call_method 0x730020 struct [D3DTextureBuffer] num_params 1 pop 0 [newCapacity]

	// D3DTextureBuffer::Setup
	// plugin::CallMethod<0x72FE80, D3DTextureBuffer *, unsigned int, int, int, unsigned int>(this, format, width, bOneLevel, capacity);
	0AA6: call_method 0x72FE80 struct [D3DTextureBuffer] num_params 4 pop 0 [format] [width] [bOneLevel] [capacity]

	// D3DTextureBuffer::Pop
	// plugin::CallMethodAndReturn<IDirect3DTexture9*, 0x72FF40, D3DTextureBuffer *>(this);
	0AA8: call_method_return 0x72FF40 struct [D3DTextureBuffer] num_params 0 pop 0 func_ret [IDirect3DTexture9*]

	// D3DTextureBuffer::Pop
	// plugin::CallMethodAndReturn<IDirect3DTexture9*, 0x72FF60, D3DTextureBuffer *, unsigned int, int, int, int>(this, format, width, height, bOneLevel);
	0AA8: call_method_return 0x72FF60 struct [D3DTextureBuffer] num_params 4 pop 0 [format] [width] [height] [bOneLevel] func_ret [IDirect3DTexture9*]

	// D3DTextureBuffer::Push
	// plugin::CallMethodAndReturn<bool, 0x72FFF0, D3DTextureBuffer *, IDirect3DTexture9*>(this, texture);
	0AA8: call_method_return 0x72FFF0 struct [D3DTextureBuffer] num_params 1 pop 0 [texture] func_ret [bool]

	// D3DTextureBuffer::PushWithoutIncreasingCounter
	// plugin::CallMethodAndReturn<bool, 0x730AD0, D3DTextureBuffer *, IDirect3DTexture9*>(this, texture);
	0AA8: call_method_return 0x730AD0 struct [D3DTextureBuffer] num_params 1 pop 0 [texture] func_ret [bool]

	// D3DTextureBuffer::Pop
	// plugin::CallMethodAndReturn<void*, 0x72FF40, D3DTextureBuffer *>(this);
	0AA8: call_method_return 0x72FF40 struct [D3DTextureBuffer] num_params 0 pop 0 func_ret [void*]

	// D3DTextureBuffer::Pop
	// plugin::CallMethodAndReturn<void*, 0x72FF60, D3DTextureBuffer *, unsigned int, int, int, int>(this, format, width, height, bOneLevel);
	0AA8: call_method_return 0x72FF60 struct [D3DTextureBuffer] num_params 4 pop 0 [format] [width] [height] [bOneLevel] func_ret [void*]

	// D3DTextureBuffer::Push
	// plugin::CallMethodAndReturn<bool, 0x72FFF0, D3DTextureBuffer *, void*>(this, texture);
	0AA8: call_method_return 0x72FFF0 struct [D3DTextureBuffer] num_params 1 pop 0 [texture] func_ret [bool]

	// D3DTextureBuffer::PushWithoutIncreasingCounter
	// plugin::CallMethodAndReturn<bool, 0x730AD0, D3DTextureBuffer *, void*>(this, texture);
	0AA8: call_method_return 0x730AD0 struct [D3DTextureBuffer] num_params 1 pop 0 [texture] func_ret [bool]

plugin_sa\game_sa\JPegCompress.cpp:

	// assert
	// plugin::Call<0x005D0820>(pCamera, pszPath);
	0AA5: call_function 0x005D0820 num_params 2 pop 2 [pCamera] [pszPath]

	// assert
	// plugin::Call<0x005D0740>(pCamera, pBuffer, pSize);
	0AA5: call_function 0x005D0740 num_params 3 pop 3 [pCamera] [pBuffer] [pSize]

	// assert
	// plugin::CallAndReturn<RwBool, 0x005D07A0>(pRaster, pBuffer);
	0AA7: call_function_return 0x005D07A0 num_params 2 pop 2 [pRaster] [pBuffer] func_ret [RwBool]

plugin_sa\game_sa\List_c.cpp:

	// List_c::List_c
	// plugin::CallMethod<0x004A8DD0>(this);
	0AA6: call_method 0x004A8DD0 struct [List_c] num_params 0 pop 0

	// List_c::~List_c
	// plugin::CallMethod<0x004A8DE0>(this);
	0AA6: call_method 0x004A8DE0 struct [List_c] num_params 0 pop 0

	// assert
	// plugin::CallMethod<0x004A8DF0, List_c *, ListItem_c *>(this, pItem);
	// assert
	// plugin::CallMethod<0x004A8E30, List_c *, ListItem_c *>(this, pItem);
	// List_c::RemoveHead
	// plugin::CallMethodAndReturn<ListItem_c *, 0x004A8E70, List_c *>(this);
	0AA8: call_method_return 0x004A8E70 struct [List_c] num_params 0 pop 0 func_ret [ListItem_c *]

	// assert
	// plugin::CallMethodAndReturn<ListItem_c *, 0x004A9000, List_c *, ListItem_c *>(this, pItem);
	// List_c::GetItemOffset
	// plugin::CallMethodAndReturn<ListItem_c *, 0x004A9010, List_c *, bool, int>(this, bFromHead, iOffset);
	0AA8: call_method_return 0x004A9010 struct [List_c] num_params 2 pop 0 [bFromHead] [iOffset] func_ret [ListItem_c *]

plugin_sa\game_sa\ListItem_c.cpp:

	// ListItem_c::ListItem_c
	// plugin::CallMethod<0x004A8DB0>(this);
	0AA6: call_method 0x004A8DB0 struct [ListItem_c] num_params 0 pop 0

	// ListItem_c::~ListItem_c
	// plugin::CallMethod<0x004A8DC0>(this);
	0AA6: call_method 0x004A8DC0 struct [ListItem_c] num_params 0 pop 0

plugin_sa\game_sa\PipelinePlugin.cpp:

	// PipelinePluginAttach
	// plugin::CallAndReturn<RwBool, 0x0072FBD0>();
	0AA7: call_function_return 0x0072FBD0 num_params 0 pop 0 func_ret [RwBool]

	// assert
	// plugin::CallAndReturn<RwUInt32, 0x0072FC40>(pAtomic);
	0AA7: call_function_return 0x0072FC40 num_params 1 pop 1 [pAtomic] func_ret [RwUInt32]

	// assert
	// plugin::Call<0x0072FC50>(pAtomic, uPipelineID);
	0AA5: call_function 0x0072FC50 num_params 2 pop 2 [pAtomic] [uPipelineID]

plugin_sa\game_sa\RenderWare.cpp:

	// RsEventHandler
	// plugin::CallAndReturn<RsEventStatus, 0x619B60, RsEvent, void*>(e, param);
	0AA7: call_function_return 0x619B60 num_params 2 pop 2 [e] [param] func_ret [RsEventStatus]

	// _rwObjectHasFrameSetFrame
	// plugin::Call<0x804EF0, void *, RwFrame *>(object, frame);
	0AA5: call_function 0x804EF0 num_params 2 pop 2 [object] [frame]

	// _rwObjectHasFrameReleaseFrame
	// plugin::Call<0x804F40, void *>(object);
	0AA5: call_function 0x804F40 num_params 1 pop 1 [object]

	// *_rpD3D9SkinVertexShaderMatrixUpdate
	// plugin::CallAndReturn<RpAtomic *, 0x7C78A0, RwMatrix *, RpAtomic *, RpSkin *>(matrices, atomic, skin);
	0AA7: call_function_return 0x7C78A0 num_params 3 pop 3 [matrices] [atomic] [skin] func_ret [RpAtomic *]

	// _rwD3D9SetStreams
	// plugin::Call<0x7FA090, RxD3D9VertexStream *, RwBool>(streams, useOffsets);
	0AA5: call_function 0x7FA090 num_params 2 pop 2 [streams] [useOffsets]

	// _rwD3D9RenderStateVertexAlphaEnable
	// plugin::CallAndReturn<RwBool, 0x7FE0A0, RwBool>(enable);
	0AA7: call_function_return 0x7FE0A0 num_params 1 pop 1 [enable] func_ret [RwBool]

	// _rwD3D9RenderStateIsVertexAlphaEnable
	// plugin::CallAndReturn<RwBool, 0x7FE190>();
	0AA7: call_function_return 0x7FE190 num_params 0 pop 0 func_ret [RwBool]

	// _rwD3D9CheckValidCameraTextureFormat
	// plugin::CallAndReturn<RwBool, 0x4CBE20, RwUInt32>(format);
	0AA7: call_function_return 0x4CBE20 num_params 1 pop 1 [format] func_ret [RwBool]

	// _rwD3D9SetVertexDeclaration
	// plugin::Call<0x7F9F70, void *>(vertexDeclaration);
	0AA5: call_function 0x7F9F70 num_params 1 pop 1 [vertexDeclaration]

	// _rwD3D9SetIndices
	// plugin::Call<0x7FA1C0, void *>(indices);
	0AA5: call_function 0x7FA1C0 num_params 1 pop 1 [indices]

	// _rwD3D9DrawPrimitive
	// plugin::Call<0x7FA360, RwUInt32, RwUInt32, RwUInt32>(primitiveType, startIndex, primitiveCount);
	0AA5: call_function 0x7FA360 num_params 3 pop 3 [primitiveType] [startIndex] [primitiveCount]

	// _rwStreamReadChunkHeader
	// plugin::CallAndReturn<RwBool, 0x7ED0F0, RwStream *, RwUInt32 *, RwUInt32 *, RwUInt32 *, RwUInt32 *>(stream, pType, pLength, pVersion, pBuild);
	0AA7: call_function_return 0x7ED0F0 num_params 5 pop 5 [stream] [pType] [pLength] [pVersion] [pBuild] func_ret [RwBool]

plugin_sa\game_sa\meta\meta.CAnimBlendAssociation.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), reinterpret_cast<CAnimBlendAssociation *>(objBuff));

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendHierarchy &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendHierarchy &)), reinterpret_cast<CAnimBlendAssociation *>(objBuff), rhs);

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendHierarchy *>(ctor_gaddr_o(CAnimBlendAssociation, void(RpClump *, CAnimBlendHierarchy *)), reinterpret_cast<CAnimBlendAssociation *>(objBuff), clump, hier);

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendAssociation &)), reinterpret_cast<CAnimBlendAssociation *>(objBuff), rhs);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(dtor_gaddr(CAnimBlendAssociation), reinterpret_cast<CAnimBlendAssociation *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *>(ctor_gaddr(CAnimBlendAssociation), &objArray[i]);

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendHierarchy &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendHierarchy &)), obj, rhs);

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, RpClump *, CAnimBlendHierarchy *>(ctor_gaddr_o(CAnimBlendAssociation, void(RpClump *, CAnimBlendHierarchy *)), obj, clump, hier);

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendAssociation *, CAnimBlendAssociation &>(ctor_gaddr_o(CAnimBlendAssociation, void(CAnimBlendAssociation &)), obj, rhs);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendAssociation *, unsigned char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendAssociation *, unsigned char>(&objArray[i], 1);

plugin_sa\game_sa\meta\meta.CAnimBlendStaticAssociation.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *>(ctor_gaddr(CAnimBlendStaticAssociation), reinterpret_cast<CAnimBlendStaticAssociation *>(objBuff));

	// stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *, RpClump *, CAnimBlendHierarchy *>(ctor_gaddr_o(CAnimBlendStaticAssociation, void(RpClump *, CAnimBlendHierarchy *)), reinterpret_cast<CAnimBlendStaticAssociation *>(objBuff), clump, hierarchy);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *>(dtor_gaddr(CAnimBlendStaticAssociation), reinterpret_cast<CAnimBlendStaticAssociation *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *>(ctor_gaddr(CAnimBlendStaticAssociation), obj);

	// 
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *>(ctor_gaddr(CAnimBlendStaticAssociation), &objArray[i]);

	// *>
	// plugin::CallMethodDynGlobal<CAnimBlendStaticAssociation *, RpClump *, CAnimBlendHierarchy *>(ctor_gaddr_o(CAnimBlendStaticAssociation, void(RpClump *, CAnimBlendHierarchy *)), obj, clump, hierarchy);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendStaticAssociation *, unsigned char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CAnimBlendStaticAssociation *, unsigned char>(objArray, 3);

plugin_sa\game_sa\meta\meta.CCamera.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CCamera *>(ctor_gaddr(CCamera), reinterpret_cast<CCamera *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CCamera *>(dtor_gaddr(CCamera), reinterpret_cast<CCamera *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CCamera *>(ctor_gaddr(CCamera), obj);

	// 
	// plugin::CallMethodDynGlobal<CCamera *>(ctor_gaddr(CCamera), &objArray[i]);

	// 
	// plugin::CallVirtualMethod<0, CCamera *, char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<0, CCamera *, char>(&objArray[i], 1);

plugin_sa\game_sa\meta\meta.CEntryExit.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CEntryExit *>(ctor_gaddr(CEntryExit), reinterpret_cast<CEntryExit *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CEntryExit *>(ctor_gaddr(CEntryExit), obj);

	// 
	// plugin::CallMethodDynGlobal<CEntryExit *>(ctor_gaddr(CEntryExit), &objArray[i]);

plugin_sa\game_sa\meta\meta.CGangInfo.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), reinterpret_cast<CGangInfo *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), reinterpret_cast<CGangInfo *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(ctor_gaddr(CGangInfo), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CGangInfo *>(dtor_gaddr(CGangInfo), &objArray[i]);

plugin_sa\game_sa\meta\meta.CMatrixLink.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CMatrixLink *>(ctor_gaddr(CMatrixLink), reinterpret_cast<CMatrixLink *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CMatrixLink *>(dtor_gaddr(CMatrixLink), reinterpret_cast<CMatrixLink *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CMatrixLink *>(ctor_gaddr(CMatrixLink), obj);

	// 
	// plugin::CallMethodDynGlobal<CMatrixLink *>(ctor_gaddr(CMatrixLink), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CMatrixLink *>(dtor_gaddr(CMatrixLink), obj);

	// 
	// plugin::CallMethodDynGlobal<CMatrixLink *>(dtor_gaddr(CMatrixLink), &objArray[i]);

plugin_sa\game_sa\meta\meta.CPedGroup.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPedGroup *>(ctor_gaddr(CPedGroup), reinterpret_cast<CPedGroup *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPedGroup *>(dtor_gaddr(CPedGroup), reinterpret_cast<CPedGroup *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPedGroup *>(ctor_gaddr(CPedGroup), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroup *>(ctor_gaddr(CPedGroup), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPedGroup *>(dtor_gaddr(CPedGroup), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroup *>(dtor_gaddr(CPedGroup), &objArray[i]);

plugin_sa\game_sa\meta\meta.CPedGroupIntelligence.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(ctor_gaddr(CPedGroupIntelligence), reinterpret_cast<CPedGroupIntelligence *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(dtor_gaddr(CPedGroupIntelligence), reinterpret_cast<CPedGroupIntelligence *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(ctor_gaddr(CPedGroupIntelligence), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(ctor_gaddr(CPedGroupIntelligence), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(dtor_gaddr(CPedGroupIntelligence), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupIntelligence *>(dtor_gaddr(CPedGroupIntelligence), &objArray[i]);

plugin_sa\game_sa\meta\meta.CPedGroupMembership.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(ctor_gaddr(CPedGroupMembership), reinterpret_cast<CPedGroupMembership *>(objBuff));

	// stack_object
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPedGroupMembership const *>(ctor_gaddr_o(CPedGroupMembership, void(CPedGroupMembership const *)), reinterpret_cast<CPedGroupMembership *>(objBuff), Obj);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(dtor_gaddr(CPedGroupMembership), reinterpret_cast<CPedGroupMembership *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(ctor_gaddr(CPedGroupMembership), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(ctor_gaddr(CPedGroupMembership), &objArray[i]);

	// *>
	// plugin::CallMethodDynGlobal<CPedGroupMembership *, CPedGroupMembership const *>(ctor_gaddr_o(CPedGroupMembership, void(CPedGroupMembership const *)), obj, Obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(dtor_gaddr(CPedGroupMembership), obj);

	// 
	// plugin::CallMethodDynGlobal<CPedGroupMembership *>(dtor_gaddr(CPedGroupMembership), &objArray[i]);

plugin_vc\game_vc\C_PcSave.cpp:

	// C_PcSave::DeleteSlot
	// plugin::CallMethodAndReturnDynGlobal<bool, C_PcSave *, int>(gaddrof(C_PcSave::DeleteSlot), this, slot);
	0AA8: call_method_return 0x61D430 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [bool]

	// C_PcSave::PcClassSaveRoutine
	// plugin::CallMethodAndReturnDynGlobal<bool, C_PcSave *, int, unsigned char *, unsigned int>(gaddrof(C_PcSave::PcClassSaveRoutine), this, file, data, size);
	0AA8: call_method_return 0x61D7A0 struct [C_PcSave] num_params 3 pop 0 [file] [data] [size] func_ret [bool]

	// C_PcSave::PopulateSlotInfo
	// plugin::CallMethodDynGlobal<C_PcSave *>(gaddrof(C_PcSave::PopulateSlotInfo), this);

	// C_PcSave::SaveSlot
	// plugin::CallMethodAndReturnDynGlobal<char, C_PcSave *, int>(gaddrof(C_PcSave::SaveSlot), this, slot);
	0AA8: call_method_return 0x61D8B0 struct [C_PcSave] num_params 1 pop 0 [slot] func_ret [char]

	// C_PcSave::SetSaveDirectory
	// plugin::CallDynGlobal<char const *>(gaddrof(C_PcSave::SetSaveDirectory), path);

plugin_vc\game_vc\C3dMarker.cpp:

	// C3dMarker::AddMarker
	// plugin::CallMethodDynGlobal<C3dMarker *, unsigned int, unsigned short, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, float, unsigned short>(gaddrof(C3dMarker::AddMarker), this, nId, nType, fSize, bRed, bGreen, bBlue, bAlpha, nPulsePeriod, fPulseFraction, nRotateRate);

	// C3dMarker::Render
	// plugin::CallMethodDynGlobal<C3dMarker *>(gaddrof(C3dMarker::Render), this);

plugin_vc\game_vc\C3dMarkers.cpp:

	// C3dMarkers::PlaceMarkerSet
	// plugin::Call<0x570270, unsigned int, unsigned short, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short>(id, type, pos, size, r, g, b, a, pulsePeriod, pulseFraction, rotateRate);
	0AA5: call_function 0x570270 num_params 11 pop 11 [id] [type] [pos] [size] [r] [g] [b] [a] [pulsePeriod] [pulseFraction] [rotateRate]

plugin_vc\game_vc\CAnimBlendAssociation.cpp:

	// CAnimBlendAssociation::~CAnimBlendAssociation
	// plugin::CallVirtualMethod<0, CAnimBlendAssociation *>(this, 1);

plugin_vc\game_vc\CAnimManager.cpp:

	// CAnimManager::GetAnimationBlockIndex
	// plugin::CallAndReturn<int, 0x4059E0, char const*>(name);
	0AA7: call_function_return 0x4059E0 num_params 1 pop 1 [name] func_ret [int]

	// *CAnimManager::GetAnimationBlock
	// plugin::CallAndReturn<CAnimBlock*, 0x405A50, char const*>(name);
	0AA7: call_function_return 0x405A50 num_params 1 pop 1 [name] func_ret [CAnimBlock*]

	// *CAnimManager::BlendAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x405640, RpClump*, int, int, float>(clump, assocGroupId, animationId, clumpAssocBlendData);
	0AA7: call_function_return 0x405640 num_params 4 pop 4 [clump] [assocGroupId] [animationId] [clumpAssocBlendData] func_ret [CAnimBlendAssociation*]

	// CAnimManager::AddAnimation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4058B0, RpClump*, int, int>(clump, assocGroupId, animationId);
	0AA7: call_function_return 0x4058B0 num_params 3 pop 3 [clump] [assocGroupId] [animationId] func_ret [CAnimBlendAssociation*]

	// CAnimManager::GetAnimAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x405940, int, const char*>(assocGroupId, name);
	0AA7: call_function_return 0x405940 num_params 2 pop 2 [assocGroupId] [name] func_ret [CAnimBlendAssociation*]

	// CAnimManager::GetAnimAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x405960, int, int>(assocGroupId, animationId);
	0AA7: call_function_return 0x405960 num_params 2 pop 2 [assocGroupId] [animationId] func_ret [CAnimBlendAssociation*]

plugin_vc\game_vc\cAudioManager.cpp:

	// cAudioManager::FindVehicleOfPlayer
	// plugin::CallAndReturn<CVehicle*, 0x5F5A60>();
	0AA7: call_function_return 0x5F5A60 num_params 0 pop 0 func_ret [CVehicle*]

plugin_vc\game_vc\cAudioScriptObject.cpp:

	// cAudioScriptObject::LoadAllAudioScriptObjects
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(cAudioScriptObject::LoadAllAudioScriptObjects), buffer, size);

	// cAudioScriptObject::SaveAllAudioScriptObjects
	// plugin::CallDynGlobal<unsigned char *, int *>(gaddrof(cAudioScriptObject::SaveAllAudioScriptObjects), buffer, outSize);

plugin_vc\game_vc\CAutomobile.cpp:

	// CAutomobile::AddDamagedVehicleParticles
	// plugin::CallMethod<0x5920A0, CAutomobile *>(this);
	0AA6: call_method 0x5920A0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::AddWheelDirtAndWater
	// plugin::CallMethodAndReturn<bool, 0x591B90, CAutomobile *, CColPoint&, unsigned int>(this, colPoint, arg1);
	0AA8: call_method_return 0x591B90 struct [CAutomobile] num_params 2 pop 0 [colPoint] [arg1] func_ret [bool]

	// CAutomobile::BlowUpCarsInPath
	// plugin::CallMethod<0x5863D0, CAutomobile *>(this);
	0AA6: call_method 0x5863D0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::CAutomobile
	// plugin::CallMethod<0x59E620, CAutomobile *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x59E620 struct [CAutomobile] num_params 2 pop 0 [modelIndex] [createdBy]

	// CAutomobile::ClearHeliOrientation
	// plugin::CallMethod<0x59B490, CAutomobile *>(this);
	0AA6: call_method 0x59B490 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::CloseBoot
	// plugin::CallMethod<0x585D80, CAutomobile *>(this);
	0AA6: call_method 0x585D80 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::DoDriveByShootings
	// plugin::CallMethod<0x5C97B0, CAutomobile *>(this);
	0AA6: call_method 0x5C97B0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::DoHoverSuspensionRatios
	// plugin::CallMethod<0x585B60, CAutomobile *>(this);
	0AA6: call_method 0x585B60 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::FireTruckControl
	// plugin::CallMethod<0x57AB30, CAutomobile *, float>(this, arg0);
	0AA6: call_method 0x57AB30 struct [CAutomobile] num_params 1 pop 0 [arg0]

	// CAutomobile::Fix
	// plugin::CallMethod<0x588530, CAutomobile *>(this);
	0AA6: call_method 0x588530 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::HasCarStoppedBecauseOfLight
	// plugin::CallMethodAndReturn<bool, 0x435570, CAutomobile *>(this);
	0AA8: call_method_return 0x435570 struct [CAutomobile] num_params 0 pop 0 func_ret [bool]

	// CAutomobile::HydraulicControl
	// plugin::CallMethod<0x59D260, CAutomobile *>(this);
	0AA6: call_method 0x59D260 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::KnockPedOutCar
	// plugin::CallMethodAndReturn<CPed*, 0x585F20, CAutomobile *, eWeaponType, unsigned short, CPed*>(this, weapon, arg1, ped);
	0AA8: call_method_return 0x585F20 struct [CAutomobile] num_params 3 pop 0 [weapon] [arg1] [ped] func_ret [CPed*]

	// CAutomobile::PlaceOnRoadProperly
	// plugin::CallMethod<0x586110, CAutomobile *>(this);
	0AA6: call_method 0x586110 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::PlayHornIfNecessary
	// plugin::CallMethod<0x5881F0, CAutomobile *>(this);
	0AA6: call_method 0x5881F0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::PopBoot
	// plugin::CallMethod<0x585E60, CAutomobile *>(this);
	0AA6: call_method 0x585E60 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::PopBootUsingPhysics
	// plugin::CallMethod<0x585E20, CAutomobile *>(this);
	0AA6: call_method 0x585E20 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::ProcessAutoBusDoors
	// plugin::CallMethod<0x586EC0, CAutomobile *>(this);
	0AA6: call_method 0x586EC0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::ProcessBuoyancy
	// plugin::CallMethod<0x599B30, CAutomobile *>(this);
	0AA6: call_method 0x599B30 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::ProcessSwingingDoor
	// plugin::CallMethod<0x592C40, CAutomobile *, int, eDoors>(this, nodeIndex, door);
	0AA6: call_method 0x592C40 struct [CAutomobile] num_params 2 pop 0 [nodeIndex] [door]

	// CAutomobile::RcbanditCheck1CarWheels
	// plugin::CallMethodAndReturn<bool, 0x5878E0, CAutomobile *, CPtrList&>(this, ptrlist);
	0AA8: call_method_return 0x5878E0 struct [CAutomobile] num_params 1 pop 0 [ptrlist] func_ret [bool]

	// CAutomobile::RcbanditCheckHitWheels
	// plugin::CallMethodAndReturn<bool, 0x587B40, CAutomobile *>(this);
	0AA8: call_method_return 0x587B40 struct [CAutomobile] num_params 0 pop 0 func_ret [bool]

	// CAutomobile::ReduceHornCounter
	// plugin::CallMethod<0x59AA90, CAutomobile *>(this);
	0AA6: call_method 0x59AA90 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::RemoveBonnetInPedCollision
	// plugin::CallMethodAndReturn<CObject*, 0x592BA0, CAutomobile *>(this);
	0AA8: call_method_return 0x592BA0 struct [CAutomobile] num_params 0 pop 0 func_ret [CObject*]

	// CAutomobile::ScanForCrimes
	// plugin::CallMethod<0x588120, CAutomobile *>(this);
	0AA6: call_method 0x588120 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::SetBumperDamage
	// plugin::CallMethod<0x59B370, CAutomobile *, int, ePanels, bool>(this, arg0, panel, withoutVisualEffect);
	0AA6: call_method 0x59B370 struct [CAutomobile] num_params 3 pop 0 [arg0] [panel] [withoutVisualEffect]

	// CAutomobile::SetBusDoorTimer
	// plugin::CallMethod<0x587080, CAutomobile *, unsigned int, unsigned char>(this, time, arg1);
	0AA6: call_method 0x587080 struct [CAutomobile] num_params 2 pop 0 [time] [arg1]

	// CAutomobile::SetDoorDamage
	// plugin::CallMethod<0x59B150, CAutomobile *, int, eDoors, bool>(this, nodeIndex, door, withoutVisualEffect);
	0AA6: call_method 0x59B150 struct [CAutomobile] num_params 3 pop 0 [nodeIndex] [door] [withoutVisualEffect]

	// CAutomobile::SetHeliOrientation
	// plugin::CallMethod<0x59B4A0, CAutomobile *, float>(this, angle);
	0AA6: call_method 0x59B4A0 struct [CAutomobile] num_params 1 pop 0 [angle]

	// CAutomobile::SetPanelDamage
	// plugin::CallMethod<0x59B2A0, CAutomobile *, int, ePanels, bool>(this, nodeIndex, panel, createWindowGlass);
	0AA6: call_method 0x59B2A0 struct [CAutomobile] num_params 3 pop 0 [nodeIndex] [panel] [createWindowGlass]

	// CAutomobile::SetTaxiLight
	// plugin::CallMethod<0x5882F0, CAutomobile *, bool>(this, enable);
	0AA6: call_method 0x5882F0 struct [CAutomobile] num_params 1 pop 0 [enable]

	// CAutomobile::SetupDamageAfterLoad
	// plugin::CallMethod<0x588310, CAutomobile *>(this);
	0AA6: call_method 0x588310 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::SetupSuspensionLines
	// plugin::CallMethod<0x59E2B0, CAutomobile *>(this);
	0AA6: call_method 0x59E2B0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::SpawnFlyingComponent
	// plugin::CallMethodAndReturn<CObject*, 0x59AAA0, CAutomobile *, int, unsigned int>(this, nodeIndex, collisionType);
	0AA8: call_method_return 0x59AAA0 struct [CAutomobile] num_params 2 pop 0 [nodeIndex] [collisionType] func_ret [CObject*]

	// CAutomobile::TankControl
	// plugin::CallMethod<0x5864C0, CAutomobile *>(this);
	0AA6: call_method 0x5864C0 struct [CAutomobile] num_params 0 pop 0

	// CAutomobile::TellHeliToGoToCoors
	// plugin::CallMethod<0x59B4B0, CAutomobile *, float, float, float, unsigned char>(this, x, y, z, arg3);
	0AA6: call_method 0x59B4B0 struct [CAutomobile] num_params 4 pop 0 [x] [y] [z] [arg3]

	// CAutomobile::TellPlaneToGoToCoors
	// plugin::CallMethod<0x59B420, CAutomobile *, float, float, float, unsigned char>(this, x, y, z, arg3);
	0AA6: call_method 0x59B420 struct [CAutomobile] num_params 4 pop 0 [x] [y] [z] [arg3]

	// CAutomobile::VehicleDamage
	// plugin::CallMethod<0x59B550, CAutomobile *, float, int>(this, damageIntensity, arg1);
	0AA6: call_method 0x59B550 struct [CAutomobile] num_params 2 pop 0 [damageIntensity] [arg1]

	// CAutomobile::dmgDrawCarCollidingParticles
	// plugin::CallMethod<0x59C480, CAutomobile *, CVector const&, float>(this, position, force);
	0AA6: call_method 0x59C480 struct [CAutomobile] num_params 2 pop 0 [position] [force]

plugin_vc\game_vc\CBaseModelInfo.cpp:

	// CBaseModelInfo::Shutdown
	// plugin::CallVirtualMethod<1, CBaseModelInfo *>(this);

	// CBaseModelInfo::DeleteRwObject
	// plugin::CallVirtualMethod<2, CBaseModelInfo *>(this);

	// CBaseModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject*, 3, CBaseModelInfo *>(this);

	// CBaseModelInfo::CreateInstance
	// plugin::CallVirtualMethodAndReturn<RwObject*, 4, CBaseModelInfo *, RwMatrixTag*>(this, tranform);

	// CBaseModelInfo::GetRwObject
	// plugin::CallVirtualMethodAndReturn<RwObject*, 5, CBaseModelInfo *>(this);

	// CBaseModelInfo::SetAnimFile
	// plugin::CallVirtualMethod<6, CBaseModelInfo *, char const*>(this, filename);

	// CBaseModelInfo::ConvertAnimFileIndex
	// plugin::CallVirtualMethod<7, CBaseModelInfo *>(this);

	// CBaseModelInfo::GetAnimFileIndex
	// plugin::CallVirtualMethodAndReturn<int, 8, CBaseModelInfo *>(this);

	// CBaseModelInfo::RemoveRef
	// plugin::CallMethod<0x53F1A0, CBaseModelInfo *>(this);
	0AA6: call_method 0x53F1A0 struct [CBaseModelInfo] num_params 0 pop 0

	// CBaseModelInfo::AddRef
	// plugin::CallMethod<0x53F1B0, CBaseModelInfo *>(this);
	0AA6: call_method 0x53F1B0 struct [CBaseModelInfo] num_params 0 pop 0

	// CBaseModelInfo::RemoveTexDictionaryRef
	// plugin::CallMethod<0x53F1C0, CBaseModelInfo *>(this);
	0AA6: call_method 0x53F1C0 struct [CBaseModelInfo] num_params 0 pop 0

	// CBaseModelInfo::AddTexDictionaryRef
	// plugin::CallMethod<0x53F1D0, CBaseModelInfo *>(this);
	0AA6: call_method 0x53F1D0 struct [CBaseModelInfo] num_params 0 pop 0

	// CBaseModelInfo::ClearTexDictionary
	// plugin::CallMethod<0x53F1E0, CBaseModelInfo *>(this);
	0AA6: call_method 0x53F1E0 struct [CBaseModelInfo] num_params 0 pop 0

	// CBaseModelInfo::SetTexDictionary
	// plugin::CallMethod<0x53F1F0, CBaseModelInfo *, char*>(this, txdName);
	0AA6: call_method 0x53F1F0 struct [CBaseModelInfo] num_params 1 pop 0 [txdName]

	// CBaseModelInfo::Add2dEffect
	// plugin::CallMethod<0x53F220, CBaseModelInfo *, C2dEffect*>(this, effect);
	0AA6: call_method 0x53F220 struct [CBaseModelInfo] num_params 1 pop 0 [effect]

	// CBaseModelInfo::Get2dEffect
	// plugin::CallMethodAndReturn<C2dEffect*, 0x53F260, CBaseModelInfo *, int>(this, effectNumber);
	0AA8: call_method_return 0x53F260 struct [CBaseModelInfo] num_params 1 pop 0 [effectNumber] func_ret [C2dEffect*]

	// CBaseModelInfo::GetColModel
	// plugin::CallMethodAndReturn<CColModel *, 0x4739B2, CBaseModelInfo *>(this);
	0AA8: call_method_return 0x4739B2 struct [CBaseModelInfo] num_params 0 pop 0 func_ret [CColModel *]

plugin_vc\game_vc\CBike.cpp:

	// CBike::AddDamagedVehicleParticles
	// plugin::CallMethod<0x60DD20, CBike *>(this);
	0AA6: call_method 0x60DD20 struct [CBike] num_params 0 pop 0

	// CBike::AddWheelDirtAndWater
	// plugin::CallMethodAndReturn<bool, 0x60D7F0, CBike *, CColPoint&, unsigned int>(this, colPoint, arg1);
	0AA8: call_method_return 0x60D7F0 struct [CBike] num_params 2 pop 0 [colPoint] [arg1] func_ret [bool]

	// CBike::CBike
	// plugin::CallMethod<0x615740, CBike *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x615740 struct [CBike] num_params 2 pop 0 [modelIndex] [createdBy]

	// CBike::CalculateLeanMatrix
	// plugin::CallMethod<0x609C90, CBike *>(this);
	0AA6: call_method 0x609C90 struct [CBike] num_params 0 pop 0

	// CBike::DoDriveByShootings
	// plugin::CallMethod<0x5C91E0, CBike *>(this);
	0AA6: call_method 0x5C91E0 struct [CBike] num_params 0 pop 0

	// CBike::Fix
	// plugin::CallMethod<0x609F00, CBike *>(this);
	0AA6: call_method 0x609F00 struct [CBike] num_params 0 pop 0

	// CBike::GetCorrectedWorldDoorPosition
	// plugin::CallMethod<0x609720, CBike *, CVector&, CVector, CVector>(this, out, arg1, arg2);
	0AA6: call_method 0x609720 struct [CBike] num_params 3 pop 0 [out] [arg1] [arg2]

	// CBike::KnockOffRider
	// plugin::CallMethodAndReturn<CPed*, 0x613920, CBike *, eWeaponType, unsigned char, CPed*, bool>(this, arg0, arg1, arg2, arg3);
	0AA8: call_method_return 0x613920 struct [CBike] num_params 4 pop 0 [arg0] [arg1] [arg2] [arg3] func_ret [CPed*]

	// CBike::PlayHornIfNecessary
	// plugin::CallMethod<0x609E10, CBike *>(this);
	0AA6: call_method 0x609E10 struct [CBike] num_params 0 pop 0

	// CBike::ProcessBuoyancy
	// plugin::CallMethod<0x613540, CBike *>(this);
	0AA6: call_method 0x613540 struct [CBike] num_params 0 pop 0

	// CBike::ReduceHornCounter
	// plugin::CallMethod<0x613910, CBike *>(this);
	0AA6: call_method 0x613910 struct [CBike] num_params 0 pop 0

	// CBike::SetupSuspensionLines
	// plugin::CallMethod<0x615080, CBike *>(this);
	0AA6: call_method 0x615080 struct [CBike] num_params 0 pop 0

	// CBike::VehicleDamage
	// plugin::CallMethod<0x614860, CBike *>(this);
	0AA6: call_method 0x614860 struct [CBike] num_params 0 pop 0

plugin_vc\game_vc\CBoat.cpp:

	// CBoat::AddWakePoint
	// plugin::CallMethod<0x59F580, CBoat *, CVector>(this, posn);
	0AA6: call_method 0x59F580 struct [CBoat] num_params 1 pop 0 [posn]

	// CBoat::ApplyWaterResistance
	// plugin::CallMethod<0x59FB30, CBoat *>(this);
	0AA6: call_method 0x59FB30 struct [CBoat] num_params 0 pop 0

	// CBoat::CBoat
	// plugin::CallMethod<0x5A6470, CBoat *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x5A6470 struct [CBoat] num_params 2 pop 0 [modelIndex] [createdBy]

	// CBoat::DoDriveByShootings
	// plugin::CallMethod<0x5C9540, CBoat *>(this);
	0AA6: call_method 0x5C9540 struct [CBoat] num_params 0 pop 0

	// CBoat::FillBoatList
	// plugin::Call<0x59F360>();
	0AA5: call_function 0x59F360 num_params 0 pop 0

	// CBoat::PruneWakeTrail
	// plugin::CallMethod<0x59F6F0, CBoat *>(this);
	0AA6: call_method 0x59F6F0 struct [CBoat] num_params 0 pop 0

plugin_vc\game_vc\CBox.cpp:

	// CBox::Set
	// plugin::Call<0x410910, CVector const&, CVector const&>(vecMin, vecMax);
	0AA5: call_function 0x410910 num_params 2 pop 2 [vecMin] [vecMax]

plugin_vc\game_vc\CBrightLights.cpp:

	// CBrightLight::CBrightLight
	// plugin::CallMethod<0x575140, CBrightLight *>(this);
	0AA6: call_method 0x575140 struct [CBrightLight] num_params 0 pop 0

	// CBrightLights::RegisterOne
	// plugin::Call<0x571820, CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char>(posn, right, up, at, red, green, blue, alpha);
	0AA5: call_function 0x571820 num_params 8 pop 8 [posn] [right] [up] [at] [red] [green] [blue] [alpha]

	// CBrightLights::Render
	// plugin::Call<0x5719B0>();
	0AA5: call_function 0x5719B0 num_params 0 pop 0

plugin_vc\game_vc\CBulletInfo.cpp:

	// CBulletInfo::AddBullet
	// plugin::Call<0x5C47C0, CEntity*, eWeaponType, CVector, CVector>(creator, weaponType, position, velocity);
	0AA5: call_function 0x5C47C0 num_params 4 pop 4 [creator] [weaponType] [position] [velocity]

	// CBulletInfo::CBulletInfo
	// plugin::CallMethod<0x5C4B10, CBulletInfo *>(this);
	0AA6: call_method 0x5C4B10 struct [CBulletInfo] num_params 0 pop 0

	// CBulletInfo::Initialise
	// plugin::Call<0x5C48C0>();
	0AA5: call_function 0x5C48C0 num_params 0 pop 0

	// CBulletInfo::Shutdown
	// plugin::Call<0x5C48A0>();
	0AA5: call_function 0x5C48A0 num_params 0 pop 0

	// CBulletInfo::TestForSniperBullet
	// plugin::Call<0x5C3B20, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x5C3B20 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CBulletInfo::Update
	// plugin::Call<0x5C3DE0>();
	0AA5: call_function 0x5C3DE0 num_params 0 pop 0

plugin_vc\game_vc\CBulletTraces.cpp:

	// CBulletTraces::AddTrace
	// plugin::CallDynGlobal<CVector *, CVector *, float, unsigned int, unsigned char>(gaddrof_o(CBulletTraces::AddTrace, void (*)(CVector *, CVector *, float, unsigned int, unsigned char)), origin, target, radius, time, transparency);

	// CBulletTraces::AddTrace
	// plugin::CallDynGlobal<CVector *, CVector *, int, CEntity *>(gaddrof_o(CBulletTraces::AddTrace, void (*)(CVector *, CVector *, int, CEntity *)), origin, target, weaponType, entity);

plugin_vc\game_vc\cBuoyancy.cpp:

	// cBuoyancy::ProcessBuoyancy
	// plugin::CallMethodAndReturn<bool, 0x5AAC90, cBuoyancy*, CPhysical *, float, CVector*, CVector*>(this, phys, buoyancy, point, impulse);
	0AA8: call_method_return 0x5AAC90 struct [cBuoyancy] num_params 4 pop 0 [phys] [buoyancy] [point] [impulse] func_ret [bool]

plugin_vc\game_vc\CCamera.cpp:

	// CCamera::AvoidTheGeometry
	// plugin::CallMethod<0x473AA4, CCamera *, CVector const&, CVector const&, CVector&, float>(this, Vector1, Vector2, Vector3, arg4);
	0AA6: call_method 0x473AA4 struct [CCamera] num_params 4 pop 0 [Vector1] [Vector2] [Vector3] [arg4]

	// CCamera::CalculateDerivedValues
	// plugin::CallMethod<0x46C3B6, CCamera *>(this);
	0AA6: call_method 0x46C3B6 struct [CCamera] num_params 0 pop 0

	// CCamera::CamControl
	// plugin::CallMethod<0x4700E7, CCamera *>(this);
	0AA6: call_method 0x4700E7 struct [CCamera] num_params 0 pop 0

	// CCamera::CamShake
	// plugin::CallMethod<0x46FF21, CCamera *, float, float, float, float>(this, arg1, x_coord, y_coord, z_coord);
	0AA6: call_method 0x46FF21 struct [CCamera] num_params 4 pop 0 [arg1] [x_coord] [y_coord] [z_coord]

	// CCamera::ClearPlayerWeaponMode
	// plugin::CallMethod<0x46FE51, CCamera *>(this);
	0AA6: call_method 0x46FE51 struct [CCamera] num_params 0 pop 0

	// CCamera::DeleteCutSceneCamDataMemory
	// plugin::CallMethod<0x46FE25, CCamera *>(this);
	0AA6: call_method 0x46FE25 struct [CCamera] num_params 0 pop 0

	// CCamera::DontProcessObbeCinemaCamera
	// plugin::Call<0x46FE13>();
	0AA5: call_function 0x46FE13 num_params 0 pop 0

	// CCamera::DrawBordersForWideScreen
	// plugin::CallMethod<0x46FC1C, CCamera *>(this);
	0AA6: call_method 0x46FC1C struct [CCamera] num_params 0 pop 0

	// CCamera::Fade
	// plugin::CallMethod<0x46FBCB, CCamera *, float, short>(this, timeToFade, FadingDirection);
	0AA6: call_method 0x46FBCB struct [CCamera] num_params 2 pop 0 [timeToFade] [FadingDirection]

	// CCamera::Find3rdPersonCamTargetVector
	// plugin::CallMethodAndReturn<bool, 0x46F890, CCamera *, float, CVector, CVector&, CVector&>(this, arg1, vector1, vector2, vector3);
	0AA8: call_method_return 0x46F890 struct [CCamera] num_params 4 pop 0 [arg1] [vector1] [vector2] [vector3] func_ret [bool]

	// CCamera::Find3rdPersonQuickAimPitch
	// plugin::CallMethodAndReturn<float, 0x46F7C6, CCamera *>(this);
	0AA8: call_method_return 0x46F7C6 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::FinishCutscene
	// plugin::CallMethod<0x46FB3C, CCamera *>(this);
	0AA6: call_method 0x46FB3C struct [CCamera] num_params 0 pop 0

	// CCamera::GetArrPosForVehicleType
	// plugin::CallAndReturn<bool, 0x46F659, int, int&>(vehicleType, ArrPos);
	0AA7: call_function_return 0x46F659 num_params 2 pop 2 [vehicleType] [ArrPos] func_ret [bool]

	// CCamera::GetCutSceneFinishTime
	// plugin::CallMethodAndReturn<int, 0x46F77E, CCamera *>(this);
	0AA8: call_method_return 0x46F77E struct [CCamera] num_params 0 pop 0 func_ret [int]

	// CCamera::GetFading
	// plugin::CallMethodAndReturn<bool, 0x46F777, CCamera *>(this);
	0AA8: call_method_return 0x46F777 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetGameCamPosition
	// plugin::CallMethodAndReturn<CVector*, 0x46F730, CCamera *>(this);
	0AA8: call_method_return 0x46F730 struct [CCamera] num_params 0 pop 0 func_ret [CVector*]

	// CCamera::GetLookDirection
	// plugin::CallMethodAndReturn<int, 0x46F6CE, CCamera *>(this);
	0AA8: call_method_return 0x46F6CE struct [CCamera] num_params 0 pop 0 func_ret [int]

	// CCamera::GetLookingForwardFirstPerson
	// plugin::CallMethodAndReturn<bool, 0x46F6A9, CCamera *>(this);
	0AA8: call_method_return 0x46F6A9 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetLookingLRBFirstPerson
	// plugin::CallMethodAndReturn<bool, 0x46F70B, CCamera *>(this);
	0AA8: call_method_return 0x46F70B struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetPositionAlongSpline
	// plugin::CallMethodAndReturn<float, 0x46F652, CCamera *>(this);
	0AA8: call_method_return 0x46F652 struct [CCamera] num_params 0 pop 0 func_ret [float]

	// CCamera::GetScreenFadeStatus
	// plugin::CallMethodAndReturn<bool, 0x46F737, CCamera *>(this);
	0AA8: call_method_return 0x46F737 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::GetScreenRect
	// plugin::CallMethod<0x46FD5D, CCamera *, CRect&>(this, Rect);
	0AA6: call_method 0x46FD5D struct [CCamera] num_params 1 pop 0 [Rect]

	// CCamera::Get_Just_Switched_Status
	// plugin::CallMethodAndReturn<bool, 0x46F773, CCamera *>(this);
	0AA8: call_method_return 0x46F773 struct [CCamera] num_params 0 pop 0 func_ret [bool]

	// CCamera::Init
	// plugin::CallMethod<0x46F108, CCamera *>(this);
	0AA6: call_method 0x46F108 struct [CCamera] num_params 0 pop 0

	// CCamera::IsItTimeForNewcam
	// plugin::CallMethodAndReturn<bool, 0x46E2C4, CCamera *, int, int>(this, arg1, timer);
	0AA8: call_method_return 0x46E2C4 struct [CCamera] num_params 2 pop 0 [arg1] [timer] func_ret [bool]

	// CCamera::LoadPathSplines
	// plugin::Call<0x46E140, int>(FilePtr);
	0AA5: call_function 0x46E140 num_params 1 pop 1 [FilePtr]

	// CCamera::Process
	// plugin::CallMethod<0x46C58C, CCamera *>(this);
	0AA6: call_method 0x46C58C struct [CCamera] num_params 0 pop 0

	// CCamera::ProcessFade
	// plugin::CallMethod<0x46C278, CCamera *>(this);
	0AA6: call_method 0x46C278 struct [CCamera] num_params 0 pop 0

	// CCamera::ProcessMusicFade
	// plugin::CallMethod<0x46C10D, CCamera *>(this);
	0AA6: call_method 0x46C10D struct [CCamera] num_params 0 pop 0

	// CCamera::ProcessObbeCinemaCameraCar
	// plugin::CallMethod<0x46BFEE, CCamera *>(this);
	0AA6: call_method 0x46BFEE struct [CCamera] num_params 0 pop 0

	// CCamera::ProcessObbeCinemaCameraHeli
	// plugin::CallMethod<0x46BEE6, CCamera *>(this);
	0AA6: call_method 0x46BEE6 struct [CCamera] num_params 0 pop 0

	// CCamera::ProcessObbeCinemaCameraPed
	// plugin::CallMethod<0x46BE18, CCamera *>(this);
	0AA6: call_method 0x46BE18 struct [CCamera] num_params 0 pop 0

	// CCamera::RenderMotionBlur
	// plugin::CallMethod<0x46BDE0, CCamera *>(this);
	0AA6: call_method 0x46BDE0 struct [CCamera] num_params 0 pop 0

	// CCamera::Restore
	// plugin::CallMethod<0x46BC7D, CCamera *>(this);
	0AA6: call_method 0x46BC7D struct [CCamera] num_params 0 pop 0

	// CCamera::RestoreWithJumpCut
	// plugin::CallMethod<0x46BB24, CCamera *>(this);
	0AA6: call_method 0x46BB24 struct [CCamera] num_params 0 pop 0

	// CCamera::SetCamCutSceneOffSet
	// plugin::CallMethod<0x46BB03, CCamera *, CVector const&>(this, vecCutSceneOffset);
	0AA6: call_method 0x46BB03 struct [CCamera] num_params 1 pop 0 [vecCutSceneOffset]

	// CCamera::SetCamPositionForFixedMode
	// plugin::CallMethod<0x46BA72, CCamera *, CVector const&, CVector const&>(this, vecFixedModeSource, vecFixedModeUpOffSet);
	0AA6: call_method 0x46BA72 struct [CCamera] num_params 2 pop 0 [vecFixedModeSource] [vecFixedModeUpOffSet]

	// CCamera::SetCameraDirectlyBehindForFollowPed_CamOnAString
	// plugin::CallMethod<0x46BADE, CCamera *>(this);
	0AA6: call_method 0x46BADE struct [CCamera] num_params 0 pop 0

	// CCamera::SetCameraDirectlyInFrontForFollowPed_CamOnAString
	// plugin::CallMethod<0x46BAB9, CCamera *>(this);
	0AA6: call_method 0x46BAB9 struct [CCamera] num_params 0 pop 0

	// CCamera::SetFadeColour
	// plugin::CallMethod<0x46BA35, CCamera *, unsigned char, unsigned char, unsigned char>(this, red, green, blue);
	0AA6: call_method 0x46BA35 struct [CCamera] num_params 3 pop 0 [red] [green] [blue]

	// CCamera::SetMotionBlur
	// plugin::CallMethod<0x46BA00, CCamera *, int, int, int, int, int>(this, red, green, blue, motionblur, blurtype);
	0AA6: call_method 0x46BA00 struct [CCamera] num_params 5 pop 0 [red] [green] [blue] [motionblur] [blurtype]

	// CCamera::SetMotionBlurAlpha
	// plugin::CallMethod<0x46B9F3, CCamera *, int>(this, alpha);
	0AA6: call_method 0x46B9F3 struct [CCamera] num_params 1 pop 0 [alpha]

	// CCamera::SetNearClipScript
	// plugin::CallMethod<0x46B9E2, CCamera *, float>(this, fNearClipScript);
	0AA6: call_method 0x46B9E2 struct [CCamera] num_params 1 pop 0 [fNearClipScript]

	// CCamera::SetNewPlayerWeaponMode
	// plugin::CallMethod<0x46B90D, CCamera *, short, short, short>(this, Mode, MinZoom, MaxZoom);
	0AA6: call_method 0x46B90D struct [CCamera] num_params 3 pop 0 [Mode] [MinZoom] [MaxZoom]

	// CCamera::SetParametersForScriptInterpolation
	// plugin::CallMethod<0x46B8AE, CCamera *, float, float, unsigned int>(this, fScriptInterToStopMoving, fScriptInterToCatchUp, fScriptTimeForInterPolation);
	0AA6: call_method 0x46B8AE struct [CCamera] num_params 3 pop 0 [fScriptInterToStopMoving] [fScriptInterToCatchUp] [fScriptTimeForInterPolation]

	// CCamera::SetRwCamera
	// plugin::CallMethod<0x46B87A, CCamera *, RwCamera*>(this, pRwCam);
	0AA6: call_method 0x46B87A struct [CCamera] num_params 1 pop 0 [pRwCam]

	// CCamera::SetWideScreenOff
	// plugin::CallMethod<0x46B863, CCamera *>(this);
	0AA6: call_method 0x46B863 struct [CCamera] num_params 0 pop 0

	// CCamera::SetWideScreenOn
	// plugin::CallMethod<0x46B875, CCamera *>(this);
	0AA6: call_method 0x46B875 struct [CCamera] num_params 0 pop 0

	// CCamera::SetZoomValueCamStringScript
	// plugin::CallMethod<0x46B743, CCamera *, short>(this, mode);
	0AA6: call_method 0x46B743 struct [CCamera] num_params 1 pop 0 [mode]

	// CCamera::SetZoomValueFollowPedScript
	// plugin::CallMethod<0x46B817, CCamera *, short>(this, mode);
	0AA6: call_method 0x46B817 struct [CCamera] num_params 1 pop 0 [mode]

	// CCamera::StartTransition
	// plugin::CallMethod<0x46AB08, CCamera *, short>(this, mode);
	0AA6: call_method 0x46AB08 struct [CCamera] num_params 1 pop 0 [mode]

	// CCamera::StartTransitionWhenNotFinishedInter
	// plugin::CallMethod<0x46AAF5, CCamera *, short>(this, mode);
	0AA6: call_method 0x46AAF5 struct [CCamera] num_params 1 pop 0 [mode]

	// CCamera::StoreValuesDuringInterPol
	// plugin::CallMethod<0x46AA01, CCamera *, CVector&, CVector&, CVector&, float&>(this, _SourceDuringInter, _TargetDuringInter, _UpDuringInter, _FOVDuringInter);
	0AA6: call_method 0x46AA01 struct [CCamera] num_params 4 pop 0 [_SourceDuringInter] [_TargetDuringInter] [_UpDuringInter] [_FOVDuringInter]

	// CCamera::TakeControl
	// plugin::CallMethod<0x46A4F8, CCamera *, CEntity*, short, short, int>(this, pEntity, mode, _TypeOfSwitch, _WhoIsInControlOfTheCamera);
	0AA6: call_method 0x46A4F8 struct [CCamera] num_params 4 pop 0 [pEntity] [mode] [_TypeOfSwitch] [_WhoIsInControlOfTheCamera]

	// CCamera::TakeControlNoEntity
	// plugin::CallMethod<0x46A494, CCamera *, CVector const&, short, int>(this, vecFixedModeVector, _TypeOfSwitch, _WhoIsInControlOfTheCamera);
	0AA6: call_method 0x46A494 struct [CCamera] num_params 3 pop 0 [vecFixedModeVector] [_TypeOfSwitch] [_WhoIsInControlOfTheCamera]

	// CCamera::TakeControlWithSpline
	// plugin::CallMethod<0x46A46A, CCamera *, short>(this, TypeOfSwitch);
	0AA6: call_method 0x46A46A struct [CCamera] num_params 1 pop 0 [TypeOfSwitch]

	// CCamera::TryToStartNewCamMode
	// plugin::CallMethodAndReturn<bool, 0x467AAD, CCamera *, int>(this, mode);
	0AA8: call_method_return 0x467AAD struct [CCamera] num_params 1 pop 0 [mode] func_ret [bool]

	// CCamera::UpdateAimingCoors
	// plugin::CallMethod<0x467A8C, CCamera *, CVector const&>(this, vecAimingTarget);
	0AA6: call_method 0x467A8C struct [CCamera] num_params 1 pop 0 [vecAimingTarget]

	// CCamera::UpdateSoundDistances
	// plugin::CallMethod<0x46A885, CCamera *>(this);
	0AA6: call_method 0x46A885 struct [CCamera] num_params 0 pop 0

	// CCamera::UpdateTargetEntity
	// plugin::CallMethod<0x46A5A3, CCamera *>(this);
	0AA6: call_method 0x46A5A3 struct [CCamera] num_params 0 pop 0

	// CCamera::Using1stPersonWeaponMode
	// plugin::CallMethodAndReturn<bool, 0x46B8E2, CCamera *>(this);
	0AA8: call_method_return 0x46B8E2 struct [CCamera] num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\CCarAI.cpp:

	// CCarAI::AddAmbulanceOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddAmbulanceOccupants), vehicle);

	// CCarAI::AddFiretruckOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddFiretruckOccupants), vehicle);

	// CCarAI::AddPoliceCarOccupants
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::AddPoliceCarOccupants), vehicle);

	// CCarAI::CarHasReasonToStop
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::CarHasReasonToStop), vehicle);

	// CCarAI::FindPoliceBoatMissionForWantedLevel
	// plugin::CallAndReturnDynGlobal<eCarMission>(gaddrof(CCarAI::FindPoliceBoatMissionForWantedLevel));

	// CCarAI::FindPoliceCarMissionForWantedLevel
	// plugin::CallAndReturnDynGlobal<eCarMission>(gaddrof(CCarAI::FindPoliceCarMissionForWantedLevel));

	// CCarAI::FindPoliceCarSpeedForWantedLevel
	// plugin::CallAndReturnDynGlobal<int, CVehicle *>(gaddrof(CCarAI::FindPoliceCarSpeedForWantedLevel), vehicle);

	// CCarAI::GetCarToGoToCoors
	// plugin::CallAndReturnDynGlobal<float, CVehicle *, CVector *>(gaddrof(CCarAI::GetCarToGoToCoors), vehicle, coors);

	// CCarAI::GetCarToParkAtCoors
	// plugin::CallAndReturnDynGlobal<float, CVehicle *, CVector *>(gaddrof(CCarAI::GetCarToParkAtCoors), vehicle, coors);

	// CCarAI::MakeWayForCarWithSiren
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::MakeWayForCarWithSiren), vehicle);

	// CCarAI::MellowOutChaseSpeed
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::MellowOutChaseSpeed), vehicle);

	// CCarAI::MellowOutChaseSpeedBoat
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::MellowOutChaseSpeedBoat), vehicle);

	// CCarAI::TellCarToRamOtherCar
	// plugin::CallDynGlobal<CVehicle *, CVehicle *>(gaddrof(CCarAI::TellCarToRamOtherCar), vehicle, ramVehicle);

	// CCarAI::TellOccupantsToFleeCar
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::TellOccupantsToFleeCar), vehicle);

	// CCarAI::TellOccupantsToLeaveCar
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::TellOccupantsToLeaveCar), vehicle);

	// CCarAI::UpdateCarAI
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CCarAI::UpdateCarAI), vehicle);

plugin_vc\game_vc\CCarCtrl.cpp:

	// CCarCtrl::AddToLoadedVehicleArray
	// plugin::CallAndReturn<int, 0x4267D0, int, int, int>(arg0, arg1, arg2);
	0AA7: call_function_return 0x4267D0 num_params 3 pop 3 [arg0] [arg1] [arg2] func_ret [int]

	// CCarCtrl::AddToVehicleArray
	// plugin::CallAndReturn<int, 0x426820, int, int>(arg0, arg1);
	0AA7: call_function_return 0x426820 num_params 2 pop 2 [arg0] [arg1] func_ret [int]

	// CCarCtrl::ChooseCarModel
	// plugin::CallAndReturn<int, 0x426AA0, int>(arg0);
	0AA7: call_function_return 0x426AA0 num_params 1 pop 1 [arg0] func_ret [int]

	// CCarCtrl::ChooseCarModelToLoad
	// plugin::CallAndReturn<int, 0x426A30, int>(arg0);
	0AA7: call_function_return 0x426A30 num_params 1 pop 1 [arg0] func_ret [int]

	// CCarCtrl::ChooseCarRating
	// plugin::CallAndReturn<int, 0x426D40, CZoneInfo*>(arg0);
	0AA7: call_function_return 0x426D40 num_params 1 pop 1 [arg0] func_ret [int]

	// CCarCtrl::ChooseModel
	// plugin::CallAndReturn<int, 0x426B40, CZoneInfo*, int*>(arg0, arg1);
	0AA7: call_function_return 0x426B40 num_params 2 pop 2 [arg0] [arg1] func_ret [int]

	// CCarCtrl::ChoosePoliceCarModel
	// plugin::CallAndReturn<int, 0x426850>();
	0AA7: call_function_return 0x426850 num_params 0 pop 0 func_ret [int]

	// CCarCtrl::ClearInterestingVehicleList
	// plugin::Call<0x41D300>();
	0AA5: call_function 0x41D300 num_params 0 pop 0

	// CCarCtrl::DragCarToPoint
	// plugin::Call<0x4208B0, CVehicle*, CVector*>(vehicle, coords);
	0AA5: call_function 0x4208B0 num_params 2 pop 2 [vehicle] [coords]

	// CCarCtrl::FindAngleToWeaveThroughTraffic
	// plugin::CallAndReturn<float, 0x423C00, CVehicle*, CPhysical*, float, float>(vehicle, physical, arg2, arg3);
	0AA7: call_function_return 0x423C00 num_params 4 pop 4 [vehicle] [physical] [arg2] [arg3] func_ret [float]

	// CCarCtrl::FindLinksToGoWithTheseNodes
	// plugin::CallAndReturn<int, 0x41CC20, CVehicle*>(vehicle);
	0AA7: call_function_return 0x41CC20 num_params 1 pop 1 [vehicle] func_ret [int]

	// CCarCtrl::FindMaximumSpeedForThisCarInTraffic
	// plugin::CallAndReturn<float, 0x425880, CVehicle*>(vehicle);
	0AA7: call_function_return 0x425880 num_params 1 pop 1 [vehicle] func_ret [float]

	// CCarCtrl::FindPathDirection
	// plugin::CallAndReturn<char, 0x421DC0, int, int, int>(arg0, arg1, arg2);
	0AA7: call_function_return 0x421DC0 num_params 3 pop 3 [arg0] [arg1] [arg2] func_ret [char]

	// CCarCtrl::GenerateEmergencyServicesCar
	// plugin::Call<0x41C940>();
	0AA5: call_function 0x41C940 num_params 0 pop 0

	// CCarCtrl::GenerateOneEmergencyServicesCar
	// plugin::CallAndReturn<bool, 0x41C460, unsigned int, CVector>(model, driveToCoord);
	0AA7: call_function_return 0x41C460 num_params 2 pop 2 [model] [driveToCoord] func_ret [bool]

	// CCarCtrl::GenerateOneRandomCar
	// plugin::Call<0x426DB0>();
	0AA5: call_function 0x426DB0 num_params 0 pop 0

	// CCarCtrl::GenerateRandomCars
	// plugin::Call<0x4292A0>();
	0AA5: call_function 0x4292A0 num_params 0 pop 0

	// CCarCtrl::Init
	// plugin::Call<0x4293D0>();
	0AA5: call_function 0x4293D0 num_params 0 pop 0

	// CCarCtrl::IsThisVehicleInteresting
	// plugin::CallAndReturn<bool, 0x41D350, CVehicle*>(vehicle);
	0AA7: call_function_return 0x41D350 num_params 1 pop 1 [vehicle] func_ret [bool]

	// CCarCtrl::JoinCarWithRoadSystem
	// plugin::Call<0x41D000, CVehicle*>(vehicle);
	0AA5: call_function 0x41D000 num_params 1 pop 1 [vehicle]

	// CCarCtrl::JoinCarWithRoadSystemGotoCoors
	// plugin::CallAndReturn<bool, 0x41CEB0, CVehicle*, CVector, bool>(vehicle, arg1, arg2);
	0AA7: call_function_return 0x41CEB0 num_params 3 pop 3 [vehicle] [arg1] [arg2] func_ret [bool]

	// CCarCtrl::MapCouldMoveInThisArea
	// plugin::CallAndReturn<bool, 0x41C2F0, float, float>(arg0, arg1);
	0AA7: call_function_return 0x41C2F0 num_params 2 pop 2 [arg0] [arg1] func_ret [bool]

	// CCarCtrl::PickNextNodeAccordingStrategy
	// plugin::CallAndReturn<char, 0x422A10, CVehicle*>(vehicle);
	0AA7: call_function_return 0x422A10 num_params 1 pop 1 [vehicle] func_ret [char]

	// CCarCtrl::PickNextNodeRandomly
	// plugin::CallAndReturn<int, 0x421F70, CVehicle*>(vehicle);
	0AA7: call_function_return 0x421F70 num_params 1 pop 1 [vehicle] func_ret [int]

	// CCarCtrl::PickNextNodeToChaseCar
	// plugin::CallAndReturn<int, 0x4213A0, CVehicle*, float, float, CVehicle*>(vehicle, arg1, arg2, arg3);
	0AA7: call_function_return 0x4213A0 num_params 4 pop 4 [vehicle] [arg1] [arg2] [arg3] func_ret [int]

	// CCarCtrl::PickNextNodeToFollowPath
	// plugin::CallAndReturn<bool, 0x420D50, CVehicle*>(vehicle);
	0AA7: call_function_return 0x420D50 num_params 1 pop 1 [vehicle] func_ret [bool]

	// CCarCtrl::PossiblyRemoveVehicle
	// plugin::Call<0x426030, CVehicle*>(vehicle);
	0AA5: call_function 0x426030 num_params 1 pop 1 [vehicle]

	// CCarCtrl::ReInit
	// plugin::Call<0x429320>();
	0AA5: call_function 0x429320 num_params 0 pop 0

	// CCarCtrl::RegisterVehicleOfInterest
	// plugin::Call<0x41D370, CVehicle*>(vehicle);
	0AA5: call_function 0x41D370 num_params 1 pop 1 [vehicle]

	// CCarCtrl::RemoveCarsIfThePoolGetsFull
	// plugin::Call<0x4264C0>();
	0AA5: call_function 0x4264C0 num_params 0 pop 0

	// CCarCtrl::RemoveDistantCars
	// plugin::Call<0x426640>();
	0AA5: call_function 0x426640 num_params 0 pop 0

	// CCarCtrl::RemoveFromInterestingVehicleList
	// plugin::Call<0x41D320, CVehicle*>(vehicle);
	0AA5: call_function 0x41D320 num_params 1 pop 1 [vehicle]

	// CCarCtrl::RemoveFromLoadedVehicleArray
	// plugin::Call<0x426740, int, int>(arg0, arg1);
	0AA5: call_function 0x426740 num_params 2 pop 2 [arg0] [arg1]

	// CCarCtrl::ScanForPedDanger
	// plugin::Call<0x4255E0, CVehicle*>(vehicle);
	0AA5: call_function 0x4255E0 num_params 1 pop 1 [vehicle]

	// CCarCtrl::SlowCarDownForCarsSectorList
	// plugin::Call<0x424B50, CPtrList&, CVehicle*, float, float, float, float, float*, float>(ptrlist, vehicle, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA5: call_function 0x424B50 num_params 8 pop 8 [ptrlist] [vehicle] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7]

	// CCarCtrl::SlowCarDownForOtherCar
	// plugin::Call<0x424780, CEntity*, CVehicle*, float*, float>(entity, vehicle, arg2, arg3);
	0AA5: call_function 0x424780 num_params 4 pop 4 [entity] [vehicle] [arg2] [arg3]

	// CCarCtrl::SlowCarDownForPedsSectorList
	// plugin::Call<0x424C70, CPtrList&, CVehicle*, float, float, float, float, float*, float>(ptrlist, vehicle, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA5: call_function 0x424C70 num_params 8 pop 8 [ptrlist] [vehicle] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7]

	// CCarCtrl::SlowCarOnRailsDownForTrafficAndLights
	// plugin::Call<0x4254C0, CVehicle*>(vehicle);
	0AA5: call_function 0x4254C0 num_params 1 pop 1 [vehicle]

	// CCarCtrl::SteerAIBoatWithPhysicsAttackingPlayer
	// plugin::Call<0x41DFA0, CVehicle*, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x41DFA0 num_params 5 pop 5 [vehicle] [arg1] [arg2] [arg3] [arg4]

	// CCarCtrl::SteerAIBoatWithPhysicsHeadingForTarget
	// plugin::Call<0x41E2D0, CVehicle*, float, float, float*, float*, float*>(vehicle, arg1, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x41E2D0 num_params 6 pop 6 [vehicle] [arg1] [arg2] [arg3] [arg4] [arg5]

	// CCarCtrl::SteerAICarBlockingPlayerForwardAndBack
	// plugin::Call<0x41E520, CVehicle*, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x41E520 num_params 5 pop 5 [vehicle] [arg1] [arg2] [arg3] [arg4]

	// CCarCtrl::SteerAICarWithPhysics
	// plugin::Call<0x420580, CVehicle*>(vehicle);
	0AA5: call_function 0x420580 num_params 1 pop 1 [vehicle]

	// CCarCtrl::SteerAICarWithPhysicsFollowPath
	// plugin::Call<0x41EEE0, CVehicle*, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x41EEE0 num_params 5 pop 5 [vehicle] [arg1] [arg2] [arg3] [arg4]

	// CCarCtrl::SteerAICarWithPhysicsHeadingForTarget
	// plugin::Call<0x41EAB0, CVehicle*, CPhysical*, float, float, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA5: call_function 0x41EAB0 num_params 8 pop 8 [vehicle] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7]

	// CCarCtrl::SteerAICarWithPhysicsTryingToBlockTarget_Stop
	// plugin::Call<0x41E830, CVehicle*, float, float, float, float, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x41E830 num_params 9 pop 9 [vehicle] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::SteerAICarWithPhysics_OnlyMission
	// plugin::Call<0x41FD10, CVehicle*, float*, float*, float*, bool*>(vehicle, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x41FD10 num_params 5 pop 5 [vehicle] [arg1] [arg2] [arg3] [arg4]

	// CCarCtrl::SteerAIHeliTowardsTargetCoors
	// plugin::Call<0x41D900, CAutomobile*>(automobile);
	0AA5: call_function 0x41D900 num_params 1 pop 1 [automobile]

	// CCarCtrl::SteerAIPlaneTowardsTargetCoors
	// plugin::Call<0x41D410, CAutomobile*>(automobile);
	0AA5: call_function 0x41D410 num_params 1 pop 1 [automobile]

	// CCarCtrl::SwitchVehicleToRealPhysics
	// plugin::Call<0x41D2D0, CVehicle*>(vehicle);
	0AA5: call_function 0x41D2D0 num_params 1 pop 1 [vehicle]

	// CCarCtrl::TestCollisionBetween2MovingRects
	// plugin::CallAndReturn<float, 0x424210, CVehicle*, CVehicle*, float, float, CVector*, CVector*, unsigned char>(vehicle, arg1, arg2, arg3, arg4, arg5, arg6);
	0AA7: call_function_return 0x424210 num_params 7 pop 7 [vehicle] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] func_ret [float]

	// CCarCtrl::UpdateCarCount
	// plugin::Call<0x41C350, CVehicle*, unsigned char>(vehicle, arg1);
	0AA5: call_function 0x41C350 num_params 2 pop 2 [vehicle] [arg1]

	// CCarCtrl::UpdateCarOnRails
	// plugin::Call<0x425BF0, CVehicle*>(vehicle);
	0AA5: call_function 0x425BF0 num_params 1 pop 1 [vehicle]

	// CCarCtrl::WeaveThroughCarsSectorList
	// plugin::Call<0x423490, CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*>(ptrlist, vehicle, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x423490 num_params 9 pop 9 [ptrlist] [vehicle] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CCarCtrl::WeaveThroughObjectsSectorList
	// plugin::Call<0x422B00, CPtrList&, CVehicle*, float, float, float, float, float*, float*>(ptrlist, vehicle, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA5: call_function 0x422B00 num_params 8 pop 8 [ptrlist] [vehicle] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7]

	// CCarCtrl::WeaveThroughPedsSectorList
	// plugin::Call<0x4230F0, CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*>(ptrlist, vehicle, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4230F0 num_params 9 pop 9 [ptrlist] [vehicle] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

plugin_vc\game_vc\CCarGenerator.cpp:

	// CCarGenerator::CheckForBlockage
	// plugin::CallMethodAndReturn<bool, 0x5A6FC0, CCarGenerator *, int>(this, modelId);
	0AA8: call_method_return 0x5A6FC0 struct [CCarGenerator] num_params 1 pop 0 [modelId] func_ret [bool]

	// CCarGenerator::CheckIfWithinRangeOfAnyPlayers
	// plugin::CallMethodAndReturn<bool, 0x5A6D00, CCarGenerator *>(this);
	0AA8: call_method_return 0x5A6D00 struct [CCarGenerator] num_params 0 pop 0 func_ret [bool]

	// CCarGenerator::DoInternalProcessing
	// plugin::CallMethod<0x5A71C0, CCarGenerator *>(this);
	0AA6: call_method 0x5A71C0 struct [CCarGenerator] num_params 0 pop 0

	// CCarGenerator::Process
	// plugin::CallMethod<0x5A7130, CCarGenerator *>(this);
	0AA6: call_method 0x5A7130 struct [CCarGenerator] num_params 0 pop 0

	// CCarGenerator::Setup
	// plugin::CallMethodAndReturn<unsigned int, 0x5A70B0, CCarGenerator *, float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short>(this, x, y, z, angle, modelId, primaryColor, secondaryColor, forceSpawn, alarm, doorLock, minDelay, maxDelay);
	0AA8: call_method_return 0x5A70B0 struct [CCarGenerator] num_params 12 pop 0 [x] [y] [z] [angle] [modelId] [primaryColor] [secondaryColor] [forceSpawn] [alarm] [doorLock] [minDelay] [maxDelay] func_ret [unsigned int]

	// CCarGenerator::SwitchOff
	// plugin::CallMethod<0x5A7670, CCarGenerator *>(this);
	0AA6: call_method 0x5A7670 struct [CCarGenerator] num_params 0 pop 0

	// CCarGenerator::SwitchOn
	// plugin::CallMethod<0x5A7650, CCarGenerator *>(this);
	0AA6: call_method 0x5A7650 struct [CCarGenerator] num_params 0 pop 0

plugin_vc\game_vc\CCivilianPed.cpp:

	// CCivilianPed::CCivilianPed
	// plugin::CallMethod<0x4EAE00, CCivilianPed *, ePedType, unsigned int>(this, pedType, modelIndex);
	0AA6: call_method 0x4EAE00 struct [CCivilianPed] num_params 2 pop 0 [pedType] [modelIndex]

	// CCivilianPed::CivilianAI
	// plugin::CallMethod<0x4E8E20, CCivilianPed *>(this);
	0AA6: call_method 0x4E8E20 struct [CCivilianPed] num_params 0 pop 0

	// CCivilianPed::EnterVacantNearbyCars
	// plugin::CallMethod<0x4E99C0, CCivilianPed *>(this);
	0AA6: call_method 0x4E99C0 struct [CCivilianPed] num_params 0 pop 0

	// CCivilianPed::UseNearbyAttractors
	// plugin::CallMethod<0x4E9E90, CCivilianPed *>(this);
	0AA6: call_method 0x4E9E90 struct [CCivilianPed] num_params 0 pop 0

plugin_vc\game_vc\CClock.cpp:

	// CClock::GetGameClockMinutesUntil
	// plugin::CallAndReturnDynGlobal<unsigned int, unsigned char, unsigned char>(gaddrof(CClock::GetGameClockMinutesUntil), hours, minutes);

	// CClock::GetIsTimeInRange
	// plugin::CallAndReturnDynGlobal<bool, unsigned char, unsigned char>(gaddrof(CClock::GetIsTimeInRange), hourA, hourB);

	// CClock::Initialise
	// plugin::CallDynGlobal<unsigned int>(gaddrof(CClock::Initialise), milisecondsPerGameMinute);

	// CClock::SetGameClock
	// plugin::CallDynGlobal<unsigned char, unsigned char>(gaddrof(CClock::SetGameClock), hours, minutes);

plugin_vc\game_vc\CClouds.cpp:

	// CClouds::Init
	// plugin::Call<0x540FB0>();
	0AA5: call_function 0x540FB0 num_params 0 pop 0

	// CClouds::Render
	// plugin::Call<0x53FC50>();
	0AA5: call_function 0x53FC50 num_params 0 pop 0

	// CClouds::RenderBackground
	// plugin::Call<0x53F650, short, short, short, short, short, short, short>(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	0AA5: call_function 0x53F650 num_params 7 pop 7 [arg0] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6]

	// CClouds::RenderHorizon
	// plugin::Call<0x53F380>();
	0AA5: call_function 0x53F380 num_params 0 pop 0

	// CClouds::Shutdown
	// plugin::Call<0x540F40>();
	0AA5: call_function 0x540F40 num_params 0 pop 0

	// CClouds::Update
	// plugin::Call<0x540E90>();
	0AA5: call_function 0x540E90 num_params 0 pop 0

plugin_vc\game_vc\CClumpModelInfo.cpp:

	// CClumpModelInfo::SetClump
	// plugin::CallVirtualMethod<9, CClumpModelInfo *, RpClump*>(this, clump);

	// CClumpModelInfo::CClumpModelInfo
	// plugin::CallMethod<0x5601C0, CClumpModelInfo *>(this);
	0AA6: call_method 0x5601C0 struct [CClumpModelInfo] num_params 0 pop 0

	// CClumpModelInfo::FillFrameArray
	// plugin::Call<0x541100, RpClump*, RwFrame**>(clump, frames);
	0AA5: call_function 0x541100 num_params 2 pop 2 [clump] [frames]

	// CClumpModelInfo::FindFrameFromIdCB
	// plugin::CallAndReturn<RwFrame*, 0x541160, RwFrame*, void*>(frame, searchData);
	0AA7: call_function_return 0x541160 num_params 2 pop 2 [frame] [searchData] func_ret [RwFrame*]

	// CClumpModelInfo::FindFrameFromNameCB
	// plugin::CallAndReturn<RwFrame*, 0x5411E0, RwFrame*, void*>(frame, searchData);
	0AA7: call_function_return 0x5411E0 num_params 2 pop 2 [frame] [searchData] func_ret [RwFrame*]

	// CClumpModelInfo::FindFrameFromNameWithoutIdCB
	// plugin::CallAndReturn<RwFrame*, 0x541190, RwFrame*, void*>(frame, searchData);
	0AA7: call_function_return 0x541190 num_params 2 pop 2 [frame] [searchData] func_ret [RwFrame*]

	// CClumpModelInfo::GetFrameFromId
	// plugin::CallAndReturn<RwFrame*, 0x541120, RpClump*, int>(clump, id);
	0AA7: call_function_return 0x541120 num_params 2 pop 2 [clump] [id] func_ret [RwFrame*]

	// CClumpModelInfo::SetAtomicRendererCB
	// plugin::Call<0x5412A0, RpAtomic*, void*>(atomic, renderFunc);
	0AA5: call_function 0x5412A0 num_params 2 pop 2 [atomic] [renderFunc]

	// CClumpModelInfo::SetFrameIds
	// plugin::CallMethod<0x541090, CClumpModelInfo *, RwObjectNameIdAssocation*>(this, data);
	0AA6: call_method 0x541090 struct [CClumpModelInfo] num_params 1 pop 0 [data]

	// ClumpModelStore::~ClumpModelStore
	// plugin::CallMethod<0x560190, ClumpModelStore *>(this);
	0AA6: call_method 0x560190 struct [ClumpModelStore] num_params 0 pop 0

plugin_vc\game_vc\CColBox.cpp:

	// CColBox::Set
	// plugin::CallMethod<0x4108D0, CColBox *, CVector const&, CVector const&, unsigned char, unsigned char>(this, sup, inf, material, flags);
	0AA6: call_method 0x4108D0 struct [CColBox] num_params 4 pop 0 [sup] [inf] [material] [flags]

	// CColBox::operator=
	// plugin::CallMethod<0x410890, CColBox *, CColBox const&>(this, right);
	0AA6: call_method 0x410890 struct [CColBox] num_params 1 pop 0 [right]

plugin_vc\game_vc\CColLine.cpp:

	// CColLine::CColLine
	// plugin::CallMethod<0x410940, CColLine *, CVector const&, CVector const&>(this, start, end);
	0AA6: call_method 0x410940 struct [CColLine] num_params 2 pop 0 [start] [end]

plugin_vc\game_vc\CColModel.cpp:

	// CColModel::CColModel
	// plugin::CallMethod<0x417120, CColModel *>(this);
	0AA6: call_method 0x417120 struct [CColModel] num_params 0 pop 0

	// CColModel::CalculateTrianglePlanes
	// plugin::CallMethod<0x416AE0, CColModel *>(this);
	0AA6: call_method 0x416AE0 struct [CColModel] num_params 0 pop 0

	// CColModel::GetLinkPtr
	// plugin::CallMethodAndReturn<int, 0x416A70, CColModel *>(this);
	0AA8: call_method_return 0x416A70 struct [CColModel] num_params 0 pop 0 func_ret [int]

	// CColModel::GetTrianglePoint
	// plugin::CallMethodAndReturn<int, 0x416B40, CColModel *, CVector&, int>(this, arg0, arg1);
	0AA8: call_method_return 0x416B40 struct [CColModel] num_params 2 pop 0 [arg0] [arg1] func_ret [int]

	// CColModel::RemoveCollisionVolumes
	// plugin::CallMethod<0x4169B0, CColModel *>(this);
	0AA6: call_method 0x4169B0 struct [CColModel] num_params 0 pop 0

	// CColModel::RemoveTrianglePlanes
	// plugin::CallMethod<0x416AB0, CColModel *>(this);
	0AA6: call_method 0x416AB0 struct [CColModel] num_params 0 pop 0

	// CColModel::operator delete
	// plugin::Call<0x4170E0, void*>(data);
	0AA5: call_function 0x4170E0 num_params 1 pop 1 [data]

	// CColModel::operator new
	// plugin::CallAndReturn<void*, 0x417100, unsigned int>(size);
	0AA7: call_function_return 0x417100 num_params 1 pop 1 [size] func_ret [void*]

	// CColModel::operator=
	// plugin::CallMethod<0x416B80, CColModel *, CColModel const&>(this, arg0);
	0AA6: call_method 0x416B80 struct [CColModel] num_params 1 pop 0 [arg0]

plugin_vc\game_vc\CColSphere.cpp:

	// CColSphere::IntersectRay
	// plugin::CallMethodAndReturn<bool, 0x417260, CColSphere *, CVector const&, CVector const&, CVector&, CVector&>(this, rayStart, rayEnd, intPoint1, intPoint2);
	0AA8: call_method_return 0x417260 struct [CColSphere] num_params 4 pop 0 [rayStart] [rayEnd] [intPoint1] [intPoint2] func_ret [bool]

	// CColSphere::Set
	// plugin::CallMethod<0x4173A0, CColSphere *, float, CVector const&, unsigned char, unsigned char>(this, radius, center, material, flags);
	0AA6: call_method 0x4173A0 struct [CColSphere] num_params 4 pop 0 [radius] [center] [material] [flags]

plugin_vc\game_vc\CControllerState.cpp:

	// CControllerState::CheckForInput
	// plugin::CallMethodAndReturnDynGlobal<bool, CControllerState *>(gaddrof(CControllerState::CheckForInput), this);
	0AA8: call_method_return 0x4AE470 struct [CControllerState] num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\CCopPed.cpp:

	// CCopPed::ArrestPlayer
	// plugin::CallMethod<0x4EB470, CCopPed *>(this);
	0AA6: call_method 0x4EB470 struct [CCopPed] num_params 0 pop 0

	// CCopPed::CCopPed
	// plugin::CallMethod<0x4ED720, CCopPed *, eCopType, int>(this, copType, arg1);
	0AA6: call_method 0x4ED720 struct [CCopPed] num_params 2 pop 0 [copType] [arg1]

	// CCopPed::ClearPursuit
	// plugin::CallMethod<0x4EB770, CCopPed *>(this);
	0AA6: call_method 0x4EB770 struct [CCopPed] num_params 0 pop 0

	// CCopPed::CopAI
	// plugin::CallMethod<0x4EBC10, CCopPed *>(this);
	0AA6: call_method 0x4EBC10 struct [CCopPed] num_params 0 pop 0

	// CCopPed::ProcessHeliSwat
	// plugin::CallMethod<0x4EB280, CCopPed *>(this);
	0AA6: call_method 0x4EB280 struct [CCopPed] num_params 0 pop 0

	// CCopPed::ProcessStingerCop
	// plugin::CallMethod<0x4EB010, CCopPed *>(this);
	0AA6: call_method 0x4EB010 struct [CCopPed] num_params 0 pop 0

	// CCopPed::ScanForCrimes
	// plugin::CallMethodAndReturn<int, 0x4EBAD0, CCopPed *>(this);
	0AA8: call_method_return 0x4EBAD0 struct [CCopPed] num_params 0 pop 0 func_ret [int]

	// CCopPed::SetArrestPlayer
	// plugin::CallMethod<0x4EB5F0, CCopPed *, CPed*>(this, ped);
	0AA6: call_method 0x4EB5F0 struct [CCopPed] num_params 1 pop 0 [ped]

	// CCopPed::SetPursuit
	// plugin::CallMethod<0x4EB9C0, CCopPed *, bool>(this, arg0);
	0AA6: call_method 0x4EB9C0 struct [CCopPed] num_params 1 pop 0 [arg0]

plugin_vc\game_vc\CCoronas.cpp:

	// CCoronas::DoSunAndMoon
	// plugin::Call<0x542210>();
	0AA5: call_function 0x542210 num_params 0 pop 0

	// CCoronas::UpdateCoronaCoors
	// plugin::Call<0x5423E0, unsigned int, CVector const&, float, float>(id, posn, farClip, angle);
	0AA5: call_function 0x5423E0 num_params 4 pop 4 [id] [posn] [farClip] [angle]

	// CCoronas::RegisterCorona
	// plugin::Call<0x542490, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const&, float, float, RwTexture*, unsigned char, unsigned char, unsigned char, unsigned char, float, bool, float>(coronaId, red, green, blue, alpha, pos, radius, farClip, texture, flare, reflection, arg11, arg12, normalAngle, arg14, arg15);
	0AA5: call_function 0x542490 num_params 16 pop 16 [coronaId] [red] [green] [blue] [alpha] [pos] [radius] [farClip] [texture] [flare] [reflection] [arg11] [arg12] [normalAngle] [arg14] [arg15]

	// CCoronas::RegisterCorona
	// plugin::Call<0x5427A0, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector const&, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float, bool, float>(coronaId, red, green, blue, alpha, pos, radius, farClip, arg8, flare, reflection, arg11, arg12, normalAngle, arg14, arg15);
	0AA5: call_function 0x5427A0 num_params 16 pop 16 [coronaId] [red] [green] [blue] [alpha] [pos] [radius] [farClip] [arg8] [flare] [reflection] [arg11] [arg12] [normalAngle] [arg14] [arg15]

	// CCoronas::Shutdown
	// plugin::Call<0x542800>();
	0AA5: call_function 0x542800 num_params 0 pop 0

	// CCoronas::Init
	// plugin::Call<0x542830>();
	0AA5: call_function 0x542830 num_params 0 pop 0

	// CCoronas::RenderSunReflection
	// plugin::Call<0x542970>();
	0AA5: call_function 0x542970 num_params 0 pop 0

	// CCoronas::RenderReflections
	// plugin::Call<0x542FF0>();
	0AA5: call_function 0x542FF0 num_params 0 pop 0

	// CCoronas::Render
	// plugin::Call<0x543500>();
	0AA5: call_function 0x543500 num_params 0 pop 0

	// CCoronas::Update
	// plugin::Call<0x544130>();
	0AA5: call_function 0x544130 num_params 0 pop 0

plugin_vc\game_vc\CCranes.cpp:

	// CCranes::AddThisOneCrane
	// plugin::CallAndReturnDynGlobal<int, CEntity *>(gaddrof(CCranes::AddThisOneCrane), pEnity);

	// CCranes::DoesMilitaryCraneHaveThisOneAlready
	// plugin::CallAndReturnDynGlobal<bool, unsigned short>(gaddrof(CCranes::DoesMilitaryCraneHaveThisOneAlready), arg1);

	// CCranes::IsThisCarBeingCarriedByAnyCrane
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCranes::IsThisCarBeingCarriedByAnyCrane), pVehicle);

	// CCranes::IsThisCarBeingTargettedByAnyCrane
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CCranes::IsThisCarBeingTargettedByAnyCrane), pVehicle);

	// CCranes::RegisterCarForMilitaryCrane
	// plugin::CallDynGlobal<unsigned short>(gaddrof(CCranes::RegisterCarForMilitaryCrane), arg1);

plugin_vc\game_vc\CCutsceneObject.cpp:

	// CCutsceneObject::CCutsceneObject
	// plugin::CallMethod<0x4E04D0, CCutsceneObject *>(this);
	0AA6: call_method 0x4E04D0 struct [CCutsceneObject] num_params 0 pop 0

	// CCutsceneObject::CreateShadow
	// plugin::CallMethod<0x4E03E0, CCutsceneObject *>(this);
	0AA6: call_method 0x4E03E0 struct [CCutsceneObject] num_params 0 pop 0

plugin_vc\game_vc\CCutsceneShadow.cpp:

	// CCutsceneShadow::Create
	// plugin::CallMethodAndReturnDynGlobal<bool, CCutsceneShadow *, RwObject *, int, bool, int, bool>(gaddrof(CCutsceneShadow::Create), this, object, rasterSize, resample, blurPasses, gradient);
	0AA8: call_method_return 0x625E60 struct [CCutsceneShadow] num_params 5 pop 0 [object] [rasterSize] [resample] [blurPasses] [gradient] func_ret [bool]

	// CCutsceneShadow::DrawBorderAroundTexture
	// plugin::CallMethodDynGlobal<CCutsceneShadow *, RwRGBA const &>(gaddrof(CCutsceneShadow::DrawBorderAroundTexture), this, color);

	// *CCutsceneShadow::GetShadowCamera
	// plugin::CallMethodAndReturnDynGlobal<CShadowCamera *, CCutsceneShadow *, int>(gaddrof(CCutsceneShadow::GetShadowCamera), this, camType);
	0AA8: call_method_return 0x625D50 struct [*CCutsceneShadow] num_params 1 pop 0 [camType] func_ret [CShadowCamera *]

	// *CCutsceneShadow::GetShadowRwTexture
	// plugin::CallMethodAndReturnDynGlobal<RwTexture *, CCutsceneShadow *>(gaddrof(CCutsceneShadow::GetShadowRwTexture), this);
	0AA8: call_method_return 0x625B80 struct [*CCutsceneShadow] num_params 0 pop 0 func_ret [RwTexture *]

	// CCutsceneShadow::IsInitialized
	// plugin::CallMethodAndReturnDynGlobal<bool, CCutsceneShadow *>(gaddrof(CCutsceneShadow::IsInitialized), this);
	0AA8: call_method_return 0x625D80 struct [CCutsceneShadow] num_params 0 pop 0 func_ret [bool]

	// *CCutsceneShadow::SetLightProperties
	// plugin::CallMethodAndReturnDynGlobal<RwFrame *, CCutsceneShadow *, float, float, bool>(gaddrof(CCutsceneShadow::SetLightProperties), this, angleY, angleX, setLight);
	0AA8: call_method_return 0x625D90 struct [*CCutsceneShadow] num_params 3 pop 0 [angleY] [angleX] [setLight] func_ret [RwFrame *]

	// *CCutsceneShadow::Update
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CCutsceneShadow *>(gaddrof(CCutsceneShadow::Update), this);
	0AA8: call_method_return 0x625BC0 struct [*CCutsceneShadow] num_params 0 pop 0 func_ret [RwRaster *]

	// *CCutsceneShadow::UpdateForCutscene
	// plugin::CallMethodAndReturnDynGlobal<RwTexture *, CCutsceneShadow *>(gaddrof(CCutsceneShadow::UpdateForCutscene), this);
	0AA8: call_method_return 0x625BA0 struct [*CCutsceneShadow] num_params 0 pop 0 func_ret [RwTexture *]

plugin_vc\game_vc\CDamageManager.cpp:

	// CDamageManager::ApplyDamage
	// plugin::CallMethodAndReturn<bool, 0x5A9650, CDamageManager *, tComponent, float, float>(this, component, intensity, arg2);
	0AA8: call_method_return 0x5A9650 struct [CDamageManager] num_params 3 pop 0 [component] [intensity] [arg2] func_ret [bool]

	// CDamageManager::FuckCarCompletely
	// plugin::CallMethod<0x5A9600, CDamageManager *>(this);
	0AA6: call_method 0x5A9600 struct [CDamageManager] num_params 0 pop 0

	// CDamageManager::GetComponentGroup
	// plugin::CallMethodAndReturn<bool, 0x5A98D0, CDamageManager *, tComponent, tComponentGroup*, unsigned char*>(this, component, group, damageCompId);
	0AA8: call_method_return 0x5A98D0 struct [CDamageManager] num_params 3 pop 0 [component] [group] [damageCompId] func_ret [bool]

	// CDamageManager::GetDoorStatus
	// plugin::CallMethodAndReturn<unsigned int, 0x5A9810, CDamageManager *, eDoors>(this, door);
	0AA8: call_method_return 0x5A9810 struct [CDamageManager] num_params 1 pop 0 [door] func_ret [unsigned int]

	// CDamageManager::GetEngineStatus
	// plugin::CallMethodAndReturn<unsigned int, 0x5A97E0, CDamageManager *>(this);
	0AA8: call_method_return 0x5A97E0 struct [CDamageManager] num_params 0 pop 0 func_ret [unsigned int]

	// CDamageManager::GetLightStatus
	// plugin::CallMethodAndReturn<unsigned int, 0x5A9870, CDamageManager *, eLights>(this, light);
	0AA8: call_method_return 0x5A9870 struct [CDamageManager] num_params 1 pop 0 [light] func_ret [unsigned int]

	// CDamageManager::GetPanelStatus
	// plugin::CallMethodAndReturn<unsigned int, 0x5A9850, CDamageManager *, ePanels>(this, panel);
	0AA8: call_method_return 0x5A9850 struct [CDamageManager] num_params 1 pop 0 [panel] func_ret [unsigned int]

	// CDamageManager::GetWheelStatus
	// plugin::CallMethodAndReturn<unsigned int, 0x5A9830, CDamageManager *, int>(this, wheel);
	0AA8: call_method_return 0x5A9830 struct [CDamageManager] num_params 1 pop 0 [wheel] func_ret [unsigned int]

	// CDamageManager::ProgressPanelDamage
	// plugin::CallMethodAndReturn<bool, 0x5A9790, CDamageManager *, unsigned char>(this, panel);
	0AA8: call_method_return 0x5A9790 struct [CDamageManager] num_params 1 pop 0 [panel] func_ret [bool]

	// CDamageManager::ResetDamageStatus
	// plugin::CallMethod<0x5A9890, CDamageManager *>(this);
	0AA6: call_method 0x5A9890 struct [CDamageManager] num_params 0 pop 0

	// CDamageManager::SetDoorStatus
	// plugin::CallMethod<0x5A9820, CDamageManager *, eDoors, unsigned int>(this, door, status);
	0AA6: call_method 0x5A9820 struct [CDamageManager] num_params 2 pop 0 [door] [status]

	// CDamageManager::SetEngineStatus
	// plugin::CallMethod<0x5A97F0, CDamageManager *, unsigned int>(this, status);
	0AA6: call_method 0x5A97F0 struct [CDamageManager] num_params 1 pop 0 [status]

	// CDamageManager::SetWheelStatus
	// plugin::CallMethod<0x5A9840, CDamageManager *, int, unsigned int>(this, wheel, status);
	0AA6: call_method 0x5A9840 struct [CDamageManager] num_params 2 pop 0 [wheel] [status]

plugin_vc\game_vc\CDarkel.cpp:

	// CDarkel::DealWithWeaponChangeAtEndOfFrenzy
	// plugin::Call<0x429910>();
	0AA5: call_function 0x429910 num_params 0 pop 0

	// CDarkel::DrawMessages
	// plugin::Call<0x429FE0>();
	0AA5: call_function 0x429FE0 num_params 0 pop 0

	// CDarkel::FrenzyOnGoing
	// plugin::CallAndReturn<bool, 0x429FC0>();
	0AA7: call_function_return 0x429FC0 num_params 0 pop 0 func_ret [bool]

	// CDarkel::Init
	// plugin::Call<0x42A7A0>();
	0AA5: call_function 0x42A7A0 num_params 0 pop 0

	// CDarkel::QueryModelsKilledByPlayer
	// plugin::CallAndReturn<short, 0x429AF0, int>(arg0);
	0AA7: call_function_return 0x429AF0 num_params 1 pop 1 [arg0] func_ret [short]

	// CDarkel::ReadStatus
	// plugin::CallAndReturn<short, 0x429FD0>();
	0AA7: call_function_return 0x429FD0 num_params 0 pop 0 func_ret [short]

	// CDarkel::RegisterCarBlownUpByPlayer
	// plugin::CallAndReturn<int, 0x429DF0, CVehicle*>(vehicle);
	0AA7: call_function_return 0x429DF0 num_params 1 pop 1 [vehicle] func_ret [int]

	// CDarkel::RegisterKillByPlayer
	// plugin::Call<0x429E90, CPed*, eWeaponType, bool>(ped, weaponType, arg2);
	0AA5: call_function 0x429E90 num_params 3 pop 3 [ped] [weaponType] [arg2]

	// CDarkel::RegisterKillNotByPlayer
	// plugin::Call<0x429E80, CPed*, eWeaponType>(arg0, weaponType);
	0AA5: call_function 0x429E80 num_params 2 pop 2 [arg0] [weaponType]

	// CDarkel::ResetModelsKilledByPlayer
	// plugin::Call<0x429B00>();
	0AA5: call_function 0x429B00 num_params 0 pop 0

	// CDarkel::ResetOnPlayerDeath
	// plugin::Call<0x429F90>();
	0AA5: call_function 0x429F90 num_params 0 pop 0

	// CDarkel::StartFrenzy
	// plugin::Call<0x429B60, eWeaponType, int, unsigned short, int, unsigned short*, int, int, int, bool, bool>(weaponType, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	0AA5: call_function 0x429B60 num_params 10 pop 10 [weaponType] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9]

	// CDarkel::Update
	// plugin::Call<0x42A650>();
	0AA5: call_function 0x42A650 num_params 0 pop 0

plugin_vc\game_vc\CDirectory.cpp:

	// CDirectory::AddItem
	// plugin::CallMethodDynGlobal<CDirectory *, const CDirectory::DirectoryInfo *>(gaddrof(CDirectory::AddItem), this, entry);

	// CDirectory::FindItem
	// plugin::CallMethodAndReturnDynGlobal<bool, CDirectory *, char const *, unsigned int *, unsigned int *>(gaddrof(CDirectory::FindItem), this, name, outOffset, outSize);
	0AA8: call_method_return 0x487220 struct [CDirectory] num_params 3 pop 0 [name] [outOffset] [outSize] func_ret [bool]

	// CDirectory::ReadDirFile
	// plugin::CallMethodDynGlobal<CDirectory *, char const *>(gaddrof(CDirectory::ReadDirFile), this, filename);

	// CDirectory::WriteDirFile
	// plugin::CallMethodAndReturnDynGlobal<bool, CDirectory *, char const *>(gaddrof(CDirectory::WriteDirFile), this, filename);
	0AA8: call_method_return 0x487320 struct [CDirectory] num_params 1 pop 0 [filename] func_ret [bool]

plugin_vc\game_vc\cDMAudio.cpp:

	// cDMAudio::PlayFrontEndSound
	// plugin::CallMethod<0x5F9960, cDMAudio*, unsigned short, unsigned int>(this, frontend, volume);
	0AA6: call_method 0x5F9960 struct [cDMAudio] num_params 2 pop 0 [frontend] [volume]

	// cDMAudio::PlayLoadedMissionAudio
	// plugin::CallMethod<0x5F97B0, cDMAudio*, unsigned char>(this, slot);
	0AA6: call_method 0x5F97B0 struct [cDMAudio] num_params 1 pop 0 [slot]

	// cDMAudio::ClearMissionAudio
	// plugin::CallMethod<0x5F9770, cDMAudio*, unsigned char>(this, slot);
	0AA6: call_method 0x5F9770 struct [cDMAudio] num_params 1 pop 0 [slot]

	// cDMAudio::PreloadMissionAudio
	// plugin::CallMethod<0x5F9820, cDMAudio*, unsigned char, const char*>(this, slot, missionAudio);
	0AA6: call_method 0x5F9820 struct [cDMAudio] num_params 2 pop 0 [slot] [missionAudio]

	// cDMAudio::PlayOneShot
	// plugin::CallMethod<0x5F9DA0, cDMAudio*, int, unsigned short, float>(this, audioEntity, shot, volume);
	0AA6: call_method 0x5F9DA0 struct [cDMAudio] num_params 3 pop 0 [audioEntity] [shot] [volume]

	// cDMAudio::SetRadioInCar
	// plugin::CallMethod<0x5F9730, cDMAudio*, unsigned int>(this, radio);
	0AA6: call_method 0x5F9730 struct [cDMAudio] num_params 1 pop 0 [radio]

	// cDMAudio::PlayFrontEndTrack
	// plugin::CallMethod<0x5F9910, cDMAudio*, unsigned int, char>(this, track, flag);
	0AA6: call_method 0x5F9910 struct [cDMAudio] num_params 2 pop 0 [track] [flag]

	// cDMAudio::StopFrontEndTrack
	// plugin::CallMethod<0x5F98F0, cDMAudio*>(this);
	0AA6: call_method 0x5F98F0 struct [cDMAudio] num_params 0 pop 0

	// cDMAudio::IsMP3RadioChannelAvailable
	// plugin::CallMethodAndReturn<bool, 0x5F9BB0, cDMAudio*>(this);
	0AA8: call_method_return 0x5F9BB0 struct [cDMAudio] num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\CDraw.cpp:

	// CDraw::CalculateAspectRatio
	// plugin::Call<0x54A270>();
	0AA5: call_function 0x54A270 num_params 0 pop 0

	// CDraw::SetFOV
	// plugin::Call<0x54A2E0, float>(fov);
	0AA5: call_function 0x54A2E0 num_params 1 pop 1 [fov]

plugin_vc\game_vc\CEmergencyPed.cpp:

	// CEmergencyPed::CEmergencyPed
	// plugin::CallMethod<0x4EEB40, CEmergencyPed *, unsigned int>(this, emergencyType);
	0AA6: call_method 0x4EEB40 struct [CEmergencyPed] num_params 1 pop 0 [emergencyType]

	// CEmergencyPed::FiremanAI
	// plugin::CallMethod<0x4EDA80, CEmergencyPed *>(this);
	0AA6: call_method 0x4EDA80 struct [CEmergencyPed] num_params 0 pop 0

	// CEmergencyPed::MedicAI
	// plugin::CallMethod<0x4EDC90, CEmergencyPed *>(this);
	0AA6: call_method 0x4EDC90 struct [CEmergencyPed] num_params 0 pop 0

plugin_vc\game_vc\CEscalators.cpp:

	// CEscalators::AddOne
	// plugin::CallMethod<0x54B0A0, CEscalators *, CVector const&, CVector const&, CVector const&, CVector const&, bool>(this, arg0, arg1, arg2, arg3, arg4);
	0AA6: call_method 0x54B0A0 struct [CEscalators] num_params 5 pop 0 [arg0] [arg1] [arg2] [arg3] [arg4]

	// CEscalators::Init
	// plugin::Call<0x54B460>();
	0AA5: call_function 0x54B460 num_params 0 pop 0

	// CEscalators::Shutdown
	// plugin::Call<0x54B3A0>();
	0AA5: call_function 0x54B3A0 num_params 0 pop 0

	// CEscalators::Update
	// plugin::CallMethod<0x54A9B0, CEscalators *>(this);
	0AA6: call_method 0x54A9B0 struct [CEscalators] num_params 0 pop 0

plugin_vc\game_vc\CFileLoader.cpp:

	// CFileLoader::LoadAtomicFile2Return
	// plugin::CallAndReturn<RpClump*, 0x48D7C0, const char*>(file);
	0AA7: call_function_return 0x48D7C0 num_params 1 pop 1 [file] func_ret [RpClump*]

plugin_vc\game_vc\CFileMgr.cpp:

	// CFileMgr::GetErrorReadWrite
	// plugin::CallAndReturn<int, 0x48DE90, int>(fileHandle);
	0AA7: call_function_return 0x48DE90 num_params 1 pop 1 [fileHandle] func_ret [int]

	// CFileMgr::CloseFile
	// plugin::CallAndReturn<int, 0x48DEA0, int>(fileHandle);
	0AA7: call_function_return 0x48DEA0 num_params 1 pop 1 [fileHandle] func_ret [int]

	// CFileMgr::ReadLine
	// plugin::CallAndReturn<bool, 0x48DEB0, int, char*, int>(fileHandle, buffer, maxSize);
	0AA7: call_function_return 0x48DEB0 num_params 3 pop 3 [fileHandle] [buffer] [maxSize] func_ret [bool]

	// CFileMgr::Seek
	// plugin::CallAndReturn<bool, 0x48DEE0, int, int, int>(fileHandle, offset, origin);
	0AA7: call_function_return 0x48DEE0 num_params 3 pop 3 [fileHandle] [offset] [origin] func_ret [bool]

	// CFileMgr::Write
	// plugin::CallAndReturn<int, 0x48DF30, int, char*, int>(fileHandle, buffer, size);
	0AA7: call_function_return 0x48DF30 num_params 3 pop 3 [fileHandle] [buffer] [size] func_ret [int]

	// CFileMgr::Read
	// plugin::CallAndReturn<int, 0x48DF50, int, char*, int>(fileHandle, buffer, size);
	0AA7: call_function_return 0x48DF50 num_params 3 pop 3 [fileHandle] [buffer] [size] func_ret [int]

	// CFileMgr::OpenFileForWriting
	// plugin::CallAndReturn<int, 0x48DF70, char const*>(filepath);
	0AA7: call_function_return 0x48DF70 num_params 1 pop 1 [filepath] func_ret [int]

	// CFileMgr::OpenFile
	// plugin::CallAndReturn<int, 0x48DF90, char const*, char const*>(filepath, mode);
	0AA7: call_function_return 0x48DF90 num_params 2 pop 2 [filepath] [mode] func_ret [int]

	// CFileMgr::LoadFile
	// plugin::CallAndReturn<int, 0x48DFB0, char const*, unsigned char*, int, char const*>(filepath, buffer, size, mode);
	0AA7: call_function_return 0x48DFB0 num_params 4 pop 4 [filepath] [buffer] [size] [mode] func_ret [int]

	// CFileMgr::SetDirMyDocuments
	// plugin::Call<0x48E020>();
	0AA5: call_function 0x48E020 num_params 0 pop 0

	// CFileMgr::SetDir
	// plugin::Call<0x48E030, char const*>(dir);
	0AA5: call_function 0x48E030 num_params 1 pop 1 [dir]

	// CFileMgr::ChangeDir
	// plugin::Call<0x48E090, char const*>(dir);
	0AA5: call_function 0x48E090 num_params 1 pop 1 [dir]

	// CFileMgr::Initialise
	// plugin::Call<0x48E100>();
	0AA5: call_function 0x48E100 num_params 0 pop 0

plugin_vc\game_vc\CFont.cpp:

	// CFont::character_code
	// plugin::CallAndReturn<short, 0x54FE50, unsigned char>(character);
	0AA7: call_function_return 0x54FE50 num_params 1 pop 1 [character] func_ret [short]

	// CFont::FindNewCharacter
	// plugin::CallAndReturn<int, 0x54FE70, short>(character);
	0AA7: call_function_return 0x54FE70 num_params 1 pop 1 [character] func_ret [int]

	// CFont::SetDropShadowPosition
	// plugin::Call<0x54FF20, short>(position);
	0AA5: call_function 0x54FF20 num_params 1 pop 1 [position]

	// CFont::SetDropColor
	// plugin::Call<0x54FF30, CRGBA *>(&color);
	0AA5: call_function 0x54FF30 num_params 1 pop 1 [&color]

	// CFont::SetAlphaFade
	// plugin::Call<0x54FFC0, float>(fade);
	0AA5: call_function 0x54FFC0 num_params 1 pop 1 [fade]

	// CFont::SetRightJustifyWrap
	// plugin::Call<0x54FFD0, float>(wrap);
	0AA5: call_function 0x54FFD0 num_params 1 pop 1 [wrap]

	// CFont::SetFontStyle
	// plugin::Call<0x54FFE0, short>(style);
	0AA5: call_function 0x54FFE0 num_params 1 pop 1 [style]

	// CFont::SetPropOn
	// plugin::Call<0x550020>();
	0AA5: call_function 0x550020 num_params 0 pop 0

	// CFont::SetPropOff
	// plugin::Call<0x550030>();
	0AA5: call_function 0x550030 num_params 0 pop 0

	// CFont::SetRightJustifyOff
	// plugin::Call<0x550040>();
	0AA5: call_function 0x550040 num_params 0 pop 0

	// CFont::SetRightJustifyOn
	// plugin::Call<0x550060>();
	0AA5: call_function 0x550060 num_params 0 pop 0

	// CFont::SetBackGroundOnlyTextOff
	// plugin::Call<0x550080>();
	0AA5: call_function 0x550080 num_params 0 pop 0

	// CFont::SetBackGroundOnlyTextOn
	// plugin::Call<0x550090>();
	0AA5: call_function 0x550090 num_params 0 pop 0

	// CFont::SetBackgroundColor
	// plugin::Call<0x5500A0, CRGBA *>(&color);
	0AA5: call_function 0x5500A0 num_params 1 pop 1 [&color]

	// CFont::SetBackgroundOff
	// plugin::Call<0x5500D0>();
	0AA5: call_function 0x5500D0 num_params 0 pop 0

	// CFont::SetBackgroundOn
	// plugin::Call<0x5500E0>();
	0AA5: call_function 0x5500E0 num_params 0 pop 0

	// CFont::SetCentreSize
	// plugin::Call<0x5500F0, float>(size);
	0AA5: call_function 0x5500F0 num_params 1 pop 1 [size]

	// CFont::SetWrapx
	// plugin::Call<0x550100, float>(wrap);
	0AA5: call_function 0x550100 num_params 1 pop 1 [wrap]

	// CFont::SetCentreOff
	// plugin::Call<0x550110>();
	0AA5: call_function 0x550110 num_params 0 pop 0

	// CFont::SetCentreOn
	// plugin::Call<0x550120>();
	0AA5: call_function 0x550120 num_params 0 pop 0

	// CFont::SetJustifyOff
	// plugin::Call<0x550140>();
	0AA5: call_function 0x550140 num_params 0 pop 0

	// CFont::SetJustifyOn
	// plugin::Call<0x550150>();
	0AA5: call_function 0x550150 num_params 0 pop 0

	// CFont::SetColor
	// plugin::Call<0x550170, CRGBA *>(&color);
	0AA5: call_function 0x550170 num_params 1 pop 1 [&color]

	// CFont::SetSlant
	// plugin::Call<0x550200, float>(slant);
	0AA5: call_function 0x550200 num_params 1 pop 1 [slant]

	// CFont::SetSlantRefPoint
	// plugin::Call<0x550210, float, float>(x, y);
	0AA5: call_function 0x550210 num_params 2 pop 2 [x] [y]

	// CFont::SetScale
	// plugin::Call<0x550230, float, float>(width, height);
	0AA5: call_function 0x550230 num_params 2 pop 2 [width] [height]

	// CFont::DrawFonts
	// plugin::Call<0x550250>();
	0AA5: call_function 0x550250 num_params 0 pop 0

	// CFont::FilterOutTokensFromString
	// plugin::Call<0x550260, const wchar_t*>(str);
	0AA5: call_function 0x550260 num_params 1 pop 1 [str]

	// CFont::ParseToken
	// plugin::CallAndReturn<wchar_t*, 0x5502D0, wchar_t*>(str);
	0AA7: call_function_return 0x5502D0 num_params 1 pop 1 [str] func_ret [wchar_t*]

	// CFont::ParseToken
	// plugin::CallAndReturn<wchar_t*, 0x550510, wchar_t*, CRGBA&, bool&, bool&>(str, color, flashing, bold);
	0AA7: call_function_return 0x550510 num_params 4 pop 4 [str] [color] [flashing] [bold] func_ret [wchar_t*]

	// CFont::GetStringWidth
	// plugin::CallAndReturn<float, 0x550650, const wchar_t*, bool>(str, sentence);
	0AA7: call_function_return 0x550650 num_params 2 pop 2 [str] [sentence] func_ret [float]

	// CFont::GetTextRect
	// plugin::Call<0x550720, CRect*, float, float, const wchar_t*>(rect_out, x, y, text);
	0AA5: call_function 0x550720 num_params 4 pop 4 [rect_out] [x] [y] [text]

	// CFont::GetNumberLines
	// plugin::CallAndReturn<int, 0x550C70, float, float, const wchar_t*>(x, y, text);
	0AA7: call_function_return 0x550C70 num_params 3 pop 3 [x] [y] [text] func_ret [int]

	// CFont::PrintString
	// plugin::Call<0x551040, float, float, const wchar_t*>(x, y, text);
	0AA5: call_function 0x551040 num_params 3 pop 3 [x] [y] [text]

	// CFont::PrintStringFromBottom
	// plugin::Call<0x551620, float, float, const wchar_t*>(x, y, text);
	0AA5: call_function 0x551620 num_params 3 pop 3 [x] [y] [text]

	// CFont::PrintString
	// plugin::Call<0x5516C0, float, float, unsigned int, const wchar_t*, const wchar_t*, float>(x, y, arg2, arg3, arg4, arg5);
	0AA5: call_function 0x5516C0 num_params 6 pop 6 [x] [y] [arg2] [arg3] [arg4] [arg5]

	// CFont::RenderFontBuffer
	// plugin::Call<0x551A30>();
	0AA5: call_function 0x551A30 num_params 0 pop 0

	// CFont::PrintChar
	// plugin::Call<0x551E70, float, float, short>(x, y, character);
	0AA5: call_function 0x551E70 num_params 3 pop 3 [x] [y] [character]

	// CFont::InitPerFrame
	// plugin::Call<0x5522B0>();
	0AA5: call_function 0x5522B0 num_params 0 pop 0

	// CFont::Shutdown
	// plugin::Call<0x5522E0>();
	0AA5: call_function 0x5522E0 num_params 0 pop 0

	// CFont::Initialise
	// plugin::Call<0x552310>();
	0AA5: call_function 0x552310 num_params 0 pop 0

	// UnicodeMakeUpperCase
	// plugin::Call<0x552470, wchar_t*, wchar_t const*>(str_out, str_in);
	0AA5: call_function 0x552470 num_params 2 pop 2 [str_out] [str_in]

	// UnicodeStrlen
	// plugin::CallAndReturn<int, 0x5524B0, wchar_t const*>(str);
	0AA7: call_function_return 0x5524B0 num_params 1 pop 1 [str] func_ret [int]

	// AsciiToUnicode
	// plugin::Call<0x552500, char const*, wchar_t*>(str_ascii, str_unicode);
	0AA5: call_function 0x552500 num_params 2 pop 2 [str_ascii] [str_unicode]

plugin_vc\game_vc\CGame.cpp:

	// CGame::CanSeeOutSideFromCurrArea
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::CanSeeOutSideFromCurrArea));

	// CGame::CanSeeWaterFromCurrArea
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::CanSeeWaterFromCurrArea));

	// CGame::Initialise
	// plugin::CallAndReturnDynGlobal<bool, char const *>(gaddrof(CGame::Initialise), datFile);

	// CGame::InitialiseOnceAfterRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseOnceAfterRW));

	// CGame::InitialiseOnceBeforeRW
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseOnceBeforeRW));

	// CGame::InitialiseRenderWare
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::InitialiseRenderWare));

	// CGame::Shutdown
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CGame::Shutdown));

	// CGame::TidyUpMemory
	// plugin::CallDynGlobal<bool, bool>(gaddrof(CGame::TidyUpMemory), a1, clearD3Dmem);

	// AppEventHandler
	// plugin::CallAndReturnDynGlobal<RsEventStatus, RsEvent, void *>(gaddrof(AppEventHandler), event, param);

	// InitialiseGame
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(InitialiseGame));

	// Idle
	// plugin::CallDynGlobal<void *>(gaddrof(Idle), param);

	// LoadingScreen
	// plugin::CallDynGlobal<char const *, char const *, char const *>(gaddrof(LoadingScreen), title, message, screenName);

	// *GetLevelSplashScreen
	// plugin::CallAndReturnDynGlobal<char const *, int>(gaddrof(GetLevelSplashScreen), screenId);

	// *GetRandomSplashScreen
	// plugin::CallAndReturnDynGlobal<char const *>(gaddrof(GetRandomSplashScreen));

	// *LoadSplash
	// plugin::CallAndReturnDynGlobal<CSprite2d *, char const *>(gaddrof(LoadSplash), splashName);

	// PluginAttach
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(PluginAttach));

	// DoRWStuffStartOfFrame
	// plugin::CallAndReturnDynGlobal<bool, short, short, short, short, short, short, short>(gaddrof(DoRWStuffStartOfFrame), topR, topG, topB, bottomR, bottomG, bottomB, alpha);

	// MatchModelString
	// plugin::CallDynGlobal<char *, int>(gaddrof(MatchModelString), modelName, modelIndex);

plugin_vc\game_vc\CGameLogic.cpp:

	// CGameLogic::InitAtStartOfGame
	// plugin::Call<0x42C480>();
	0AA5: call_function 0x42C480 num_params 0 pop 0

	// CGameLogic::Update
	// plugin::Call<0x42BB70>();
	0AA5: call_function 0x42BB70 num_params 0 pop 0

	// CGameLogic::RestorePlayerStuffDuringResurrection
	// plugin::Call<0x42B900, CPlayerPed*, CVector, float>(arg1, arg2, arg3);
	0AA5: call_function 0x42B900 num_params 3 pop 3 [arg1] [arg2] [arg3]

	// CGameLogic::ClearShortCut
	// plugin::Call<0x42B730>();
	0AA5: call_function 0x42B730 num_params 0 pop 0

	// CGameLogic::UpdateShortCut
	// plugin::Call<0x42AE70>();
	0AA5: call_function 0x42AE70 num_params 0 pop 0

	// CGameLogic::AfterDeathArrestSetUpShortCutTaxi
	// plugin::Call<0x42AC10>();
	0AA5: call_function 0x42AC10 num_params 0 pop 0

	// CGameLogic::RemoveShortCutDropOffPointForMission
	// plugin::Call<0x42ADE0>();
	0AA5: call_function 0x42ADE0 num_params 0 pop 0

plugin_vc\game_vc\CGangs.cpp:

	// CGangs::SetWillAttackPlayerWithCops
	// plugin::Call<0x4EEF30, ePedType, bool>(pedtype, bAttackPlayerWithCops);
	0AA5: call_function 0x4EEF30 num_params 2 pop 2 [pedtype] [bAttackPlayerWithCops]

	// CGangs::SetGangWeapons
	// plugin::Call<0x4EED70, short, int, int>(gangId, weapon1_Id, weapon2_Id);
	0AA5: call_function 0x4EED70 num_params 3 pop 3 [gangId] [weapon1_Id] [weapon2_Id]

	// CGangs::SetGangVehicleModel
	// plugin::Call<0x4EEDD0, short, int>(gangId, vehicleModelId);
	0AA5: call_function 0x4EEDD0 num_params 2 pop 2 [gangId] [vehicleModelId]

	// CGangs::SetGangPedModels
	// plugin::Call<0x4EEDA0, short, int, int>(gangId, pedModel1_Id, pedModel2_Id);
	0AA5: call_function 0x4EEDA0 num_params 3 pop 3 [gangId] [pedModel1_Id] [pedModel2_Id]

	// CGangs::SaveAllGangData
	// plugin::Call<0x4EECA0, unsigned char*, unsigned int*>(arg0, arg1);
	0AA5: call_function 0x4EECA0 num_params 2 pop 2 [arg0] [arg1]

	// CGangs::Initialise
	// plugin::Call<0x4EEDF0>();
	0AA5: call_function 0x4EEDF0 num_params 0 pop 0

	// CGangs::ChooseGangPedModel
	// plugin::CallAndReturn<int, 0x4EED20, short>(gangId);
	0AA7: call_function_return 0x4EED20 num_params 1 pop 1 [gangId] func_ret [int]

	// CGangs::GetWillAttackPlayerWithCops
	// plugin::CallAndReturn<bool, 0x18BB48, ePedType>(pedtype);
	0AA7: call_function_return 0x18BB48 num_params 1 pop 1 [pedtype] func_ret [bool]

plugin_vc\game_vc\CGeneral.cpp:

	// CGeneral::GetATanOfXY
	// plugin::CallAndReturnDynGlobal<float, float, float>(gaddrof(CGeneral::GetATanOfXY), x, y);

	// CGeneral::GetAngleBetweenPoints
	// plugin::CallAndReturnDynGlobal<float, float, float, float, float>(gaddrof(CGeneral::GetAngleBetweenPoints), x1, y1, x2, y2);

	// CGeneral::GetNodeHeadingFromVector
	// plugin::CallAndReturnDynGlobal<int, float, float>(gaddrof(CGeneral::GetNodeHeadingFromVector), x, y);

	// CGeneral::GetRadianAngleBetweenPoints
	// plugin::CallAndReturnDynGlobal<float, float, float, float, float>(gaddrof(CGeneral::GetRadianAngleBetweenPoints), x1, y1, x2, y2);

	// CGeneral::LimitAngle
	// plugin::CallAndReturnDynGlobal<float, float>(gaddrof(CGeneral::LimitAngle), angle);

	// CGeneral::LimitRadianAngle
	// plugin::CallAndReturnDynGlobal<float, float>(gaddrof(CGeneral::LimitRadianAngle), angle);

	// CGeneral::SolveQuadratic
	// plugin::CallAndReturnDynGlobal<unsigned char, float, float, float, float &, float &>(gaddrof(CGeneral::SolveQuadratic), a, b, c, x1, x2);

plugin_vc\game_vc\cHandlingDataMgr.cpp:

	// cHandlingDataMgr::cHandlingDataMgr
	// plugin::CallMethod<0x5ABDC0, cHandlingDataMgr *>(this);
	0AA6: call_method 0x5ABDC0 struct [cHandlingDataMgr] num_params 0 pop 0

	// cHandlingDataMgr::ConvertDataToGameUnits
	// plugin::CallMethod<0x5ABAA0, cHandlingDataMgr *, tHandlingData*>(this, handling);
	0AA6: call_method 0x5ABAA0 struct [cHandlingDataMgr] num_params 1 pop 0 [handling]

	// cHandlingDataMgr::FindExactWord
	// plugin::CallMethodAndReturn<int, 0x5ABD30, cHandlingDataMgr *, char*, char*, int, int>(this, line, nameTable, entrySize, entryCount);
	0AA8: call_method_return 0x5ABD30 struct [cHandlingDataMgr] num_params 4 pop 0 [line] [nameTable] [entrySize] [entryCount] func_ret [int]

	// cHandlingDataMgr::GetBoatPointer
	// plugin::CallMethodAndReturn<tBoatHandlingData*, 0x5ABA40, cHandlingDataMgr *, unsigned char>(this, handlingId);
	0AA8: call_method_return 0x5ABA40 struct [cHandlingDataMgr] num_params 1 pop 0 [handlingId] func_ret [tBoatHandlingData*]

	// cHandlingDataMgr::GetFlyingPointer
	// plugin::CallMethodAndReturn<tFlyingHandlingData*, 0x5ABA70, cHandlingDataMgr *, unsigned char>(this, handlingId);
	0AA8: call_method_return 0x5ABA70 struct [cHandlingDataMgr] num_params 1 pop 0 [handlingId] func_ret [tFlyingHandlingData*]

	// cHandlingDataMgr::GetHandlingId
	// plugin::CallMethodAndReturn<int, 0x5ABCC0, cHandlingDataMgr *, char const*>(this, name);
	0AA8: call_method_return 0x5ABCC0 struct [cHandlingDataMgr] num_params 1 pop 0 [name] func_ret [int]

	// cHandlingDataMgr::Initialise
	// plugin::CallMethod<0x5ABA10, cHandlingDataMgr *>(this);
	0AA6: call_method 0x5ABA10 struct [cHandlingDataMgr] num_params 0 pop 0

	// cHandlingDataMgr::LoadHandlingData
	// plugin::CallMethod<0x5AAE20, cHandlingDataMgr *>(this);
	0AA6: call_method 0x5AAE20 struct [cHandlingDataMgr] num_params 0 pop 0

plugin_vc\game_vc\CHeli.cpp:

	// CHeli::CHeli
	// plugin::CallMethod<0x5AF7F0, CHeli *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x5AF7F0 struct [CHeli] num_params 2 pop 0 [modelIndex] [createdBy]

	// CHeli::InitHelis
	// plugin::Call<0x5AD4A0>();
	0AA5: call_function 0x5AD4A0 num_params 0 pop 0

	// CHeli::PreRenderAlways
	// plugin::CallMethod<0x5AF2E0, CHeli *>(this);
	0AA6: call_method 0x5AF2E0 struct [CHeli] num_params 0 pop 0

	// CHeli::SendDownSwat
	// plugin::CallMethodAndReturn<bool, 0x5ABE20, CHeli *>(this);
	0AA8: call_method_return 0x5ABE20 struct [CHeli] num_params 0 pop 0 func_ret [bool]

	// CHeli::SpawnFlyingComponent
	// plugin::CallMethodAndReturn<CObject*, 0x5AC1E0, CHeli *, int>(this, nodeIndex);
	0AA8: call_method_return 0x5AC1E0 struct [CHeli] num_params 1 pop 0 [nodeIndex] func_ret [CObject*]

	// CHeli::SpecialHeliPreRender
	// plugin::CallAndReturn<bool, 0x5AC500>();
	0AA7: call_function_return 0x5AC500 num_params 0 pop 0 func_ret [bool]

	// CHeli::TestBulletCollision
	// plugin::CallAndReturn<bool, 0x5AC6C0, CVector*, CVector*, CVector*, int>(arg0, arg1, arg2, arg3);
	0AA7: call_function_return 0x5AC6C0 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3] func_ret [bool]

	// CHeli::TestRocketCollision
	// plugin::CallAndReturn<bool, 0x5AC9A0, CVector*>(arg0);
	0AA7: call_function_return 0x5AC9A0 num_params 1 pop 1 [arg0] func_ret [bool]

	// CHeli::TestSniperCollision
	// plugin::CallAndReturn<bool, 0x5AC520, CVector*, CVector*>(origin, target);
	0AA7: call_function_return 0x5AC520 num_params 2 pop 2 [origin] [target] func_ret [bool]

	// CHeli::UpdateHelis
	// plugin::Call<0x5ACDA0>();
	0AA5: call_function 0x5ACDA0 num_params 0 pop 0

	// GenerateHeli
	// plugin::Call<0x5ACB30, bool>(enable);
	0AA5: call_function 0x5ACB30 num_params 1 pop 1 [enable]

	// StartCatalinaFlyBy
	// plugin::Call<0x5ACAF0>();
	0AA5: call_function 0x5ACAF0 num_params 0 pop 0

	// GetHeliAtomicObjectCB
	// plugin::CallAndReturn<RwObject*, 0x5AC4E0, RwObject*, void*>(object, data);
	0AA7: call_function_return 0x5AC4E0 num_params 2 pop 2 [object] [data] func_ret [RwObject*]

plugin_vc\game_vc\CHud.cpp:

	// CHud::DrawFadeState
	// plugin::CallDynGlobal<DRAW_FADE_STATE, int>(gaddrof(CHud::DrawFadeState), fadeState, a2);

	// CHud::IsHelpMessageBeingDisplayed
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CHud::IsHelpMessageBeingDisplayed));

	// CHud::SetBigMessage
	// plugin::CallDynGlobal<wchar_t const *, unsigned short>(gaddrof_o(CHud::SetBigMessage, void (*)(wchar_t const *, unsigned short)), message, style);

	// CHud::SetHelpMessage
	// plugin::CallDynGlobal<wchar_t const *, bool, bool>(gaddrof_o(CHud::SetHelpMessage, void (*)(wchar_t const *, bool, bool)), message, quickMessage, permanent);

	// CHud::SetMessage
	// plugin::CallDynGlobal<wchar_t const *>(gaddrof_o(CHud::SetMessage, void (*)(wchar_t const *)), message);

	// CHud::SetPagerMessage
	// plugin::CallDynGlobal<wchar_t const *>(gaddrof_o(CHud::SetPagerMessage, void (*)(wchar_t const *)), message);

	// CHud::SetVehicleName
	// plugin::CallDynGlobal<wchar_t const *>(gaddrof_o(CHud::SetVehicleName, void (*)(wchar_t const *)), name);

	// CHud::SetZoneName
	// plugin::CallDynGlobal<wchar_t const *>(gaddrof_o(CHud::SetZoneName, void (*)(wchar_t const *)), name);

plugin_vc\game_vc\CKeyboardState.cpp:

	// CKeyboardState::Clear
	// plugin::CallMethodDynGlobal<CKeyboardState *>(gaddrof(CKeyboardState::Clear), this);

plugin_vc\game_vc\CMenuManager.cpp:

	// CMenuManager::MessageScreen
	// plugin::CallMethod<0x498943, CMenuManager*, const char*, bool>(this, pText, bFullscreen);
	0AA6: call_method 0x498943 struct [CMenuManager] num_params 2 pop 0 [pText] [bFullscreen]

	// CMenuManager::DisplayHelperText
	// plugin::CallMethod<0x48F429, CMenuManager*>(this, text);
	0AA6: call_method 0x48F429 struct [CMenuManager] num_params 1 pop 0 [text]

	// CMenuManager::SwitchToNewScreen
	// plugin::CallMethod<0x4983EF, CMenuManager*, int>(this, screen);
	0AA6: call_method 0x4983EF struct [CMenuManager] num_params 1 pop 0 [screen]

	// CMenuManager::SwitchMenuOnAndOff
	// plugin::CallMethod<0x498E5F, CMenuManager*>(this);
	0AA6: call_method 0x498E5F struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::CheckSliderMovement
	// plugin::CallMethod<0x4982D3, CMenuManager*>(this);
	0AA6: call_method 0x4982D3 struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::Draw
	// plugin::CallMethod<0x49DF40, CMenuManager*>(this, unk);
	0AA6: call_method 0x49DF40 struct [CMenuManager] num_params 1 pop 0 [unk]

	// CMenuManager::UserInput
	// plugin::CallMethod<0x4965BA, CMenuManager*>(this);
	0AA6: call_method 0x4965BA struct [CMenuManager] num_params 0 pop 0

	// CMenuManager::PrintMap
	// plugin::CallMethod<0x49A5B7, CMenuManager*>(this);
	0AA6: call_method 0x49A5B7 struct [CMenuManager] num_params 0 pop 0

plugin_vc\game_vc\CMessages.cpp:

	// CMessages::AddBigMessage
	// plugin::Call<0x584050, wchar_t*, unsigned int, unsigned short>(pString, time, style);
	0AA5: call_function 0x584050 num_params 3 pop 3 [pString] [time] [style]

	// CMessages::AddBigMessageQ
	// plugin::Call<0x583F40, wchar_t*, unsigned int, unsigned short>(pString, time, style);
	0AA5: call_function 0x583F40 num_params 3 pop 3 [pString] [time] [style]

	// CMessages::AddBigMessageWithNumber
	// plugin::Call<0x583350, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(pString, time, style, number, number2, number3, number4, number5, number6);
	0AA5: call_function 0x583350 num_params 9 pop 9 [pString] [time] [style] [number] [number2] [number3] [number4] [number5] [number6]

	// CMessages::AddMessage
	// plugin::Call<0x584410, wchar_t*, unsigned int, unsigned short>(pString, time, flag);
	0AA5: call_function 0x584410 num_params 3 pop 3 [pString] [time] [flag]

	// CMessages::AddMessageJumpQ
	// plugin::Call<0x584300, wchar_t*, unsigned int, unsigned short>(pString, time, flag);
	0AA5: call_function 0x584300 num_params 3 pop 3 [pString] [time] [flag]

	// CMessages::AddMessageJumpQWithNumber
	// plugin::Call<0x583440, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(pString, time, flag, number, number2, number3, number4, number5, number6);
	0AA5: call_function 0x583440 num_params 9 pop 9 [pString] [time] [flag] [number] [number2] [number3] [number4] [number5] [number6]

	// CMessages::AddMessageJumpQWithString
	// plugin::Call<0x583220, wchar_t*, unsigned int, unsigned short, wchar_t*>(pString1, time, flag, pString2);
	0AA5: call_function 0x583220 num_params 4 pop 4 [pString1] [time] [flag] [pString2]

	// CMessages::AddMessageWithNumber
	// plugin::Call<0x583560, wchar_t*, unsigned int, unsigned short, int, int, int, int, int, int>(pString, time, flag, number, number1, number2, number3, number4, number5);
	0AA5: call_function 0x583560 num_params 9 pop 9 [pString] [time] [flag] [number] [number1] [number2] [number3] [number4] [number5]

	// CMessages::AddToPreviousBriefArray
	// plugin::Call<0x583DE0, wchar_t*, int, int, int, int, int, int, wchar_t*>(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x583DE0 num_params 8 pop 8 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8]

	// CMessages::ClearAllMessagesDisplayedByGame
	// plugin::Call<0x582C70>();
	0AA5: call_function 0x582C70 num_params 0 pop 0

	// CMessages::ClearMessages
	// plugin::Call<0x5841E0>();
	0AA5: call_function 0x5841E0 num_params 0 pop 0

	// CMessages::ClearSmallMessagesOnly
	// plugin::Call<0x584130>();
	0AA5: call_function 0x584130 num_params 0 pop 0

	// CMessages::ClearThisBigPrint
	// plugin::Call<0x582CF0, wchar_t*>(pString);
	0AA5: call_function 0x582CF0 num_params 1 pop 1 [pString]

	// CMessages::ClearThisPrint
	// plugin::Call<0x582FA0, wchar_t*>(pString);
	0AA5: call_function 0x582FA0 num_params 1 pop 1 [pString]

	// CMessages::Display
	// plugin::Call<0x584550>();
	0AA5: call_function 0x584550 num_params 0 pop 0

	// CMessages::GetWideStringLength
	// plugin::CallAndReturn<unsigned short, 0x5849A0, wchar_t*>(pString);
	0AA7: call_function_return 0x5849A0 num_params 1 pop 1 [pString] func_ret [unsigned short]

	// CMessages::Init
	// plugin::Call<0x5849C0>();
	0AA5: call_function 0x5849C0 num_params 0 pop 0

	// CMessages::InsertNumberInString
	// plugin::Call<0x583C80, wchar_t*, int, int, int, int, int, int, wchar_t*>(pString, number, number1, number2, number3, number4, number5, arg8);
	0AA5: call_function 0x583C80 num_params 8 pop 8 [pString] [number] [number1] [number2] [number3] [number4] [number5] [arg8]

	// CMessages::InsertPlayerControlKeysInString
	// plugin::Call<0x5836B0, wchar_t*>(pString);
	0AA5: call_function 0x5836B0 num_params 1 pop 1 [pString]

	// CMessages::InsertStringInString
	// plugin::Call<0x583AF0, wchar_t*, wchar_t*>(pString1, pString2);
	0AA5: call_function 0x583AF0 num_params 2 pop 2 [pString1] [pString2]

	// CMessages::Process
	// plugin::Call<0x584650>();
	0AA5: call_function 0x584650 num_params 0 pop 0

	// CMessages::WideStringCompare
	// plugin::CallAndReturn<bool, 0x5848D0, wchar_t*, wchar_t*, unsigned short>(pString1, pString2, lengthToCompare);
	0AA7: call_function_return 0x5848D0 num_params 3 pop 3 [pString1] [pString2] [lengthToCompare] func_ret [bool]

	// CMessages::WideStringCopy
	// plugin::Call<0x584940, wchar_t*, wchar_t*, unsigned short>(pString1, pString2, lengthToCopy);
	0AA5: call_function 0x584940 num_params 3 pop 3 [pString1] [pString2] [lengthToCopy]

plugin_vc\game_vc\CModelInfo.cpp:

	// CModelInfo::AddClumpModel
	// plugin::CallAndReturn<CClumpModelInfo*, 0x55F640, int>(index);
	0AA7: call_function_return 0x55F640 num_params 1 pop 1 [index] func_ret [CClumpModelInfo*]

	// CModelInfo::AddPedModel
	// plugin::CallAndReturn<CPedModelInfo*, 0x55F580, int>(index);
	0AA7: call_function_return 0x55F580 num_params 1 pop 1 [index] func_ret [CPedModelInfo*]

	// CModelInfo::AddSimpleModel
	// plugin::CallAndReturn<CSimpleModelInfo*, 0x55F730, int>(index);
	0AA7: call_function_return 0x55F730 num_params 1 pop 1 [index] func_ret [CSimpleModelInfo*]

	// CModelInfo::AddTimeModel
	// plugin::CallAndReturn<CTimeModelInfo*, 0x55F6E0, int>(index);
	0AA7: call_function_return 0x55F6E0 num_params 1 pop 1 [index] func_ret [CTimeModelInfo*]

	// CModelInfo::AddVehicleModel
	// plugin::CallAndReturn<CVehicleModelInfo*, 0x55F5D0, int>(index);
	0AA7: call_function_return 0x55F5D0 num_params 1 pop 1 [index] func_ret [CVehicleModelInfo*]

	// CModelInfo::AddWeaponModel
	// plugin::CallAndReturn<CWeaponModelInfo*, 0x55F690, int>(index);
	0AA7: call_function_return 0x55F690 num_params 1 pop 1 [index] func_ret [CWeaponModelInfo*]

	// CModelInfo::Get2dEffectStore
	// plugin::CallAndReturn<void*, 0x55F570>();
	0AA7: call_function_return 0x55F570 num_params 0 pop 0 func_ret [void*]

	// CModelInfo::GetModelInfo
	// plugin::CallAndReturn<CBaseModelInfo*, 0x55F7D0, char const*, int*>(name, index);
	0AA7: call_function_return 0x55F7D0 num_params 2 pop 2 [name] [index] func_ret [CBaseModelInfo*]

	// CModelInfo::GetModelInfo
	// plugin::CallAndReturn<CBaseModelInfo*, 0x55F780, char const*, int, int>(name, minIndex, maxInedx);
	0AA7: call_function_return 0x55F780 num_params 3 pop 3 [name] [minIndex] [maxInedx] func_ret [CBaseModelInfo*]

	// CModelInfo::Initialise
	// plugin::Call<0x55FA40>();
	0AA5: call_function 0x55FA40 num_params 0 pop 0

	// CModelInfo::IsBikeModel
	// plugin::CallAndReturn<bool, 0x55F4E0, int>(index);
	0AA7: call_function_return 0x55F4E0 num_params 1 pop 1 [index] func_ret [bool]

	// CModelInfo::IsBoatModel
	// plugin::CallAndReturn<bool, 0x55F540, int>(index);
	0AA7: call_function_return 0x55F540 num_params 1 pop 1 [index] func_ret [bool]

	// CModelInfo::IsCarModel
	// plugin::CallAndReturn<bool, 0x55F510, int>(index);
	0AA7: call_function_return 0x55F510 num_params 1 pop 1 [index] func_ret [bool]

	// CModelInfo::ShutDown
	// plugin::Call<0x55F820>();
	0AA5: call_function 0x55F820 num_params 0 pop 0

plugin_vc\game_vc\CMotionBlurStreaks.cpp:

	// CMotionBlurStreaks::RegisterStreak
	// plugin::Call<0x572800, unsigned int, unsigned char, unsigned char, unsigned char, CVector, CVector>(id, red, green, blue, leftPoint, rightPoint);
	0AA5: call_function 0x572800 num_params 6 pop 6 [id] [red] [green] [blue] [leftPoint] [rightPoint]

	// CMotionBlurStreaks::Render
	// plugin::Call<0x572920>();
	0AA5: call_function 0x572920 num_params 0 pop 0

plugin_vc\game_vc\CMousePointerStateHelper.cpp:

plugin_vc\game_vc\CMovie.cpp:

	// CMovie::CMovie
	// plugin::CallMethod<0x606720, CMovie *>(this);
	0AA6: call_method 0x606720 struct [CMovie] num_params 0 pop 0

plugin_vc\game_vc\CObject.cpp:

	// CObject::CObject
	// plugin::CallMethod<0x4E40F0, CObject *, CDummyObject*>(this, dummyObject);
	0AA6: call_method 0x4E40F0 struct [CObject] num_params 1 pop 0 [dummyObject]

	// CObject::CObject
	// plugin::CallMethod<0x4E41B0, CObject *, int, bool>(this, arg0, arg1);
	0AA6: call_method 0x4E41B0 struct [CObject] num_params 2 pop 0 [arg0] [arg1]

	// CObject::CObject
	// plugin::CallMethod<0x4E4220, CObject *>(this);
	0AA6: call_method 0x4E4220 struct [CObject] num_params 0 pop 0

	// CObject::CanBeDeleted
	// plugin::CallMethodAndReturn<bool, 0x4E3E20, CObject *>(this);
	0AA8: call_method_return 0x4E3E20 struct [CObject] num_params 0 pop 0 func_ret [bool]

	// CObject::DeleteAllMissionObjects
	// plugin::Call<0x4E0820>();
	0AA5: call_function 0x4E0820 num_params 0 pop 0

	// CObject::DeleteAllTempObjects
	// plugin::Call<0x4E08A0>();
	0AA5: call_function 0x4E08A0 num_params 0 pop 0

	// CObject::DeleteAllTempObjectsInArea
	// plugin::Call<0x4E0720, CVector, float>(point, radius);
	0AA5: call_function 0x4E0720 num_params 2 pop 2 [point] [radius]

	// CObject::Init
	// plugin::CallMethod<0x4E3E50, CObject *>(this);
	0AA6: call_method 0x4E3E50 struct [CObject] num_params 0 pop 0

	// CObject::ObjectDamage
	// plugin::CallMethod<0x4E0990, CObject *, float>(this, damage);
	0AA6: call_method 0x4E0990 struct [CObject] num_params 1 pop 0 [damage]

	// CObject::RefModelInfo
	// plugin::CallMethod<0x4E0970, CObject *, int>(this, modelIndex);
	0AA6: call_method 0x4E0970 struct [CObject] num_params 1 pop 0 [modelIndex]

	// CObject::operator delete
	// plugin::Call<0x4E4030, void*>(data);
	0AA5: call_function 0x4E4030 num_params 1 pop 1 [data]

	// CObject::operator new
	// plugin::CallAndReturn<void*, 0x4E4070, unsigned int>(size);
	0AA7: call_function_return 0x4E4070 num_params 1 pop 1 [size] func_ret [void*]

	// CObject::operator new
	// plugin::CallAndReturn<void*, 0x4E4050, unsigned int, int>(size, arg1);
	0AA7: call_function_return 0x4E4050 num_params 2 pop 2 [size] [arg1] func_ret [void*]

plugin_vc\game_vc\COcclusion.cpp:

	// COcclusion::AddOne
	// plugin::CallDynGlobal<float, float, float, float, float, float, float>(gaddrof(COcclusion::AddOne), x, y, z, width, length, height, angle);

	// COcclusion::IsAABoxOccluded
	// plugin::CallAndReturnDynGlobal<bool, CVector, float, float, float>(gaddrof(COcclusion::IsAABoxOccluded), pos, width, length, height);

	// COcclusion::IsPositionOccluded
	// plugin::CallAndReturnDynGlobal<bool, CVector, float>(gaddrof(COcclusion::IsPositionOccluded), pos, side);

	// COccluder::ProcessLineSegment
	// plugin::CallMethodAndReturnDynGlobal<bool, COccluder *, int, int, CActiveOccluder *>(gaddrof(COccluder::ProcessLineSegment), this, corner1, corner2, occl);
	0AA8: call_method_return 0x635270 struct [COccluder] num_params 3 pop 0 [corner1] [corner2] [occl] func_ret [bool]

	// COccluder::ProcessOneOccluder
	// plugin::CallMethodAndReturnDynGlobal<bool, COccluder *, CActiveOccluder *>(gaddrof(COccluder::ProcessOneOccluder), this, occl);
	0AA8: call_method_return 0x6358D0 struct [COccluder] num_params 1 pop 0 [occl] func_ret [bool]

	// DoesInfiniteLineTouchScreen
	// plugin::CallAndReturnDynGlobal<bool, float, float, float, float>(gaddrof(DoesInfiniteLineTouchScreen), lineX, lineY, lineDX, lineDY);

plugin_vc\game_vc\common.cpp:

	// FindPlayerHeading
	// plugin::CallAndReturn<float, 0x4BBF70>();
	0AA7: call_function_return 0x4BBF70 num_params 0 pop 0 func_ret [float]

	// FindPlayerCentreOfWorld_NoSniperShift
	// plugin::CallAndReturn<CVector&, 0x4BC020>();
	0AA7: call_function_return 0x4BC020 num_params 0 pop 0 func_ret [CVector&]

	// FindPlayerCentreOfWorld
	// plugin::CallAndReturn<CVector&, 0x4BC0A0, int>(playerId);
	0AA7: call_function_return 0x4BC0A0 num_params 1 pop 1 [playerId] func_ret [CVector&]

	// FindPlayerPed
	// plugin::CallAndReturn<CPlayerPed*, 0x4BC120>();
	0AA7: call_function_return 0x4BC120 num_params 0 pop 0 func_ret [CPlayerPed*]

	// FindPlayerTrain
	// plugin::CallAndReturn<CTrain*, 0x4BC140>();
	0AA7: call_function_return 0x4BC140 num_params 0 pop 0 func_ret [CTrain*]

	// FindPlayerEntity
	// plugin::CallAndReturn<CEntity*, 0x4BC1B0>();
	0AA7: call_function_return 0x4BC1B0 num_params 0 pop 0 func_ret [CEntity*]

	// FindPlayerVehicle
	// plugin::CallAndReturn<CVehicle*, 0x4BC1E0>();
	0AA7: call_function_return 0x4BC1E0 num_params 0 pop 0 func_ret [CVehicle*]

	// FindPlayerSpeed
	// plugin::CallAndReturn<CVector&, 0x4BC210>();
	0AA7: call_function_return 0x4BC210 num_params 0 pop 0 func_ret [CVector&]

	// GetFirstTexture
	// plugin::CallAndReturn<RwTexture*, 0x57F900, RwTexDictionary*>(texDictionary);
	0AA7: call_function_return 0x57F900 num_params 1 pop 1 [texDictionary] func_ret [RwTexture*]

	// GetFirstObject
	// plugin::CallAndReturn<RwObject*, 0x57F940, RwFrame*>(frame);
	0AA7: call_function_return 0x57F940 num_params 1 pop 1 [frame] func_ret [RwObject*]

	// GetFirstAtomic
	// plugin::CallAndReturn<RpAtomic*, 0x57F980, RpClump*>(clump);
	0AA7: call_function_return 0x57F980 num_params 1 pop 1 [clump] func_ret [RpAtomic*]

	// SetAmbientColours
	// plugin::Call<0x57FAD0, RwRGBAReal*>(colours);
	0AA5: call_function 0x57FAD0 num_params 1 pop 1 [colours]

	// SetAmbientColoursForPedsCarsAndObjects
	// plugin::Call<0x57FAF0>();
	0AA5: call_function 0x57FAF0 num_params 0 pop 0

	// SetAmbientColours
	// plugin::Call<0x57FB10>();
	0AA5: call_function 0x57FB10 num_params 0 pop 0

	// SetFullAmbient
	// plugin::Call<0x57FB30>();
	0AA5: call_function 0x57FB30 num_params 0 pop 0

	// ActivateDirectional
	// plugin::Call<0x57FB50>();
	0AA5: call_function 0x57FB50 num_params 0 pop 0

	// DeActivateDirectional
	// plugin::Call<0x57FB60>();
	0AA5: call_function 0x57FB60 num_params 0 pop 0

	// ReSetAmbientAndDirectionalColours
	// plugin::Call<0x57FB70>();
	0AA5: call_function 0x57FB70 num_params 0 pop 0

	// SetBrightMarkerColours
	// plugin::Call<0x57FBA0, float>(power);
	0AA5: call_function 0x57FBA0 num_params 1 pop 1 [power]

	// SetAmbientAndDirectionalColours
	// plugin::Call<0x57FC50, float>(power);
	0AA5: call_function 0x57FC50 num_params 1 pop 1 [power]

	// RemoveExtraDirectionalLights
	// plugin::Call<0x57FCD0, RpWorld*>(world);
	0AA5: call_function 0x57FCD0 num_params 1 pop 1 [world]

	// AddAnExtraDirectionalLight
	// plugin::Call<0x57FD00, RpWorld*, float, float, float, float, float, float>(world, x, y, z, red, green, blue);
	0AA5: call_function 0x57FD00 num_params 7 pop 7 [world] [x] [y] [z] [red] [green] [blue]

	// WorldReplaceNormalLightsWithScorched
	// plugin::Call<0x57FE40, RpWorld*, float>(world, intensity);
	0AA5: call_function 0x57FE40 num_params 2 pop 2 [world] [intensity]

	// LightsDestroy
	// plugin::CallAndReturn<RpWorld*, 0x57FE80, RpWorld*>(world);
	0AA7: call_function_return 0x57FE80 num_params 1 pop 1 [world] func_ret [RpWorld*]

	// LightsCreate
	// plugin::CallAndReturn<RpWorld*, 0x57FF50, RpWorld*>(world);
	0AA7: call_function_return 0x57FF50 num_params 1 pop 1 [world] func_ret [RpWorld*]

	// SetLightsWithTimeOfDayColour
	// plugin::Call<0x5800F0, RpWorld*>(world);
	0AA5: call_function 0x5800F0 num_params 1 pop 1 [world]

	// RpAnimBlendAllocateData
	// plugin::CallAndReturn<CAnimBlendClumpData*, 0x407520, RpClump*>(clump);
	0AA7: call_function_return 0x407520 num_params 1 pop 1 [clump] func_ret [CAnimBlendClumpData*]

	// RpAnimBlendClumpFillFrameArray
	// plugin::Call<0x407AC0, RpClump*, AnimBlendFrameData**>(clump, frameData);
	0AA5: call_function 0x407AC0 num_params 2 pop 2 [clump] [frameData]

	// RpAnimBlendClumpGetAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x407780, RpClump*, unsigned int>(clump, animId);
	0AA7: call_function_return 0x407780 num_params 2 pop 2 [clump] [animId] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x402E20, RpClump*>(clump);
	0AA7: call_function_return 0x402E20 num_params 1 pop 1 [clump] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetFirstAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4075F0, RpClump*, unsigned int>(clump, flags);
	0AA7: call_function_return 0x4075F0 num_params 2 pop 2 [clump] [flags] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x407660, RpClump*, int>(clump, n);
	0AA7: call_function_return 0x407660 num_params 2 pop 2 [clump] [n] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpGetMainPartialAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x407620, RpClump*, int>(clump, n);
	0AA7: call_function_return 0x407620 num_params 2 pop 2 [clump] [n] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendClumpInit
	// plugin::Call<0x407890, RpClump*>(clump);
	0AA5: call_function 0x407890 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpIsInitialized
	// plugin::CallAndReturn<bool, 0x407870, RpClump*>(clump);
	0AA7: call_function_return 0x407870 num_params 1 pop 1 [clump] func_ret [bool]

	// RpAnimBlendClumpRemoveAllAssociations
	// plugin::Call<0x407800, RpClump*>(clump);
	0AA5: call_function 0x407800 num_params 1 pop 1 [clump]

	// RpAnimBlendClumpRemoveAssociations
	// plugin::Call<0x4077B0, RpClump*, unsigned int>(clump, flags);
	0AA5: call_function 0x4077B0 num_params 2 pop 2 [clump] [flags]

	// RpAnimBlendClumpSetBlendDeltas
	// plugin::Call<0x407830, RpClump*, unsigned int, float>(clump, flags, delta);
	0AA5: call_function 0x407830 num_params 3 pop 3 [clump] [flags] [delta]

	// RpAnimBlendClumpUpdateAnimations
	// plugin::Call<0x404690, RpClump*, float, bool>(clump, step, onScreen);
	0AA5: call_function 0x404690 num_params 3 pop 3 [clump] [step] [onScreen]

	// RpAnimBlendGetNextAssociation
	// plugin::CallAndReturn<CAnimBlendAssociation*, 0x4075D0, CAnimBlendAssociation*>(association);
	0AA7: call_function_return 0x4075D0 num_params 1 pop 1 [association] func_ret [CAnimBlendAssociation*]

	// RpAnimBlendPluginAttach
	// plugin::CallAndReturn<bool, 0x4074D0>();
	0AA7: call_function_return 0x4074D0 num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\COnscreenTimer.cpp:

	// COnscreenTimer::AddClock
	// plugin::CallMethod<0x434B30, COnscreenTimer *, unsigned int, char*, bool>(this, arg0, arg1, arg2);
	0AA6: call_method 0x434B30 struct [COnscreenTimer] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// COnscreenTimer::AddCounter
	// plugin::CallMethod<0x434AE0, COnscreenTimer *, unsigned int, unsigned short, char*, unsigned short>(this, arg0, arg1, arg2, arg3);
	0AA6: call_method 0x434AE0 struct [COnscreenTimer] num_params 4 pop 0 [arg0] [arg1] [arg2] [arg3]

	// COnscreenTimer::ClearClock
	// plugin::CallMethod<0x434AA0, COnscreenTimer *, unsigned int>(this, arg0);
	0AA6: call_method 0x434AA0 struct [COnscreenTimer] num_params 1 pop 0 [arg0]

	// COnscreenTimer::ClearCounter
	// plugin::CallMethod<0x434A60, COnscreenTimer *, unsigned int>(this, arg0);
	0AA6: call_method 0x434A60 struct [COnscreenTimer] num_params 1 pop 0 [arg0]

	// COnscreenTimer::Init
	// plugin::CallMethod<0x434CE0, COnscreenTimer *>(this);
	0AA6: call_method 0x434CE0 struct [COnscreenTimer] num_params 0 pop 0

	// COnscreenTimer::Process
	// plugin::CallMethod<0x434B90, COnscreenTimer *>(this);
	0AA6: call_method 0x434B90 struct [COnscreenTimer] num_params 0 pop 0

	// COnscreenTimer::ProcessForDisplay
	// plugin::CallMethod<0x434BD0, COnscreenTimer *>(this);
	0AA6: call_method 0x434BD0 struct [COnscreenTimer] num_params 0 pop 0

	// COnscreenTimerEntry::Process
	// plugin::CallMethod<0x434DE0, COnscreenTimerEntry *>(this);
	0AA6: call_method 0x434DE0 struct [COnscreenTimerEntry] num_params 0 pop 0

plugin_vc\game_vc\CPad.cpp:

	// CPad::AddToPCCheatString
	// plugin::CallMethodDynGlobal<CPad *, char>(gaddrof(CPad::AddToPCCheatString), this, character);

	// CPad::CarGunJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CarGunJustDown), this);
	0AA8: call_method_return 0x4AA9F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ChangeStationJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::ChangeStationJustDown), this);
	0AA8: call_method_return 0x4AA590 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::Clear
	// plugin::CallMethodDynGlobal<CPad *, char>(gaddrof(CPad::Clear), this, bDisablePlayerControls);

	// CPad::CollectPickupJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CollectPickupJustDown), this);
	0AA8: call_method_return 0x4A9F80 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleCameraModeDownJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CycleCameraModeDownJustDown), this);
	0AA8: call_method_return 0x4AA6C0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleCameraModeJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CycleCameraModeJustDown), this);
	0AA8: call_method_return 0x4AA630 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleCameraModeUpJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CycleCameraModeUpJustDown), this);
	0AA8: call_method_return 0x4AA700 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponLeftJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CycleWeaponLeftJustDown), this);
	0AA8: call_method_return 0x4AA560 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::CycleWeaponRightJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::CycleWeaponRightJustDown), this);
	0AA8: call_method_return 0x4AA530 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::DuckJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::DuckJustDown), this);
	0AA8: call_method_return 0x4AA430 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ExitVehicleJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::ExitVehicleJustDown), this);
	0AA8: call_method_return 0x4AA870 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ForceCameraBehindPlayer
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::ForceCameraBehindPlayer), this);
	0AA8: call_method_return 0x4A9F00 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAccelerate
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetAccelerate), this);
	0AA8: call_method_return 0x4AA760 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetAnalogueLeftRight
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetAnalogueLeftRight), this);
	0AA8: call_method_return 0x4AADC0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetAnaloguePadDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadDown), this);
	0AA8: call_method_return 0x4AA260 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadLeft
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadLeft), this);
	0AA8: call_method_return 0x4AA200 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadLeftJustUp
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadLeftJustUp), this);
	0AA8: call_method_return 0x4AA0D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadRight
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadRight), this);
	0AA8: call_method_return 0x4AA1A0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadRightJustUp
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadRightJustUp), this);
	0AA8: call_method_return 0x4AA000 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnaloguePadUp
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetAnaloguePadUp), this);
	0AA8: call_method_return 0x4AA2B0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetAnalogueUpDown
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetAnalogueUpDown), this);
	0AA8: call_method_return 0x4AACC0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetBrake
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetBrake), this);
	0AA8: call_method_return 0x4AA960 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetCarGunFired
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetCarGunFired), this);
	0AA8: call_method_return 0x4AAA60 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetCarGunLeftRight
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetCarGunLeftRight), this);
	0AA8: call_method_return 0x4AAEB0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetCarGunUpDown
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetCarGunUpDown), this);
	0AA8: call_method_return 0x4AAF00 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetExitVehicle
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetExitVehicle), this);
	0AA8: call_method_return 0x4AA8F0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetHandBrake
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetHandBrake), this);
	0AA8: call_method_return 0x4AA9B0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetHorn
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetHorn), this);
	0AA8: call_method_return 0x4AAB60 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForCar
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetLookBehindForCar), this);
	0AA8: call_method_return 0x4AAC30 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookBehindForPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetLookBehindForPed), this);
	0AA8: call_method_return 0x4AAC00 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookLeft
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetLookLeft), this);
	0AA8: call_method_return 0x4AAC90 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetLookRight
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetLookRight), this);
	0AA8: call_method_return 0x4AAC60 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetPedWalkLeftRight
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetPedWalkLeftRight), this);
	0AA8: call_method_return 0x4AAE30 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetPedWalkUpDown
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetPedWalkUpDown), this);
	0AA8: call_method_return 0x4AAD40 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetSprint
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetSprint), this);
	0AA8: call_method_return 0x4AA390 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetSteeringLeftRight
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetSteeringLeftRight), this);
	0AA8: call_method_return 0x4AAFD0 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetSteeringUpDown
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetSteeringUpDown), this);
	0AA8: call_method_return 0x4AAF50 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::GetTarget
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::GetTarget), this);
	0AA8: call_method_return 0x4AA4D0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::GetWeapon
	// plugin::CallMethodAndReturnDynGlobal<short, CPad *>(gaddrof(CPad::GetWeapon), this);
	0AA8: call_method_return 0x4AA830 struct [CPad] num_params 0 pop 0 func_ret [short]

	// CPad::HornJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::HornJustDown), this);
	0AA8: call_method_return 0x4AAAC0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::InputHowLongAgo
	// plugin::CallMethodAndReturnDynGlobal<int, CPad *>(gaddrof(CPad::InputHowLongAgo), this);
	0AA8: call_method_return 0x4ADBD0 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::JumpJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::JumpJustDown), this);
	0AA8: call_method_return 0x4AA400 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::LookAroundLeftRight
	// plugin::CallMethodAndReturnDynGlobal<int, CPad *>(gaddrof(CPad::LookAroundLeftRight), this);
	0AA8: call_method_return 0x4A9A80 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::LookAroundUpDown
	// plugin::CallMethodAndReturnDynGlobal<int, CPad *>(gaddrof(CPad::LookAroundUpDown), this);
	0AA8: call_method_return 0x4A98F0 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::ResetAverageWeapon
	// plugin::CallMethodDynGlobal<CPad *>(gaddrof(CPad::ResetAverageWeapon), this);

	// CPad::SetDrunkInputDelay
	// plugin::CallMethodDynGlobal<CPad *, int>(gaddrof(CPad::SetDrunkInputDelay), this, bEnable);

	// CPad::ShiftTargetLeftJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::ShiftTargetLeftJustDown), this);
	0AA8: call_method_return 0x4AA360 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::ShiftTargetRightJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::ShiftTargetRightJustDown), this);
	0AA8: call_method_return 0x4AA300 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperModeLookLeftRight
	// plugin::CallMethodAndReturnDynGlobal<int, CPad *>(gaddrof(CPad::SniperModeLookLeftRight), this);
	0AA8: call_method_return 0x4A9D40 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::SniperModeLookUpDown
	// plugin::CallMethodAndReturnDynGlobal<int, CPad *>(gaddrof(CPad::SniperModeLookUpDown), this);
	0AA8: call_method_return 0x4A9C40 struct [CPad] num_params 0 pop 0 func_ret [int]

	// CPad::SniperZoomIn
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::SniperZoomIn), this);
	0AA8: call_method_return 0x4A9E90 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::SniperZoomOut
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::SniperZoomOut), this);
	0AA8: call_method_return 0x4A9E20 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::StartShake
	// plugin::CallMethodDynGlobal<CPad *, short, unsigned char>(gaddrof(CPad::StartShake), this, duration, frequency);

	// CPad::StopShaking
	// plugin::CallMethodDynGlobal<CPad *, int>(gaddrof(CPad::StopShaking), this, a1);

	// CPad::TargetJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::TargetJustDown), this);
	0AA8: call_method_return 0x4AA460 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::Update
	// plugin::CallMethodDynGlobal<CPad *, int>(gaddrof(CPad::Update), this, a2);

	// CPad::WeaponJustDown
	// plugin::CallMethodAndReturnDynGlobal<bool, CPad *>(gaddrof(CPad::WeaponJustDown), this);
	0AA8: call_method_return 0x4AA7B0 struct [CPad] num_params 0 pop 0 func_ret [bool]

	// CPad::EditCodesForControls
	// plugin::CallDynGlobal<int *, int>(gaddrof(CPad::EditCodesForControls), outKeyCode, a2);

	// *CPad::GetPad
	// plugin::CallAndReturnDynGlobal<CPad *, int>(gaddrof(CPad::GetPad), padNumber);

plugin_vc\game_vc\CParticle.cpp:

	// CParticle::AddJetExplosion
	// plugin::CallDynGlobal<CVector const &, float, float>(gaddrof(CParticle::AddJetExplosion), posn, power, size);

	// *CParticle::AddParticle
	// plugin::CallAndReturnDynGlobal<CParticle *, tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const *, int, int, int, int>(gaddrof_o(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const *, int, int, int, int)), particleType, posn, direction, entity, size, color, rotationSpeed, rotation, startFrame, lifeSpan);

	// *CParticle::AddParticle
	// plugin::CallAndReturnDynGlobal<CParticle *, tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int>(gaddrof_o(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int)), particleType, posn, direction, entity, size, rotationSpeed, rotation, startFrame, lifeSpan);

	// CParticle::AddParticlesAlongLine
	// plugin::CallDynGlobal<tParticleType, CVector const *, CVector const *, CVector const &, float, CEntity *, float, int, int, int, int>(gaddrof(CParticle::AddParticlesAlongLine), particleType, lineStart, lineEnd, direction, step, entity, size, rotationSpeed, rotation, startFrame, lifeSpan);

	// CParticle::HandleShootableBirdsStuff
	// plugin::CallDynGlobal<CEntity *, CVector const &>(gaddrof(CParticle::HandleShootableBirdsStuff), entity, posn);

	// CParticle::RemovePSystem
	// plugin::CallDynGlobal<tParticleType>(gaddrof(CParticle::RemovePSystem), particleType);

	// CParticle::RemoveParticle
	// plugin::CallDynGlobal<CParticle *, CParticle *, tParticleSystemData *>(gaddrof(CParticle::RemoveParticle), particle, previousParticle, particleSystsem);

plugin_vc\game_vc\cParticleSystemMgr.cpp:

	// cParticleSystemMgr::Initialise
	// plugin::CallMethodDynGlobal<cParticleSystemMgr *>(gaddrof(cParticleSystemMgr::Initialise), this);

	// cParticleSystemMgr::LoadParticleData
	// plugin::CallMethodDynGlobal<cParticleSystemMgr *>(gaddrof(cParticleSystemMgr::LoadParticleData), this);

plugin_vc\game_vc\CPathFind.cpp:

	// CPathFind::GeneratePedCreationCoors
	// plugin::CallMethodAndReturn<bool, 0x437B10, CPathFind *, float, float, float, float, float, float, CVector*, int*, int*, float*, CMatrix*>(this, arg1, arg2, arg3, arg4, arg5, arg6, ar7, arg8, arg9, arg10, arg11);
	0AA8: call_method_return 0x437B10 struct [CPathFind] num_params 11 pop 0 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [ar7] [arg8] [arg9] [arg10] [arg11] func_ret [bool]

	// CPathFind::GenerateCarCreationCoors
	// plugin::CallMethodAndReturn<bool, 0x4382B0, CPathFind *, float, float, float, float, float, float, bool, CVector*, int*, int*, float*, bool>(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
	0AA8: call_method_return 0x4382B0 struct [CPathFind] num_params 12 pop 0 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10] [arg11] [arg12] func_ret [bool]

	// CPathFind::FindNodeClosestToCoors
	// plugin::CallMethodAndReturn<int, 0x437150, CPathFind *, CVector, unsigned char, float, bool, bool, bool, bool>(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	0AA8: call_method_return 0x437150 struct [CPathFind] num_params 7 pop 0 [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] func_ret [int]

plugin_vc\game_vc\CPed.cpp:

	// CPed::SetMoveAnim
	// plugin::CallVirtualMethod<18, CPed *>(this);

	// CPed::AddInCarAnims
	// plugin::CallMethodAndReturn<int, 0x512520, CPed *, CVehicle*, bool>(this, vehicle, arg1);
	0AA8: call_method_return 0x512520 struct [CPed] num_params 2 pop 0 [vehicle] [arg1] func_ret [int]

	// CPed::AddWeaponModel
	// plugin::CallMethod<0x4FFE40, CPed *, int>(this, modelIndex);
	0AA6: call_method 0x4FFE40 struct [CPed] num_params 1 pop 0 [modelIndex]

	// CPed::AimGun
	// plugin::CallMethodAndReturn<char, 0x50B2C0, CPed *>(this);
	0AA8: call_method_return 0x50B2C0 struct [CPed] num_params 0 pop 0 func_ret [char]

	// CPed::AnswerMobile
	// plugin::CallMethod<0x4F5710, CPed *>(this);
	0AA6: call_method 0x4F5710 struct [CPed] num_params 0 pop 0

	// CPed::AttachPedToEntity
	// plugin::CallMethodAndReturn<CEntity*, 0x4EF490, CPed *, CEntity*, float, float, float, unsigned short, float, eWeaponType>(this, entity, offsetX, offsetY, offsetZ, position, angle, weaponType);
	0AA8: call_method_return 0x4EF490 struct [CPed] num_params 7 pop 0 [entity] [offsetX] [offsetY] [offsetZ] [position] [angle] [weaponType] func_ret [CEntity*]

	// CPed::Attack
	// plugin::CallMethodAndReturn<unsigned int, 0x52B070, CPed *>(this);
	0AA8: call_method_return 0x52B070 struct [CPed] num_params 0 pop 0 func_ret [unsigned int]

	// CPed::Avoid
	// plugin::CallMethod<0x4FA2E0, CPed *>(this);
	0AA6: call_method 0x4FA2E0 struct [CPed] num_params 0 pop 0

	// CPed::BeingDraggedFromCar
	// plugin::CallMethodAndReturn<int, 0x518250, CPed *>(this);
	0AA8: call_method_return 0x518250 struct [CPed] num_params 0 pop 0 func_ret [int]

	// CPed::BuildPedLists
	// plugin::CallMethod<0x50D4B0, CPed *>(this);
	0AA6: call_method 0x50D4B0 struct [CPed] num_params 0 pop 0

	// CPed::BuyIceCream
	// plugin::CallMethod<0x4F10D0, CPed *>(this);
	0AA6: call_method 0x4F10D0 struct [CPed] num_params 0 pop 0

	// CPed::CalculateNewOrientation
	// plugin::CallMethod<0x509F80, CPed *>(this);
	0AA6: call_method 0x509F80 struct [CPed] num_params 0 pop 0

	// CPed::CalculateNewVelocity
	// plugin::CallMethod<0x50A640, CPed *>(this);
	0AA6: call_method 0x50A640 struct [CPed] num_params 0 pop 0

	// CPed::CanBeDamagedByThisGangMember
	// plugin::CallMethodAndReturn<bool, 0x50F130, CPed *, CPed*>(this, ped);
	0AA8: call_method_return 0x50F130 struct [CPed] num_params 1 pop 0 [ped] func_ret [bool]

	// CPed::CanBeDeleted
	// plugin::CallMethodAndReturn<bool, 0x4FFEF0, CPed *>(this);
	0AA8: call_method_return 0x4FFEF0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanBeDeletedEvenInVehicle
	// plugin::CallMethodAndReturn<bool, 0x4FFEC0, CPed *>(this);
	0AA8: call_method_return 0x4FFEC0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanPedDriveOff
	// plugin::CallMethodAndReturn<bool, 0x4EFC90, CPed *>(this);
	0AA8: call_method_return 0x4EFC90 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanPedJumpThis
	// plugin::CallMethodAndReturn<bool, 0x4F0590, CPed *, CEntity*, CVector*>(this, entity, arg1);
	0AA8: call_method_return 0x4F0590 struct [CPed] num_params 2 pop 0 [entity] [arg1] func_ret [bool]

	// CPed::CanSeeEntity
	// plugin::CallMethodAndReturn<bool, 0x51C870, CPed *, CEntity*, float>(this, entity, limitAngle);
	0AA8: call_method_return 0x51C870 struct [CPed] num_params 2 pop 0 [entity] [limitAngle] func_ret [bool]

	// CPed::CanSetPedState
	// plugin::CallMethodAndReturn<bool, 0x5018D0, CPed *>(this);
	0AA8: call_method_return 0x5018D0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanStrafeOrMouseControl
	// plugin::CallMethodAndReturn<bool, 0x501890, CPed *>(this);
	0AA8: call_method_return 0x501890 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CanWeRunAndFireWithWeapon
	// plugin::CallMethodAndReturn<bool, 0x50B220, CPed *>(this);
	0AA8: call_method_return 0x50B220 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Chat
	// plugin::CallMethodAndReturn<unsigned int, 0x4F6050, CPed *>(this);
	0AA8: call_method_return 0x4F6050 struct [CPed] num_params 0 pop 0 func_ret [unsigned int]

	// CPed::CheckForExplosions
	// plugin::CallMethodAndReturn<bool, 0x4F4950, CPed *, CVector2D&>(this, arg0);
	0AA8: call_method_return 0x4F4950 struct [CPed] num_params 1 pop 0 [arg0] func_ret [bool]

	// CPed::CheckForPointBlankPeds
	// plugin::CallMethodAndReturn<char, 0x52C670, CPed *, CPed*>(this, ped);
	0AA8: call_method_return 0x52C670 struct [CPed] num_params 1 pop 0 [ped] func_ret [char]

	// CPed::CheckIfInTheAir
	// plugin::CallMethodAndReturn<bool, 0x4FD680, CPed *>(this);
	0AA8: call_method_return 0x4FD680 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::CheckThreatValidity
	// plugin::CallMethodAndReturn<int, 0x50BD00, CPed *>(this);
	0AA8: call_method_return 0x50BD00 struct [CPed] num_params 0 pop 0 func_ret [int]

	// CPed::ChooseAttackAI
	// plugin::CallMethodAndReturn<int, 0x529460, CPed *, unsigned char, bool>(this, arg0, arg1);
	0AA8: call_method_return 0x529460 struct [CPed] num_params 2 pop 0 [arg0] [arg1] func_ret [int]

	// CPed::ChooseAttackPlayer
	// plugin::CallMethodAndReturn<int, 0x528AA0, CPed *, unsigned char, bool>(this, arg0, arg1);
	0AA8: call_method_return 0x528AA0 struct [CPed] num_params 2 pop 0 [arg0] [arg1] func_ret [int]

	// CPed::ClearAimFlag
	// plugin::CallMethod<0x50B4A0, CPed *>(this);
	0AA6: call_method 0x50B4A0 struct [CPed] num_params 0 pop 0

	// CPed::ClearAll
	// plugin::CallMethod<0x509DF0, CPed *>(this);
	0AA6: call_method 0x509DF0 struct [CPed] num_params 0 pop 0

	// CPed::ClearAnswerMobile
	// plugin::CallMethod<0x4F58C0, CPed *>(this);
	0AA6: call_method 0x4F58C0 struct [CPed] num_params 0 pop 0

	// CPed::ClearAttack
	// plugin::CallMethod<0x52D120, CPed *>(this);
	0AA6: call_method 0x52D120 struct [CPed] num_params 0 pop 0

	// CPed::ClearAttackByRemovingAnim
	// plugin::CallMethod<0x52CF70, CPed *>(this);
	0AA6: call_method 0x52CF70 struct [CPed] num_params 0 pop 0

	// CPed::ClearChat
	// plugin::CallMethod<0x4F5FA0, CPed *>(this);
	0AA6: call_method 0x4F5FA0 struct [CPed] num_params 0 pop 0

	// CPed::ClearDuck
	// plugin::CallMethod<0x512A20, CPed *, bool>(this, arg0);
	0AA6: call_method 0x512A20 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::ClearFollowPath
	// plugin::CallMethod<0x4F7920, CPed *>(this);
	0AA6: call_method 0x4F7920 struct [CPed] num_params 0 pop 0

	// CPed::ClearInvestigateEvent
	// plugin::CallMethod<0x526BA0, CPed *>(this);
	0AA6: call_method 0x526BA0 struct [CPed] num_params 0 pop 0

	// CPed::ClearLeader
	// plugin::CallMethod<0x521670, CPed *>(this);
	0AA6: call_method 0x521670 struct [CPed] num_params 0 pop 0

	// CPed::ClearLookFlag
	// plugin::CallMethod<0x50B9C0, CPed *>(this);
	0AA6: call_method 0x50B9C0 struct [CPed] num_params 0 pop 0

	// CPed::ClearObjective
	// plugin::CallMethod<0x521720, CPed *>(this);
	0AA6: call_method 0x521720 struct [CPed] num_params 0 pop 0

	// CPed::ClearPointGunAt
	// plugin::CallMethod<0x52DBE0, CPed *>(this);
	0AA6: call_method 0x52DBE0 struct [CPed] num_params 0 pop 0

	// CPed::ClearSeek
	// plugin::CallMethod<0x4FC450, CPed *>(this);
	0AA6: call_method 0x4FC450 struct [CPed] num_params 0 pop 0

	// CPed::ClearWaitState
	// plugin::CallMethod<0x4F3130, CPed *>(this);
	0AA6: call_method 0x4F3130 struct [CPed] num_params 0 pop 0

	// CPed::ClearWeapons
	// plugin::CallMethod<0x4FF740, CPed *>(this);
	0AA6: call_method 0x4FF740 struct [CPed] num_params 0 pop 0

	// CPed::CollideWithPed
	// plugin::CallMethod<0x524920, CPed *, CPed*>(this, ped);
	0AA6: call_method 0x524920 struct [CPed] num_params 1 pop 0 [ped]

	// CPed::CreateDeadPedMoney
	// plugin::CallMethod<0x43E2C0, CPed *>(this);
	0AA6: call_method 0x43E2C0 struct [CPed] num_params 0 pop 0

	// CPed::CreateDeadPedPickupCoors
	// plugin::CallMethod<0x43DAC0, CPed *, float*, float*, float*>(this, pX, pY, pZ);
	0AA6: call_method 0x43DAC0 struct [CPed] num_params 3 pop 0 [pX] [pY] [pZ]

	// CPed::CreateDeadPedWeaponPickups
	// plugin::CallMethod<0x43DF30, CPed *>(this);
	0AA6: call_method 0x43DF30 struct [CPed] num_params 0 pop 0

	// CPed::DeadPedMakesTyresBloody
	// plugin::CallMethod<0x587700, CPed *>(this);
	0AA6: call_method 0x587700 struct [CPed] num_params 0 pop 0

	// CPed::DettachPedFromEntity
	// plugin::CallMethod<0x4EF370, CPed *>(this);
	0AA6: call_method 0x4EF370 struct [CPed] num_params 0 pop 0

	// CPed::Dress
	// plugin::CallMethod<0x4EEFD0, CPed *>(this);
	0AA6: call_method 0x4EEFD0 struct [CPed] num_params 0 pop 0

	// CPed::DriveVehicle
	// plugin::CallMethod<0x522AA0, CPed *>(this);
	0AA6: call_method 0x522AA0 struct [CPed] num_params 0 pop 0

	// CPed::Duck
	// plugin::CallMethod<0x512A90, CPed *>(this);
	0AA6: call_method 0x512A90 struct [CPed] num_params 0 pop 0

	// CPed::DuckAndCover
	// plugin::CallMethod<0x513340, CPed *>(this);
	0AA6: call_method 0x513340 struct [CPed] num_params 0 pop 0

	// CPed::EndFight
	// plugin::CallMethod<0x5289A0, CPed *, unsigned char>(this, arg0);
	0AA6: call_method 0x5289A0 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::EnterCar
	// plugin::CallMethod<0x517BA0, CPed *>(this);
	0AA6: call_method 0x517BA0 struct [CPed] num_params 0 pop 0

	// CPed::ExitCar
	// plugin::CallMethod<0x516960, CPed *>(this);
	0AA6: call_method 0x516960 struct [CPed] num_params 0 pop 0

	// CPed::FacePhone
	// plugin::CallMethodAndReturn<bool, 0x4F5CA0, CPed *>(this);
	0AA8: call_method_return 0x4F5CA0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Fall
	// plugin::CallMethod<0x4FD740, CPed *>(this);
	0AA6: call_method 0x4FD740 struct [CPed] num_params 0 pop 0

	// CPed::Fight
	// plugin::CallMethod<0x529A00, CPed *>(this);
	0AA6: call_method 0x529A00 struct [CPed] num_params 0 pop 0

	// CPed::FightHitPed
	// plugin::CallMethod<0x527800, CPed *, CPed*, CVector&, CVector&, short>(this, ped, arg1, arg2, arg3);
	0AA6: call_method 0x527800 struct [CPed] num_params 4 pop 0 [ped] [arg1] [arg2] [arg3]

	// CPed::FightStrike
	// plugin::CallMethod<0x5282E0, CPed *, CVector&, bool>(this, arg0, arg1);
	0AA6: call_method 0x5282E0 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::FindBestCoordsFromNodes
	// plugin::CallMethodAndReturn<bool, 0x513DF0, CPed *, CVector, CVector*>(this, arg0, arg1);
	0AA8: call_method_return 0x513DF0 struct [CPed] num_params 2 pop 0 [arg0] [arg1] func_ret [bool]

	// CPed::Flee
	// plugin::CallMethod<0x4FB130, CPed *>(this);
	0AA6: call_method 0x4FB130 struct [CPed] num_params 0 pop 0

	// CPed::FollowPath
	// plugin::CallMethodAndReturn<short, 0x4F76C0, CPed *>(this);
	0AA8: call_method_return 0x4F76C0 struct [CPed] num_params 0 pop 0 func_ret [short]

	// CPed::GetFormationPosition
	// plugin::CallMethodAndReturn<int, 0x519E30, CPed *>(this);
	0AA8: call_method_return 0x519E30 struct [CPed] num_params 0 pop 0 func_ret [int]

	// CPed::GetLocalDirection
	// plugin::CallMethodAndReturn<int, 0x5035F0, CPed *, CVector2D const&>(this, arg0);
	0AA8: call_method_return 0x5035F0 struct [CPed] num_params 1 pop 0 [arg0] func_ret [int]

	// CPed::GetLocalPositionToOpenCarDoor
	// plugin::CallAndReturn<int, 0x512D10, CVehicle*, unsigned int, float>(vehicle, arg1, arg2);
	0AA7: call_function_return 0x512D10 num_params 3 pop 3 [vehicle] [arg1] [arg2] func_ret [int]

	// CPed::GetNearestDoor
	// plugin::CallMethodAndReturn<int, 0x5160E0, CPed *, CVehicle*, CVector&>(this, vehicle, position);
	0AA8: call_method_return 0x5160E0 struct [CPed] num_params 2 pop 0 [vehicle] [position] func_ret [int]

	// CPed::GetNearestPassengerDoor
	// plugin::CallMethodAndReturn<bool, 0x515CE0, CPed *, CVehicle*, CVector&>(this, vehicle, position);
	0AA8: call_method_return 0x515CE0 struct [CPed] num_params 2 pop 0 [vehicle] [position] func_ret [bool]

	// CPed::GetNearestTrainDoor
	// plugin::CallMethodAndReturn<bool, 0x514A70, CPed *, CVehicle*, CVector&>(this, vehicle, position);
	0AA8: call_method_return 0x514A70 struct [CPed] num_params 2 pop 0 [vehicle] [position] func_ret [bool]

	// CPed::GetNearestTrainPedPosition
	// plugin::CallMethodAndReturn<bool, 0x514650, CPed *, CVehicle*, CVector&>(this, vehicle, position);
	0AA8: call_method_return 0x514650 struct [CPed] num_params 2 pop 0 [vehicle] [position] func_ret [bool]

	// CPed::GetNextPointOnRoute
	// plugin::CallMethodAndReturn<int, 0x51C9E0, CPed *>(this);
	0AA8: call_method_return 0x51C9E0 struct [CPed] num_params 0 pop 0 func_ret [int]

	// CPed::GetPositionToOpenCarDoor
	// plugin::CallAndReturn<int, 0x5164D0, CVehicle*, unsigned int>(vehicle, arg1);
	0AA7: call_function_return 0x5164D0 num_params 2 pop 2 [vehicle] [arg1] func_ret [int]

	// CPed::GetPositionToOpenCarDoor
	// plugin::CallAndReturn<int, 0x513080, CVehicle*, unsigned int, float>(vehicle, arg1, arg2);
	0AA7: call_function_return 0x513080 num_params 3 pop 3 [vehicle] [arg1] [arg2] func_ret [int]

	// CPed::GetWeaponSlot
	// plugin::CallMethodAndReturn<int, 0x4FFA10, CPed *, eWeaponType>(this, weaponType);
	0AA8: call_method_return 0x4FFA10 struct [CPed] num_params 1 pop 0 [weaponType] func_ret [int]

	// CPed::GiveDelayedWeapon
	// plugin::CallMethod<0x4FFC30, CPed *, eWeaponType, unsigned int>(this, weaponType, ammo);
	0AA6: call_method 0x4FFC30 struct [CPed] num_params 2 pop 0 [weaponType] [ammo]

	// CPed::GiveWeapon
	// plugin::CallMethod<0x4FFA30, CPed *, eWeaponType, unsigned int, bool>(this, weaponType, ammo, likeUnused);
	0AA6: call_method 0x4FFA30 struct [CPed] num_params 3 pop 0 [weaponType] [ammo] [likeUnused]

	// CPed::GrantAmmo
	// plugin::CallMethod<0x4FF840, CPed *, eWeaponType, unsigned int>(this, weaponType, ammo);
	0AA6: call_method 0x4FF840 struct [CPed] num_params 2 pop 0 [weaponType] [ammo]

	// CPed::HasAttractor
	// plugin::CallMethodAndReturn<bool, 0x4EF8A0, CPed *>(this);
	0AA8: call_method_return 0x4EF8A0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::HaveReachedNextPointOnRoute
	// plugin::CallMethodAndReturn<bool, 0x51C970, CPed *, float>(this, arg0);
	0AA8: call_method_return 0x51C970 struct [CPed] num_params 1 pop 0 [arg0] func_ret [bool]

	// CPed::Idle
	// plugin::CallMethod<0x4FDEB0, CPed *>(this);
	0AA6: call_method 0x4FDEB0 struct [CPed] num_params 0 pop 0

	// CPed::InTheAir
	// plugin::CallMethod<0x4FD4D0, CPed *>(this);
	0AA6: call_method 0x4FD4D0 struct [CPed] num_params 0 pop 0

	// CPed::InflictDamage
	// plugin::CallMethod<0x525B20, CPed *, void*, eWeaponType, float, ePedPieceTypes, unsigned char>(this, arg0, weaponType, arg2, arg3, arg4);
	0AA6: call_method 0x525B20 struct [CPed] num_params 5 pop 0 [arg0] [weaponType] [arg2] [arg3] [arg4]

	// CPed::InformMyGangOfAttack
	// plugin::CallMethod<0x512950, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x512950 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::Initialise
	// plugin::Call<0x50D9F0>();
	0AA5: call_function 0x50D9F0 num_params 0 pop 0

	// CPed::InvestigateEvent
	// plugin::CallMethod<0x526C60, CPed *>(this);
	0AA6: call_method 0x526C60 struct [CPed] num_params 0 pop 0

	// CPed::IsGangMember
	// plugin::CallMethodAndReturn<bool, 0x4F4910, CPed *>(this);
	0AA8: call_method_return 0x4F4910 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPedDoingDriveByShooting
	// plugin::CallMethodAndReturn<bool, 0x5C84D0, CPed *>(this);
	0AA8: call_method_return 0x5C84D0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPedHeadAbovePos
	// plugin::CallMethodAndReturn<bool, 0x525960, CPed *, float>(this, zPos);
	0AA8: call_method_return 0x525960 struct [CPed] num_params 1 pop 0 [zPos] func_ret [bool]

	// CPed::IsPedInControl
	// plugin::CallMethodAndReturn<bool, 0x501950, CPed *>(this);
	0AA8: call_method_return 0x501950 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPedShootable
	// plugin::CallMethodAndReturn<bool, 0x501930, CPed *>(this);
	0AA8: call_method_return 0x501930 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPlayer
	// plugin::CallMethodAndReturn<bool, 0x4F4930, CPed *>(this);
	0AA8: call_method_return 0x4F4930 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsPointerValid
	// plugin::CallMethodAndReturn<bool, 0x4F4860, CPed *>(this);
	0AA8: call_method_return 0x4F4860 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::IsRoomToBeCarJacked
	// plugin::CallMethodAndReturn<bool, 0x512670, CPed *>(this);
	0AA8: call_method_return 0x512670 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::KillCharOnFootArmed
	// plugin::CallMethod<0x50FFC0, CPed *, CVector&, CVector&, CVector&>(this, arg0, arg1, arg2);
	0AA6: call_method 0x50FFC0 struct [CPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPed::KillCharOnFootMelee
	// plugin::CallMethod<0x50F170, CPed *, CVector&, CVector&, CVector&>(this, arg0, arg1, arg2);
	0AA6: call_method 0x50F170 struct [CPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPed::KillPedWithCar
	// plugin::CallMethod<0x523CD0, CPed *, CVehicle*, float>(this, vehicle, arg1);
	0AA6: call_method 0x523CD0 struct [CPed] num_params 2 pop 0 [vehicle] [arg1]

	// CPed::LineUpPedWithCar
	// plugin::CallMethod<0x518AD0, CPed *, unsigned int>(this, arg0);
	0AA6: call_method 0x518AD0 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::LoadFightData
	// plugin::Call<0x527570>();
	0AA5: call_function 0x527570 num_params 0 pop 0

	// CPed::LookForInterestingNodes
	// plugin::CallMethod<0x4F3540, CPed *>(this);
	0AA6: call_method 0x4F3540 struct [CPed] num_params 0 pop 0

	// CPed::LookForSexyCars
	// plugin::CallMethod<0x4F3EB0, CPed *>(this);
	0AA6: call_method 0x4F3EB0 struct [CPed] num_params 0 pop 0

	// CPed::LookForSexyPeds
	// plugin::CallMethod<0x4F4090, CPed *>(this);
	0AA6: call_method 0x4F4090 struct [CPed] num_params 0 pop 0

	// CPed::MakePhonecall
	// plugin::CallMethodAndReturn<bool, 0x4F5B40, CPed *>(this);
	0AA8: call_method_return 0x4F5B40 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::MakeTyresMuddySectorList
	// plugin::CallMethod<0x5870D0, CPed *, CPtrList&>(this, ptrList);
	0AA6: call_method 0x5870D0 struct [CPed] num_params 1 pop 0 [ptrList]

	// CPed::MoveHeadToLook
	// plugin::CallMethod<0x50B700, CPed *>(this);
	0AA6: call_method 0x50B700 struct [CPed] num_params 0 pop 0

	// CPed::Mug
	// plugin::CallMethod<0x4FCD30, CPed *>(this);
	0AA6: call_method 0x4FCD30 struct [CPed] num_params 0 pop 0

	// CPed::OurPedCanSeeThisOne
	// plugin::CallMethodAndReturn<bool, 0x50D360, CPed *, CEntity*, bool>(this, entity, arg1);
	0AA8: call_method_return 0x50D360 struct [CPed] num_params 2 pop 0 [entity] [arg1] func_ret [bool]

	// CPed::Pause
	// plugin::CallMethod<0x4FDE80, CPed *>(this);
	0AA6: call_method 0x4FDE80 struct [CPed] num_params 0 pop 0

	// CPed::PedShuffle
	// plugin::CallMethod<0x51A2F0, CPed *>(this);
	0AA6: call_method 0x51A2F0 struct [CPed] num_params 0 pop 0

	// CPed::PlacePedOnDryLand
	// plugin::CallMethodAndReturn<bool, 0x5256A0, CPed *>(this);
	0AA8: call_method_return 0x5256A0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::PlayFootSteps
	// plugin::CallMethod<0x503680, CPed *>(this);
	0AA6: call_method 0x503680 struct [CPed] num_params 0 pop 0

	// CPed::PlayHitSound
	// plugin::CallMethod<0x528850, CPed *, CPed*>(this, ped);
	0AA6: call_method 0x528850 struct [CPed] num_params 1 pop 0 [ped]

	// CPed::PointGunAt
	// plugin::CallMethodAndReturn<short, 0x52DCD0, CPed *>(this);
	0AA8: call_method_return 0x52DCD0 struct [CPed] num_params 0 pop 0 func_ret [short]

	// CPed::PositionAnyPedOutOfCollision
	// plugin::CallMethodAndReturn<bool, 0x511840, CPed *>(this);
	0AA8: call_method_return 0x511840 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::PositionAttachedPed
	// plugin::CallMethod<0x4EF0A0, CPed *>(this);
	0AA6: call_method 0x4EF0A0 struct [CPed] num_params 0 pop 0

	// CPed::PositionPedOutOfCollision
	// plugin::CallMethodAndReturn<bool, 0x511B10, CPed *>(this);
	0AA8: call_method_return 0x511B10 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::PossiblyFindBetterPosToSeekCar
	// plugin::CallMethodAndReturn<bool, 0x4F0810, CPed *, CVector*, CVehicle*>(this, arg0, vehicle);
	0AA8: call_method_return 0x4F0810 struct [CPed] num_params 2 pop 0 [arg0] [vehicle] func_ret [bool]

	// CPed::ProcessBuoyancy
	// plugin::CallMethod<0x509460, CPed *>(this);
	0AA6: call_method 0x509460 struct [CPed] num_params 0 pop 0

	// CPed::ProcessObjective
	// plugin::CallMethod<0x51CA70, CPed *>(this);
	0AA6: call_method 0x51CA70 struct [CPed] num_params 0 pop 0

	// CPed::QuitEnteringCar
	// plugin::CallMethod<0x5179D0, CPed *>(this);
	0AA6: call_method 0x5179D0 struct [CPed] num_params 0 pop 0

	// CPed::ReactToAttack
	// plugin::CallMethod<0x51BDA0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x51BDA0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::ReactToPointGun
	// plugin::CallMethod<0x51C1E0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x51C1E0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::RegisterThreatWithGangPeds
	// plugin::CallMethod<0x514360, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x514360 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::RemoveDrivebyAnims
	// plugin::CallMethod<0x512480, CPed *>(this);
	0AA6: call_method 0x512480 struct [CPed] num_params 0 pop 0

	// CPed::RemoveInCarAnims
	// plugin::CallMethod<0x512440, CPed *, bool>(this, arg0);
	0AA6: call_method 0x512440 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::RemoveWeaponAnims
	// plugin::CallMethod<0x5229B0, CPed *, int, float>(this, likeUnused, blendDelta);
	0AA6: call_method 0x5229B0 struct [CPed] num_params 2 pop 0 [likeUnused] [blendDelta]

	// CPed::RemoveWeaponModel
	// plugin::CallMethod<0x4FFD80, CPed *, int>(this, modelIndex);
	0AA6: call_method 0x4FFD80 struct [CPed] num_params 1 pop 0 [modelIndex]

	// CPed::RemoveWeaponWhenEnteringVehicle
	// plugin::CallMethod<0x4FF6A0, CPed *>(this);
	0AA6: call_method 0x4FF6A0 struct [CPed] num_params 0 pop 0

	// CPed::ReplaceWeaponWhenExitingVehicle
	// plugin::CallMethod<0x4FF5A0, CPed *>(this);
	0AA6: call_method 0x4FF5A0 struct [CPed] num_params 0 pop 0

	// CPed::RequestDelayedWeapon
	// plugin::CallMethod<0x4FFCE0, CPed *>(this);
	0AA6: call_method 0x4FFCE0 struct [CPed] num_params 0 pop 0

	// CPed::RestartNonPartialAnims
	// plugin::CallMethod<0x50CCF0, CPed *>(this);
	0AA6: call_method 0x50CCF0 struct [CPed] num_params 0 pop 0

	// CPed::RestoreGunPosition
	// plugin::CallMethod<0x50B250, CPed *>(this);
	0AA6: call_method 0x50B250 struct [CPed] num_params 0 pop 0

	// CPed::RestoreHeadPosition
	// plugin::CallMethod<0x50B650, CPed *>(this);
	0AA6: call_method 0x50B650 struct [CPed] num_params 0 pop 0

	// CPed::RestoreHeadingRate
	// plugin::CallMethod<0x4F17D0, CPed *>(this);
	0AA6: call_method 0x4F17D0 struct [CPed] num_params 0 pop 0

	// CPed::RestorePreviousObjective
	// plugin::CallMethod<0x520FE0, CPed *>(this);
	0AA6: call_method 0x520FE0 struct [CPed] num_params 0 pop 0

	// CPed::RestorePreviousState
	// plugin::CallMethod<0x50C600, CPed *>(this);
	0AA6: call_method 0x50C600 struct [CPed] num_params 0 pop 0

	// CPed::Say
	// plugin::CallMethod<0x5226B0, CPed *, unsigned short>(this, arg0);
	0AA6: call_method 0x5226B0 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::Say
	// plugin::CallMethod<0x4EEFA0, CPed *, unsigned short, int>(this, arg0, arg1);
	0AA6: call_method 0x4EEFA0 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::ScanForDelayedResponseThreats
	// plugin::CallMethod<0x50BD80, CPed *>(this);
	0AA6: call_method 0x50BD80 struct [CPed] num_params 0 pop 0

	// CPed::ScanForInterestingStuff
	// plugin::CallMethod<0x50AD50, CPed *>(this);
	0AA6: call_method 0x50AD50 struct [CPed] num_params 0 pop 0

	// CPed::ScanForThreats
	// plugin::CallMethod<0x50BE00, CPed *>(this);
	0AA6: call_method 0x50BE00 struct [CPed] num_params 0 pop 0

	// CPed::Seek
	// plugin::CallMethodAndReturn<bool, 0x4FBD00, CPed *>(this);
	0AA8: call_method_return 0x4FBD00 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SeekBoatPosition
	// plugin::CallMethod<0x512740, CPed *>(this);
	0AA6: call_method 0x512740 struct [CPed] num_params 0 pop 0

	// CPed::SeekCar
	// plugin::CallMethod<0x4F4AD0, CPed *>(this);
	0AA6: call_method 0x4F4AD0 struct [CPed] num_params 0 pop 0

	// CPed::SeekFollowingPath
	// plugin::CallMethod<0x4FA1C0, CPed *>(this);
	0AA6: call_method 0x4FA1C0 struct [CPed] num_params 0 pop 0

	// CPed::SelectGunIfArmed
	// plugin::CallMethodAndReturn<bool, 0x51C800, CPed *>(this);
	0AA8: call_method_return 0x51C800 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::ServiceTalking
	// plugin::CallMethod<0x522850, CPed *>(this);
	0AA6: call_method 0x522850 struct [CPed] num_params 0 pop 0

	// CPed::ServiceTalkingWhenDead
	// plugin::CallMethodAndReturn<bool, 0x522990, CPed *>(this);
	0AA8: call_method_return 0x522990 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SetAimFlag
	// plugin::CallMethod<0x50B510, CPed *, CEntity*>(this, aimingTo);
	0AA6: call_method 0x50B510 struct [CPed] num_params 1 pop 0 [aimingTo]

	// CPed::SetAimFlag
	// plugin::CallMethod<0x50B5B0, CPed *, float>(this, heading);
	0AA6: call_method 0x50B5B0 struct [CPed] num_params 1 pop 0 [heading]

	// CPed::SetAmmo
	// plugin::CallMethod<0x4FF780, CPed *, eWeaponType, unsigned int>(this, weaponType, ammo);
	0AA6: call_method 0x4FF780 struct [CPed] num_params 2 pop 0 [weaponType] [ammo]

	// CPed::SetAnimOffsetForEnterOrExitVehicle
	// plugin::Call<0x5155E0>();
	0AA5: call_function 0x5155E0 num_params 0 pop 0

	// CPed::SetAnswerMobile
	// plugin::CallMethod<0x4F59C0, CPed *>(this);
	0AA6: call_method 0x4F59C0 struct [CPed] num_params 0 pop 0

	// CPed::SetAttack
	// plugin::CallMethod<0x52D1C0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x52D1C0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::SetAttackTimer
	// plugin::CallMethod<0x4FCAB0, CPed *, unsigned int>(this, time);
	0AA6: call_method 0x4FCAB0 struct [CPed] num_params 1 pop 0 [time]

	// CPed::SetBeingDraggedFromCar
	// plugin::CallMethod<0x518430, CPed *, CVehicle*, unsigned int, bool>(this, vehicle, arg1, arg2);
	0AA6: call_method 0x518430 struct [CPed] num_params 3 pop 0 [vehicle] [arg1] [arg2]

	// CPed::SetCarJack
	// plugin::CallMethod<0x5188A0, CPed *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x5188A0 struct [CPed] num_params 1 pop 0 [vehicle]

	// CPed::SetCarJack_AllClear
	// plugin::CallMethod<0x518690, CPed *, CVehicle*, unsigned int, unsigned int>(this, vehicle, arg1, arg2);
	0AA6: call_method 0x518690 struct [CPed] num_params 3 pop 0 [vehicle] [arg1] [arg2]

	// CPed::SetChat
	// plugin::CallMethod<0x4F6220, CPed *, CEntity*, unsigned int>(this, entity, arg1);
	0AA6: call_method 0x4F6220 struct [CPed] num_params 2 pop 0 [entity] [arg1]

	// CPed::SetCurrentWeapon
	// plugin::CallMethod<0x4FF8E0, CPed *, eWeaponType>(this, weaponType);
	0AA6: call_method 0x4FF8E0 struct [CPed] num_params 1 pop 0 [weaponType]

	// CPed::SetCurrentWeapon
	// plugin::CallMethod<0x4FF900, CPed *, int>(this, slot);
	0AA6: call_method 0x4FF900 struct [CPed] num_params 1 pop 0 [slot]

	// CPed::SetDead
	// plugin::CallMethod<0x4F6430, CPed *>(this);
	0AA6: call_method 0x4F6430 struct [CPed] num_params 0 pop 0

	// CPed::SetDie
	// plugin::CallMethod<0x4F65C0, CPed *, AnimationId, float, float>(this, arg0, arg1, arg2);
	0AA6: call_method 0x4F65C0 struct [CPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPed::SetDirectionToWalkAroundObject
	// plugin::CallMethod<0x5019A0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x5019A0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::SetDirectionToWalkAroundVehicle
	// plugin::CallMethod<0x5035B0, CPed *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x5035B0 struct [CPed] num_params 1 pop 0 [vehicle]

	// CPed::SetDuck
	// plugin::CallMethod<0x512C10, CPed *, unsigned int, bool>(this, arg0, arg1);
	0AA6: call_method 0x512C10 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetEnterCar
	// plugin::CallMethod<0x518080, CPed *, CVehicle*, unsigned int>(this, vehicle, arg1);
	0AA6: call_method 0x518080 struct [CPed] num_params 2 pop 0 [vehicle] [arg1]

	// CPed::SetEnterCar_AllClear
	// plugin::CallMethod<0x517DE0, CPed *, CVehicle*, unsigned int, unsigned int>(this, vehicle, arg1, arg2);
	0AA6: call_method 0x517DE0 struct [CPed] num_params 3 pop 0 [vehicle] [arg1] [arg2]

	// CPed::SetEvasiveDive
	// plugin::CallMethod<0x4F6A20, CPed *, CPhysical*, unsigned char>(this, arg0, arg1);
	0AA6: call_method 0x4F6A20 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetEvasiveStep
	// plugin::CallMethod<0x4F7170, CPed *, CPhysical*, unsigned char>(this, arg0, arg1);
	0AA6: call_method 0x4F7170 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetExitBoat
	// plugin::CallMethod<0x517670, CPed *, CVehicle*>(this, boat);
	0AA6: call_method 0x517670 struct [CPed] num_params 1 pop 0 [boat]

	// CPed::SetExitCar
	// plugin::CallMethod<0x516C60, CPed *, CVehicle*, unsigned int>(this, vehicle, arg1);
	0AA6: call_method 0x516C60 struct [CPed] num_params 2 pop 0 [vehicle] [arg1]

	// CPed::SetFall
	// plugin::CallMethod<0x4FD9F0, CPed *, int, AnimationId, unsigned char>(this, arg0, arg1, arg2);
	0AA6: call_method 0x4FD9F0 struct [CPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPed::SetFlee
	// plugin::CallMethod<0x4FB820, CPed *, CEntity*, int>(this, arg0, arg1);
	0AA6: call_method 0x4FB820 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetFlee
	// plugin::CallMethod<0x4FBA90, CPed *, CVector2D const&, int>(this, arg0, arg1);
	0AA6: call_method 0x4FBA90 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetFollowPath
	// plugin::CallMethod<0x4F9F60, CPed *, CVector const&, float, eMoveState, CEntity*, CEntity*, int>(this, arg0, arg1, arg2, arg3, arg4, arg5);
	0AA6: call_method 0x4F9F60 struct [CPed] num_params 6 pop 0 [arg0] [arg1] [arg2] [arg3] [arg4] [arg5]

	// CPed::SetFollowPathDynamic
	// plugin::CallMethodAndReturn<bool, 0x4F7990, CPed *>(this);
	0AA8: call_method_return 0x4F7990 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SetFollowPathStatic
	// plugin::CallMethodAndReturn<bool, 0x4F99F0, CPed *>(this);
	0AA8: call_method_return 0x4F99F0 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::SetFormation
	// plugin::CallMethod<0x51A020, CPed *, eFormation>(this, arg0);
	0AA6: call_method 0x51A020 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::SetGetUp
	// plugin::CallMethod<0x4FCF60, CPed *>(this);
	0AA6: call_method 0x4FCF60 struct [CPed] num_params 0 pop 0

	// CPed::SetIdle
	// plugin::CallMethod<0x4FDFD0, CPed *>(this);
	0AA6: call_method 0x4FDFD0 struct [CPed] num_params 0 pop 0

	// CPed::SetInTheAir
	// plugin::CallMethod<0x4FD610, CPed *>(this);
	0AA6: call_method 0x4FD610 struct [CPed] num_params 0 pop 0

	// CPed::SetInvestigateEvent
	// plugin::CallMethod<0x527490, CPed *, eEventType, CVector2D, float, unsigned short, float>(this, eventType, arg1, arg2, arg3, arg4);
	0AA6: call_method 0x527490 struct [CPed] num_params 5 pop 0 [eventType] [arg1] [arg2] [arg3] [arg4]

	// CPed::SetJump
	// plugin::CallMethod<0x4F03C0, CPed *>(this);
	0AA6: call_method 0x4F03C0 struct [CPed] num_params 0 pop 0

	// CPed::SetLanding
	// plugin::CallMethod<0x4FD3A0, CPed *>(this);
	0AA6: call_method 0x4FD3A0 struct [CPed] num_params 0 pop 0

	// CPed::SetLeader
	// plugin::CallMethod<0x4F07D0, CPed *, CPed*>(this, ped);
	0AA6: call_method 0x4F07D0 struct [CPed] num_params 1 pop 0 [ped]

	// CPed::SetLook
	// plugin::CallMethod<0x4FCB10, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x4FCB10 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::SetLookFlag
	// plugin::CallMethod<0x50BB70, CPed *, CEntity*, bool, bool>(this, lookingTo, likeUnused, arg2);
	0AA6: call_method 0x50BB70 struct [CPed] num_params 3 pop 0 [lookingTo] [likeUnused] [arg2]

	// CPed::SetLookFlag
	// plugin::CallMethod<0x50BC40, CPed *, float, bool, bool>(this, lookHeading, likeUnused, arg2);
	0AA6: call_method 0x50BC40 struct [CPed] num_params 3 pop 0 [lookHeading] [likeUnused] [arg2]

	// CPed::SetLookTimer
	// plugin::CallMethod<0x4FCAF0, CPed *, unsigned int>(this, time);
	0AA6: call_method 0x4FCAF0 struct [CPed] num_params 1 pop 0 [time]

	// CPed::SetMoveState
	// plugin::CallMethod<0x50D110, CPed *, eMoveState>(this, moveState);
	0AA6: call_method 0x50D110 struct [CPed] num_params 1 pop 0 [moveState]

	// CPed::SetNewAttraction
	// plugin::CallMethod<0x4EF7C0, CPed *, CPedAttractor*, CVector const&, float, float, int>(this, arg0, arg1, arg2, arg3, arg4);
	0AA6: call_method 0x4EF7C0 struct [CPed] num_params 5 pop 0 [arg0] [arg1] [arg2] [arg3] [arg4]

	// CPed::SetObjective
	// plugin::CallMethod<0x5224B0, CPed *, eObjective>(this, objective);
	0AA6: call_method 0x5224B0 struct [CPed] num_params 1 pop 0 [objective]

	// CPed::SetObjective
	// plugin::CallMethod<0x521840, CPed *, eObjective, CVector>(this, objective, arg1);
	0AA6: call_method 0x521840 struct [CPed] num_params 2 pop 0 [objective] [arg1]

	// CPed::SetObjective
	// plugin::CallMethod<0x5217E0, CPed *, eObjective, float, CVector const&>(this, objective, arg1, arg2);
	0AA6: call_method 0x5217E0 struct [CPed] num_params 3 pop 0 [objective] [arg1] [arg2]

	// CPed::SetObjective
	// plugin::CallMethod<0x521D10, CPed *, eObjective, short, short>(this, objective, arg1, arg2);
	0AA6: call_method 0x521D10 struct [CPed] num_params 3 pop 0 [objective] [arg1] [arg2]

	// CPed::SetObjective
	// plugin::CallMethod<0x521F10, CPed *, eObjective, void*>(this, objective, arg1);
	0AA6: call_method 0x521F10 struct [CPed] num_params 2 pop 0 [objective] [arg1]

	// CPed::SetObjectiveTimer
	// plugin::CallMethod<0x522660, CPed *, unsigned int>(this, time);
	0AA6: call_method 0x522660 struct [CPed] num_params 1 pop 0 [time]

	// CPed::SetPedPositionInCar
	// plugin::CallMethod<0x4F42F0, CPed *>(this);
	0AA6: call_method 0x4F42F0 struct [CPed] num_params 0 pop 0

	// CPed::SetPedStats
	// plugin::CallMethod<0x50D8E0, CPed *, ePedStats>(this, statsType);
	0AA6: call_method 0x50D8E0 struct [CPed] num_params 1 pop 0 [statsType]

	// CPed::SetPointGunAt
	// plugin::CallMethod<0x52DDF0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x52DDF0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::SetRadioStation
	// plugin::CallMethod<0x4EFBD0, CPed *>(this);
	0AA6: call_method 0x4EFBD0 struct [CPed] num_params 0 pop 0

	// CPed::SetSeek
	// plugin::CallMethod<0x4FC570, CPed *, CEntity*, float>(this, arg0, arg1);
	0AA6: call_method 0x4FC570 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetSeek
	// plugin::CallMethod<0x4FC740, CPed *, CVector, float>(this, arg0, arg1);
	0AA6: call_method 0x4FC740 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::SetSeekBoatPosition
	// plugin::CallMethod<0x512850, CPed *, CVehicle*>(this, boat);
	0AA6: call_method 0x512850 struct [CPed] num_params 1 pop 0 [boat]

	// CPed::SetSeekCar
	// plugin::CallMethod<0x4F54D0, CPed *, CVehicle*, unsigned int>(this, car, arg1);
	0AA6: call_method 0x4F54D0 struct [CPed] num_params 2 pop 0 [car] [arg1]

	// CPed::SetShootTimer
	// plugin::CallMethod<0x4FCA90, CPed *, unsigned int>(this, time);
	0AA6: call_method 0x4FCA90 struct [CPed] num_params 1 pop 0 [time]

	// CPed::SetSolicit
	// plugin::CallMethod<0x4F1400, CPed *, unsigned int>(this, arg0);
	0AA6: call_method 0x4F1400 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::SetStoredObjective
	// plugin::CallMethod<0x522620, CPed *>(this);
	0AA6: call_method 0x522620 struct [CPed] num_params 0 pop 0

	// CPed::SetStoredState
	// plugin::CallMethod<0x50CC40, CPed *>(this);
	0AA6: call_method 0x50CC40 struct [CPed] num_params 0 pop 0

	// CPed::SetWaitState
	// plugin::CallMethod<0x4F28A0, CPed *, eWaitState, void*>(this, waitState, arg1);
	0AA6: call_method 0x4F28A0 struct [CPed] num_params 2 pop 0 [waitState] [arg1]

	// CPed::SetWanderPath
	// plugin::CallMethod<0x4FACC0, CPed *, signed>(this, arg0);
	0AA6: call_method 0x4FACC0 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::Solicit
	// plugin::CallMethod<0x4F11D0, CPed *>(this);
	0AA6: call_method 0x4F11D0 struct [CPed] num_params 0 pop 0

	// CPed::SortPeds
	// plugin::CallMethod<0x50D120, CPed *, CPed**, int, int>(this, pedList, arg1, arg2);
	0AA6: call_method 0x50D120 struct [CPed] num_params 3 pop 0 [pedList] [arg1] [arg2]

	// CPed::SpawnFlyingComponent
	// plugin::CallMethod<0x5259F0, CPed *, int, char>(this, arg0, arg1);
	0AA6: call_method 0x5259F0 struct [CPed] num_params 2 pop 0 [arg0] [arg1]

	// CPed::StartFightAttack
	// plugin::CallMethod<0x52AD70, CPed *, unsigned char>(this, arg0);
	0AA6: call_method 0x52AD70 struct [CPed] num_params 1 pop 0 [arg0]

	// CPed::StartFightDefend
	// plugin::CallMethod<0x52A340, CPed *, unsigned char, unsigned char, unsigned char>(this, arg0, arg1, arg2);
	0AA6: call_method 0x52A340 struct [CPed] num_params 3 pop 0 [arg0] [arg1] [arg2]

	// CPed::StopNonPartialAnims
	// plugin::CallMethod<0x50CD20, CPed *>(this);
	0AA6: call_method 0x50CD20 struct [CPed] num_params 0 pop 0

	// CPed::TurnBody
	// plugin::CallMethodAndReturn<bool, 0x4FC970, CPed *>(this);
	0AA8: call_method_return 0x4FC970 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Undress
	// plugin::CallMethod<0x4EF030, CPed *, char const*>(this, modelName);
	0AA6: call_method 0x4EF030 struct [CPed] num_params 1 pop 0 [modelName]

	// CPed::UpdateFromLeader
	// plugin::CallMethod<0x521070, CPed *>(this);
	0AA6: call_method 0x521070 struct [CPed] num_params 0 pop 0

	// CPed::UpdatePosition
	// plugin::CallMethod<0x50A040, CPed *>(this);
	0AA6: call_method 0x50A040 struct [CPed] num_params 0 pop 0

	// CPed::UseGroundColModel
	// plugin::CallMethodAndReturn<bool, 0x501900, CPed *>(this);
	0AA8: call_method_return 0x501900 struct [CPed] num_params 0 pop 0 func_ret [bool]

	// CPed::Wait
	// plugin::CallMethod<0x4F18A0, CPed *>(this);
	0AA6: call_method 0x4F18A0 struct [CPed] num_params 0 pop 0

	// CPed::WanderPath
	// plugin::CallMethod<0x4FA680, CPed *>(this);
	0AA6: call_method 0x4FA680 struct [CPed] num_params 0 pop 0

	// CPed::WarpPedIntoCar
	// plugin::CallMethod<0x4EF8B0, CPed *, CVehicle*>(this, vehicle);
	0AA6: call_method 0x4EF8B0 struct [CPed] num_params 1 pop 0 [vehicle]

	// CPed::WarpPedToNearEntityOffScreen
	// plugin::CallMethod<0x5110C0, CPed *, CEntity*>(this, entity);
	0AA6: call_method 0x5110C0 struct [CPed] num_params 1 pop 0 [entity]

	// CPed::WarpPedToNearLeaderOffScreen
	// plugin::CallMethod<0x511480, CPed *>(this);
	0AA6: call_method 0x511480 struct [CPed] num_params 0 pop 0

	// CPed::WillChat
	// plugin::CallMethodAndReturn<bool, 0x50AC70, CPed *, CPed*>(this, ped);
	0AA8: call_method_return 0x50AC70 struct [CPed] num_params 1 pop 0 [ped] func_ret [bool]

	// CPed::WorkOutHeadingForMovingFirstPerson
	// plugin::CallMethodAndReturn<float, 0x50A530, CPed *, float>(this, heading);
	0AA8: call_method_return 0x50A530 struct [CPed] num_params 1 pop 0 [heading] func_ret [float]

	// CPed::operator delete
	// plugin::Call<0x50DA20, void*>(data);
	0AA5: call_function 0x50DA20 num_params 1 pop 1 [data]

	// CPed::operator new
	// plugin::CallAndReturn<void*, 0x50DA60, unsigned int>(size);
	0AA7: call_function_return 0x50DA60 num_params 1 pop 1 [size] func_ret [void*]

	// CPed::operator new
	// plugin::CallAndReturn<void*, 0x50DA40, unsigned int, int>(size, arg1);
	0AA7: call_function_return 0x50DA40 num_params 2 pop 2 [size] [arg1] func_ret [void*]

	// plugin::dummy, plugin
	// plugin::CallMethod<0x50DC20, CPed *, ePedType>(this, pedType);
	0AA6: call_method 0x50DC20 struct [plugin] num_params 1 pop 0 [pedType]

plugin_vc\game_vc\CPedAtmAttractor.cpp:

	// CPedAtmAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedAtmAttractor *>(this);

	// CPedAtmAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedAtmAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedAttractor.cpp:

	// CPedAttractor::GetHeadOfQueueWaitTime
	// plugin::CallVirtualMethodAndReturn<float, 0, CPedAttractor *>(this);

	// CPedAttractor::IsAtHeadOfQueue
	// plugin::CallVirtualMethodAndReturn<bool, 4, CPedAttractor *, CPed *>(this, ped);

	// CPedAttractor::ComputeAttractPos
	// plugin::CallVirtualMethod<5, CPedAttractor *, int, CVector &>(this, qid, pos);

	// CPedAttractor::ComputeAttractHeading
	// plugin::CallVirtualMethod<6, CPedAttractor *, int, float &>(this, qid, heading);

	// CPedAttractor::BroadcastDeparture
	// plugin::CallVirtualMethodAndReturn<bool, 7, CPedAttractor *, CPed *>(this, ped);

	// CPedAttractor::BroadcastArrival
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractor *, CPed *>(gaddrof(CPedAttractor::BroadcastArrival), this, ped);
	0AA8: call_method_return 0x62C940 struct [CPedAttractor] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedAttractor::DeRegisterPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractor *, CPed *>(gaddrof(CPedAttractor::DeRegisterPed), this, ped);
	0AA8: call_method_return 0x62CA40 struct [CPedAttractor] num_params 1 pop 0 [ped] func_ret [bool]

	// CPedAttractor::GetNoOfRegisteredPeds
	// plugin::CallMethodAndReturnDynGlobal<int, CPedAttractor *>(gaddrof(CPedAttractor::GetNoOfRegisteredPeds), this);
	0AA8: call_method_return 0x62DD60 struct [CPedAttractor] num_params 0 pop 0 func_ret [int]

	// CPedAttractor::RegisterPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractor *, CPed *>(gaddrof(CPedAttractor::RegisterPed), this, ped);
	0AA8: call_method_return 0x62CB80 struct [CPedAttractor] num_params 1 pop 0 [ped] func_ret [bool]

plugin_vc\game_vc\CPedAttractorManager.cpp:

	// CPedAttractorManager::BroadcastArrival
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *, CPedAttractor *>(gaddrof_o(CPedAttractorManager::BroadcastArrival, bool (CPedAttractorManager::*)(CPed *, CPedAttractor *)), this, ped, attr);
	0AA8: call_method_return 0x62B370 struct [CPedAttractorManager] num_params 2 pop 0 [ped] [attr] func_ret [bool]

	// CPedAttractorManager::BroadcastDeparture
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *, CPedAttractor *>(gaddrof_o(CPedAttractorManager::BroadcastDeparture, bool (CPedAttractorManager::*)(CPed *, CPedAttractor *)), this, ped, attr);
	0AA8: call_method_return 0x62B240 struct [CPedAttractorManager] num_params 2 pop 0 [ped] [attr] func_ret [bool]

	// CPedAttractorManager::DeRegisterPed
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *, CPedAttractor *>(gaddrof_o(CPedAttractorManager::DeRegisterPed, bool (CPedAttractorManager::*)(CPed *, CPedAttractor *)), this, ped, attr);
	0AA8: call_method_return 0x62B3D0 struct [CPedAttractorManager] num_params 2 pop 0 [ped] [attr] func_ret [bool]

	// CPedAttractorManager::HasEmptySlot
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, C2dEffect const *>(gaddrof(CPedAttractorManager::HasEmptySlot), this, effect);
	0AA8: call_method_return 0x62B0F0 struct [CPedAttractorManager] num_params 1 pop 0 [effect] func_ret [bool]

	// CPedAttractorManager::IsAtHeadOfQueue
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *, CPedAttractor *>(gaddrof(CPedAttractorManager::IsAtHeadOfQueue), this, ped, attr);
	0AA8: call_method_return 0x62BEF0 struct [CPedAttractorManager] num_params 2 pop 0 [ped] [attr] func_ret [bool]

	// CPedAttractorManager::IsInQueue
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *, CPedAttractor *>(gaddrof(CPedAttractorManager::IsInQueue), this, ped, attr);
	0AA8: call_method_return 0x62BC40 struct [CPedAttractorManager] num_params 2 pop 0 [ped] [attr] func_ret [bool]

	// CPedAttractorManager::IsPedRegisteredWithEffect
	// plugin::CallMethodAndReturnDynGlobal<bool, CPedAttractorManager *, CPed *>(gaddrof(CPedAttractorManager::IsPedRegisteredWithEffect), this, ped);
	0AA8: call_method_return 0x62B860 struct [CPedAttractorManager] num_params 1 pop 0 [ped] func_ret [bool]

	// *CPedAttractorManager::RegisterPedWithAttractor
	// plugin::CallMethodAndReturnDynGlobal<CPedAttractor *, CPedAttractorManager *, CPed *, C2dEffect *, CMatrix const &>(gaddrof(CPedAttractorManager::RegisterPedWithAttractor), this, ped, effect, matrix);
	0AA8: call_method_return 0x62C3A0 struct [*CPedAttractorManager] num_params 3 pop 0 [ped] [effect] [matrix] func_ret [CPedAttractor *]

	// CPedAttractorManager::BroadcastArrival
	// plugin::CallAndReturnDynGlobal<bool, CPed *, CPedAttractor *, std::vector<CPedAttractor *> &>(gaddrof_o(CPedAttractorManager::BroadcastArrival, bool (*)(CPed *, CPedAttractor *, std::vector<CPedAttractor *> &)), ped, attr, vecAttractors);

	// CPedAttractorManager::BroadcastDeparture
	// plugin::CallAndReturnDynGlobal<bool, CPed *, CPedAttractor *, std::vector<CPedAttractor *> &>(gaddrof_o(CPedAttractorManager::BroadcastDeparture, bool (*)(CPed *, CPedAttractor *, std::vector<CPedAttractor *> &)), ped, attr, vecAttractors);

	// CPedAttractorManager::ComputeEffectPos
	// plugin::CallDynGlobal<C2dEffect const *, CMatrix const &, CVector &>(gaddrof(CPedAttractorManager::ComputeEffectPos), effect, matrix, pos);

	// CPedAttractorManager::DeRegisterPed
	// plugin::CallAndReturnDynGlobal<bool, CPed *, CPedAttractor *, std::vector<CPedAttractor *> &>(gaddrof_o(CPedAttractorManager::DeRegisterPed, bool (*)(CPed *, CPedAttractor *, std::vector<CPedAttractor *> &)), ped, attr, vecAttractors);

	// CPedAttractorManager::IsApproachable
	// plugin::CallAndReturnDynGlobal<bool, C2dEffect *, CMatrix const &, int, CPed *>(gaddrof(CPedAttractorManager::IsApproachable), effect, matrix, unk, ped);

	// *CPedAttractorManager::RegisterPed
	// plugin::CallAndReturnDynGlobal<CPedAttractor *, CPed *, C2dEffect *, CMatrix const &, std::vector<CPedAttractor *> &>(gaddrof(CPedAttractorManager::RegisterPed), ped, effect, matrix, vecAttractors);

	// *GetPedAttractorManager
	// plugin::CallAndReturnDynGlobal<CPedAttractorManager *>(gaddrof(GetPedAttractorManager));

plugin_vc\game_vc\CPedIceCreamVanAttractor.cpp:

	// CPedIceCreamVanAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedIceCreamVanAttractor *>(this);

	// CPedIceCreamVanAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedIceCreamVanAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedIK.cpp:

	// CPedIK::MoveLimb
	// plugin::CallMethodAndReturn<MoveLimbResult, 0x52F6E0, CPedIK*, LimbOrientation&, float, float, LimbMovementInfo&>(this, limb, yaw, pitch, moveInfo);
	0AA8: call_method_return 0x52F6E0 struct [CPedIK] num_params 4 pop 0 [limb] [yaw] [pitch] [moveInfo] func_ret [MoveLimbResult]

	// CPedIK::GetComponentPosition
	// plugin::CallMethod<0x52F9B0, CPedIK*, RwV3d&, unsigned int>(this, returnedPos, boneIndex);
	0AA6: call_method 0x52F9B0 struct [CPedIK] num_params 2 pop 0 [returnedPos] [boneIndex]

	// CPedIK::ExtractYawAndPitchWorld
	// plugin::CallMethod<0x52F830, CPedIK*, RwMatrix*, float*, float*>(this, matrix, yaw, pitch);
	0AA6: call_method 0x52F830 struct [CPedIK] num_params 3 pop 0 [matrix] [yaw] [pitch]

plugin_vc\game_vc\CPedModelInfo.cpp:

	// CPedModelInfo::AnimatePedColModelSkinned
	// plugin::CallMethod<0x566150, CPedModelInfo *, RpClump*>(this, clump);
	0AA6: call_method 0x566150 struct [CPedModelInfo] num_params 1 pop 0 [clump]

	// CPedModelInfo::AnimatePedColModelSkinnedWorld
	// plugin::CallMethod<0x566060, CPedModelInfo *, RpClump*>(this, clump);
	0AA6: call_method 0x566060 struct [CPedModelInfo] num_params 1 pop 0 [clump]

	// CPedModelInfo::CreateHitColModelSkinned
	// plugin::CallMethod<0x566300, CPedModelInfo *, RpClump*>(this, clump);
	0AA6: call_method 0x566300 struct [CPedModelInfo] num_params 1 pop 0 [clump]

	// CPedModelInfo::CPedModelInfo
	// plugin::CallMethod<0x560120, CPedModelInfo *>(this);
	0AA6: call_method 0x560120 struct [CPedModelInfo] num_params 0 pop 0

	// CPedModelInfo::~CPedModelInfo
	// plugin::CallMethod<0x5600E0, CPedModelInfo *>(this);
	0AA6: call_method 0x5600E0 struct [CPedModelInfo] num_params 0 pop 0

	// PedModelStore::~PedModelStore
	// plugin::CallMethod<0x5600C0, PedModelStore *>(this);
	0AA6: call_method 0x5600C0 struct [PedModelStore] num_params 0 pop 0

plugin_vc\game_vc\CPedPizzaAttractor.cpp:

	// CPedPizzaAttractor::GetHeadOfQueueWaitTime
	// plugin::CallVirtualMethodAndReturn<float, 0, CPedPizzaAttractor *>(this);

	// CPedPizzaAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedPizzaAttractor *>(this);

	// CPedPizzaAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedPizzaAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedPlacement.cpp:

	// CPedPlacement::FindZCoorForPed
	// plugin::CallAndReturn<bool, 0x52FA60, CVector*>(posn);
	0AA7: call_function_return 0x52FA60 num_params 1 pop 1 [posn] func_ret [bool]

	// CPedPlacement::IsPositionClearForPed
	// plugin::CallAndReturn<bool, 0x52FBD0, CVector const&, float, int, CEntity**>(posn, arg1, arg2, entity);
	0AA7: call_function_return 0x52FBD0 num_params 4 pop 4 [posn] [arg1] [arg2] [entity] func_ret [bool]

	// CPedPlacement::IsPositionClearOfCars
	// plugin::CallAndReturn<bool, 0x52FBA0, CVector*>(posn);
	0AA7: call_function_return 0x52FBA0 num_params 1 pop 1 [posn] func_ret [bool]

plugin_vc\game_vc\CPedSeatAttractor.cpp:

	// CPedSeatAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedSeatAttractor *>(this);

	// CPedSeatAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedSeatAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedShelterAttractor.cpp:

	// CPedShelterAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedShelterAttractor *>(this);

	// CPedShelterAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedShelterAttractor *, CPed *>(this, ped);

	// CPedShelterAttractor::IsAtHeadOfQueue
	// plugin::CallVirtualMethodAndReturn<bool, 4, CPedShelterAttractor *, CPed *>(this, ped);

	// CPedShelterAttractor::ComputeAttractPos
	// plugin::CallVirtualMethod<5, CPedShelterAttractor *, int, CVector &>(this, qid, pos);

	// CPedShelterAttractor::ComputeAttractHeading
	// plugin::CallVirtualMethod<6, CPedShelterAttractor *, int, float &>(this, qid, heading);

	// CPedShelterAttractor::BroadcastDeparture
	// plugin::CallVirtualMethodAndReturn<bool, 7, CPedShelterAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedStats.cpp:

	// CPedStats::Initialise
	// plugin::Call<0x530260>();
	0AA5: call_function 0x530260 num_params 0 pop 0

	// CPedStats::Shutdown
	// plugin::Call<0x530220>();
	0AA5: call_function 0x530220 num_params 0 pop 0

	// CPedStats::LoadPedStats
	// plugin::Call<0x530020>();
	0AA5: call_function 0x530020 num_params 0 pop 0

	// CPedStats::GetPedStatType
	// plugin::CallAndReturn<unsigned int, 0x52FFC0, char*>(pedStatName);
	0AA7: call_function_return 0x52FFC0 num_params 1 pop 1 [pedStatName] func_ret [unsigned int]

plugin_vc\game_vc\CPedStopAttractor.cpp:

	// CPedStopAttractor::GetType
	// plugin::CallVirtualMethodAndReturn<ePedAttractorType, 2, CPedStopAttractor *>(this);

	// CPedStopAttractor::UpdatePedStateOnDeparture
	// plugin::CallVirtualMethod<3, CPedStopAttractor *, CPed *>(this, ped);

plugin_vc\game_vc\CPedType.cpp:

	// CPedType::Initialise
	// plugin::Call<0x530F00>();
	0AA5: call_function 0x530F00 num_params 0 pop 0

	// CPedType::Shutdown
	// plugin::Call<0x530EC0>();
	0AA5: call_function 0x530EC0 num_params 0 pop 0

	// CPedType::LoadPedData
	// plugin::Call<0x530B90>();
	0AA5: call_function 0x530B90 num_params 0 pop 0

	// CPedType::FindPedType
	// plugin::CallAndReturn<unsigned int, 0x530860, char*>(pedName);
	0AA7: call_function_return 0x530860 num_params 1 pop 1 [pedName] func_ret [unsigned int]

	// CPedType::FindPedFlag
	// plugin::CallAndReturn<unsigned int, 0x530480, char*>(flagName);
	0AA7: call_function_return 0x530480 num_params 1 pop 1 [flagName] func_ret [unsigned int]

	// CPedType::Save
	// plugin::Call<0x5303D0, unsigned char*, unsigned int*>(bufferPointer, structSize);
	0AA5: call_function 0x5303D0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CPedType::Load
	// plugin::Call<0x530340, unsigned char*, unsigned int>(bufferPointer, structSize);
	0AA5: call_function 0x530340 num_params 2 pop 2 [bufferPointer] [structSize]

plugin_vc\game_vc\CPhoneInfo.cpp:

	// CPhoneInfo::FindNearestFreePhone
	// plugin::CallMethodAndReturnDynGlobal<int, CPhoneInfo *, CVector *>(gaddrof(CPhoneInfo::FindNearestFreePhone), this, point);
	0AA8: call_method_return 0x43CBD0 struct [CPhoneInfo] num_params 1 pop 0 [point] func_ret [int]

	// CPhoneInfo::GrabPhone
	// plugin::CallMethodAndReturnDynGlobal<int, CPhoneInfo *, float, float>(gaddrof(CPhoneInfo::GrabPhone), this, x, y);
	0AA8: call_method_return 0x43C490 struct [CPhoneInfo] num_params 2 pop 0 [x] [y] func_ret [int]

	// CPhoneInfo::Initialise
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Initialise), this);

	// CPhoneInfo::Load
	// plugin::CallMethodDynGlobal<CPhoneInfo *, unsigned char *, unsigned int>(gaddrof(CPhoneInfo::Load), this, bufferPointer, structSize);

	// CPhoneInfo::Save
	// plugin::CallMethodDynGlobal<CPhoneInfo *, unsigned char *, unsigned int *>(gaddrof(CPhoneInfo::Save), this, bufferPointer, structSize);

	// CPhoneInfo::SetPhoneMessage_JustOnce
	// plugin::CallMethodDynGlobal<CPhoneInfo *, int, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *>(gaddrof(CPhoneInfo::SetPhoneMessage_JustOnce), this, index, text_1, text_2, text_3, text_4, text_5, text_6);

	// CPhoneInfo::Shutdown
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Shutdown), this);

	// CPhoneInfo::Update
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(gaddrof(CPhoneInfo::Update), this);

	// PhonePutDownCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, CPed *>(gaddrof(PhonePutDownCB), association, ped);

	// PhonePickUpCB
	// plugin::CallDynGlobal<CAnimBlendAssociation *, CPhone *>(gaddrof(PhonePickUpCB), association, phone);

plugin_vc\game_vc\CPickups.cpp:

	// CPickup::GiveUsAPickUpObject
	// plugin::CallMethodAndReturn<int, 0x43D3B0, CPickup *, CObject**, CObject**, int, int>(this, arg0, arg1, arg2, arg3);
	0AA8: call_method_return 0x43D3B0 struct [CPickup] num_params 4 pop 0 [arg0] [arg1] [arg2] [arg3] func_ret [int]

	// CPickup::Update
	// plugin::CallMethod<0x440030, CPickup *, CPlayerPed*, CVehicle*, int>(this, arg0, vehicle, arg2);
	0AA6: call_method 0x440030 struct [CPickup] num_params 3 pop 0 [arg0] [vehicle] [arg2]

	// CPickup::CPickup
	// plugin::CallMethod<0x441F30, CPickup *>(this);
	0AA6: call_method 0x441F30 struct [CPickup] num_params 0 pop 0

	// CPickups::CreateSomeMoney
	// plugin::Call<0x43E180, CVector, int>(posn, arg1);
	0AA5: call_function 0x43E180 num_params 2 pop 2 [posn] [arg1]

	// CPickups::DoCollectableEffects
	// plugin::Call<0x43ED40, CEntity*>(entity);
	0AA5: call_function 0x43ED40 num_params 1 pop 1 [entity]

	// CPickups::DoMineEffects
	// plugin::Call<0x43E840, CEntity*>(entity);
	0AA5: call_function 0x43E840 num_params 1 pop 1 [entity]

	// CPickups::DoMoneyEffects
	// plugin::Call<0x43EAC0, CEntity*>(entity);
	0AA5: call_function 0x43EAC0 num_params 1 pop 1 [entity]

	// CPickups::DoPickUpEffects
	// plugin::Call<0x43F050, CEntity*>(entity);
	0AA5: call_function 0x43F050 num_params 1 pop 1 [entity]

	// CPickups::GenerateNewOne
	// plugin::CallAndReturn<int, 0x4418C0, CVector, unsigned int, unsigned char, unsigned int, unsigned int, bool, char*>(posn, arg1, arg2, arg3, arg4, arg5, msg);
	0AA7: call_function_return 0x4418C0 num_params 7 pop 7 [posn] [arg1] [arg2] [arg3] [arg4] [arg5] [msg] func_ret [int]

	// CPickups::GetActualPickupIndex
	// plugin::CallAndReturn<int, 0x43D360, int>(handle);
	0AA7: call_function_return 0x43D360 num_params 1 pop 1 [handle] func_ret [int]

	// CPickups::GivePlayerGoodiesWithPickUpMI
	// plugin::CallAndReturn<bool, 0x43D910, unsigned short, int>(model, plrIndex);
	0AA7: call_function_return 0x43D910 num_params 2 pop 2 [model] [plrIndex] func_ret [bool]

	// CPickups::Init
	// plugin::Call<0x441D30>();
	0AA5: call_function 0x441D30 num_params 0 pop 0

	// CPickups::IsPickUpPickedUp
	// plugin::CallAndReturn<bool, 0x441880, int>(handle);
	0AA7: call_function_return 0x441880 num_params 1 pop 1 [handle] func_ret [bool]

	// CPickups::Load
	// plugin::Call<0x43CF40, unsigned char*, unsigned int>(arg0, arg1);
	0AA5: call_function 0x43CF40 num_params 2 pop 2 [arg0] [arg1]

	// CPickups::ModelForWeapon
	// plugin::CallAndReturn<int, 0x4418B0, eWeaponType>(weaponType);
	0AA7: call_function_return 0x4418B0 num_params 1 pop 1 [weaponType] func_ret [int]

	// CPickups::PassTime
	// plugin::Call<0x43D8C0, unsigned int>(time);
	0AA5: call_function 0x43D8C0 num_params 1 pop 1 [time]

	// CPickups::RemoveAllPickupsOfACertainWeaponGroupWithNoAmmo
	// plugin::Call<0x43D240, eWeaponType>(weaponType);
	0AA5: call_function 0x43D240 num_params 1 pop 1 [weaponType]

	// CPickups::RemovePickUp
	// plugin::Call<0x4417D0, int>(handle);
	0AA5: call_function 0x4417D0 num_params 1 pop 1 [handle]

	// CPickups::RemoveUnnecessaryPickups
	// plugin::Call<0x43E4C0, CVector const&, float>(posn, radius);
	0AA5: call_function 0x43E4C0 num_params 2 pop 2 [posn] [radius]

	// CPickups::RenderPickUpText
	// plugin::Call<0x43E5E0>();
	0AA5: call_function 0x43E5E0 num_params 0 pop 0

	// CPickups::Save
	// plugin::Call<0x43D0D0, unsigned char*, unsigned int*>(arg0, arg1);
	0AA5: call_function 0x43D0D0 num_params 2 pop 2 [arg0] [arg1]

	// CPickups::Update
	// plugin::Call<0x441BB0>();
	0AA5: call_function 0x441BB0 num_params 0 pop 0

plugin_vc\game_vc\CPlane.cpp:

	// CPlane::CPlane
	// plugin::CallMethod<0x5B2B50, CPlane *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x5B2B50 struct [CPlane] num_params 2 pop 0 [modelIndex] [createdBy]

	// CPlane::InitPlanes
	// plugin::Call<0x5B21E0>();
	0AA5: call_function 0x5B21E0 num_params 0 pop 0

	// CPlane::Load
	// plugin::CallAndReturn<bool, 0x5AFAD0>();
	0AA7: call_function_return 0x5AFAD0 num_params 0 pop 0 func_ret [bool]

	// CPlane::LoadPath
	// plugin::Call<0x5B1FF0, char const*, int&, float&, bool>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x5B1FF0 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CPlane::Save
	// plugin::CallAndReturn<bool, 0x5AFB80>();
	0AA7: call_function_return 0x5AFB80 num_params 0 pop 0 func_ret [bool]

	// CPlane::Shutdown
	// plugin::Call<0x5B2160>();
	0AA5: call_function 0x5B2160 num_params 0 pop 0

	// CPlane::TestRocketCollision
	// plugin::CallAndReturn<bool, 0x5AFC90, CVector*>(arg0);
	0AA7: call_function_return 0x5AFC90 num_params 1 pop 1 [arg0] func_ret [bool]

	// CPlane::UpdatePlanes
	// plugin::Call<0x5B19D0>();
	0AA5: call_function 0x5B19D0 num_params 0 pop 0

plugin_vc\game_vc\CPlayerPed.cpp:

	// CPlayerPed::AnnoyPlayerPed
	// plugin::CallMethod<0x531CF0, CPlayerPed *, bool>(this, arg0);
	0AA6: call_method 0x531CF0 struct [CPlayerPed] num_params 1 pop 0 [arg0]

	// CPlayerPed::CPlayerPed
	// plugin::CallMethod<0x5384B0, CPlayerPed *>(this);
	0AA6: call_method 0x5384B0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ClearAdrenaline
	// plugin::CallMethod<0x531CC0, CPlayerPed *>(this);
	0AA6: call_method 0x531CC0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ClearWeaponTarget
	// plugin::CallMethod<0x533B30, CPlayerPed *>(this);
	0AA6: call_method 0x533B30 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::DeactivatePlayerPed
	// plugin::Call<0x5383C0, int>(playerId);
	0AA5: call_function 0x5383C0 num_params 1 pop 1 [playerId]

	// CPlayerPed::DoStuffToGoOnFire
	// plugin::CallMethod<0x531D20, CPlayerPed *>(this);
	0AA6: call_method 0x531D20 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::DoWeaponSmoothSpray
	// plugin::CallMethodAndReturn<float, 0x536410, CPlayerPed *>(this);
	0AA8: call_method_return 0x536410 struct [CPlayerPed] num_params 0 pop 0 func_ret [float]

	// CPlayerPed::DoesPlayerWantNewWeapon
	// plugin::CallMethodAndReturn<bool, 0x535240, CPlayerPed *, eWeaponType, bool>(this, weaponType, enable);
	0AA8: call_method_return 0x535240 struct [CPlayerPed] num_params 2 pop 0 [weaponType] [enable] func_ret [bool]

	// CPlayerPed::EvaluateNeighbouringTarget
	// plugin::CallMethod<0x5320B0, CPlayerPed *, CEntity*, CEntity**, float*, float, float, bool, bool, bool>(this, target, outTarget, outTargetPriority, maxDistance, arg4, arg5, arg6, arg7);
	0AA6: call_method 0x5320B0 struct [CPlayerPed] num_params 8 pop 0 [target] [outTarget] [outTargetPriority] [maxDistance] [arg4] [arg5] [arg6] [arg7]

	// CPlayerPed::EvaluateTarget
	// plugin::CallMethod<0x532360, CPlayerPed *, CEntity*, CEntity**, float*, float, float, bool, bool>(this, target, outTarget, outTargetPriority, maxDistance, arg4, arg5, arg6);
	0AA6: call_method 0x532360 struct [CPlayerPed] num_params 7 pop 0 [target] [outTarget] [outTargetPriority] [maxDistance] [arg4] [arg5] [arg6]

	// CPlayerPed::FindMeleeAttackPoint
	// plugin::CallMethodAndReturn<int, 0x531390, CPlayerPed *, CPed*, CVector&, unsigned int&>(this, arg0, arg1, arg2);
	0AA8: call_method_return 0x531390 struct [CPlayerPed] num_params 3 pop 0 [arg0] [arg1] [arg2] func_ret [int]

	// CPlayerPed::FindNewAttackPoints
	// plugin::CallMethodAndReturn<short, 0x531810, CPlayerPed *>(this);
	0AA8: call_method_return 0x531810 struct [CPlayerPed] num_params 0 pop 0 func_ret [short]

	// CPlayerPed::FindNextWeaponLockOnTarget
	// plugin::CallMethodAndReturn<bool, 0x532590, CPlayerPed *, CEntity*, bool>(this, target, arg1);
	0AA8: call_method_return 0x532590 struct [CPlayerPed] num_params 2 pop 0 [target] [arg1] func_ret [bool]

	// CPlayerPed::FindWeaponLockOnTarget
	// plugin::CallMethodAndReturn<bool, 0x533030, CPlayerPed *>(this);
	0AA8: call_method_return 0x533030 struct [CPlayerPed] num_params 0 pop 0 func_ret [bool]

	// CPlayerPed::GetPlayerInfoForThisPlayerPed
	// plugin::CallMethodAndReturn<CPlayerInfo*, 0x531D40, CPlayerPed *>(this);
	0AA8: call_method_return 0x531D40 struct [CPlayerPed] num_params 0 pop 0 func_ret [CPlayerInfo*]

	// CPlayerPed::KeepAreaAroundPlayerClear
	// plugin::CallMethod<0x531D60, CPlayerPed *>(this);
	0AA6: call_method 0x531D60 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::MakeChangesForNewWeapon
	// plugin::CallMethod<0x534450, CPlayerPed *, eWeaponType>(this, weaponType);
	0AA6: call_method 0x534450 struct [CPlayerPed] num_params 1 pop 0 [weaponType]

	// CPlayerPed::MakeChangesForNewWeapon
	// plugin::CallMethod<0x534580, CPlayerPed *, int>(this, weaponSlot);
	0AA6: call_method 0x534580 struct [CPlayerPed] num_params 1 pop 0 [weaponSlot]

	// CPlayerPed::MakeObjectTargettable
	// plugin::CallMethod<0x531FD0, CPlayerPed *, int, bool>(this, arg0, arg1);
	0AA6: call_method 0x531FD0 struct [CPlayerPed] num_params 2 pop 0 [arg0] [arg1]

	// CPlayerPed::PlayIdleAnimations
	// plugin::CallMethod<0x535D10, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x535D10 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerControl1stPersonRunAround
	// plugin::CallMethod<0x5357D0, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x5357D0 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerControlFighter
	// plugin::CallMethod<0x535BB0, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x535BB0 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerControlM16
	// plugin::CallMethod<0x5352B0, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x5352B0 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerControlSniper
	// plugin::CallMethod<0x535550, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x535550 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::PlayerControlZelda
	// plugin::CallMethod<0x535F40, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x535F40 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::ProcessAnimGroups
	// plugin::CallMethod<0x533B80, CPlayerPed *>(this);
	0AA6: call_method 0x533B80 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ProcessPlayerWeapon
	// plugin::CallMethod<0x534890, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x534890 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::ProcessWeaponSwitch
	// plugin::CallMethod<0x5345A0, CPlayerPed *, CPad*>(this, pad);
	0AA6: call_method 0x5345A0 struct [CPlayerPed] num_params 1 pop 0 [pad]

	// CPlayerPed::ReApplyMoveAnims
	// plugin::CallMethod<0x5371B0, CPlayerPed *>(this);
	0AA6: call_method 0x5371B0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::ReactivatePlayerPed
	// plugin::Call<0x5383A0, int>(playerId);
	0AA5: call_function 0x5383A0 num_params 1 pop 1 [playerId]

	// CPlayerPed::RemovePedFromMeleeList
	// plugin::CallMethod<0x5312A0, CPlayerPed *, CPed*>(this, ped);
	0AA6: call_method 0x5312A0 struct [CPlayerPed] num_params 1 pop 0 [ped]

	// CPlayerPed::SetInitialState
	// plugin::CallMethod<0x5381F0, CPlayerPed *>(this);
	0AA6: call_method 0x5381F0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetNearbyPedsToInteractWithPlayer
	// plugin::CallMethod<0x530FB0, CPlayerPed *>(this);
	0AA6: call_method 0x530FB0 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetRealMoveAnim
	// plugin::CallMethod<0x536620, CPlayerPed *>(this);
	0AA6: call_method 0x536620 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::SetWantedLevel
	// plugin::CallMethod<0x532090, CPlayerPed *, int>(this, level);
	0AA6: call_method 0x532090 struct [CPlayerPed] num_params 1 pop 0 [level]

	// CPlayerPed::SetWantedLevelNoDrop
	// plugin::CallMethod<0x532070, CPlayerPed *, int>(this, level);
	0AA6: call_method 0x532070 struct [CPlayerPed] num_params 1 pop 0 [level]

	// CPlayerPed::SetupPlayerPed
	// plugin::Call<0x5383E0, int>(playerId);
	0AA5: call_function 0x5383E0 num_params 1 pop 1 [playerId]

	// CPlayerPed::UpdateMeleeAttackers
	// plugin::CallMethod<0x531600, CPlayerPed *>(this);
	0AA6: call_method 0x531600 struct [CPlayerPed] num_params 0 pop 0

	// CPlayerPed::GetWantedLevel
	// plugin::CallMethodAndReturn<int, 0x599B20, CPlayerPed *>(this);
	0AA8: call_method_return 0x599B20 struct [CPlayerPed] num_params 0 pop 0 func_ret [int]

plugin_vc\game_vc\CPlayerSkin.cpp:

	// CPlayerSkin::BeginFrontendSkinEdit
	// plugin::Call<0x627D10>();
	0AA5: call_function 0x627D10 num_params 0 pop 0

	// CPlayerSkin::EndFrontendSkinEdit
	// plugin::Call<0x627CE0>();
	0AA5: call_function 0x627CE0 num_params 0 pop 0

	// CPlayerSkin::GetSkinTexture
	// plugin::CallAndReturn<int, 0x627E60, char const*>(arg0);
	0AA7: call_function_return 0x627E60 num_params 1 pop 1 [arg0] func_ret [int]

	// CPlayerSkin::Initialise
	// plugin::Call<0x627FB0>();
	0AA5: call_function 0x627FB0 num_params 0 pop 0

	// CPlayerSkin::RenderFrontendSkinEdit
	// plugin::Call<0x627BC0>();
	0AA5: call_function 0x627BC0 num_params 0 pop 0

	// CPlayerSkin::Shutdown
	// plugin::Call<0x627FA0>();
	0AA5: call_function 0x627FA0 num_params 0 pop 0

plugin_vc\game_vc\CPointLights.cpp:

	// CPointLights::AddLight
	// plugin::CallDynGlobal<unsigned char, CVector, CVector, float, float, float, float, unsigned char, bool>(gaddrof(CPointLights::AddLight), lightType, point, direction, range, red, green, blue, fogType, generateExtraShadows);

	// CPointLights::GenerateLightsAffectingObject
	// plugin::CallAndReturnDynGlobal<float, CVector *>(gaddrof(CPointLights::GenerateLightsAffectingObject), point);

plugin_vc\game_vc\CPools.cpp:

	// *CPools::GetObject
	// plugin::CallAndReturnDynGlobal<CObject *, int>(gaddrof(CPools::GetObject), handle);

	// CPools::GetObjectRef
	// plugin::CallAndReturnDynGlobal<int, CObject *>(gaddrof(CPools::GetObjectRef), object);

	// *CPools::GetPed
	// plugin::CallAndReturnDynGlobal<CPed *, int>(gaddrof(CPools::GetPed), handle);

	// CPools::GetPedRef
	// plugin::CallAndReturnDynGlobal<int, CPed *>(gaddrof(CPools::GetPedRef), ped);

	// *CPools::GetVehicle
	// plugin::CallAndReturnDynGlobal<CVehicle *, int>(gaddrof(CPools::GetVehicle), handle);

	// CPools::GetVehicleRef
	// plugin::CallAndReturnDynGlobal<int, CVehicle *>(gaddrof(CPools::GetVehicleRef), vehicle);

	// CPools::LoadObjectPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadObjectPool), buffer, size);

	// CPools::LoadPedPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadPedPool), buffer, size);

	// CPools::LoadVehiclePool
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CPools::LoadVehiclePool), buffer, size);

	// CPools::MakeSureSlotInObjectPoolIsEmpty
	// plugin::CallDynGlobal<int>(gaddrof(CPools::MakeSureSlotInObjectPoolIsEmpty), slot);

	// CPools::SaveObjectPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SaveObjectPool), buffer, outSize);

	// CPools::SavePedPool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SavePedPool), buffer, outSize);

	// CPools::SaveVehiclePool
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CPools::SaveVehiclePool), buffer, outSize);

plugin_vc\game_vc\CPopulation.cpp:

	// CPopulation::AddDeadPedInFrontOfCar
	// plugin::CallAndReturn<CPed*, 0x53B180, CVector const&, CVehicle*>(posn, vehicle);
	0AA7: call_function_return 0x53B180 num_params 2 pop 2 [posn] [vehicle] func_ret [CPed*]

	// CPopulation::AddPed
	// plugin::CallAndReturn<CPed*, 0x53B600, ePedType, unsigned int, CVector const&, int>(pedType, modelIndex, posn, arg3);
	0AA7: call_function_return 0x53B600 num_params 4 pop 4 [pedType] [modelIndex] [posn] [arg3] func_ret [CPed*]

	// CPopulation::AddPedInCar
	// plugin::CallAndReturn<CPed*, 0x53A8A0, CVehicle*, bool>(vehicle, driver);
	0AA7: call_function_return 0x53A8A0 num_params 2 pop 2 [vehicle] [driver] func_ret [CPed*]

	// CPopulation::AddToPopulation
	// plugin::Call<0x53BA80, float, float, float, float>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x53BA80 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CPopulation::CanJeerAtStripper
	// plugin::CallAndReturn<bool, 0x53A670, int>(modelIndex);
	0AA7: call_function_return 0x53A670 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::CanSolicitPlayerInCar
	// plugin::CallAndReturn<bool, 0x53A6A0, int>(modelIndex);
	0AA7: call_function_return 0x53A6A0 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::CanSolicitPlayerOnFoot
	// plugin::CallAndReturn<bool, 0x53A6C0, int>(modelIndex);
	0AA7: call_function_return 0x53A6C0 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::ChooseCivilianCoupleOccupations
	// plugin::Call<0x53AE90, int, int&, int&>(arg0, arg1, arg2);
	0AA5: call_function 0x53AE90 num_params 3 pop 3 [arg0] [arg1] [arg2]

	// CPopulation::ChooseCivilianOccupation
	// plugin::CallAndReturn<int, 0x53B070, int>(arg0);
	0AA7: call_function_return 0x53B070 num_params 1 pop 1 [arg0] func_ret [int]

	// CPopulation::ChooseNextCivilianOccupation
	// plugin::CallAndReturn<int, 0x53AFD0, int>(arg0);
	0AA7: call_function_return 0x53AFD0 num_params 1 pop 1 [arg0] func_ret [int]

	// CPopulation::ConvertAllObjectsToDummyObjects
	// plugin::Call<0x53D430>();
	0AA5: call_function 0x53D430 num_params 0 pop 0

	// CPopulation::ConvertToDummyObject
	// plugin::Call<0x53D290, CObject*>(object);
	0AA5: call_function 0x53D290 num_params 1 pop 1 [object]

	// CPopulation::ConvertToRealObject
	// plugin::Call<0x53D340, CDummyObject*>(dummyObject);
	0AA5: call_function 0x53D340 num_params 1 pop 1 [dummyObject]

	// CPopulation::GeneratePedsAtStartOfGame
	// plugin::Call<0x53E3E0>();
	0AA5: call_function 0x53E3E0 num_params 0 pop 0

	// CPopulation::Initialise
	// plugin::Call<0x53EAF0>();
	0AA5: call_function 0x53EAF0 num_params 0 pop 0

	// CPopulation::IsFemale
	// plugin::CallAndReturn<bool, 0x53AD50, int>(modelIndex);
	0AA7: call_function_return 0x53AD50 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::IsMale
	// plugin::CallAndReturn<bool, 0x53ADF0, int>(modelIndex);
	0AA7: call_function_return 0x53ADF0 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::IsSkateable
	// plugin::CallAndReturn<bool, 0x53ACA0, CVector const&>(point);
	0AA7: call_function_return 0x53ACA0 num_params 1 pop 1 [point] func_ret [bool]

	// CPopulation::IsSunbather
	// plugin::CallAndReturn<bool, 0x53A6F0, int>(modelIndex);
	0AA7: call_function_return 0x53A6F0 num_params 1 pop 1 [modelIndex] func_ret [bool]

	// CPopulation::LoadPedGroups
	// plugin::Call<0x53E9C0>();
	0AA5: call_function 0x53E9C0 num_params 0 pop 0

	// CPopulation::ManagePopulation
	// plugin::Call<0x53D690>();
	0AA5: call_function 0x53D690 num_params 0 pop 0

	// CPopulation::PlaceCouple
	// plugin::Call<0x5388F0, ePedType, int, ePedType, int, CVector>(pedType1, modelIndex1, pedType2, modelIndex2, posn);
	0AA5: call_function 0x5388F0 num_params 5 pop 5 [pedType1] [modelIndex1] [pedType2] [modelIndex2] [posn]

	// CPopulation::PlaceGangMembersInCircle
	// plugin::Call<0x5397F0, ePedType, int, CVector const&>(pedType, modelIndex, posn);
	0AA5: call_function 0x5397F0 num_params 3 pop 3 [pedType] [modelIndex] [posn]

	// CPopulation::PlaceGangMembersInFormation
	// plugin::Call<0x539FC0, ePedType, int, CVector const&>(pedType, modelIndex, posn);
	0AA5: call_function 0x539FC0 num_params 3 pop 3 [pedType] [modelIndex] [posn]

	// CPopulation::PlaceMallPedsAsStationaryGroup
	// plugin::Call<0x538E90, CVector const&, int>(posn, modelIndex);
	0AA5: call_function 0x538E90 num_params 2 pop 2 [posn] [modelIndex]

	// CPopulation::RemovePed
	// plugin::Call<0x53B160, CPed*>(ped);
	0AA5: call_function 0x53B160 num_params 1 pop 1 [ped]

	// CPopulation::RemovePedsIfThePoolGetsFull
	// plugin::Call<0x53D560>();
	0AA5: call_function 0x53D560 num_params 0 pop 0

	// CPopulation::TestSafeForRealObject
	// plugin::CallAndReturn<bool, 0x53CF80, CDummyObject*>(dummyObject);
	0AA7: call_function_return 0x53CF80 num_params 1 pop 1 [dummyObject] func_ret [bool]

	// CPopulation::Update
	// plugin::Call<0x53E5F0, bool>(generatePeds);
	0AA5: call_function 0x53E5F0 num_params 1 pop 1 [generatePeds]

	// CPopulation::UpdatePedCount
	// plugin::Call<0x53A720, ePedType, unsigned char>(pedType, updateState);
	0AA5: call_function 0x53A720 num_params 2 pop 2 [pedType] [updateState]

plugin_vc\game_vc\CProjectile.cpp:

	// CProjectile::CProjectile
	// plugin::CallMethod<0x4E8D30, CProjectile *, int>(this, arg0);
	0AA6: call_method 0x4E8D30 struct [CProjectile] num_params 1 pop 0 [arg0]

plugin_vc\game_vc\CProjectileInfo.cpp:

	// CProjectileInfo::Shutdown
	// plugin::Call<0x5C7C10>();
	0AA5: call_function 0x5C7C10 num_params 0 pop 0

	// CProjectileInfo::Update
	// plugin::Call<0x5C6A20>();
	0AA5: call_function 0x5C6A20 num_params 0 pop 0

	// CProjectileInfo::RemoveNotAdd
	// plugin::Call<0x5C7180, CEntity*, eWeaponType, CVector>(pEntity, weapontype, posn);
	0AA5: call_function 0x5C7180 num_params 3 pop 3 [pEntity] [weapontype] [posn]

	// CProjectileInfo::RemoveIfThisIsAProjectile
	// plugin::CallAndReturn<bool, 0x5C6970, CObject*>(pObject);
	0AA7: call_function_return 0x5C6970 num_params 1 pop 1 [pObject] func_ret [bool]

	// CProjectileInfo::RemoveDetonatorProjectiles
	// plugin::Call<0x5C71D0>();
	0AA5: call_function 0x5C71D0 num_params 0 pop 0

	// CProjectileInfo::RemoveAllProjectiles
	// plugin::Call<0x5C69D0>();
	0AA5: call_function 0x5C69D0 num_params 0 pop 0

	// CProjectileInfo::Initialise
	// plugin::Call<0x5C7C30>();
	0AA5: call_function 0x5C7C30 num_params 0 pop 0

	// CProjectileInfo::GetProjectileInfo
	// plugin::CallAndReturn<CProjectileInfo*, 0x5C7BF0, int>(ProjIndex);
	0AA7: call_function_return 0x5C7BF0 num_params 1 pop 1 [ProjIndex] func_ret [CProjectileInfo*]

	// CProjectileInfo::AddProjectile
	// plugin::CallAndReturn<bool, 0x5C7250, CEntity*, eWeaponType, CVector, float>(pEntity, weapontype, posn, fPower);
	0AA7: call_function_return 0x5C7250 num_params 4 pop 4 [pEntity] [weapontype] [posn] [fPower] func_ret [bool]

plugin_vc\game_vc\CQuaternion.cpp:

	// CQuaternion::Get
	// plugin::CallMethod<0x4DFD30, CQuaternion *, RwMatrixTag*>(this, out);
	0AA6: call_method 0x4DFD30 struct [CQuaternion] num_params 1 pop 0 [out]

	// CQuaternion::Set
	// plugin::CallMethod<0x4DFE20, CQuaternion *, RwV3d*, float>(this, axis, angle);
	0AA6: call_method 0x4DFE20 struct [CQuaternion] num_params 2 pop 0 [axis] [angle]

	// CQuaternion::Slerp
	// plugin::CallMethod<0x4DFBE0, CQuaternion *, CQuaternion const&, CQuaternion const&, float, float, float>(this, from, to, halftheta, sintheta_inv, t);
	0AA6: call_method 0x4DFBE0 struct [CQuaternion] num_params 5 pop 0 [from] [to] [halftheta] [sintheta_inv] [t]

plugin_vc\game_vc\CRadar.cpp:

	// CRadar::CalculateCachedSinCos
	// plugin::Call<0x4C3D80>();
	0AA5: call_function 0x4C3D80 num_params 0 pop 0

	// CRadar::ChangeBlipBrightness
	// plugin::Call<0x4C38B0, int, int>(i, bright);
	0AA5: call_function 0x4C38B0 num_params 2 pop 2 [i] [bright]

	// CRadar::ChangeBlipColour
	// plugin::Call<0x4C3930, int, unsigned int>(i, colour);
	0AA5: call_function 0x4C3930 num_params 2 pop 2 [i] [colour]

	// CRadar::ChangeBlipDisplay
	// plugin::Call<0x4C37E0, int, eBlipDisplay>(i, display);
	0AA5: call_function 0x4C37E0 num_params 2 pop 2 [i] [display]

	// CRadar::ChangeBlipScale
	// plugin::Call<0x4C3840, int, int>(i, scale);
	0AA5: call_function 0x4C3840 num_params 2 pop 2 [i] [scale]

	// CRadar::ClearBlip
	// plugin::Call<0x4C3990, int>(i);
	0AA5: call_function 0x4C3990 num_params 1 pop 1 [i]

	// CRadar::ClearBlipForEntity
	// plugin::Call<0x4C3A70, eBlipType, int>(type, handle);
	0AA5: call_function 0x4C3A70 num_params 2 pop 2 [type] [handle]

	// CRadar::ClipRadarPoly
	// plugin::CallAndReturn<int, 0x4C2280, CVector2D*, CVector2D const*>(out, in);
	0AA7: call_function_return 0x4C2280 num_params 2 pop 2 [out] [in] func_ret [int]

	// CRadar::Draw3dMarkers
	// plugin::Call<0x4C3F20>();
	0AA5: call_function 0x4C3F20 num_params 0 pop 0

	// CRadar::DrawBlips
	// plugin::Call<0x4C4200>();
	0AA5: call_function 0x4C4200 num_params 0 pop 0

	// CRadar::DrawCoordBlip
	// plugin::Call<0x4C5680, int>(i);
	0AA5: call_function 0x4C5680 num_params 1 pop 1 [i]

	// CRadar::DrawEntityBlip
	// plugin::Call<0x4C5170, int>(i);
	0AA5: call_function 0x4C5170 num_params 1 pop 1 [i]

	// CRadar::DrawLegend
	// plugin::Call<0x4C4A10, int, int, int>(x, y, sprite);
	0AA5: call_function 0x4C4A10 num_params 3 pop 3 [x] [y] [sprite]

	// CRadar::DrawMap
	// plugin::Call<0x4C5C60 >();
	0AA5: call_function 0x4C5C60 num_params 0 pop 0

	// CRadar::DrawRadarMap
	// plugin::Call<0x4C17C0>();
	0AA5: call_function 0x4C17C0 num_params 0 pop 0

	// CRadar::DrawRadarMask
	// plugin::Call<0x4C1A20>();
	0AA5: call_function 0x4C1A20 num_params 0 pop 0

	// CRadar::DrawRadarSection
	// plugin::Call<0x4C1D60>();
	0AA5: call_function 0x4C1D60 num_params 0 pop 0

	// CRadar::DrawRadarSprite
	// plugin::Call<0x4C2D00, unsigned short, float, float, unsigned char>(sprite, x, y, alpha);
	0AA5: call_function 0x4C2D00 num_params 4 pop 4 [sprite] [x] [y] [alpha]

	// CRadar::DrawRotatingRadarSprite
	// plugin::Call<0x4C2E70, CSprite2d*, float, float, float, unsigned char>(sprite, x, y, angle, alpha);
	0AA5: call_function 0x4C2E70 num_params 5 pop 5 [sprite] [x] [y] [angle] [alpha]

	// CRadar::DrawYouAreHereSprite
	// plugin::Call<0x4C2980, float, float>(x, y);
	0AA5: call_function 0x4C2980 num_params 2 pop 2 [x] [y]

	// CRadar::GetActualBlipArrayIndex
	// plugin::CallAndReturn<int, 0x4C5D70, int>(i);
	0AA7: call_function_return 0x4C5D70 num_params 1 pop 1 [i] func_ret [int]

	// CRadar::GetRadarTraceColour
	// plugin::CallAndReturn<unsigned int, 0x4C3050, unsigned int, bool>(colour, bright);
	0AA7: call_function_return 0x4C3050 num_params 2 pop 2 [colour] [bright] func_ret [unsigned int]

	// CRadar::InitFrontEndMap
	// plugin::Call<0x4C5B30>();
	0AA5: call_function 0x4C5B30 num_params 0 pop 0

	// CRadar::Initialise
	// plugin::Call<0x4C6200>();
	0AA5: call_function 0x4C6200 num_params 0 pop 0

	// CRadar::LoadAllRadarBlips
	// plugin::Call<0x4C15D0, unsigned char*, unsigned int>(buf, size);
	0AA5: call_function 0x4C15D0 num_params 2 pop 2 [buf] [size]

	// CRadar::LoadTextures
	// plugin::Call<0x4C5DC0>();
	0AA5: call_function 0x4C5DC0 num_params 0 pop 0

	// CRadar::RemoveRadarSections
	// plugin::Call<0x4C2930>();
	0AA5: call_function 0x4C2930 num_params 0 pop 0

	// CRadar::SaveAllRadarBlips
	// plugin::Call<0x4C16B0, unsigned char*, unsigned int*>(buf, size);
	0AA5: call_function 0x4C16B0 num_params 2 pop 2 [buf] [size]

	// CRadar::SetBlipSprite
	// plugin::Call<0x4C3780, int, int>(i, icon);
	0AA5: call_function 0x4C3780 num_params 2 pop 2 [i] [icon]

	// CRadar::SetCoordBlip
	// plugin::CallAndReturn<int, 0x4C3C80, eBlipType, CVector const&, unsigned int, eBlipDisplay>(type, pos, colour, display);
	0AA7: call_function_return 0x4C3C80 num_params 4 pop 4 [type] [pos] [colour] [display] func_ret [int]

	// CRadar::SetEntityBlip
	// plugin::Call<0x4C3B40, eBlipType, int, unsigned int, eBlipDisplay>(type, handle, colour, display);
	0AA5: call_function 0x4C3B40 num_params 4 pop 4 [type] [handle] [colour] [display]

	// CRadar::SetShortRangeCoordBlip
	// plugin::CallAndReturn<int, 0x4C3C00, eBlipType, CVector const&, unsigned int, eBlipDisplay>(type, pos, color, display);
	0AA7: call_function_return 0x4C3C00 num_params 4 pop 4 [type] [pos] [color] [display] func_ret [int]

	// CRadar::ShowRadarMarker
	// plugin::Call<0x4C3100, CVector const&, unsigned int, float>(pos, colour, radius);
	0AA5: call_function 0x4C3100 num_params 3 pop 3 [pos] [colour] [radius]

	// CRadar::ShowRadarTraceWithHeight
	// plugin::Call<0x4C32F0, float, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char>(x, y, size, red, green, blue, alpha, type);
	0AA5: call_function 0x4C32F0 num_params 8 pop 8 [x] [y] [size] [red] [green] [blue] [alpha] [type]

	// CRadar::Shutdown
	// plugin::Call<0x4C6030>();
	0AA5: call_function 0x4C6030 num_params 0 pop 0

	// CRadar::StreamRadarSections
	// plugin::Call<0x4C2870, int, int>(x, y);
	0AA5: call_function 0x4C2870 num_params 2 pop 2 [x] [y]

	// CRadar::StreamRadarSections
	// plugin::Call<0x4C1960, CVector const&>(pos);
	0AA5: call_function 0x4C1960 num_params 1 pop 1 [pos]

plugin_vc\game_vc\CRegisteredMotionBlurStreak.cpp:

	// CRegisteredMotionBlurStreak::Render
	// plugin::CallMethod<0x572660, CRegisteredMotionBlurStreak *>(this);
	0AA6: call_method 0x572660 struct [CRegisteredMotionBlurStreak] num_params 0 pop 0

	// CRegisteredMotionBlurStreak::CRegisteredMotionBlurStreak
	// plugin::CallMethod<0x575150, CRegisteredMotionBlurStreak *>(this);
	0AA6: call_method 0x575150 struct [CRegisteredMotionBlurStreak] num_params 0 pop 0

plugin_vc\game_vc\CRestart.cpp:

	// CRestart::LoadAllRestartPoints
	// plugin::Call<0x4421D0, unsigned char*, unsigned int>(bufferPointer, structSize);
	0AA5: call_function 0x4421D0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CRestart::SaveAllRestartPoints
	// plugin::Call<0x4425B0, unsigned char*, unsigned int*>(bufferPointer, structSize);
	0AA5: call_function 0x4425B0 num_params 2 pop 2 [bufferPointer] [structSize]

	// CRestart::CancelOverrideRestart
	// plugin::Call<0x4429D0>();
	0AA5: call_function 0x4429D0 num_params 0 pop 0

	// CRestart::OverrideNextRestart
	// plugin::Call<0x4429E0, CVector const&, float>(point, angle);
	0AA5: call_function 0x4429E0 num_params 2 pop 2 [point] [angle]

	// CRestart::FindClosestPoliceRestartPoint
	// plugin::Call<0x442A10, CVector const&, CVector*, float*>(point, storedPoint, storedAngle);
	0AA5: call_function 0x442A10 num_params 3 pop 3 [point] [storedPoint] [storedAngle]

	// CRestart::FindClosestHospitalRestartPoint
	// plugin::Call<0x442CD0, CVector const&, CVector*, float*>(point, storedPoint, storedAngle);
	0AA5: call_function 0x442CD0 num_params 3 pop 3 [point] [storedPoint] [storedAngle]

	// CRestart::AddPoliceRestartPoint
	// plugin::Call<0x442FC0, CVector const&, float>(point, angle);
	0AA5: call_function 0x442FC0 num_params 2 pop 2 [point] [angle]

	// CRestart::AddHospitalRestartPoint
	// plugin::Call<0x443010, CVector const&, float>(point, angle);
	0AA5: call_function 0x443010 num_params 2 pop 2 [point] [angle]

	// CRestart::Initialise
	// plugin::Call<0x443060>();
	0AA5: call_function 0x443060 num_params 0 pop 0

plugin_vc\game_vc\CRouteNode.cpp:

	// CRouteNode::AddRoutePoint
	// plugin::CallDynGlobal<short, CVector>(gaddrof(CRouteNode::AddRoutePoint), route, pos);

	// CRouteNode::GetRouteStart
	// plugin::CallAndReturnDynGlobal<short, short>(gaddrof(CRouteNode::GetRouteStart), route);

	// CRouteNode::GetRouteThisPointIsOn
	// plugin::CallAndReturnDynGlobal<short, short>(gaddrof(CRouteNode::GetRouteThisPointIsOn), point);

	// CRouteNode::RemoveRoute
	// plugin::CallDynGlobal<short>(gaddrof(CRouteNode::RemoveRoute), route);

plugin_vc\game_vc\CRubbish.cpp:

	// CRubbish::SetVisibility
	// plugin::CallDynGlobal<bool>(gaddrof(CRubbish::SetVisibility), bVisibility);

	// CRubbish::StirUp
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CRubbish::StirUp), pVehicle);

plugin_vc\game_vc\CRunningScript.cpp:

	// CRunningScript::Init
	// plugin::CallMethod<0x450CF0, CRunningScript *>(this);
	0AA6: call_method 0x450CF0 struct [CRunningScript] num_params 0 pop 0

	// CRunningScript::ProcessOneCommand
	// plugin::CallMethodAndReturn<char, 0x44FBE0, CRunningScript *>(this);
	0AA8: call_method_return 0x44FBE0 struct [CRunningScript] num_params 0 pop 0 func_ret [char]

	// CRunningScript::CollectParameters
	// plugin::CallMethod<0x451010, CRunningScript *, int*, short>(this, arg0, count);
	0AA6: call_method 0x451010 struct [CRunningScript] num_params 2 pop 0 [arg0] [count]

	// CRunningScript::UpdateCompareFlag
	// plugin::CallMethod<0x463F00, CRunningScript *, unsigned char>(this, flag);
	0AA6: call_method 0x463F00 struct [CRunningScript] num_params 1 pop 0 [flag]

plugin_vc\game_vc\cSampleManager.cpp:

	// cSampleManager::IsMP3RadioChannelAvailable
	// plugin::CallAndReturn<bool, 0x5D80E0>();
	0AA7: call_function_return 0x5D80E0 num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\CSceneEdit.cpp:

	// CSceneEdit::SelectWeapon
	// plugin::CallAndReturn<bool, 0x6032E0>();
	0AA7: call_function_return 0x6032E0 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectVehicle
	// plugin::CallAndReturn<bool, 0x603520>();
	0AA7: call_function_return 0x603520 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectActor2
	// plugin::CallAndReturn<bool, 0x603700>();
	0AA7: call_function_return 0x603700 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::SelectActor
	// plugin::CallAndReturn<bool, 0x603980>();
	0AA7: call_function_return 0x603980 num_params 0 pop 0 func_ret [bool]

	// CSceneEdit::PlayBack
	// plugin::Call<0x603C10>();
	0AA5: call_function 0x603C10 num_params 0 pop 0

	// CSceneEdit::ProcessCommand
	// plugin::Call<0x604500>();
	0AA5: call_function 0x604500 num_params 0 pop 0

	// CSceneEdit::Draw
	// plugin::Call<0x605DB0>();
	0AA5: call_function 0x605DB0 num_params 0 pop 0

	// CSceneEdit::Update
	// plugin::Call<0x606270>();
	0AA5: call_function 0x606270 num_params 0 pop 0

	// CSceneEdit::ReInitialise
	// plugin::Call<0x6062F0>();
	0AA5: call_function 0x6062F0 num_params 0 pop 0

	// CSceneEdit::InitPlayBack
	// plugin::Call<0x606470>();
	0AA5: call_function 0x606470 num_params 0 pop 0

	// CSceneEdit::Initialise
	// plugin::Call<0x6065B0>();
	0AA5: call_function 0x6065B0 num_params 0 pop 0

plugin_vc\game_vc\CShadowCamera.cpp:

	// *CShadowCamera::Create
	// plugin::CallMethodAndReturnDynGlobal<RwCamera *, CShadowCamera *, int>(gaddrof(CShadowCamera::Create), this, rasterSize);
	0AA8: call_method_return 0x626E70 struct [*CShadowCamera] num_params 1 pop 0 [rasterSize] func_ret [RwCamera *]

	// CShadowCamera::Destroy
	// plugin::CallMethodDynGlobal<CShadowCamera *>(gaddrof(CShadowCamera::Destroy), this);

	// *CShadowCamera::DrawOutlineBorder
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CShadowCamera *, RwRGBA const &>(gaddrof(CShadowCamera::DrawOutlineBorder), this, color);
	0AA8: call_method_return 0x6264D0 struct [*CShadowCamera] num_params 1 pop 0 [color] func_ret [RwRaster *]

	// CShadowCamera::InvertRaster
	// plugin::CallMethodDynGlobal<CShadowCamera *>(gaddrof(CShadowCamera::InvertRaster), this);

	// *CShadowCamera::MakeGradientRaster
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CShadowCamera *>(gaddrof(CShadowCamera::MakeGradientRaster), this);
	0AA8: call_method_return 0x6269F0 struct [*CShadowCamera] num_params 0 pop 0 func_ret [RwRaster *]

	// *CShadowCamera::RasterBlur
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CShadowCamera *, RwRaster *, int>(gaddrof(CShadowCamera::RasterBlur), this, raster, numPasses);
	0AA8: call_method_return 0x626780 struct [*CShadowCamera] num_params 2 pop 0 [raster] [numPasses] func_ret [RwRaster *]

	// *CShadowCamera::RasterGradient
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CShadowCamera *, RwRaster *>(gaddrof(CShadowCamera::RasterGradient), this, raster);
	0AA8: call_method_return 0x6266A0 struct [*CShadowCamera] num_params 1 pop 0 [raster] func_ret [RwRaster *]

	// *CShadowCamera::RasterResample
	// plugin::CallMethodAndReturnDynGlobal<RwRaster *, CShadowCamera *, RwRaster *>(gaddrof(CShadowCamera::RasterResample), this, raster);
	0AA8: call_method_return 0x626900 struct [*CShadowCamera] num_params 1 pop 0 [raster] func_ret [RwRaster *]

	// *CShadowCamera::Update
	// plugin::CallMethodAndReturnDynGlobal<RwCamera *, CShadowCamera *, RpAtomic *>(gaddrof(CShadowCamera::Update), this, atomic);
	0AA8: call_method_return 0x626D00 struct [*CShadowCamera] num_params 1 pop 0 [atomic] func_ret [RwCamera *]

	// *ShadowRenderCallBack
	// plugin::CallAndReturnDynGlobal<RpAtomic *, RpAtomic *, void *>(gaddrof(ShadowRenderCallBack), atomic, data);

plugin_vc\game_vc\CShinyTexts.cpp:

	// CRegisteredShinyText::CRegisteredShinyText
	// plugin::CallMethod<0x575130, CRegisteredShinyText *>(this);
	0AA6: call_method 0x575130 struct [CRegisteredShinyText] num_params 0 pop 0

	// CShinyTexts::Render
	// plugin::Call<0x571240>();
	0AA5: call_function 0x571240 num_params 0 pop 0

plugin_vc\game_vc\CShotInfo.cpp:

	// CShotInfo::Initialise
	// plugin::Call<0x5C83B0>();
	0AA5: call_function 0x5C83B0 num_params 0 pop 0

	// CShotInfo::Shutdown
	// plugin::Call<0x5C8390>();
	0AA5: call_function 0x5C8390 num_params 0 pop 0

	// CShotInfo::AddShot
	// plugin::CallAndReturn<bool, 0x5C8110, CEntity*, eWeaponType, CVector, CVector>(creator, weaponType, origin, target);
	0AA7: call_function_return 0x5C8110 num_params 4 pop 4 [creator] [weaponType] [origin] [target] func_ret [bool]

	// CShotInfo::Update
	// plugin::Call<0x5C7E60>();
	0AA5: call_function 0x5C7E60 num_params 0 pop 0

plugin_vc\game_vc\CSimpleModelInfo.cpp:

	// CSimpleModelInfo::SetAtomic
	// plugin::CallVirtualMethod<9, CSimpleModelInfo *, int, RpAtomic*>(this, atomicIndex, atomic);

	// CSimpleModelInfo::GetAtomicFromDistance
	// plugin::CallMethodAndReturn<RpAtomic*, 0x56F690, CSimpleModelInfo *, float>(this, distance);
	0AA8: call_method_return 0x56F690 struct [CSimpleModelInfo] num_params 1 pop 0 [distance] func_ret [RpAtomic*]

	// CSimpleModelInfo::GetLargestLodDistance
	// plugin::CallMethodAndReturn<float, 0x56F660, CSimpleModelInfo *>(this);
	0AA8: call_method_return 0x56F660 struct [CSimpleModelInfo] num_params 0 pop 0 func_ret [float]

	// CSimpleModelInfo::GetLastAtomic
	// plugin::CallMethodAndReturn<RpAtomic*, 0x56F620, CSimpleModelInfo *, float>(this, distance);
	0AA8: call_method_return 0x56F620 struct [CSimpleModelInfo] num_params 1 pop 0 [distance] func_ret [RpAtomic*]

	// CSimpleModelInfo::GetLodDistance
	// plugin::CallMethodAndReturn<float, 0x56F6F0, CSimpleModelInfo *, int>(this, lodIndex);
	0AA8: call_method_return 0x56F6F0 struct [CSimpleModelInfo] num_params 1 pop 0 [lodIndex] func_ret [float]

	// CSimpleModelInfo::Init
	// plugin::CallMethod<0x56F770, CSimpleModelInfo *>(this);
	0AA6: call_method 0x56F770 struct [CSimpleModelInfo] num_params 0 pop 0

	// CSimpleModelInfo::SetLodDistances
	// plugin::CallMethod<0x56F600, CSimpleModelInfo *, float*>(this, distances);
	0AA6: call_method 0x56F600 struct [CSimpleModelInfo] num_params 1 pop 0 [distances]

	// CSimpleModelInfo::SetupBigBuilding
	// plugin::CallMethod<0x56F420, CSimpleModelInfo *, int, int>(this, minLineIndex, maxLineIndex);
	0AA6: call_method 0x56F420 struct [CSimpleModelInfo] num_params 2 pop 0 [minLineIndex] [maxLineIndex]

	// SimpleModelStore::~SimpleModelStore
	// plugin::CallMethod<0x5602A0, SimpleModelStore *>(this);
	0AA6: call_method 0x5602A0 struct [SimpleModelStore] num_params 0 pop 0

plugin_vc\game_vc\CSprite.cpp:

	// CSprite::CalcScreenCoors
	// plugin::CallAndReturn<bool, 0x5778B0, RwV3d const&, RwV3d *, float *, float *, bool>(posn, out, w, h, checkMaxVisible);
	0AA7: call_function_return 0x5778B0 num_params 5 pop 5 [posn] [out] [w] [h] [checkMaxVisible] func_ret [bool]

plugin_vc\game_vc\CStinger.cpp:

	// CStinger::CStinger
	// plugin::CallMethod<0x629B50, CStinger *>(this);
	0AA6: call_method 0x629B50 struct [CStinger] num_params 0 pop 0

	// CStinger::Deploy
	// plugin::CallMethod<0x628EF0, CStinger *, CPed*>(this, pPed);
	0AA6: call_method 0x628EF0 struct [CStinger] num_params 1 pop 0 [pPed]

	// CStinger::CheckForBurstTyres
	// plugin::CallMethod<0x628F70, CStinger *>(this);
	0AA6: call_method 0x628F70 struct [CStinger] num_params 0 pop 0

	// CStinger::Init
	// plugin::CallMethod<0x6298D0, CStinger *, CPed*>(this, pPed);
	0AA6: call_method 0x6298D0 struct [CStinger] num_params 1 pop 0 [pPed]

	// CStinger::Process
	// plugin::CallMethod<0x629380, CStinger *>(this);
	0AA6: call_method 0x629380 struct [CStinger] num_params 0 pop 0

	// CStinger::Remove
	// plugin::CallMethod<0x629880, CStinger *>(this);
	0AA6: call_method 0x629880 struct [CStinger] num_params 0 pop 0

	// CStinger::~CStinger
	// plugin::CallMethod<0x629B40, CStinger *>(this);
	0AA6: call_method 0x629B40 struct [CStinger] num_params 0 pop 0

plugin_vc\game_vc\CStreaming.cpp:

	// CStreaming::AddModelsToRequestList
	// plugin::CallDynGlobal<CVector const *, unsigned int>(gaddrof(CStreaming::AddModelsToRequestList), pos, streamingFlags);

	// CStreaming::AddToLoadedVehiclesList
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::AddToLoadedVehiclesList), modelIndex);

	// CStreaming::AreAnimsUsedByRequestedModels
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::AreAnimsUsedByRequestedModels), animFileIndex);

	// CStreaming::ConvertBufferToObject
	// plugin::CallDynGlobal<char *, int>(gaddrof(CStreaming::ConvertBufferToObject), streamingBuffer, modelIndex);

	// CStreaming::DeleteFarAwayRwObjects
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::DeleteFarAwayRwObjects), pos);

	// CStreaming::DeleteRwObjectsAfterDeath
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::DeleteRwObjectsAfterDeath), pos);

	// CStreaming::DeleteRwObjectsBehindCamera
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::DeleteRwObjectsBehindCamera), maxStreamingMemAllowed);

	// CStreaming::DeleteRwObjectsBehindCameraInSectorList
	// plugin::CallAndReturnDynGlobal<bool, CPtrList *, int>(gaddrof(CStreaming::DeleteRwObjectsBehindCameraInSectorList), ptrList, maxStreamingMemAllowed);

	// CStreaming::DeleteRwObjectsInOverlapSectorList
	// plugin::CallDynGlobal<CPtrList *, int, int>(gaddrof(CStreaming::DeleteRwObjectsInOverlapSectorList), ptrlist, sectorX, sectorY);

	// CStreaming::DeleteRwObjectsNotInFrustumInSectorList
	// plugin::CallAndReturnDynGlobal<bool, CPtrList *, int>(gaddrof(CStreaming::DeleteRwObjectsNotInFrustumInSectorList), ptrList, maxStreamingMemAllowed);

	// CStreaming::FinishLoadingLargeFile
	// plugin::CallDynGlobal<char *, int>(gaddrof(CStreaming::FinishLoadingLargeFile), streamingBuffer, modelID);

	// CStreaming::GetCdImageOffset
	// plugin::CallAndReturnDynGlobal<unsigned int, int>(gaddrof(CStreaming::GetCdImageOffset), CdPosn);

	// CStreaming::GetNextFileOnCd
	// plugin::CallAndReturnDynGlobal<int, int, bool>(gaddrof(CStreaming::GetNextFileOnCd), CdOffset, bOnlyPriorityRequests);

	// CStreaming::HasSpecialCharLoaded
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::HasSpecialCharLoaded), SpecialSlotID);

	// CStreaming::InstanceLoadedModels
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::InstanceLoadedModels), pos);

	// CStreaming::IsObjectInCdImage
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::IsObjectInCdImage), modelIndex);

	// CStreaming::IsTxdUsedByRequestedModels
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::IsTxdUsedByRequestedModels), txdIndex);

	// CStreaming::LoadAllRequestedModels
	// plugin::CallDynGlobal<bool>(gaddrof(CStreaming::LoadAllRequestedModels), bOnlyPriorityRequests);

	// CStreaming::LoadCdDirectory
	// plugin::CallDynGlobal<char const *, int>(gaddrof_o(CStreaming::LoadCdDirectory, void (*)(char const *, int)), fileName, id);

	// CStreaming::LoadScene
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::LoadScene), pos);

	// CStreaming::LoadSceneCollision
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::LoadSceneCollision), pos);

	// CStreaming::MakeSpaceFor
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::MakeSpaceFor), memoryToCleanSize);

	// CStreaming::MemoryCardLoad
	// plugin::CallDynGlobal<unsigned char *, unsigned int>(gaddrof(CStreaming::MemoryCardLoad), buffer, num);

	// CStreaming::MemoryCardSave
	// plugin::CallDynGlobal<unsigned char *, unsigned int *>(gaddrof(CStreaming::MemoryCardSave), text, num);

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::CallDynGlobal<CPtrList *, unsigned int>(gaddrof_o(CStreaming::ProcessEntitiesInSectorList, void (*)(CPtrList *, unsigned int)), a1, Streamingflags);

	// CStreaming::ProcessEntitiesInSectorList
	// plugin::CallDynGlobal<CPtrList *, float, float, float, float, float, float, unsigned int>(gaddrof_o(CStreaming::ProcessEntitiesInSectorList, void (*)(CPtrList *, float, float, float, float, float, float, unsigned int)), ptrList, X1, Y1, X2, Y2, X3, Y3, Streamingflags);

	// CStreaming::ProcessLoadingChannel
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::ProcessLoadingChannel), channelIndex);

	// CStreaming::RemoveBuildings
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveBuildings), levelID);

	// CStreaming::RemoveBuildingsNotInArea
	// plugin::CallAndReturnDynGlobal<char, int>(gaddrof(CStreaming::RemoveBuildingsNotInArea), LevelID);

	// CStreaming::RemoveIslandsNotUsed
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveIslandsNotUsed), levelID);

	// CStreaming::RemoveLeastUsedModel
	// plugin::CallAndReturnDynGlobal<bool, int>(gaddrof(CStreaming::RemoveLeastUsedModel), streamingFlags);

	// CStreaming::RemoveLoadedVehicle
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::RemoveLoadedVehicle));

	// CStreaming::RemoveLoadedZoneModel
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CStreaming::RemoveLoadedZoneModel));

	// CStreaming::RemoveModel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveModel), modelIndex);

	// CStreaming::RemoveUnusedBigBuildings
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveUnusedBigBuildings), LevelID);

	// CStreaming::RemoveUnusedBuildings
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RemoveUnusedBuildings), levelID);

	// CStreaming::RequestBigBuildings
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RequestBigBuildings), levelID);

	// CStreaming::RequestModel
	// plugin::CallDynGlobal<int, int>(gaddrof(CStreaming::RequestModel), modelIndex, Streamingflags);

	// CStreaming::RequestModelStream
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RequestModelStream), ChannelID);

	// CStreaming::RequestSpecialChar
	// plugin::CallDynGlobal<int, char const *, int>(gaddrof(CStreaming::RequestSpecialChar), SpecialSlotID, Name, streamingFlags);

	// CStreaming::RequestSpecialModel
	// plugin::CallAndReturnDynGlobal<char, int, char *, int>(gaddrof(CStreaming::RequestSpecialModel), SpecialModelID, name, StreamingFlags);

	// CStreaming::RetryLoadFile
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::RetryLoadFile), nChannel);

	// CStreaming::SetMissionDoesntRequireModel
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetMissionDoesntRequireModel), modelIndex);

	// CStreaming::SetMissionDoesntRequireSpecialChar
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetMissionDoesntRequireSpecialChar), SpecialSlotID);

	// CStreaming::SetModelIsDeletable
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetModelIsDeletable), modelIndex);

	// CStreaming::SetModelTxdIsDeletable
	// plugin::CallDynGlobal<int>(gaddrof(CStreaming::SetModelTxdIsDeletable), modelIndex);

	// CStreaming::StreamZoneModels
	// plugin::CallDynGlobal<CVector const *>(gaddrof(CStreaming::StreamZoneModels), arg1);

plugin_vc\game_vc\CText.cpp:

	// CText::Get
	// plugin::CallMethodAndReturn<wchar_t*, 0x584F30, CText*, char const*>(this, key);
	0AA8: call_method_return 0x584F30 struct [CText] num_params 1 pop 0 [key] func_ret [wchar_t*]

plugin_vc\game_vc\CTheScripts.cpp:

	// CTheScripts::ClearSpaceForMissionEntity
	// plugin::Call<0x45F180, CVector const&, CEntity*>(position, entity);
	0AA5: call_function 0x45F180 num_params 2 pop 2 [position] [entity]

	// CTheScripts::CleanUpThisObject
	// plugin::CallDynGlobal<CObject *>(gaddrof(CTheScripts::CleanUpThisObject), pObject);

	// CTheScripts::CleanUpThisPed
	// plugin::CallDynGlobal<CPed *>(gaddrof(CTheScripts::CleanUpThisPed), pPed);

	// CTheScripts::CleanUpThisVehicle
	// plugin::CallDynGlobal<CVehicle *>(gaddrof(CTheScripts::CleanUpThisVehicle), pVehicle);

	// CTheScripts::IsPlayerOnAMission
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CTheScripts::IsPlayerOnAMission));

	// CTheScripts::IsPlayerStopped
	// plugin::CallAndReturnDynGlobal<bool, CPlayerInfo *>(gaddrof(CTheScripts::IsPlayerStopped), pPlayerIfo);

	// CTheScripts::IsVehicleStopped
	// plugin::CallAndReturnDynGlobal<bool, CVehicle *>(gaddrof(CTheScripts::IsVehicleStopped), pPlayer);

	// CTheScripts::RemoveThisPed
	// plugin::CallDynGlobal<CPed *>(gaddrof(CTheScripts::RemoveThisPed), pPed);

	// *CTheScripts::StartNewScript
	// plugin::CallAndReturnDynGlobal<CRunningScript *, int>(gaddrof(CTheScripts::StartNewScript), addr);

	// *CTheScripts::StartTestScript
	// plugin::CallAndReturnDynGlobal<CRunningScript *>(gaddrof(CTheScripts::StartTestScript));

plugin_vc\game_vc\CTheZones.cpp:

	// CTheZones::CreateZone
	// plugin::Call<0x4DDB80, char*, eZoneType, float, float, float, float, float, float, eLevelName>(name, type, posX1, posY1, posZ1, posX2, posY2, posZ2, island);
	0AA5: call_function 0x4DDB80 num_params 9 pop 9 [name] [type] [posX1] [posY1] [posZ1] [posX2] [posY2] [posZ2] [island]

	// CTheZones::FindAudioZone
	// plugin::CallAndReturn<CZone*, 0x4DC370, CVector*>(point);
	0AA7: call_function_return 0x4DC370 num_params 1 pop 1 [point] func_ret [CZone*]

	// CTheZones::FindInformationZoneForPosition
	// plugin::CallAndReturn<int, 0x4DD160, CVector const*>(pPoint);
	0AA7: call_function_return 0x4DD160 num_params 1 pop 1 [pPoint] func_ret [int]

	// CTheZones::FindNextZoneByLabelAndReturnIndex
	// plugin::CallAndReturn<short, 0x4DD4A0, char*, eZoneType>(name, type);
	0AA7: call_function_return 0x4DD4A0 num_params 2 pop 2 [name] [type] func_ret [short]

	// CTheZones::FindSmallestNavigationZoneForPosition
	// plugin::CallAndReturn<CZone*, 0x4DD060, CVector const*, bool, bool>(pPoint, findDef, findNavig);
	0AA7: call_function_return 0x4DD060 num_params 3 pop 3 [pPoint] [findDef] [findNavig] func_ret [CZone*]

	// CTheZones::FindZoneByLabelAndReturnIndex
	// plugin::CallAndReturn<short, 0x4DD5F0, char*, eZoneType>(name, type);
	0AA7: call_function_return 0x4DD5F0 num_params 2 pop 2 [name] [type] func_ret [short]

	// CTheZones::GetNavigationZone
	// plugin::CallAndReturn<int, 0x4DCC20, unsigned short>(arg0);
	0AA7: call_function_return 0x4DCC20 num_params 1 pop 1 [arg0] func_ret [int]

	// CTheZones::GetZoneInfo
	// plugin::CallAndReturn<CZone*, 0x4DCEA0, CVector const*, unsigned char>(pPoint, arg1);
	0AA7: call_function_return 0x4DCEA0 num_params 2 pop 2 [pPoint] [arg1] func_ret [CZone*]

	// CTheZones::GetZoneInfoForTimeOfDay
	// plugin::CallAndReturn<short, 0x4DC500, CVector const*, CZoneInfo*>(pPoint, zoneInfo);
	0AA7: call_function_return 0x4DC500 num_params 2 pop 2 [pPoint] [zoneInfo] func_ret [short]

	// CTheZones::Init
	// plugin::Call<0x4DDFA0>();
	0AA5: call_function 0x4DDFA0 num_params 0 pop 0

	// CTheZones::InitialiseAudioZoneArray
	// plugin::Call<0x4DC430>();
	0AA5: call_function 0x4DC430 num_params 0 pop 0

	// CTheZones::InsertZoneIntoZoneHierRecursive
	// plugin::CallAndReturn<bool, 0x4DD9D0, CZone*, CZone*>(currentZona, otherZone);
	0AA7: call_function_return 0x4DD9D0 num_params 2 pop 2 [currentZona] [otherZone] func_ret [bool]

	// CTheZones::LoadAllZones
	// plugin::Call<0x4DBCB0, unsigned char*, unsigned int>(arg0, arg1);
	0AA5: call_function 0x4DBCB0 num_params 2 pop 2 [arg0] [arg1]

	// CTheZones::LoadOneZone
	// plugin::Call<0x4DBB80, CZone*, unsigned char**, unsigned int*, eZoneType>(pZone, arg1, arg2, type);
	0AA5: call_function 0x4DBB80 num_params 4 pop 4 [pZone] [arg1] [arg2] [type]

	// CTheZones::PointLiesWithinZone
	// plugin::CallAndReturn<bool, 0x4DD750, CVector const*, CZone*>(pPoint, pZone);
	0AA7: call_function_return 0x4DD750 num_params 2 pop 2 [pPoint] [pZone] func_ret [bool]

	// CTheZones::PostZoneCreation
	// plugin::CallAndReturn<char, 0x4DDA90>();
	0AA7: call_function_return 0x4DDA90 num_params 0 pop 0 func_ret [char]

	// CTheZones::SaveAllZones
	// plugin::Call<0x4DC090, unsigned char*, unsigned int*>(arg0, arg1);
	0AA5: call_function 0x4DC090 num_params 2 pop 2 [arg0] [arg1]

	// CTheZones::SaveOneZone
	// plugin::Call<0x4DBF30, CZone*, unsigned char**, unsigned int*, eZoneType>(pZone, arg1, arg2, type);
	0AA5: call_function 0x4DBF30 num_params 4 pop 4 [pZone] [arg1] [arg2] [type]

	// CTheZones::SetPedGroup
	// plugin::Call<0x4DCC30, unsigned short, unsigned char, unsigned short>(arg0, arg1, arg2);
	0AA5: call_function 0x4DCC30 num_params 3 pop 3 [arg0] [arg1] [arg2]

	// CTheZones::SetZoneCarInfo
	// plugin::Call<0x4DCDF0, int, unsigned char, short, short, short const*>(arg0, arg1, arg2, arg3, arg4);
	0AA5: call_function 0x4DCDF0 num_params 5 pop 5 [arg0] [arg1] [arg2] [arg3] [arg4]

	// CTheZones::SetZoneCivilianCarInfo
	// plugin::Call<0x4DCD40, int, unsigned char, short const*, short const*>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x4DCD40 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CTheZones::SetZonePedInfo
	// plugin::Call<0x4DCC70, int, unsigned char, short, short, short, short, short, short, short, short, short, short, short>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
	0AA5: call_function 0x4DCC70 num_params 13 pop 13 [arg0] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10] [arg11] [arg12]

	// CTheZones::Update
	// plugin::Call<0x4DDDF0>();
	0AA5: call_function 0x4DDDF0 num_params 0 pop 0

	// CTheZones::ZoneIsEntirelyContainedWithinOtherZone
	// plugin::CallAndReturn<bool, 0x4DD7D0, CZone*, CZone*>(currentZona, otherZone);
	0AA7: call_function_return 0x4DD7D0 num_params 2 pop 2 [currentZona] [otherZone] func_ret [bool]

plugin_vc\game_vc\CTimeCycle.cpp:

	// CTimeCycle::StopExtraColour
	// plugin::CallDynGlobal<bool>(gaddrof(CTimeCycle::StopExtraColour), arg1);

plugin_vc\game_vc\CTimeModelInfo.cpp:

	// CTimeModelInfo::FindOtherTimeModel
	// plugin::CallMethod<0x56F330, CTimeModelInfo *>(this);
	0AA6: call_method 0x56F330 struct [CTimeModelInfo] num_params 0 pop 0

	// TimeModelStore::~TimeModelStore
	// plugin::CallMethod<0x560240, TimeModelStore *>(this);
	0AA6: call_method 0x560240 struct [TimeModelStore] num_params 0 pop 0

plugin_vc\game_vc\CTimer.cpp:

	// CTimer::GetCurrentTimeInCycles
	// plugin::CallAndReturnDynGlobal<unsigned int>(gaddrof(CTimer::GetCurrentTimeInCycles));

	// CTimer::GetCyclesPerMillisecond
	// plugin::CallAndReturnDynGlobal<int>(gaddrof(CTimer::GetCyclesPerMillisecond));

	// CTimer::GetIsSlowMotionActive
	// plugin::CallAndReturnDynGlobal<bool>(gaddrof(CTimer::GetIsSlowMotionActive));

plugin_vc\game_vc\CTrafficLights.cpp:

	// CTrafficLights::DisplayActualLight
	// plugin::CallDynGlobal<CEntity *>(gaddrof(CTrafficLights::DisplayActualLight), pEntity);

	// CTrafficLights::ShouldCarStopForLight
	// plugin::CallDynGlobal<CVehicle *, bool>(gaddrof(CTrafficLights::ShouldCarStopForLight), arg1, arg2);

plugin_vc\game_vc\CTrain.cpp:

	// CTrain::AddPassenger
	// plugin::CallMethod<0x5B2C60, CTrain *, CPed*>(this, ped);
	0AA6: call_method 0x5B2C60 struct [CTrain] num_params 1 pop 0 [ped]

	// CTrain::CTrain
	// plugin::CallMethod<0x5B2D00, CTrain *, int, unsigned char>(this, modelIndex, createdBy);
	0AA6: call_method 0x5B2D00 struct [CTrain] num_params 2 pop 0 [modelIndex] [createdBy]

	// CTrain::InitTrains
	// plugin::Call<0x5B2CA0>();
	0AA5: call_function 0x5B2CA0 num_params 0 pop 0

	// CTrain::Shutdown
	// plugin::Call<0x5B2C90>();
	0AA5: call_function 0x5B2C90 num_params 0 pop 0

	// CTrain::UpdateTrains
	// plugin::Call<0x5B2C80>();
	0AA5: call_function 0x5B2C80 num_params 0 pop 0

plugin_vc\game_vc\cTransmission.cpp:

	// cTransmission::CalculateDriveAcceleration
	// plugin::CallMethodAndReturn<float, 0x5B2E20, cTransmission *, float const&, unsigned char&, float&, float const&, bool>(this, gasPedal, currrentGear, arg2, arg3, arg4);
	0AA8: call_method_return 0x5B2E20 struct [cTransmission] num_params 5 pop 0 [gasPedal] [currrentGear] [arg2] [arg3] [arg4] func_ret [float]

	// cTransmission::CalculateGearForSimpleCar
	// plugin::CallMethod<0x5B2DC0, cTransmission *, float, unsigned char&>(this, velocity, currrentGear);
	0AA6: call_method 0x5B2DC0 struct [cTransmission] num_params 2 pop 0 [velocity] [currrentGear]

	// cTransmission::InitGearRatios
	// plugin::CallMethod<0x5B3120, cTransmission *>(this);
	0AA6: call_method 0x5B3120 struct [cTransmission] num_params 0 pop 0

	// cTransmission::cTransmission
	// plugin::CallMethod<0x5B3240, cTransmission *>(this);
	0AA6: call_method 0x5B3240 struct [cTransmission] num_params 0 pop 0

plugin_vc\game_vc\CTxdStore.cpp:

	// CTxdStore::AddRef
	// plugin::CallAndReturn<TxdDef*, 0x580A60, int>(index);
	0AA7: call_function_return 0x580A60 num_params 1 pop 1 [index] func_ret [TxdDef*]

	// CTxdStore::AddTxdSlot
	// plugin::CallAndReturn<int, 0x580F00, char const*>(name);
	0AA7: call_function_return 0x580F00 num_params 1 pop 1 [name] func_ret [int]

	// CTxdStore::Create
	// plugin::Call<0x580B60, int>(index);
	0AA5: call_function 0x580B60 num_params 1 pop 1 [index]

	// CTxdStore::FindTxdSlot
	// plugin::CallAndReturn<int, 0x580D70, char const*>(name);
	0AA7: call_function_return 0x580D70 num_params 1 pop 1 [name] func_ret [int]

	// CTxdStore::FinishLoadTxd
	// plugin::CallAndReturn<bool, 0x580BA0, int, RwStream*>(index, stream);
	0AA7: call_function_return 0x580BA0 num_params 2 pop 2 [index] [stream] func_ret [bool]

	// CTxdStore::GameShutdown
	// plugin::Call<0x580F40>();
	0AA5: call_function 0x580F40 num_params 0 pop 0

	// CTxdStore::GetNumRefs
	// plugin::CallAndReturn<int, 0x580990, int>(index);
	0AA7: call_function_return 0x580990 num_params 1 pop 1 [index] func_ret [int]

	// CTxdStore::GetTxdName
	// plugin::CallAndReturn<int, 0x580E50, int>(index);
	0AA7: call_function_return 0x580E50 num_params 1 pop 1 [index] func_ret [int]

	// CTxdStore::LoadTxd
	// plugin::CallAndReturn<bool, 0x580C60, int, RwStream*>(index, stream);
	0AA7: call_function_return 0x580C60 num_params 2 pop 2 [index] [stream] func_ret [bool]

	// CTxdStore::LoadTxd
	// plugin::CallAndReturn<bool, 0x580CD0, int, char const*>(index, filename);
	0AA7: call_function_return 0x580CD0 num_params 2 pop 2 [index] [filename] func_ret [bool]

	// CTxdStore::PopCurrentTxd
	// plugin::Call<0x580AA0>();
	0AA5: call_function 0x580AA0 num_params 0 pop 0

	// CTxdStore::PushCurrentTxd
	// plugin::Call<0x580AC0>();
	0AA5: call_function 0x580AC0 num_params 0 pop 0

	// CTxdStore::RemoveRef
	// plugin::Call<0x580A10, int>(index);
	0AA5: call_function 0x580A10 num_params 1 pop 1 [index]

	// CTxdStore::RemoveRefWithoutDelete
	// plugin::CallAndReturn<TxdDef*, 0x5809D0, int>(index);
	0AA7: call_function_return 0x5809D0 num_params 1 pop 1 [index] func_ret [TxdDef*]

	// CTxdStore::RemoveTxd
	// plugin::Call<0x580B10, int>(index);
	0AA5: call_function 0x580B10 num_params 1 pop 1 [index]

	// CTxdStore::RemoveTxdSlot
	// plugin::Call<0x580E90, int>(index);
	0AA5: call_function 0x580E90 num_params 1 pop 1 [index]

	// CTxdStore::SetCurrentTxd
	// plugin::Call<0x580AD0, int>(index);
	0AA5: call_function 0x580AD0 num_params 1 pop 1 [index]

	// CTxdStore::Shutdown
	// plugin::Call<0x580FF0>();
	0AA5: call_function 0x580FF0 num_params 0 pop 0

	// CTxdStore::StartLoadTxd
	// plugin::CallAndReturn<bool, 0x580BF0, int, RwStream*>(index, stream);
	0AA7: call_function_return 0x580BF0 num_params 2 pop 2 [index] [stream] func_ret [bool]

	// CTxdStore::Initialise
	// plugin::Call<0x581010>();
	0AA5: call_function 0x581010 num_params 0 pop 0

plugin_vc\game_vc\CUserDisplay.cpp:

	// CUserDisplay::Init
	// plugin::Call<0x4D1490>();
	0AA5: call_function 0x4D1490 num_params 0 pop 0

	// CUserDisplay::Process
	// plugin::Call<0x4D1400>();
	0AA5: call_function 0x4D1400 num_params 0 pop 0

plugin_vc\game_vc\CVehicle.cpp:

	// CVehicle::ProcessControlInputs
	// plugin::CallVirtualMethod<18, CVehicle *, unsigned char>(this, playerNum);

	// CVehicle::GetComponentWorldPosition
	// plugin::CallVirtualMethod<19, CVehicle *, int, CVector&>(this, componentId, posnOut);

	// CVehicle::IsComponentPresent
	// plugin::CallVirtualMethodAndReturn<bool, 20, CVehicle *, int>(this, componentId);

	// CVehicle::SetComponentRotation
	// plugin::CallVirtualMethod<21, CVehicle *, int, CVector>(this, componentId, arg1);

	// CVehicle::OpenDoor
	// plugin::CallVirtualMethod<22, CVehicle *, int, eDoors, float>(this, componentId, door, doorOpenRatio);

	// CVehicle::ProcessOpenDoor
	// plugin::CallVirtualMethod<23, CVehicle *, unsigned int, unsigned int, float>(this, arg0, arg1, arg2);

	// CVehicle::IsDoorReady
	// plugin::CallVirtualMethodAndReturn<bool, 24, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorFullyOpen
	// plugin::CallVirtualMethodAndReturn<bool, 25, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorClosed
	// plugin::CallVirtualMethodAndReturn<bool, 26, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorMissing
	// plugin::CallVirtualMethodAndReturn<bool, 27, CVehicle *, eDoors>(this, door);

	// CVehicle::IsDoorReady
	// plugin::CallVirtualMethodAndReturn<bool, 28, CVehicle *, unsigned int>(this, door);

	// CVehicle::IsDoorMissing
	// plugin::CallVirtualMethodAndReturn<bool, 29, CVehicle *, unsigned int>(this, door);

	// CVehicle::IsOpenTopCar
	// plugin::CallVirtualMethodAndReturn<bool, 30, CVehicle *>(this);

	// CVehicle::RemoveRefsToVehicle
	// plugin::CallVirtualMethod<31, CVehicle *, CEntity*>(this, entity);

	// CVehicle::BlowUpCar
	// plugin::CallVirtualMethod<32, CVehicle *, CEntity*>(this, damager);

	// CVehicle::SetUpWheelColModel
	// plugin::CallVirtualMethodAndReturn<bool, 33, CVehicle *, CColModel*>(this, wheelCol);

	// CVehicle::BurstTyre
	// plugin::CallVirtualMethodAndReturn<bool, 34, CVehicle *, unsigned char, bool>(this, tyreComponentId, bPhysicalEffect);

	// CVehicle::IsRoomForPedToLeaveCar
	// plugin::CallVirtualMethodAndReturn<bool, 35, CVehicle *, unsigned int, CVector*>(this, arg0, arg1);

	// CVehicle::IsClearToDriveAway
	// plugin::CallVirtualMethodAndReturn<bool, 36, CVehicle *>(this);

	// CVehicle::GetHeightAboveRoad
	// plugin::CallVirtualMethodAndReturn<float, 37, CVehicle *>(this);

	// CVehicle::PlayCarHorn
	// plugin::CallVirtualMethod<38, CVehicle *>(this);

	// CVehicle::ActivateBomb
	// plugin::CallMethod<0x5B79E0, CVehicle *>(this);
	0AA6: call_method 0x5B79E0 struct [CVehicle] num_params 0 pop 0

	// CVehicle::ActivateBombWhenEntered
	// plugin::CallMethod<0x5B7950, CVehicle *>(this);
	0AA6: call_method 0x5B7950 struct [CVehicle] num_params 0 pop 0

	// CVehicle::AddPassenger
	// plugin::CallMethodAndReturn<bool, 0x5B8E60, CVehicle *, CPed*>(this, passenger);
	0AA8: call_method_return 0x5B8E60 struct [CVehicle] num_params 1 pop 0 [passenger] func_ret [bool]

	// CVehicle::AddPassenger
	// plugin::CallMethodAndReturn<bool, 0x5B8D50, CVehicle *, CPed*, unsigned char>(this, passenger, seatNumber);
	0AA8: call_method_return 0x5B8D50 struct [CVehicle] num_params 2 pop 0 [passenger] [seatNumber] func_ret [bool]

	// CVehicle::BladeColSectorList
	// plugin::CallMethod<0x5B4610, CVehicle *, CPtrList&, CColModel&, CMatrix&, short, float>(this, ptrList, colModel, matrix, arg3, arg4);
	0AA6: call_method 0x5B4610 struct [CVehicle] num_params 5 pop 0 [ptrList] [colModel] [matrix] [arg3] [arg4]

	// CVehicle::CanBeDeleted
	// plugin::CallMethodAndReturn<bool, 0x5BA960, CVehicle *>(this);
	0AA8: call_method_return 0x5BA960 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanDoorsBeDamaged
	// plugin::CallMethodAndReturn<bool, 0x5B8440, CVehicle *>(this);
	0AA8: call_method_return 0x5B8440 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedEnterCar
	// plugin::CallMethodAndReturn<bool, 0x5B8370, CVehicle *>(this);
	0AA8: call_method_return 0x5B8370 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedExitCar
	// plugin::CallMethodAndReturn<bool, 0x5B8180, CVehicle *, bool>(this, arg0);
	0AA8: call_method_return 0x5B8180 struct [CVehicle] num_params 1 pop 0 [arg0] func_ret [bool]

	// CVehicle::CanPedJumpOffBike
	// plugin::CallMethodAndReturn<bool, 0x5B8130, CVehicle *>(this);
	0AA8: call_method_return 0x5B8130 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedJumpOutCar
	// plugin::CallMethodAndReturn<bool, 0x5B80C0, CVehicle *>(this);
	0AA8: call_method_return 0x5B80C0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::CanPedOpenLocks
	// plugin::CallMethodAndReturn<bool, 0x5B8460, CVehicle *, CPed*>(this, ped);
	0AA8: call_method_return 0x5B8460 struct [CVehicle] num_params 1 pop 0 [ped] func_ret [bool]

	// CVehicle::CarHasRoof
	// plugin::CallMethodAndReturn<bool, 0x5B7910, CVehicle *>(this);
	0AA8: call_method_return 0x5B7910 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::ChangeLawEnforcerState
	// plugin::CallMethod<0x5B7D90, CVehicle *, unsigned char>(this, state);
	0AA6: call_method 0x5B7D90 struct [CVehicle] num_params 1 pop 0 [state]

	// CVehicle::DoBladeCollision
	// plugin::CallMethod<0x5B5030, CVehicle *, CVector, CMatrix&, short, float, float>(this, arg0, matrix, arg2, arg3, arg4);
	0AA6: call_method 0x5B5030 struct [CVehicle] num_params 5 pop 0 [arg0] [matrix] [arg2] [arg3] [arg4]

	// CVehicle::DoFixedMachineGuns
	// plugin::CallMethod<0x5C9170, CVehicle *>(this);
	0AA6: call_method 0x5C9170 struct [CVehicle] num_params 0 pop 0

	// CVehicle::DoSunGlare
	// plugin::CallMethod<0x5B3CD0, CVehicle *>(this);
	0AA6: call_method 0x5B3CD0 struct [CVehicle] num_params 0 pop 0

	// CVehicle::ExtinguishCarFire
	// plugin::CallMethod<0x5B7A80, CVehicle *>(this);
	0AA6: call_method 0x5B7A80 struct [CVehicle] num_params 0 pop 0

	// CVehicle::FindTyreNearestPoint
	// plugin::CallMethodAndReturn<int, 0x5B96A0, CVehicle *, float, float>(this, x, y);
	0AA8: call_method_return 0x5B96A0 struct [CVehicle] num_params 2 pop 0 [x] [y] func_ret [int]

	// CVehicle::FireFixedMachineGuns
	// plugin::CallMethod<0x5C8E40, CVehicle *>(this);
	0AA6: call_method 0x5C8E40 struct [CVehicle] num_params 0 pop 0

	// CVehicle::FlyingControl
	// plugin::CallMethod<0x5B54C0, CVehicle *, eFlightModel>(this, flightModel);
	0AA6: call_method 0x5B54C0 struct [CVehicle] num_params 1 pop 0 [flightModel]

	// CVehicle::GetVehicleAppearance
	// plugin::CallMethodAndReturn<int, 0x5BAA80, CVehicle *>(this);
	0AA8: call_method_return 0x5BAA80 struct [CVehicle] num_params 0 pop 0 func_ret [int]

	// CVehicle::HeliDustGenerate
	// plugin::Call<0x5B3250, CEntity*, float, float, int>(arg0, arg1, arg2, arg3);
	0AA5: call_function 0x5B3250 num_params 4 pop 4 [arg0] [arg1] [arg2] [arg3]

	// CVehicle::InflictDamage
	// plugin::CallMethod<0x5B9020, CVehicle *, CEntity*, eWeaponType, float, CVector>(this, damager, weapon, intensity, coords);
	0AA6: call_method 0x5B9020 struct [CVehicle] num_params 4 pop 0 [damager] [weapon] [intensity] [coords]

	// CVehicle::IsDriver
	// plugin::CallMethodAndReturn<bool, 0x5B8670, CVehicle *, CPed*>(this, ped);
	0AA8: call_method_return 0x5B8670 struct [CVehicle] num_params 1 pop 0 [ped] func_ret [bool]

	// CVehicle::IsDriver
	// plugin::CallMethodAndReturn<bool, 0x5B8640, CVehicle *, int>(this, modelIndex);
	0AA8: call_method_return 0x5B8640 struct [CVehicle] num_params 1 pop 0 [modelIndex] func_ret [bool]

	// CVehicle::IsLawEnforcementVehicle
	// plugin::CallMethodAndReturn<bool, 0x5B7D60, CVehicle *>(this);
	0AA8: call_method_return 0x5B7D60 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsOnItsSide
	// plugin::CallMethodAndReturn<bool, 0x5B84B0, CVehicle *>(this);
	0AA8: call_method_return 0x5B84B0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsPassenger
	// plugin::CallMethodAndReturn<bool, 0x5B86D0, CVehicle *, CPed*>(this, ped);
	0AA8: call_method_return 0x5B86D0 struct [CVehicle] num_params 1 pop 0 [ped] func_ret [bool]

	// CVehicle::IsPassenger
	// plugin::CallMethodAndReturn<bool, 0x5B86A0, CVehicle *, int>(this, modelIndex);
	0AA8: call_method_return 0x5B86A0 struct [CVehicle] num_params 1 pop 0 [modelIndex] func_ret [bool]

	// CVehicle::IsSphereTouchingVehicle
	// plugin::CallMethodAndReturn<bool, 0x5B7F00, CVehicle *, float, float, float, float>(this, x, y, z, radius);
	0AA8: call_method_return 0x5B7F00 struct [CVehicle] num_params 4 pop 0 [x] [y] [z] [radius] func_ret [bool]

	// CVehicle::IsUpsideDown
	// plugin::CallMethodAndReturn<bool, 0x5B84F0, CVehicle *>(this);
	0AA8: call_method_return 0x5B84F0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::IsVehicleNormal
	// plugin::CallMethodAndReturn<bool, 0x5B7DF0, CVehicle *>(this);
	0AA8: call_method_return 0x5B7DF0 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::KillPedsInVehicle
	// plugin::CallMethod<0x5B8560, CVehicle *>(this);
	0AA6: call_method 0x5B8560 struct [CVehicle] num_params 0 pop 0

	// CVehicle::MakeNonDraggedPedsLeaveVehicle
	// plugin::CallMethod<0x5B3A30, CVehicle *, CPed*, CPed*, CPlayerPed*&, CCopPed*&>(this, arg0, arg1, arg2, arg3);
	0AA6: call_method 0x5B3A30 struct [CVehicle] num_params 4 pop 0 [arg0] [arg1] [arg2] [arg3]

	// CVehicle::ProcessBikeWheel
	// plugin::CallMethod<0x5B9770, CVehicle *, CVector&, CVector&, CVector&, CVector&, int, float, float, float, float, char, float*, tWheelState*, eBikeWheelSpecial, unsigned short>(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
	0AA6: call_method 0x5B9770 struct [CVehicle] num_params 14 pop 0 [arg0] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10] [arg11] [arg12] [arg13]

	// CVehicle::ProcessCarAlarm
	// plugin::CallMethod<0x5B8040, CVehicle *>(this);
	0AA6: call_method 0x5B8040 struct [CVehicle] num_params 0 pop 0

	// CVehicle::ProcessDelayedExplosion
	// plugin::CallMethod<0x5B8F50, CVehicle *>(this);
	0AA6: call_method 0x5B8F50 struct [CVehicle] num_params 0 pop 0

	// CVehicle::ProcessWheel
	// plugin::CallMethod<0x5BA070, CVehicle *, CVector&, CVector&, CVector&, CVector&, int, float, float, float, char, float*, tWheelState*, unsigned short>(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
	0AA6: call_method 0x5BA070 struct [CVehicle] num_params 12 pop 0 [arg0] [arg1] [arg2] [arg3] [arg4] [arg5] [arg6] [arg7] [arg8] [arg9] [arg10] [arg11]

	// CVehicle::ProcessWheelRotation
	// plugin::CallMethodAndReturn<float, 0x5BA900, CVehicle *, tWheelState, CVector const&, CVector const&, float>(this, wheelState, arg1, arg2, arg3);
	0AA8: call_method_return 0x5BA900 struct [CVehicle] num_params 4 pop 0 [wheelState] [arg1] [arg2] [arg3] func_ret [float]

	// CVehicle::RemoveDriver
	// plugin::CallMethod<0x5B8920, CVehicle *, bool>(this, arg0);
	0AA6: call_method 0x5B8920 struct [CVehicle] num_params 1 pop 0 [arg0]

	// CVehicle::RemovePassenger
	// plugin::CallMethod<0x5B8CE0, CVehicle *, CPed*>(this, passenger);
	0AA6: call_method 0x5B8CE0 struct [CVehicle] num_params 1 pop 0 [passenger]

	// CVehicle::SetComponentAtomicAlpha
	// plugin::CallMethod<0x5B45D0, CVehicle *, RpAtomic*, int>(this, atomic, alpha);
	0AA6: call_method 0x5B45D0 struct [CVehicle] num_params 2 pop 0 [atomic] [alpha]

	// CVehicle::SetDriver
	// plugin::CallMethod<0x5B89F0, CVehicle *, CPed*>(this, driver);
	0AA6: call_method 0x5B89F0 struct [CVehicle] num_params 1 pop 0 [driver]

	// CVehicle::SetUpDriver
	// plugin::CallMethodAndReturn<CPed*, 0x5B8870, CVehicle *>(this);
	0AA8: call_method_return 0x5B8870 struct [CVehicle] num_params 0 pop 0 func_ret [CPed*]

	// CVehicle::SetupPassenger
	// plugin::CallMethodAndReturn<CPed*, 0x5B8700, CVehicle *, int>(this, arg0);
	0AA8: call_method_return 0x5B8700 struct [CVehicle] num_params 1 pop 0 [arg0] func_ret [CPed*]

	// CVehicle::ShufflePassengersToMakeSpace
	// plugin::CallMethodAndReturn<bool, 0x5B7B10, CVehicle *>(this);
	0AA8: call_method_return 0x5B7B10 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

	// CVehicle::UpdateClumpAlpha
	// plugin::CallMethod<0x5B4580, CVehicle *>(this);
	0AA6: call_method 0x5B4580 struct [CVehicle] num_params 0 pop 0

	// CVehicle::UpdatePassengerList
	// plugin::CallMethod<0x5B39F0, CVehicle *>(this);
	0AA6: call_method 0x5B39F0 struct [CVehicle] num_params 0 pop 0

	// CVehicle::UsesSiren
	// plugin::CallMethodAndReturn<bool, 0x5B8520, CVehicle *>(this);
	0AA8: call_method_return 0x5B8520 struct [CVehicle] num_params 0 pop 0 func_ret [bool]

plugin_vc\game_vc\CVehicleModelInfo.cpp:

	// CVehicleModelInfo::AvoidSameVehicleColour
	// plugin::CallMethod<0x579090, CVehicleModelInfo *, unsigned char*, unsigned char*>(this, prim, sec);
	0AA6: call_method 0x579090 struct [CVehicleModelInfo] num_params 2 pop 0 [prim] [sec]

	// CVehicleModelInfo::ChooseComponent
	// plugin::CallMethodAndReturn<int, 0x579670, CVehicleModelInfo *>(this);
	0AA8: call_method_return 0x579670 struct [CVehicleModelInfo] num_params 0 pop 0 func_ret [int]

	// CVehicleModelInfo::ChooseSecondComponent
	// plugin::CallMethodAndReturn<int, 0x5794F0, CVehicleModelInfo *>(this);
	0AA8: call_method_return 0x5794F0 struct [CVehicleModelInfo] num_params 0 pop 0 func_ret [int]

	// CVehicleModelInfo::ChooseVehicleColour
	// plugin::CallMethod<0x579190, CVehicleModelInfo *, unsigned char&, unsigned char&>(this, prim, sec);
	0AA6: call_method 0x579190 struct [CVehicleModelInfo] num_params 2 pop 0 [prim] [sec]

	// CVehicleModelInfo::ClearAtomicFlagCB
	// plugin::CallAndReturn<RwObject*, 0x579FD0, RwObject*, void*>(object, data);
	0AA7: call_function_return 0x579FD0 num_params 2 pop 2 [object] [data] func_ret [RwObject*]

	// CVehicleModelInfo::CollapseFramesCB
	// plugin::CallAndReturn<RwFrame*, 0x57A660, RwFrame*, void*>(frame, data);
	0AA7: call_function_return 0x57A660 num_params 2 pop 2 [frame] [data] func_ret [RwFrame*]

	// CVehicleModelInfo::DeleteVehicleColourTextures
	// plugin::Call<0x578C90>();
	0AA5: call_function 0x578C90 num_params 0 pop 0

	// CVehicleModelInfo::FindEditableMaterialList
	// plugin::CallMethodAndReturn<int, 0x579390, CVehicleModelInfo *>(this);
	0AA8: call_method_return 0x579390 struct [CVehicleModelInfo] num_params 0 pop 0 func_ret [int]

	// CVehicleModelInfo::GetEditableMaterialListCB
	// plugin::CallAndReturn<RpAtomic*, 0x579440, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x579440 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::GetEditableMaterialListCB
	// plugin::CallAndReturn<RpMaterial*, 0x579460, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x579460 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// CVehicleModelInfo::GetMatFXEffectMaterialCB
	// plugin::CallAndReturn<RpMaterial*, 0x578BA0, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x578BA0 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// CVehicleModelInfo::GetMaximumNumberOfPassengersFromNumberOfDoors
	// plugin::CallAndReturn<int, 0x578A70, int>(modelId);
	0AA7: call_function_return 0x578A70 num_params 1 pop 1 [modelId] func_ret [int]

	// CVehicleModelInfo::GetWheelPosn
	// plugin::CallMethod<0x579AD0, CVehicleModelInfo *, int, CVector&>(this, wheel, outVec);
	0AA6: call_method 0x579AD0 struct [CVehicleModelInfo] num_params 2 pop 0 [wheel] [outVec]

	// CVehicleModelInfo::HasAlphaMaterialCB
	// plugin::CallAndReturn<RpMaterial*, 0x57A600, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x57A600 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// CVehicleModelInfo::HideAllComponentsAtomicCB
	// plugin::CallAndReturn<RpAtomic*, 0x57A620, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A620 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::LoadEnvironmentMaps
	// plugin::Call<0x578C30>();
	0AA5: call_function 0x578C30 num_params 0 pop 0

	// CVehicleModelInfo::LoadVehicleColours
	// plugin::Call<0x578CC0>();
	0AA5: call_function 0x578CC0 num_params 0 pop 0

	// CVehicleModelInfo::MoveObjectsCB
	// plugin::CallAndReturn<RpAtomic*, 0x57A640, RwObject*, void*>(object, data);
	0AA7: call_function_return 0x57A640 num_params 2 pop 2 [object] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::PreprocessHierarchy
	// plugin::CallMethod<0x579B10, CVehicleModelInfo *>(this);
	0AA6: call_method 0x579B10 struct [CVehicleModelInfo] num_params 0 pop 0

	// CVehicleModelInfo::SetAtomicFlagCB
	// plugin::CallAndReturn<RwObject*, 0x579FF0, RwObject*, void*>(object, data);
	0AA7: call_function_return 0x579FF0 num_params 2 pop 2 [object] [data] func_ret [RwObject*]

	// CVehicleModelInfo::SetAtomicRendererCB
	// plugin::CallAndReturn<RpAtomic*, 0x57A4A0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A4A0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetAtomicRendererCB_BigVehicle
	// plugin::CallAndReturn<RpAtomic*, 0x57A1E0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A1E0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetAtomicRendererCB_Boat
	// plugin::CallAndReturn<RpAtomic*, 0x57A070, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A070 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetAtomicRendererCB_Heli
	// plugin::CallAndReturn<RpAtomic*, 0x57A010, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A010 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetAtomicRendererCB_RealHeli
	// plugin::CallAndReturn<RpAtomic*, 0x57A300, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x57A300 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetDefaultEnvironmentMapCB
	// plugin::CallAndReturn<RpMaterial*, 0x578B40, RpMaterial*, void*>(material, data);
	0AA7: call_function_return 0x578B40 num_params 2 pop 2 [material] [data] func_ret [RpMaterial*]

	// CVehicleModelInfo::SetEnvironmentMapCB
	// plugin::CallAndReturn<RpAtomic*, 0x578AF0, RpAtomic*, void*>(atomic, data);
	0AA7: call_function_return 0x578AF0 num_params 2 pop 2 [atomic] [data] func_ret [RpAtomic*]

	// CVehicleModelInfo::SetVehicleColour
	// plugin::CallMethod<0x579290, CVehicleModelInfo *, unsigned char, unsigned char>(this, prim, sec);
	0AA6: call_method 0x579290 struct [CVehicleModelInfo] num_params 2 pop 0 [prim] [sec]

	// CVehicleModelInfo::SetVehicleComponentFlags
	// plugin::CallMethod<0x579E80, CVehicleModelInfo *, RwFrame*, unsigned int>(this, component, flags);
	0AA6: call_method 0x579E80 struct [CVehicleModelInfo] num_params 2 pop 0 [component] [flags]

	// CVehicleModelInfo::ShutdownEnvironmentMaps
	// plugin::Call<0x578BD0>();
	0AA5: call_function 0x578BD0 num_params 0 pop 0

	// VehicleModelStore::~VehicleModelStore
	// plugin::CallMethod<0x560150, VehicleModelStore *>(this);
	0AA6: call_method 0x560150 struct [VehicleModelStore] num_params 0 pop 0

	// GetListOfComponentsNotUsedByRules
	// plugin::CallAndReturn<int, 0x5799B0, unsigned int, int, int*>(compRulesBits, numExtras, variationsList);
	0AA7: call_function_return 0x5799B0 num_params 3 pop 3 [compRulesBits] [numExtras] [variationsList] func_ret [int]

	// ChooseComponent
	// plugin::CallAndReturn<int, 0x5797C0, int, int>(rule, compRulesBits);
	0AA7: call_function_return 0x5797C0 num_params 2 pop 2 [rule] [compRulesBits] func_ret [int]

plugin_vc\game_vc\CVisibilityPlugins.cpp:

	// CVisibilityPlugins::SetAtomicRenderCallback
	// plugin::Call<0x581940>(atomic, cb);
	0AA5: call_function 0x581940 num_params 2 pop 2 [atomic] [cb]

plugin_vc\game_vc\CWanted.cpp:

	// CWanted::AddCrimeToQ
	// plugin::CallMethodAndReturn<bool, 0x4D1990, CWanted *, eCrimeType, int, CVector const&, bool, bool>(this, crimeType, arg1, arg2, arg3, arg4);
	0AA8: call_method_return 0x4D1990 struct [CWanted] num_params 5 pop 0 [crimeType] [arg1] [arg2] [arg3] [arg4] func_ret [bool]

	// CWanted::AreArmyRequired
	// plugin::CallMethodAndReturn<bool, 0x4D1E20, CWanted *>(this);
	0AA8: call_method_return 0x4D1E20 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreFbiRequired
	// plugin::CallMethodAndReturn<bool, 0x4D1E40, CWanted *>(this);
	0AA8: call_method_return 0x4D1E40 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreMiamiViceRequired
	// plugin::CallMethodAndReturn<bool, 0x4D1E80, CWanted *>(this);
	0AA8: call_method_return 0x4D1E80 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::AreSwatRequired
	// plugin::CallMethodAndReturn<bool, 0x4D1E60, CWanted *>(this);
	0AA8: call_method_return 0x4D1E60 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::CheatWantedLevel
	// plugin::CallMethod<0x4D1F80, CWanted *, int>(this, arg0);
	0AA6: call_method 0x4D1F80 struct [CWanted] num_params 1 pop 0 [arg0]

	// CWanted::ClearQdCrimes
	// plugin::CallMethod<0x4D1A50, CWanted *>(this);
	0AA6: call_method 0x4D1A50 struct [CWanted] num_params 0 pop 0

	// CWanted::Initialise
	// plugin::CallMethod<0x4D2440, CWanted *>(this);
	0AA6: call_method 0x4D2440 struct [CWanted] num_params 0 pop 0

	// CWanted::NumOfHelisRequired
	// plugin::CallMethodAndReturn<bool, 0x4D1DE0, CWanted *>(this);
	0AA8: call_method_return 0x4D1DE0 struct [CWanted] num_params 0 pop 0 func_ret [bool]

	// CWanted::RegisterCrime
	// plugin::CallMethod<0x4D20F0, CWanted *, eCrimeType, CVector const&, unsigned int, bool>(this, crimeType, arg1, arg2, arg3);
	0AA6: call_method 0x4D20F0 struct [CWanted] num_params 4 pop 0 [crimeType] [arg1] [arg2] [arg3]

	// CWanted::RegisterCrime_Immediately
	// plugin::CallMethod<0x4D20B0, CWanted *, eCrimeType, CVector const&, unsigned int, bool>(this, crimeType, arg1, arg2, arg3);
	0AA6: call_method 0x4D20B0 struct [CWanted] num_params 4 pop 0 [crimeType] [arg1] [arg2] [arg3]

	// CWanted::ReportCrimeNow
	// plugin::CallMethod<0x4D1610, CWanted *, eCrimeType, CVector const&, bool>(this, crimeType, arg1, arg2);
	0AA6: call_method 0x4D1610 struct [CWanted] num_params 3 pop 0 [crimeType] [arg1] [arg2]

	// CWanted::Reset
	// plugin::CallMethod<0x4D2420, CWanted *>(this);
	0AA6: call_method 0x4D2420 struct [CWanted] num_params 0 pop 0

	// CWanted::ResetPolicePursuit
	// plugin::CallMethod<0x4D1D20, CWanted *>(this);
	0AA6: call_method 0x4D1D20 struct [CWanted] num_params 0 pop 0

	// CWanted::SetMaximumWantedLevel
	// plugin::Call<0x4D1E90, int>(level);
	0AA5: call_function 0x4D1E90 num_params 1 pop 1 [level]

	// CWanted::SetWantedLevel
	// plugin::CallMethod<0x4D1FA0, CWanted *, int>(this, level);
	0AA6: call_method 0x4D1FA0 struct [CWanted] num_params 1 pop 0 [level]

	// CWanted::SetWantedLevelNoDrop
	// plugin::CallMethod<0x4D1F50, CWanted *, int>(this, arg0);
	0AA6: call_method 0x4D1F50 struct [CWanted] num_params 1 pop 0 [arg0]

	// CWanted::Update
	// plugin::CallMethod<0x4D2260, CWanted *>(this);
	0AA6: call_method 0x4D2260 struct [CWanted] num_params 0 pop 0

	// CWanted::UpdateWantedLevel
	// plugin::CallMethod<0x4D2110, CWanted *>(this);
	0AA6: call_method 0x4D2110 struct [CWanted] num_params 0 pop 0

	// CWanted::WorkOutPolicePresence
	// plugin::Call<0x4D1B00, CVector, float>(arg0, arg1);
	0AA5: call_function 0x4D1B00 num_params 2 pop 2 [arg0] [arg1]

plugin_vc\game_vc\CWaterCannons.cpp:

	// CWaterCannon::CWaterCannon
	// plugin::CallMethod<0x57BE40, CWaterCannon *>(this);
	0AA6: call_method 0x57BE40 struct [CWaterCannon] num_params 0 pop 0

	// CWaterCannon::Init
	// plugin::CallMethod<0x57BCD0, CWaterCannon *>(this);
	0AA6: call_method 0x57BCD0 struct [CWaterCannon] num_params 0 pop 0

	// CWaterCannon::PushPeds
	// plugin::CallMethod<0x57B2F0, CWaterCannon *>(this);
	0AA6: call_method 0x57B2F0 struct [CWaterCannon] num_params 0 pop 0

	// CWaterCannon::Render
	// plugin::CallMethod<0x57B810, CWaterCannon *>(this);
	0AA6: call_method 0x57B810 struct [CWaterCannon] num_params 0 pop 0

	// CWaterCannon::Update_OncePerFrame
	// plugin::CallMethod<0x57BB90, CWaterCannon *, short>(this, index);
	0AA6: call_method 0x57BB90 struct [CWaterCannon] num_params 1 pop 0 [index]

	// CWaterCannons::Init
	// plugin::Call<0x57B2C0>();
	0AA5: call_function 0x57B2C0 num_params 0 pop 0

	// CWaterCannons::Render
	// plugin::Call<0x57B0E0>();
	0AA5: call_function 0x57B0E0 num_params 0 pop 0

	// CWaterCannons::Update
	// plugin::Call<0x57B120>();
	0AA5: call_function 0x57B120 num_params 0 pop 0

	// CWaterCannons::UpdateOne
	// plugin::Call<0x57B160, unsigned int, CVector*, CVector*>(pCar, posn, moveSpeed);
	0AA5: call_function 0x57B160 num_params 3 pop 3 [pCar] [posn] [moveSpeed]

plugin_vc\game_vc\CWeaponEffects.cpp:

	// CWeaponEffects::CWeaponEffects
	// plugin::CallMethod<0x5D5140, CWeaponEffects *>(this);
	0AA6: call_method 0x5D5140 struct [CWeaponEffects] num_params 0 pop 0

	// CWeaponEffects::ClearCrossHair
	// plugin::Call<0x5D5050>();
	0AA5: call_function 0x5D5050 num_params 0 pop 0

	// CWeaponEffects::Init
	// plugin::Call<0x5D50B0>();
	0AA5: call_function 0x5D50B0 num_params 0 pop 0

	// CWeaponEffects::MarkTarget
	// plugin::Call<0x5D5060, CVector, unsigned char, unsigned char, unsigned char, unsigned char, float>(pos, red, green, blue, alpha, size);
	0AA5: call_function 0x5D5060 num_params 6 pop 6 [pos] [red] [green] [blue] [alpha] [size]

	// CWeaponEffects::Render
	// plugin::Call<0x5D4E90>();
	0AA5: call_function 0x5D4E90 num_params 0 pop 0

	// CWeaponEffects::Shutdown
	// plugin::Call<0x5D5090>();
	0AA5: call_function 0x5D5090 num_params 0 pop 0

plugin_vc\game_vc\CWeaponInfo.cpp:

	// CWeaponInfo::CWeaponInfo
	// plugin::CallMethod<0x5D58D0, CWeaponInfo *>(this);
	0AA6: call_method 0x5D58D0 struct [CWeaponInfo] num_params 0 pop 0

	// CWeaponInfo::~CWeaponInfo
	// plugin::CallMethod<0x5D58C0, CWeaponInfo *>(this);
	0AA6: call_method 0x5D58C0 struct [CWeaponInfo] num_params 0 pop 0

	// CWeaponInfo::FindWeaponFireType
	// plugin::CallAndReturn<eWeaponFire, 0x5D5170, char*>(name);
	0AA7: call_function_return 0x5D5170 num_params 1 pop 1 [name] func_ret [eWeaponFire]

	// CWeaponInfo::GetWeaponInfo
	// plugin::CallAndReturn<CWeaponInfo*, 0x5D5710, eWeaponType>(weaponType);
	0AA7: call_function_return 0x5D5710 num_params 1 pop 1 [weaponType] func_ret [CWeaponInfo*]

	// CWeaponInfo::Initialise
	// plugin::Call<0x5D5750>();
	0AA5: call_function 0x5D5750 num_params 0 pop 0

	// CWeaponInfo::LoadWeaponData
	// plugin::Call<0x5D5250>();
	0AA5: call_function 0x5D5250 num_params 0 pop 0

	// CWeaponInfo::Shutdown
	// plugin::Call<0x5D5730>();
	0AA5: call_function 0x5D5730 num_params 0 pop 0

plugin_vc\game_vc\CWeaponModelInfo.cpp:

	// CWeaponModelInfo::GetWeaponInfo
	// plugin::CallMethodAndReturn<int, 0x629C20, CWeaponModelInfo *>(this);
	0AA8: call_method_return 0x629C20 struct [CWeaponModelInfo] num_params 0 pop 0 func_ret [int]

	// CWeaponModelInfo::Init
	// plugin::CallMethod<0x629C70, CWeaponModelInfo *>(this);
	0AA6: call_method 0x629C70 struct [CWeaponModelInfo] num_params 0 pop 0

	// CWeaponModelInfo::SetWeaponInfo
	// plugin::CallMethodAndReturn<int, 0x629C30, CWeaponModelInfo *, int>(this, weaponType);
	0AA8: call_method_return 0x629C30 struct [CWeaponModelInfo] num_params 1 pop 0 [weaponType] func_ret [int]

	// WeaponModelStore::~WeaponModelStore
	// plugin::CallMethod<0x5601E0, WeaponModelStore *>(this);
	0AA6: call_method 0x5601E0 struct [WeaponModelStore] num_params 0 pop 0

plugin_vc\game_vc\CWeather.cpp:

	// CWeather::AddRain
	// plugin::Call<0x57C900>();
	0AA5: call_function 0x57C900 num_params 0 pop 0

	// CWeather::AddSplashesDuringHurricane
	// plugin::Call<0x57D160>();
	0AA5: call_function 0x57D160 num_params 0 pop 0

	// CWeather::AddStreamAfterRain
	// plugin::Call<0x57D340>();
	0AA5: call_function 0x57D340 num_params 0 pop 0

	// CWeather::ForceWeather
	// plugin::Call<0x57D570, short>(weather);
	0AA5: call_function 0x57D570 num_params 1 pop 1 [weather]

	// CWeather::ForceWeatherNow
	// plugin::Call<0x57D550, short>(weather);
	0AA5: call_function 0x57D550 num_params 1 pop 1 [weather]

	// CWeather::Init
	// plugin::Call<0x57E040>();
	0AA5: call_function 0x57E040 num_params 0 pop 0

	// CWeather::ReleaseWeather
	// plugin::Call<0x57D540>();
	0AA5: call_function 0x57D540 num_params 0 pop 0

	// CWeather::RenderRainStreaks
	// plugin::Call<0x57BF40>();
	0AA5: call_function 0x57BF40 num_params 0 pop 0

	// CWeather::Update
	// plugin::Call<0x57D580>();
	0AA5: call_function 0x57D580 num_params 0 pop 0

plugin_vc\game_vc\CWindModifiers.cpp:

	// CWindModifiers::FindWindModifier
	// plugin::CallAndReturnDynGlobal<bool, CVector, float *, float *>(gaddrof_o(CWindModifiers::FindWindModifier, bool (*)(CVector, float *, float *)), pos, x, y);

	// CWindModifiers::RegisterOne
	// plugin::CallDynGlobal<CVector, int>(gaddrof_o(CWindModifiers::RegisterOne, void (*)(CVector, int)), pos, type);

plugin_vc\game_vc\CWorld.cpp:

	// CWorld::Add
	// plugin::Call<0x4DB3F0, CEntity*>(entity);
	0AA5: call_function 0x4DB3F0 num_params 1 pop 1 [entity]

	// CWorld::AddParticles
	// plugin::Call<0x4D4BB0>();
	0AA5: call_function 0x4D4BB0 num_params 0 pop 0

	// CWorld::CallOffChaseForArea
	// plugin::Call<0x4D3200, float, float, float, float>(x1, y1, x2, y2);
	0AA5: call_function 0x4D3200 num_params 4 pop 4 [x1] [y1] [x2] [y2]

	// CWorld::CallOffChaseForAreaSectorListPeds
	// plugin::Call<0x4D2DF0, CPtrList&, float, float, float, float, float, float, float, float>(list, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4D2DF0 num_params 9 pop 9 [list] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::CallOffChaseForAreaSectorListVehicles
	// plugin::Call<0x4D2F50, CPtrList&, float, float, float, float, float, float, float, float>(list, x1, y1, x2, y2, arg5, arg6, arg7, arg8);
	0AA5: call_function 0x4D2F50 num_params 9 pop 9 [list] [x1] [y1] [x2] [y2] [arg5] [arg6] [arg7] [arg8]

	// CWorld::ClearCarsFromArea
	// plugin::Call<0x4D3700, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x4D3700 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::ClearExcitingStuffFromArea
	// plugin::Call<0x4D38F0, CVector const&, float, unsigned char>(point, radius, bRemoveProjectilesAndShadows);
	0AA5: call_function 0x4D38F0 num_params 3 pop 3 [point] [radius] [bRemoveProjectilesAndShadows]

	// CWorld::ClearForRestart
	// plugin::Call<0x4DB4A0>();
	0AA5: call_function 0x4DB4A0 num_params 0 pop 0

	// CWorld::ClearPedsFromArea
	// plugin::Call<0x4D35C0, float, float, float, float, float, float>(x1, y1, z1, x2, y2, z2);
	0AA5: call_function 0x4D35C0 num_params 6 pop 6 [x1] [y1] [z1] [x2] [y2] [z2]

	// CWorld::ClearScanCodes
	// plugin::Call<0x4D7460>();
	0AA5: call_function 0x4D7460 num_params 0 pop 0

	// CWorld::ExtinguishAllCarFiresInArea
	// plugin::Call<0x4D3480, CVector, float>(point, radius);
	0AA5: call_function 0x4D3480 num_params 2 pop 2 [point] [radius]

	// CWorld::FindGroundZFor3DCoord
	// plugin::CallAndReturn<float, 0x4D53A0, float, float, float, bool*>(x, y, z, outResult);
	0AA7: call_function_return 0x4D53A0 num_params 4 pop 4 [x] [y] [z] [outResult] func_ret [float]

	// CWorld::FindGroundZForCoord
	// plugin::CallAndReturn<float, 0x4D5540, float, float>(x, y);
	0AA7: call_function_return 0x4D5540 num_params 2 pop 2 [x] [y] func_ret [float]

	// CWorld::FindMissionEntitiesIntersectingCube
	// plugin::Call<0x4D5800, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, vehicles, peds, objects);
	0AA5: call_function 0x4D5800 num_params 8 pop 8 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehicles] [peds] [objects]

	// CWorld::FindMissionEntitiesIntersectingCubeSectorList
	// plugin::Call<0x4D56B0, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool>(list, cornerA, cornerB, outCount, maxCount, outEntities, vehiclesList, pedsList, objectsList);
	0AA5: call_function 0x4D56B0 num_params 9 pop 9 [list] [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [vehiclesList] [pedsList] [objectsList]

	// CWorld::FindObjectsInRange
	// plugin::Call<0x4D6B90, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4D6B90 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsInRangeSectorList
	// plugin::Call<0x4D6AD0, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4D6AD0 num_params 7 pop 7 [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingAngledCollisionBox
	// plugin::Call<0x4D5B90, CBox const&, CMatrix const&, CVector const&, float, float, float, float, short*, short, CEntity**, bool, bool, bool, bool, bool>(box, transform, point, x1, y1, x2, y2, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4D5B90 num_params 15 pop 15 [box] [transform] [point] [x1] [y1] [x2] [y2] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingAngledCollisionBoxSectorList
	// plugin::Call<0x4D5A90, CPtrList&, CBox const&, CMatrix const&, CVector const&, short*, short, CEntity**>(list, box, transform, point, outCount, maxCount, outEntities);
	0AA5: call_function 0x4D5A90 num_params 7 pop 7 [list] [box] [transform] [point] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsIntersectingCube
	// plugin::Call<0x4D5FB0, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool, bool, bool>(cornerA, cornerB, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4D5FB0 num_params 10 pop 10 [cornerA] [cornerB] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsIntersectingCubeSectorList
	// plugin::Call<0x4D5EA0, CPtrList&, CVector const&, CVector const&, short*, short, CEntity**>(list, cornerA, cornerB, outCount, maxCount, outEntities);
	0AA5: call_function 0x4D5EA0 num_params 6 pop 6 [list] [cornerA] [cornerB] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsKindaColliding
	// plugin::Call<0x4D6370, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4D6370 num_params 11 pop 11 [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsKindaCollidingSectorList
	// plugin::Call<0x4D6280, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4D6280 num_params 7 pop 7 [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindObjectsOfTypeInRange
	// plugin::Call<0x4D6770, unsigned int, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool>(modelId, point, radius, b2D, outCount, maxCount, outEntities, buildings, vehicles, peds, objects, dummies);
	0AA5: call_function 0x4D6770 num_params 12 pop 12 [modelId] [point] [radius] [b2D] [outCount] [maxCount] [outEntities] [buildings] [vehicles] [peds] [objects] [dummies]

	// CWorld::FindObjectsOfTypeInRangeSectorList
	// plugin::Call<0x4D66A0, unsigned int, CPtrList&, CVector const&, float, bool, short*, short, CEntity**>(modelId, list, point, radius, b2D, outCount, maxCount, outEntities);
	0AA5: call_function 0x4D66A0 num_params 8 pop 8 [modelId] [list] [point] [radius] [b2D] [outCount] [maxCount] [outEntities]

	// CWorld::FindRoofZFor3DCoord
	// plugin::CallAndReturn<float, 0x4D51D0, float, float, float, bool*>(x, y, z, outResult);
	0AA7: call_function_return 0x4D51D0 num_params 4 pop 4 [x] [y] [z] [outResult] func_ret [float]

	// CWorld::GetIsLineOfSightClear
	// plugin::CallAndReturn<bool, 0x4DA560, CVector const&, CVector const&, bool, bool, bool, bool, bool, bool, bool>(origin, target, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4DA560 num_params 9 pop 9 [origin] [target] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::GetIsLineOfSightSectorClear
	// plugin::CallAndReturn<bool, 0x4D6EC0, CSector&, CColLine const&, bool, bool, bool, bool, bool, bool, bool>(sector, line, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4D6EC0 num_params 9 pop 9 [sector] [line] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] func_ret [bool]

	// CWorld::Initialise
	// plugin::Call<0x4DB9A0>();
	0AA5: call_function 0x4DB9A0 num_params 0 pop 0

	// CWorld::IsWanderPathClear
	// plugin::CallAndReturn<bool, 0x4D2620, CVector const&, CVector const&, float, int>(origin, target, arg2, arg3);
	0AA7: call_function_return 0x4D2620 num_params 4 pop 4 [origin] [target] [arg2] [arg3] func_ret [bool]

	// CWorld::Process
	// plugin::Call<0x4D7500>();
	0AA5: call_function 0x4D7500 num_params 0 pop 0

	// CWorld::ProcessLineOfSight
	// plugin::CallAndReturn<bool, 0x4D92D0, CVector const&, CVector const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool>(origin, target, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck, doShootThroughCheck);
	0AA7: call_function_return 0x4D92D0 num_params 12 pop 12 [origin] [target] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] [doShootThroughCheck] func_ret [bool]

	// CWorld::ProcessLineOfSightSector
	// plugin::CallAndReturn<bool, 0x4D9060, CSector&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool>(sector, line, outColPoint, maxTouchDistance, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, doCameraIgnoreCheck, doShootThroughCheck);
	0AA7: call_function_return 0x4D9060 num_params 13 pop 13 [sector] [line] [outColPoint] [maxTouchDistance] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [doCameraIgnoreCheck] [doShootThroughCheck] func_ret [bool]

	// CWorld::ProcessLineOfSightSectorList
	// plugin::CallAndReturn<bool, 0x4D8C60, CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool>(list, line, outColPoint, maxTouchDistance, outEntity, doSeeThroughCheck, doCameraIgnoreCheck, doShootThroughCheck);
	0AA7: call_function_return 0x4D8C60 num_params 8 pop 8 [list] [line] [outColPoint] [maxTouchDistance] [outEntity] [doSeeThroughCheck] [doCameraIgnoreCheck] [doShootThroughCheck] func_ret [bool]

	// CWorld::ProcessVerticalLine
	// plugin::CallAndReturn<bool, 0x4D8B00, CVector const&, float, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(origin, distance, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x4D8B00 num_params 11 pop 11 [origin] [distance] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::ProcessVerticalLineSector
	// plugin::CallAndReturn<bool, 0x4D84D0, CSector&, CColLine const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*>(sector, line, outColPoint, outEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck, outCollPoly);
	0AA7: call_function_return 0x4D84D0 num_params 11 pop 11 [sector] [line] [outColPoint] [outEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] [outCollPoly] func_ret [bool]

	// CWorld::Remove
	// plugin::Call<0x4DB310, CEntity*>(entity);
	0AA5: call_function 0x4DB310 num_params 1 pop 1 [entity]

	// CWorld::RemoveFallenCars
	// plugin::Call<0x4D48A0>();
	0AA5: call_function 0x4D48A0 num_params 0 pop 0

	// CWorld::RemoveFallenPeds
	// plugin::Call<0x4D4A40>();
	0AA5: call_function 0x4D4A40 num_params 0 pop 0

	// CWorld::RemoveReferencesToDeletedObject
	// plugin::Call<0x4D5090, CEntity*>(entity);
	0AA5: call_function 0x4D5090 num_params 1 pop 1 [entity]

	// CWorld::RepositionCertainDynamicObjects
	// plugin::Call<0x4D4850>();
	0AA5: call_function 0x4D4850 num_params 0 pop 0

	// CWorld::RepositionOneObject
	// plugin::Call<0x4D43A0, CEntity*>(entity);
	0AA5: call_function 0x4D43A0 num_params 1 pop 1 [entity]

	// CWorld::SetAllCarsCanBeDamaged
	// plugin::Call<0x4D3550, bool>(enable);
	0AA5: call_function 0x4D3550 num_params 1 pop 1 [enable]

	// CWorld::SetCarsOnFire
	// plugin::Call<0x4D4C30, float, float, float, float, CEntity*>(x, y, z, radius, fireCreator);
	0AA5: call_function 0x4D4C30 num_params 5 pop 5 [x] [y] [z] [radius] [fireCreator]

	// CWorld::SetPedsChoking
	// plugin::Call<0x4D4D90, float, float, float, float, CEntity*>(x, y, z, radius, gasCreator);
	0AA5: call_function 0x4D4D90 num_params 5 pop 5 [x] [y] [z] [radius] [gasCreator]

	// CWorld::SetPedsOnFire
	// plugin::Call<0x4D4F30, float, float, float, float, CEntity*>(x, y, z, radius, fireCreator);
	0AA5: call_function 0x4D4F30 num_params 5 pop 5 [x] [y] [z] [radius] [fireCreator]

	// CWorld::ShutDown
	// plugin::Call<0x4DB590>();
	0AA5: call_function 0x4DB590 num_params 0 pop 0

	// CWorld::StopAllLawEnforcersInTheirTracks
	// plugin::Call<0x4D25B0>();
	0AA5: call_function 0x4D25B0 num_params 0 pop 0

	// CWorld::TestSphereAgainstSectorList
	// plugin::CallAndReturn<CEntity*, 0x4D3C40, CPtrList&, CVector, float, CEntity*, bool>(list, sphereCenter, sphereRadius, ignoreEntity, doCameraIgnoreCheck);
	0AA7: call_function_return 0x4D3C40 num_params 5 pop 5 [list] [sphereCenter] [sphereRadius] [ignoreEntity] [doCameraIgnoreCheck] func_ret [CEntity*]

	// CWorld::TestSphereAgainstWorld
	// plugin::CallAndReturn<CEntity*, 0x4D3F40, CVector, float, CEntity*, bool, bool, bool, bool, bool, bool>(sphereCenter, sphereRadius, ignoreEntity, buildings, vehicles, peds, objects, dummies, doSeeThroughCheck);
	0AA7: call_function_return 0x4D3F40 num_params 9 pop 9 [sphereCenter] [sphereRadius] [ignoreEntity] [buildings] [vehicles] [peds] [objects] [dummies] [doSeeThroughCheck] func_ret [CEntity*]

	// CWorld::TriggerExplosion
	// plugin::Call<0x4D82D0, CVector const&, float, float, CEntity*, bool>(point, radius, visibleDistance, entity, processVehicleBombTimer);
	0AA5: call_function 0x4D82D0 num_params 5 pop 5 [point] [radius] [visibleDistance] [entity] [processVehicleBombTimer]

	// CWorld::TriggerExplosionSectorList
	// plugin::Call<0x4D7B90, CPtrList&, CVector const&, float, float, CEntity*, bool>(list, point, radius, visibleDistance, entity, processVehicleBombTimer);
	0AA5: call_function 0x4D7B90 num_params 6 pop 6 [list] [point] [radius] [visibleDistance] [entity] [processVehicleBombTimer]

	// CWorld::UseDetonator
	// plugin::Call<0x4D42F0, CEntity*>(creator);
	0AA5: call_function 0x4D42F0 num_params 1 pop 1 [creator]

plugin_vc\game_vc\CZone.cpp:

	// CZone::GetTranslatedName
	// plugin::CallMethodAndReturn<wchar_t*, 0x4DE4B0, CZone*>(this);
	0AA8: call_method_return 0x4DE4B0 struct [CZone] num_params 0 pop 0 func_ret [wchar_t*]

plugin_vc\game_vc\NodeName.cpp:

	// *GetFrameNodeName
	// plugin::CallAndReturnDynGlobal<char *, RwFrame *>(gaddrof(GetFrameNodeName), frame);

	// NodeNamePluginAttach
	// plugin::CallAndReturnDynGlobal<RwBool>(gaddrof(NodeNamePluginAttach));

	// NodeNameStreamGetSize
	// plugin::CallAndReturnDynGlobal<RwInt32, void const *, RwInt32, RwInt32>(gaddrof(NodeNameStreamGetSize), object, offsetInObject, sizeInObject);

	// *NodeNameStreamRead
	// plugin::CallAndReturnDynGlobal<RwStream *, RwStream *, RwInt32, void *, RwInt32, RwInt32>(gaddrof(NodeNameStreamRead), stream, binaryLength, object, offsetInObject, sizeInObject);

	// *NodeNameStreamWrite
	// plugin::CallAndReturnDynGlobal<RwStream *, RwStream *, RwInt32, void const *, RwInt32, RwInt32>(gaddrof(NodeNameStreamWrite), stream, binaryLength, object, offsetInObject, sizeInObject);

	// *NodeNameCopy
	// plugin::CallAndReturnDynGlobal<void *, void *, void const *, RwInt32, RwInt32>(gaddrof(NodeNameCopy), dstObject, srcObject, offsetInObject, sizeInObject);

	// *NodeNameDestructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(NodeNameDestructor), object, offsetInObject, sizeInObject);

	// *NodeNameConstructor
	// plugin::CallAndReturnDynGlobal<void *, void *, RwInt32, RwInt32>(gaddrof(NodeNameConstructor), object, offsetInObject, sizeInObject);

plugin_vc\game_vc\meta\meta.cAudioScriptObject.h:

	// stack_object
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), reinterpret_cast<cAudioScriptObject *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), reinterpret_cast<cAudioScriptObject *>(objBuff));

	// *operator_new<cAudioScriptObject>
	// plugin::CallAndReturnDynGlobal<void *, unsigned int>(op_new_gaddr(cAudioScriptObject), sizeof(cAudioScriptObject));

	// *>
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), obj);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(ctor_gaddr(cAudioScriptObject), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), obj);

	// plugin::CallMethodDynGlobal<cAudioScriptObject *>
	// plugin::CallDynGlobal<void *>(op_delete_gaddr(cAudioScriptObject), obj);

	// 
	// plugin::CallMethodDynGlobal<cAudioScriptObject *>(dtor_gaddr(cAudioScriptObject), &objArray[i]);

plugin_vc\game_vc\meta\meta.CBulletTrace.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), reinterpret_cast<CBulletTrace *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), obj);

	// 
	// plugin::CallMethodDynGlobal<CBulletTrace *>(ctor_gaddr(CBulletTrace), &objArray[i]);

plugin_vc\game_vc\meta\meta.CCutsceneShadow.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(ctor_gaddr(CCutsceneShadow), reinterpret_cast<CCutsceneShadow *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(dtor_gaddr(CCutsceneShadow), reinterpret_cast<CCutsceneShadow *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(ctor_gaddr(CCutsceneShadow), obj);

	// 
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(ctor_gaddr(CCutsceneShadow), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(dtor_gaddr(CCutsceneShadow), obj);

	// 
	// plugin::CallMethodDynGlobal<CCutsceneShadow *>(dtor_gaddr(CCutsceneShadow), &objArray[i]);

plugin_vc\game_vc\meta\meta.CDirectory.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CDirectory *, int>(ctor_gaddr_o(CDirectory, void(int)), reinterpret_cast<CDirectory *>(objBuff), entriesNum);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), reinterpret_cast<CDirectory *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CDirectory *, int>(ctor_gaddr_o(CDirectory, void(int)), obj, entriesNum);

	// 
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), obj);

	// 
	// plugin::CallMethodDynGlobal<CDirectory *>(dtor_gaddr(CDirectory), &objArray[i]);

plugin_vc\game_vc\meta\meta.CPad.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPad *>(ctor_gaddr(CPad), reinterpret_cast<CPad *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPad *>(dtor_gaddr(CPad), reinterpret_cast<CPad *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPad *>(ctor_gaddr(CPad), obj);

	// 
	// plugin::CallMethodDynGlobal<CPad *>(ctor_gaddr(CPad), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPad *>(dtor_gaddr(CPad), obj);

	// 
	// plugin::CallMethodDynGlobal<CPad *>(dtor_gaddr(CPad), &objArray[i]);

plugin_vc\game_vc\meta\meta.CParticle.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), obj);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), obj);

	// 
	// plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), &objArray[i]);

plugin_vc\game_vc\meta\meta.CPedAttractor.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPedAttractor *, C2dEffect *, CMatrix const &, int, float, float, float, float, float, float, float>(ctor_gaddr_o(CPedAttractor, void(C2dEffect *, CMatrix const &, int, float, float, float, float, float, float, float)), reinterpret_cast<CPedAttractor *>(objBuff), effect, matrix, maxPeds, qDist, waitTime, approachTime, distance, headingDiff, posDisp, headDisp);

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPedAttractor *>(dtor_gaddr(CPedAttractor), reinterpret_cast<CPedAttractor *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPedAttractor *, C2dEffect *, CMatrix const &, int, float, float, float, float, float, float, float>(ctor_gaddr_o(CPedAttractor, void(C2dEffect *, CMatrix const &, int, float, float, float, float, float, float, float)), obj, effect, matrix, maxPeds, qDist, waitTime, approachTime, distance, headingDiff, posDisp, headDisp);

	// 
	// plugin::CallVirtualMethod<1, CPedAttractor *, unsigned char>(obj, 1);

	// 
	// plugin::CallVirtualMethod<1, CPedAttractor *, unsigned char>(&objArray[i], 1);

plugin_vc\game_vc\meta\meta.CPhone.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), reinterpret_cast<CPhone *>(objBuff));

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), reinterpret_cast<CPhone *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(ctor_gaddr(CPhone), &objArray[i]);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhone *>(dtor_gaddr(CPhone), &objArray[i]);

plugin_vc\game_vc\meta\meta.CPhoneInfo.h:

	// ~stack_object
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), reinterpret_cast<CPhoneInfo *>(objBuff));

	// 
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), obj);

	// 
	// plugin::CallMethodDynGlobal<CPhoneInfo *>(dtor_gaddr(CPhoneInfo), &objArray[i]);

plugin_vc\game_vc\meta\meta.CPointLight.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CPointLight *>(ctor_gaddr(CPointLight), reinterpret_cast<CPointLight *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CPointLight *>(ctor_gaddr(CPointLight), obj);

	// 
	// plugin::CallMethodDynGlobal<CPointLight *>(ctor_gaddr(CPointLight), &objArray[i]);

plugin_vc\game_vc\meta\meta.CRouteNode.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), reinterpret_cast<CRouteNode *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), obj);

	// 
	// plugin::CallMethodDynGlobal<CRouteNode *>(ctor_gaddr(CRouteNode), &objArray[i]);

plugin_vc\game_vc\meta\meta.CWindModifiers.h:

	// stack_object
	// plugin::CallMethodDynGlobal<CWindModifier *>(ctor_gaddr(CWindModifier), reinterpret_cast<CWindModifier *>(objBuff));

	// *>
	// plugin::CallMethodDynGlobal<CWindModifier *>(ctor_gaddr(CWindModifier), obj);

	// 
	// plugin::CallMethodDynGlobal<CWindModifier *>(ctor_gaddr(CWindModifier), &objArray[i]);
